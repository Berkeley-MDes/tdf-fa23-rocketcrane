
/Users/lingxiu/Documents/0-documents/2023-2024-MDes/TDF/tdf-fa23-rocketcrane/ADXL_362/target/5.5.0/p2/ADXL_362.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa9d8  085fa0a8  0000a9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005610  023fa9e0  085fa0b0  0000a9e0  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         0000007c  1007ada8  085ff6c0  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c4  1007ae24  1007ae24  0002ae24  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff73c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000878  085ff740  085ff740  0001f740  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f740  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00137019  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000141a0  00000000  00000000  00157019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00040076  00000000  00000000  0016b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ff0  00000000  00000000  001ab22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000bba0  00000000  00000000  001ae21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000249e1  00000000  00000000  001b9dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00040f85  00000000  00000000  001de7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d09d4  00000000  00000000  0021f725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008e78  00000000  00000000  002f00fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007ada8 	.word	0x1007ada8
 85fa06c:	085ff6c0 	.word	0x085ff6c0
 85fa070:	1007ae24 	.word	0x1007ae24
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007ae24 	.word	0x1007ae24
 85fa07c:	1007afe8 	.word	0x1007afe8
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fa9d8 	.word	0x023fa9d8
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fa9e0 	.word	0x023fa9e0
 85fa090:	023fa9e0 	.word	0x023fa9e0
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff0 	.word	0x023ffff0

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa9e0 <__aeabi_drsub>:
 23fa9e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fa9e4:	e002      	b.n	23fa9ec <__adddf3>
 23fa9e6:	bf00      	nop

023fa9e8 <__aeabi_dsub>:
 23fa9e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fa9ec <__adddf3>:
 23fa9ec:	b530      	push	{r4, r5, lr}
 23fa9ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fa9f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fa9f6:	ea94 0f05 	teq	r4, r5
 23fa9fa:	bf08      	it	eq
 23fa9fc:	ea90 0f02 	teqeq	r0, r2
 23faa00:	bf1f      	itttt	ne
 23faa02:	ea54 0c00 	orrsne.w	ip, r4, r0
 23faa06:	ea55 0c02 	orrsne.w	ip, r5, r2
 23faa0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23faa0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23faa12:	f000 80e2 	beq.w	23fabda <__adddf3+0x1ee>
 23faa16:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23faa1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23faa1e:	bfb8      	it	lt
 23faa20:	426d      	neglt	r5, r5
 23faa22:	dd0c      	ble.n	23faa3e <__adddf3+0x52>
 23faa24:	442c      	add	r4, r5
 23faa26:	ea80 0202 	eor.w	r2, r0, r2
 23faa2a:	ea81 0303 	eor.w	r3, r1, r3
 23faa2e:	ea82 0000 	eor.w	r0, r2, r0
 23faa32:	ea83 0101 	eor.w	r1, r3, r1
 23faa36:	ea80 0202 	eor.w	r2, r0, r2
 23faa3a:	ea81 0303 	eor.w	r3, r1, r3
 23faa3e:	2d36      	cmp	r5, #54	; 0x36
 23faa40:	bf88      	it	hi
 23faa42:	bd30      	pophi	{r4, r5, pc}
 23faa44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23faa48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23faa4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23faa50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23faa54:	d002      	beq.n	23faa5c <__adddf3+0x70>
 23faa56:	4240      	negs	r0, r0
 23faa58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23faa5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23faa60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23faa64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23faa68:	d002      	beq.n	23faa70 <__adddf3+0x84>
 23faa6a:	4252      	negs	r2, r2
 23faa6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23faa70:	ea94 0f05 	teq	r4, r5
 23faa74:	f000 80a7 	beq.w	23fabc6 <__adddf3+0x1da>
 23faa78:	f1a4 0401 	sub.w	r4, r4, #1
 23faa7c:	f1d5 0e20 	rsbs	lr, r5, #32
 23faa80:	db0d      	blt.n	23faa9e <__adddf3+0xb2>
 23faa82:	fa02 fc0e 	lsl.w	ip, r2, lr
 23faa86:	fa22 f205 	lsr.w	r2, r2, r5
 23faa8a:	1880      	adds	r0, r0, r2
 23faa8c:	f141 0100 	adc.w	r1, r1, #0
 23faa90:	fa03 f20e 	lsl.w	r2, r3, lr
 23faa94:	1880      	adds	r0, r0, r2
 23faa96:	fa43 f305 	asr.w	r3, r3, r5
 23faa9a:	4159      	adcs	r1, r3
 23faa9c:	e00e      	b.n	23faabc <__adddf3+0xd0>
 23faa9e:	f1a5 0520 	sub.w	r5, r5, #32
 23faaa2:	f10e 0e20 	add.w	lr, lr, #32
 23faaa6:	2a01      	cmp	r2, #1
 23faaa8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23faaac:	bf28      	it	cs
 23faaae:	f04c 0c02 	orrcs.w	ip, ip, #2
 23faab2:	fa43 f305 	asr.w	r3, r3, r5
 23faab6:	18c0      	adds	r0, r0, r3
 23faab8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23faabc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23faac0:	d507      	bpl.n	23faad2 <__adddf3+0xe6>
 23faac2:	f04f 0e00 	mov.w	lr, #0
 23faac6:	f1dc 0c00 	rsbs	ip, ip, #0
 23faaca:	eb7e 0000 	sbcs.w	r0, lr, r0
 23faace:	eb6e 0101 	sbc.w	r1, lr, r1
 23faad2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23faad6:	d31b      	bcc.n	23fab10 <__adddf3+0x124>
 23faad8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23faadc:	d30c      	bcc.n	23faaf8 <__adddf3+0x10c>
 23faade:	0849      	lsrs	r1, r1, #1
 23faae0:	ea5f 0030 	movs.w	r0, r0, rrx
 23faae4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23faae8:	f104 0401 	add.w	r4, r4, #1
 23faaec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23faaf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23faaf4:	f080 809a 	bcs.w	23fac2c <__adddf3+0x240>
 23faaf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23faafc:	bf08      	it	eq
 23faafe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fab02:	f150 0000 	adcs.w	r0, r0, #0
 23fab06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fab0a:	ea41 0105 	orr.w	r1, r1, r5
 23fab0e:	bd30      	pop	{r4, r5, pc}
 23fab10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fab14:	4140      	adcs	r0, r0
 23fab16:	eb41 0101 	adc.w	r1, r1, r1
 23fab1a:	3c01      	subs	r4, #1
 23fab1c:	bf28      	it	cs
 23fab1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fab22:	d2e9      	bcs.n	23faaf8 <__adddf3+0x10c>
 23fab24:	f091 0f00 	teq	r1, #0
 23fab28:	bf04      	itt	eq
 23fab2a:	4601      	moveq	r1, r0
 23fab2c:	2000      	moveq	r0, #0
 23fab2e:	fab1 f381 	clz	r3, r1
 23fab32:	bf08      	it	eq
 23fab34:	3320      	addeq	r3, #32
 23fab36:	f1a3 030b 	sub.w	r3, r3, #11
 23fab3a:	f1b3 0220 	subs.w	r2, r3, #32
 23fab3e:	da0c      	bge.n	23fab5a <__adddf3+0x16e>
 23fab40:	320c      	adds	r2, #12
 23fab42:	dd08      	ble.n	23fab56 <__adddf3+0x16a>
 23fab44:	f102 0c14 	add.w	ip, r2, #20
 23fab48:	f1c2 020c 	rsb	r2, r2, #12
 23fab4c:	fa01 f00c 	lsl.w	r0, r1, ip
 23fab50:	fa21 f102 	lsr.w	r1, r1, r2
 23fab54:	e00c      	b.n	23fab70 <__adddf3+0x184>
 23fab56:	f102 0214 	add.w	r2, r2, #20
 23fab5a:	bfd8      	it	le
 23fab5c:	f1c2 0c20 	rsble	ip, r2, #32
 23fab60:	fa01 f102 	lsl.w	r1, r1, r2
 23fab64:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fab68:	bfdc      	itt	le
 23fab6a:	ea41 010c 	orrle.w	r1, r1, ip
 23fab6e:	4090      	lslle	r0, r2
 23fab70:	1ae4      	subs	r4, r4, r3
 23fab72:	bfa2      	ittt	ge
 23fab74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fab78:	4329      	orrge	r1, r5
 23fab7a:	bd30      	popge	{r4, r5, pc}
 23fab7c:	ea6f 0404 	mvn.w	r4, r4
 23fab80:	3c1f      	subs	r4, #31
 23fab82:	da1c      	bge.n	23fabbe <__adddf3+0x1d2>
 23fab84:	340c      	adds	r4, #12
 23fab86:	dc0e      	bgt.n	23faba6 <__adddf3+0x1ba>
 23fab88:	f104 0414 	add.w	r4, r4, #20
 23fab8c:	f1c4 0220 	rsb	r2, r4, #32
 23fab90:	fa20 f004 	lsr.w	r0, r0, r4
 23fab94:	fa01 f302 	lsl.w	r3, r1, r2
 23fab98:	ea40 0003 	orr.w	r0, r0, r3
 23fab9c:	fa21 f304 	lsr.w	r3, r1, r4
 23faba0:	ea45 0103 	orr.w	r1, r5, r3
 23faba4:	bd30      	pop	{r4, r5, pc}
 23faba6:	f1c4 040c 	rsb	r4, r4, #12
 23fabaa:	f1c4 0220 	rsb	r2, r4, #32
 23fabae:	fa20 f002 	lsr.w	r0, r0, r2
 23fabb2:	fa01 f304 	lsl.w	r3, r1, r4
 23fabb6:	ea40 0003 	orr.w	r0, r0, r3
 23fabba:	4629      	mov	r1, r5
 23fabbc:	bd30      	pop	{r4, r5, pc}
 23fabbe:	fa21 f004 	lsr.w	r0, r1, r4
 23fabc2:	4629      	mov	r1, r5
 23fabc4:	bd30      	pop	{r4, r5, pc}
 23fabc6:	f094 0f00 	teq	r4, #0
 23fabca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fabce:	bf06      	itte	eq
 23fabd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fabd4:	3401      	addeq	r4, #1
 23fabd6:	3d01      	subne	r5, #1
 23fabd8:	e74e      	b.n	23faa78 <__adddf3+0x8c>
 23fabda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fabde:	bf18      	it	ne
 23fabe0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fabe4:	d029      	beq.n	23fac3a <__adddf3+0x24e>
 23fabe6:	ea94 0f05 	teq	r4, r5
 23fabea:	bf08      	it	eq
 23fabec:	ea90 0f02 	teqeq	r0, r2
 23fabf0:	d005      	beq.n	23fabfe <__adddf3+0x212>
 23fabf2:	ea54 0c00 	orrs.w	ip, r4, r0
 23fabf6:	bf04      	itt	eq
 23fabf8:	4619      	moveq	r1, r3
 23fabfa:	4610      	moveq	r0, r2
 23fabfc:	bd30      	pop	{r4, r5, pc}
 23fabfe:	ea91 0f03 	teq	r1, r3
 23fac02:	bf1e      	ittt	ne
 23fac04:	2100      	movne	r1, #0
 23fac06:	2000      	movne	r0, #0
 23fac08:	bd30      	popne	{r4, r5, pc}
 23fac0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fac0e:	d105      	bne.n	23fac1c <__adddf3+0x230>
 23fac10:	0040      	lsls	r0, r0, #1
 23fac12:	4149      	adcs	r1, r1
 23fac14:	bf28      	it	cs
 23fac16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fac1a:	bd30      	pop	{r4, r5, pc}
 23fac1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fac20:	bf3c      	itt	cc
 23fac22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fac26:	bd30      	popcc	{r4, r5, pc}
 23fac28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fac2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fac30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fac34:	f04f 0000 	mov.w	r0, #0
 23fac38:	bd30      	pop	{r4, r5, pc}
 23fac3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fac3e:	bf1a      	itte	ne
 23fac40:	4619      	movne	r1, r3
 23fac42:	4610      	movne	r0, r2
 23fac44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fac48:	bf1c      	itt	ne
 23fac4a:	460b      	movne	r3, r1
 23fac4c:	4602      	movne	r2, r0
 23fac4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fac52:	bf06      	itte	eq
 23fac54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fac58:	ea91 0f03 	teqeq	r1, r3
 23fac5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fac60:	bd30      	pop	{r4, r5, pc}
 23fac62:	bf00      	nop

023fac64 <__aeabi_ui2d>:
 23fac64:	f090 0f00 	teq	r0, #0
 23fac68:	bf04      	itt	eq
 23fac6a:	2100      	moveq	r1, #0
 23fac6c:	4770      	bxeq	lr
 23fac6e:	b530      	push	{r4, r5, lr}
 23fac70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fac74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fac78:	f04f 0500 	mov.w	r5, #0
 23fac7c:	f04f 0100 	mov.w	r1, #0
 23fac80:	e750      	b.n	23fab24 <__adddf3+0x138>
 23fac82:	bf00      	nop

023fac84 <__aeabi_i2d>:
 23fac84:	f090 0f00 	teq	r0, #0
 23fac88:	bf04      	itt	eq
 23fac8a:	2100      	moveq	r1, #0
 23fac8c:	4770      	bxeq	lr
 23fac8e:	b530      	push	{r4, r5, lr}
 23fac90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fac94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fac98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fac9c:	bf48      	it	mi
 23fac9e:	4240      	negmi	r0, r0
 23faca0:	f04f 0100 	mov.w	r1, #0
 23faca4:	e73e      	b.n	23fab24 <__adddf3+0x138>
 23faca6:	bf00      	nop

023faca8 <__aeabi_f2d>:
 23faca8:	0042      	lsls	r2, r0, #1
 23facaa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23facae:	ea4f 0131 	mov.w	r1, r1, rrx
 23facb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23facb6:	bf1f      	itttt	ne
 23facb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23facbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23facc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23facc4:	4770      	bxne	lr
 23facc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23facca:	bf08      	it	eq
 23faccc:	4770      	bxeq	lr
 23facce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23facd2:	bf04      	itt	eq
 23facd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23facd8:	4770      	bxeq	lr
 23facda:	b530      	push	{r4, r5, lr}
 23facdc:	f44f 7460 	mov.w	r4, #896	; 0x380
 23face0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23face4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23face8:	e71c      	b.n	23fab24 <__adddf3+0x138>
 23facea:	bf00      	nop

023facec <__aeabi_ul2d>:
 23facec:	ea50 0201 	orrs.w	r2, r0, r1
 23facf0:	bf08      	it	eq
 23facf2:	4770      	bxeq	lr
 23facf4:	b530      	push	{r4, r5, lr}
 23facf6:	f04f 0500 	mov.w	r5, #0
 23facfa:	e00a      	b.n	23fad12 <__aeabi_l2d+0x16>

023facfc <__aeabi_l2d>:
 23facfc:	ea50 0201 	orrs.w	r2, r0, r1
 23fad00:	bf08      	it	eq
 23fad02:	4770      	bxeq	lr
 23fad04:	b530      	push	{r4, r5, lr}
 23fad06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fad0a:	d502      	bpl.n	23fad12 <__aeabi_l2d+0x16>
 23fad0c:	4240      	negs	r0, r0
 23fad0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fad12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fad16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fad1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fad1e:	f43f aed8 	beq.w	23faad2 <__adddf3+0xe6>
 23fad22:	f04f 0203 	mov.w	r2, #3
 23fad26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fad2a:	bf18      	it	ne
 23fad2c:	3203      	addne	r2, #3
 23fad2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fad32:	bf18      	it	ne
 23fad34:	3203      	addne	r2, #3
 23fad36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fad3a:	f1c2 0320 	rsb	r3, r2, #32
 23fad3e:	fa00 fc03 	lsl.w	ip, r0, r3
 23fad42:	fa20 f002 	lsr.w	r0, r0, r2
 23fad46:	fa01 fe03 	lsl.w	lr, r1, r3
 23fad4a:	ea40 000e 	orr.w	r0, r0, lr
 23fad4e:	fa21 f102 	lsr.w	r1, r1, r2
 23fad52:	4414      	add	r4, r2
 23fad54:	e6bd      	b.n	23faad2 <__adddf3+0xe6>
 23fad56:	bf00      	nop

023fad58 <__aeabi_dmul>:
 23fad58:	b570      	push	{r4, r5, r6, lr}
 23fad5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fad5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fad62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fad66:	bf1d      	ittte	ne
 23fad68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fad6c:	ea94 0f0c 	teqne	r4, ip
 23fad70:	ea95 0f0c 	teqne	r5, ip
 23fad74:	f000 f8de 	bleq	23faf34 <__aeabi_dmul+0x1dc>
 23fad78:	442c      	add	r4, r5
 23fad7a:	ea81 0603 	eor.w	r6, r1, r3
 23fad7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fad82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fad86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fad8a:	bf18      	it	ne
 23fad8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fad90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fad94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fad98:	d038      	beq.n	23fae0c <__aeabi_dmul+0xb4>
 23fad9a:	fba0 ce02 	umull	ip, lr, r0, r2
 23fad9e:	f04f 0500 	mov.w	r5, #0
 23fada2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fada6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fadaa:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fadae:	f04f 0600 	mov.w	r6, #0
 23fadb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fadb6:	f09c 0f00 	teq	ip, #0
 23fadba:	bf18      	it	ne
 23fadbc:	f04e 0e01 	orrne.w	lr, lr, #1
 23fadc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fadc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fadc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fadcc:	d204      	bcs.n	23fadd8 <__aeabi_dmul+0x80>
 23fadce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fadd2:	416d      	adcs	r5, r5
 23fadd4:	eb46 0606 	adc.w	r6, r6, r6
 23fadd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23faddc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fade0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fade4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fade8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fadec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fadf0:	bf88      	it	hi
 23fadf2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fadf6:	d81e      	bhi.n	23fae36 <__aeabi_dmul+0xde>
 23fadf8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fadfc:	bf08      	it	eq
 23fadfe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fae02:	f150 0000 	adcs.w	r0, r0, #0
 23fae06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fae0a:	bd70      	pop	{r4, r5, r6, pc}
 23fae0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fae10:	ea46 0101 	orr.w	r1, r6, r1
 23fae14:	ea40 0002 	orr.w	r0, r0, r2
 23fae18:	ea81 0103 	eor.w	r1, r1, r3
 23fae1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fae20:	bfc2      	ittt	gt
 23fae22:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fae26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fae2a:	bd70      	popgt	{r4, r5, r6, pc}
 23fae2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fae30:	f04f 0e00 	mov.w	lr, #0
 23fae34:	3c01      	subs	r4, #1
 23fae36:	f300 80ab 	bgt.w	23faf90 <__aeabi_dmul+0x238>
 23fae3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fae3e:	bfde      	ittt	le
 23fae40:	2000      	movle	r0, #0
 23fae42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fae46:	bd70      	pople	{r4, r5, r6, pc}
 23fae48:	f1c4 0400 	rsb	r4, r4, #0
 23fae4c:	3c20      	subs	r4, #32
 23fae4e:	da35      	bge.n	23faebc <__aeabi_dmul+0x164>
 23fae50:	340c      	adds	r4, #12
 23fae52:	dc1b      	bgt.n	23fae8c <__aeabi_dmul+0x134>
 23fae54:	f104 0414 	add.w	r4, r4, #20
 23fae58:	f1c4 0520 	rsb	r5, r4, #32
 23fae5c:	fa00 f305 	lsl.w	r3, r0, r5
 23fae60:	fa20 f004 	lsr.w	r0, r0, r4
 23fae64:	fa01 f205 	lsl.w	r2, r1, r5
 23fae68:	ea40 0002 	orr.w	r0, r0, r2
 23fae6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fae70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fae74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fae78:	fa21 f604 	lsr.w	r6, r1, r4
 23fae7c:	eb42 0106 	adc.w	r1, r2, r6
 23fae80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fae84:	bf08      	it	eq
 23fae86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fae8a:	bd70      	pop	{r4, r5, r6, pc}
 23fae8c:	f1c4 040c 	rsb	r4, r4, #12
 23fae90:	f1c4 0520 	rsb	r5, r4, #32
 23fae94:	fa00 f304 	lsl.w	r3, r0, r4
 23fae98:	fa20 f005 	lsr.w	r0, r0, r5
 23fae9c:	fa01 f204 	lsl.w	r2, r1, r4
 23faea0:	ea40 0002 	orr.w	r0, r0, r2
 23faea4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faea8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23faeac:	f141 0100 	adc.w	r1, r1, #0
 23faeb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23faeb4:	bf08      	it	eq
 23faeb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23faeba:	bd70      	pop	{r4, r5, r6, pc}
 23faebc:	f1c4 0520 	rsb	r5, r4, #32
 23faec0:	fa00 f205 	lsl.w	r2, r0, r5
 23faec4:	ea4e 0e02 	orr.w	lr, lr, r2
 23faec8:	fa20 f304 	lsr.w	r3, r0, r4
 23faecc:	fa01 f205 	lsl.w	r2, r1, r5
 23faed0:	ea43 0302 	orr.w	r3, r3, r2
 23faed4:	fa21 f004 	lsr.w	r0, r1, r4
 23faed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faedc:	fa21 f204 	lsr.w	r2, r1, r4
 23faee0:	ea20 0002 	bic.w	r0, r0, r2
 23faee4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23faee8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23faeec:	bf08      	it	eq
 23faeee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23faef2:	bd70      	pop	{r4, r5, r6, pc}
 23faef4:	f094 0f00 	teq	r4, #0
 23faef8:	d10f      	bne.n	23faf1a <__aeabi_dmul+0x1c2>
 23faefa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23faefe:	0040      	lsls	r0, r0, #1
 23faf00:	eb41 0101 	adc.w	r1, r1, r1
 23faf04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23faf08:	bf08      	it	eq
 23faf0a:	3c01      	subeq	r4, #1
 23faf0c:	d0f7      	beq.n	23faefe <__aeabi_dmul+0x1a6>
 23faf0e:	ea41 0106 	orr.w	r1, r1, r6
 23faf12:	f095 0f00 	teq	r5, #0
 23faf16:	bf18      	it	ne
 23faf18:	4770      	bxne	lr
 23faf1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23faf1e:	0052      	lsls	r2, r2, #1
 23faf20:	eb43 0303 	adc.w	r3, r3, r3
 23faf24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23faf28:	bf08      	it	eq
 23faf2a:	3d01      	subeq	r5, #1
 23faf2c:	d0f7      	beq.n	23faf1e <__aeabi_dmul+0x1c6>
 23faf2e:	ea43 0306 	orr.w	r3, r3, r6
 23faf32:	4770      	bx	lr
 23faf34:	ea94 0f0c 	teq	r4, ip
 23faf38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23faf3c:	bf18      	it	ne
 23faf3e:	ea95 0f0c 	teqne	r5, ip
 23faf42:	d00c      	beq.n	23faf5e <__aeabi_dmul+0x206>
 23faf44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23faf48:	bf18      	it	ne
 23faf4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23faf4e:	d1d1      	bne.n	23faef4 <__aeabi_dmul+0x19c>
 23faf50:	ea81 0103 	eor.w	r1, r1, r3
 23faf54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faf58:	f04f 0000 	mov.w	r0, #0
 23faf5c:	bd70      	pop	{r4, r5, r6, pc}
 23faf5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23faf62:	bf06      	itte	eq
 23faf64:	4610      	moveq	r0, r2
 23faf66:	4619      	moveq	r1, r3
 23faf68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23faf6c:	d019      	beq.n	23fafa2 <__aeabi_dmul+0x24a>
 23faf6e:	ea94 0f0c 	teq	r4, ip
 23faf72:	d102      	bne.n	23faf7a <__aeabi_dmul+0x222>
 23faf74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23faf78:	d113      	bne.n	23fafa2 <__aeabi_dmul+0x24a>
 23faf7a:	ea95 0f0c 	teq	r5, ip
 23faf7e:	d105      	bne.n	23faf8c <__aeabi_dmul+0x234>
 23faf80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23faf84:	bf1c      	itt	ne
 23faf86:	4610      	movne	r0, r2
 23faf88:	4619      	movne	r1, r3
 23faf8a:	d10a      	bne.n	23fafa2 <__aeabi_dmul+0x24a>
 23faf8c:	ea81 0103 	eor.w	r1, r1, r3
 23faf90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faf94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23faf98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23faf9c:	f04f 0000 	mov.w	r0, #0
 23fafa0:	bd70      	pop	{r4, r5, r6, pc}
 23fafa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fafa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fafaa:	bd70      	pop	{r4, r5, r6, pc}

023fafac <__aeabi_ddiv>:
 23fafac:	b570      	push	{r4, r5, r6, lr}
 23fafae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fafb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fafb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fafba:	bf1d      	ittte	ne
 23fafbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fafc0:	ea94 0f0c 	teqne	r4, ip
 23fafc4:	ea95 0f0c 	teqne	r5, ip
 23fafc8:	f000 f8a7 	bleq	23fb11a <__aeabi_ddiv+0x16e>
 23fafcc:	eba4 0405 	sub.w	r4, r4, r5
 23fafd0:	ea81 0e03 	eor.w	lr, r1, r3
 23fafd4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fafd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fafdc:	f000 8088 	beq.w	23fb0f0 <__aeabi_ddiv+0x144>
 23fafe0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fafe4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fafe8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fafec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23faff0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23faff4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23faff8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23faffc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fb000:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fb004:	429d      	cmp	r5, r3
 23fb006:	bf08      	it	eq
 23fb008:	4296      	cmpeq	r6, r2
 23fb00a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fb00e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fb012:	d202      	bcs.n	23fb01a <__aeabi_ddiv+0x6e>
 23fb014:	085b      	lsrs	r3, r3, #1
 23fb016:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb01a:	1ab6      	subs	r6, r6, r2
 23fb01c:	eb65 0503 	sbc.w	r5, r5, r3
 23fb020:	085b      	lsrs	r3, r3, #1
 23fb022:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb026:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fb02a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fb02e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb032:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb036:	bf22      	ittt	cs
 23fb038:	1ab6      	subcs	r6, r6, r2
 23fb03a:	4675      	movcs	r5, lr
 23fb03c:	ea40 000c 	orrcs.w	r0, r0, ip
 23fb040:	085b      	lsrs	r3, r3, #1
 23fb042:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb046:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb04a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb04e:	bf22      	ittt	cs
 23fb050:	1ab6      	subcs	r6, r6, r2
 23fb052:	4675      	movcs	r5, lr
 23fb054:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fb058:	085b      	lsrs	r3, r3, #1
 23fb05a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb05e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb062:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb066:	bf22      	ittt	cs
 23fb068:	1ab6      	subcs	r6, r6, r2
 23fb06a:	4675      	movcs	r5, lr
 23fb06c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fb070:	085b      	lsrs	r3, r3, #1
 23fb072:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb076:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb07a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb07e:	bf22      	ittt	cs
 23fb080:	1ab6      	subcs	r6, r6, r2
 23fb082:	4675      	movcs	r5, lr
 23fb084:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fb088:	ea55 0e06 	orrs.w	lr, r5, r6
 23fb08c:	d018      	beq.n	23fb0c0 <__aeabi_ddiv+0x114>
 23fb08e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fb092:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fb096:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fb09a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fb09e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fb0a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fb0a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fb0aa:	d1c0      	bne.n	23fb02e <__aeabi_ddiv+0x82>
 23fb0ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb0b0:	d10b      	bne.n	23fb0ca <__aeabi_ddiv+0x11e>
 23fb0b2:	ea41 0100 	orr.w	r1, r1, r0
 23fb0b6:	f04f 0000 	mov.w	r0, #0
 23fb0ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fb0be:	e7b6      	b.n	23fb02e <__aeabi_ddiv+0x82>
 23fb0c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb0c4:	bf04      	itt	eq
 23fb0c6:	4301      	orreq	r1, r0
 23fb0c8:	2000      	moveq	r0, #0
 23fb0ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb0ce:	bf88      	it	hi
 23fb0d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb0d4:	f63f aeaf 	bhi.w	23fae36 <__aeabi_dmul+0xde>
 23fb0d8:	ebb5 0c03 	subs.w	ip, r5, r3
 23fb0dc:	bf04      	itt	eq
 23fb0de:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fb0e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb0e6:	f150 0000 	adcs.w	r0, r0, #0
 23fb0ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb0ee:	bd70      	pop	{r4, r5, r6, pc}
 23fb0f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fb0f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fb0f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fb0fc:	bfc2      	ittt	gt
 23fb0fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb102:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb106:	bd70      	popgt	{r4, r5, r6, pc}
 23fb108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb10c:	f04f 0e00 	mov.w	lr, #0
 23fb110:	3c01      	subs	r4, #1
 23fb112:	e690      	b.n	23fae36 <__aeabi_dmul+0xde>
 23fb114:	ea45 0e06 	orr.w	lr, r5, r6
 23fb118:	e68d      	b.n	23fae36 <__aeabi_dmul+0xde>
 23fb11a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb11e:	ea94 0f0c 	teq	r4, ip
 23fb122:	bf08      	it	eq
 23fb124:	ea95 0f0c 	teqeq	r5, ip
 23fb128:	f43f af3b 	beq.w	23fafa2 <__aeabi_dmul+0x24a>
 23fb12c:	ea94 0f0c 	teq	r4, ip
 23fb130:	d10a      	bne.n	23fb148 <__aeabi_ddiv+0x19c>
 23fb132:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb136:	f47f af34 	bne.w	23fafa2 <__aeabi_dmul+0x24a>
 23fb13a:	ea95 0f0c 	teq	r5, ip
 23fb13e:	f47f af25 	bne.w	23faf8c <__aeabi_dmul+0x234>
 23fb142:	4610      	mov	r0, r2
 23fb144:	4619      	mov	r1, r3
 23fb146:	e72c      	b.n	23fafa2 <__aeabi_dmul+0x24a>
 23fb148:	ea95 0f0c 	teq	r5, ip
 23fb14c:	d106      	bne.n	23fb15c <__aeabi_ddiv+0x1b0>
 23fb14e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb152:	f43f aefd 	beq.w	23faf50 <__aeabi_dmul+0x1f8>
 23fb156:	4610      	mov	r0, r2
 23fb158:	4619      	mov	r1, r3
 23fb15a:	e722      	b.n	23fafa2 <__aeabi_dmul+0x24a>
 23fb15c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb160:	bf18      	it	ne
 23fb162:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb166:	f47f aec5 	bne.w	23faef4 <__aeabi_dmul+0x19c>
 23fb16a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fb16e:	f47f af0d 	bne.w	23faf8c <__aeabi_dmul+0x234>
 23fb172:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fb176:	f47f aeeb 	bne.w	23faf50 <__aeabi_dmul+0x1f8>
 23fb17a:	e712      	b.n	23fafa2 <__aeabi_dmul+0x24a>

023fb17c <__gedf2>:
 23fb17c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fb180:	e006      	b.n	23fb190 <__cmpdf2+0x4>
 23fb182:	bf00      	nop

023fb184 <__ledf2>:
 23fb184:	f04f 0c01 	mov.w	ip, #1
 23fb188:	e002      	b.n	23fb190 <__cmpdf2+0x4>
 23fb18a:	bf00      	nop

023fb18c <__cmpdf2>:
 23fb18c:	f04f 0c01 	mov.w	ip, #1
 23fb190:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fb194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb19c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb1a0:	bf18      	it	ne
 23fb1a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fb1a6:	d01b      	beq.n	23fb1e0 <__cmpdf2+0x54>
 23fb1a8:	b001      	add	sp, #4
 23fb1aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fb1ae:	bf0c      	ite	eq
 23fb1b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fb1b4:	ea91 0f03 	teqne	r1, r3
 23fb1b8:	bf02      	ittt	eq
 23fb1ba:	ea90 0f02 	teqeq	r0, r2
 23fb1be:	2000      	moveq	r0, #0
 23fb1c0:	4770      	bxeq	lr
 23fb1c2:	f110 0f00 	cmn.w	r0, #0
 23fb1c6:	ea91 0f03 	teq	r1, r3
 23fb1ca:	bf58      	it	pl
 23fb1cc:	4299      	cmppl	r1, r3
 23fb1ce:	bf08      	it	eq
 23fb1d0:	4290      	cmpeq	r0, r2
 23fb1d2:	bf2c      	ite	cs
 23fb1d4:	17d8      	asrcs	r0, r3, #31
 23fb1d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fb1da:	f040 0001 	orr.w	r0, r0, #1
 23fb1de:	4770      	bx	lr
 23fb1e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb1e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb1e8:	d102      	bne.n	23fb1f0 <__cmpdf2+0x64>
 23fb1ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb1ee:	d107      	bne.n	23fb200 <__cmpdf2+0x74>
 23fb1f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb1f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb1f8:	d1d6      	bne.n	23fb1a8 <__cmpdf2+0x1c>
 23fb1fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb1fe:	d0d3      	beq.n	23fb1a8 <__cmpdf2+0x1c>
 23fb200:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fb204:	4770      	bx	lr
 23fb206:	bf00      	nop

023fb208 <__aeabi_cdrcmple>:
 23fb208:	4684      	mov	ip, r0
 23fb20a:	4610      	mov	r0, r2
 23fb20c:	4662      	mov	r2, ip
 23fb20e:	468c      	mov	ip, r1
 23fb210:	4619      	mov	r1, r3
 23fb212:	4663      	mov	r3, ip
 23fb214:	e000      	b.n	23fb218 <__aeabi_cdcmpeq>
 23fb216:	bf00      	nop

023fb218 <__aeabi_cdcmpeq>:
 23fb218:	b501      	push	{r0, lr}
 23fb21a:	f7ff ffb7 	bl	23fb18c <__cmpdf2>
 23fb21e:	2800      	cmp	r0, #0
 23fb220:	bf48      	it	mi
 23fb222:	f110 0f00 	cmnmi.w	r0, #0
 23fb226:	bd01      	pop	{r0, pc}

023fb228 <__aeabi_dcmpeq>:
 23fb228:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb22c:	f7ff fff4 	bl	23fb218 <__aeabi_cdcmpeq>
 23fb230:	bf0c      	ite	eq
 23fb232:	2001      	moveq	r0, #1
 23fb234:	2000      	movne	r0, #0
 23fb236:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb23a:	bf00      	nop

023fb23c <__aeabi_dcmplt>:
 23fb23c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb240:	f7ff ffea 	bl	23fb218 <__aeabi_cdcmpeq>
 23fb244:	bf34      	ite	cc
 23fb246:	2001      	movcc	r0, #1
 23fb248:	2000      	movcs	r0, #0
 23fb24a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb24e:	bf00      	nop

023fb250 <__aeabi_dcmple>:
 23fb250:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb254:	f7ff ffe0 	bl	23fb218 <__aeabi_cdcmpeq>
 23fb258:	bf94      	ite	ls
 23fb25a:	2001      	movls	r0, #1
 23fb25c:	2000      	movhi	r0, #0
 23fb25e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb262:	bf00      	nop

023fb264 <__aeabi_dcmpge>:
 23fb264:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb268:	f7ff ffce 	bl	23fb208 <__aeabi_cdrcmple>
 23fb26c:	bf94      	ite	ls
 23fb26e:	2001      	movls	r0, #1
 23fb270:	2000      	movhi	r0, #0
 23fb272:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb276:	bf00      	nop

023fb278 <__aeabi_dcmpgt>:
 23fb278:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb27c:	f7ff ffc4 	bl	23fb208 <__aeabi_cdrcmple>
 23fb280:	bf34      	ite	cc
 23fb282:	2001      	movcc	r0, #1
 23fb284:	2000      	movcs	r0, #0
 23fb286:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb28a:	bf00      	nop

023fb28c <__aeabi_dcmpun>:
 23fb28c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb294:	d102      	bne.n	23fb29c <__aeabi_dcmpun+0x10>
 23fb296:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb29a:	d10a      	bne.n	23fb2b2 <__aeabi_dcmpun+0x26>
 23fb29c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb2a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb2a4:	d102      	bne.n	23fb2ac <__aeabi_dcmpun+0x20>
 23fb2a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb2aa:	d102      	bne.n	23fb2b2 <__aeabi_dcmpun+0x26>
 23fb2ac:	f04f 0000 	mov.w	r0, #0
 23fb2b0:	4770      	bx	lr
 23fb2b2:	f04f 0001 	mov.w	r0, #1
 23fb2b6:	4770      	bx	lr

023fb2b8 <__aeabi_d2f>:
 23fb2b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb2bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fb2c0:	bf24      	itt	cs
 23fb2c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fb2c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fb2ca:	d90d      	bls.n	23fb2e8 <__aeabi_d2f+0x30>
 23fb2cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fb2d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fb2d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fb2d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fb2dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fb2e0:	bf08      	it	eq
 23fb2e2:	f020 0001 	biceq.w	r0, r0, #1
 23fb2e6:	4770      	bx	lr
 23fb2e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fb2ec:	d121      	bne.n	23fb332 <__aeabi_d2f+0x7a>
 23fb2ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fb2f2:	bfbc      	itt	lt
 23fb2f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fb2f8:	4770      	bxlt	lr
 23fb2fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb2fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fb302:	f1c2 0218 	rsb	r2, r2, #24
 23fb306:	f1c2 0c20 	rsb	ip, r2, #32
 23fb30a:	fa10 f30c 	lsls.w	r3, r0, ip
 23fb30e:	fa20 f002 	lsr.w	r0, r0, r2
 23fb312:	bf18      	it	ne
 23fb314:	f040 0001 	orrne.w	r0, r0, #1
 23fb318:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb31c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fb320:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fb324:	ea40 000c 	orr.w	r0, r0, ip
 23fb328:	fa23 f302 	lsr.w	r3, r3, r2
 23fb32c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fb330:	e7cc      	b.n	23fb2cc <__aeabi_d2f+0x14>
 23fb332:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fb336:	d107      	bne.n	23fb348 <__aeabi_d2f+0x90>
 23fb338:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fb33c:	bf1e      	ittt	ne
 23fb33e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fb342:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fb346:	4770      	bxne	lr
 23fb348:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fb34c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fb350:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fb354:	4770      	bx	lr
 23fb356:	bf00      	nop

023fb358 <strcmp>:
 23fb358:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb35c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb360:	2a01      	cmp	r2, #1
 23fb362:	bf28      	it	cs
 23fb364:	429a      	cmpcs	r2, r3
 23fb366:	d0f7      	beq.n	23fb358 <strcmp>
 23fb368:	1ad0      	subs	r0, r2, r3
 23fb36a:	4770      	bx	lr

023fb36c <strlen>:
 23fb36c:	4603      	mov	r3, r0
 23fb36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb372:	2a00      	cmp	r2, #0
 23fb374:	d1fb      	bne.n	23fb36e <strlen+0x2>
 23fb376:	1a18      	subs	r0, r3, r0
 23fb378:	3801      	subs	r0, #1
 23fb37a:	4770      	bx	lr

023fb37c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb37c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb37e:	f002 fd53 	bl	23fde28 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb382:	2500      	movs	r5, #0
 23fb384:	4e05      	ldr	r6, [pc, #20]	; (23fb39c <module_user_init+0x20>)
 23fb386:	4c06      	ldr	r4, [pc, #24]	; (23fb3a0 <module_user_init+0x24>)
 23fb388:	1ba4      	subs	r4, r4, r6
 23fb38a:	08a4      	lsrs	r4, r4, #2
 23fb38c:	42ac      	cmp	r4, r5
 23fb38e:	d100      	bne.n	23fb392 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb390:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb392:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb396:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb398:	3501      	adds	r5, #1
 23fb39a:	e7f7      	b.n	23fb38c <module_user_init+0x10>
 23fb39c:	023fffcc 	.word	0x023fffcc
 23fb3a0:	023ffff0 	.word	0x023ffff0

023fb3a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb3a4:	f000 b848 	b.w	23fb438 <setup>

023fb3a8 <module_user_loop>:
}

void module_user_loop() {
 23fb3a8:	b508      	push	{r3, lr}
    loop();
 23fb3aa:	f000 f855 	bl	23fb458 <loop>
    _post_loop();
}
 23fb3ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb3b2:	f002 bcf1 	b.w	23fdd98 <_post_loop>

023fb3b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb3b6:	f000 be75 	b.w	23fc0a4 <malloc>

023fb3ba <_Znaj>:
 23fb3ba:	f000 be73 	b.w	23fc0a4 <malloc>

023fb3be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb3be:	f000 be7f 	b.w	23fc0c0 <free>
	...

023fb3c4 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb3c4:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb3c6:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb3c8:	4a02      	ldr	r2, [pc, #8]	; (23fb3d4 <__cxa_pure_virtual+0x10>)
 23fb3ca:	4903      	ldr	r1, [pc, #12]	; (23fb3d8 <__cxa_pure_virtual+0x14>)
 23fb3cc:	f000 fd44 	bl	23fbe58 <panic_>
  while (1);
 23fb3d0:	e7fe      	b.n	23fb3d0 <__cxa_pure_virtual+0xc>
 23fb3d2:	bf00      	nop
 23fb3d4:	023fb9f9 	.word	0x023fb9f9
 23fb3d8:	023ffb20 	.word	0x023ffb20

023fb3dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb3dc:	7800      	ldrb	r0, [r0, #0]
 23fb3de:	fab0 f080 	clz	r0, r0
 23fb3e2:	0940      	lsrs	r0, r0, #5
 23fb3e4:	4770      	bx	lr

023fb3e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb3e6:	2301      	movs	r3, #1
 23fb3e8:	7003      	strb	r3, [r0, #0]
 23fb3ea:	4770      	bx	lr

023fb3ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fb3ec:	4770      	bx	lr
	...

023fb3f0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb3f0:	b510      	push	{r4, lr}
 23fb3f2:	4604      	mov	r4, r0
 23fb3f4:	4b09      	ldr	r3, [pc, #36]	; (23fb41c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb3f6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb3f8:	f001 fb5e 	bl	23fcab8 <_ZN5spark10LogManager8instanceEv>
 23fb3fc:	4621      	mov	r1, r4
 23fb3fe:	f001 fd95 	bl	23fcf2c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb402:	f002 fc39 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fb406:	f002 fc2b 	bl	23fdc60 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb40a:	4620      	mov	r0, r4
 23fb40c:	4b04      	ldr	r3, [pc, #16]	; (23fb420 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb40e:	f840 3b04 	str.w	r3, [r0], #4
 23fb412:	f001 fc27 	bl	23fcc64 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb416:	4620      	mov	r0, r4
 23fb418:	bd10      	pop	{r4, pc}
 23fb41a:	bf00      	nop
 23fb41c:	023ffb58 	.word	0x023ffb58
 23fb420:	023ffb40 	.word	0x023ffb40

023fb424 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb424:	b510      	push	{r4, lr}
 23fb426:	4604      	mov	r4, r0
    }
 23fb428:	f7ff ffe2 	bl	23fb3f0 <_ZN5spark16SerialLogHandlerD1Ev>
 23fb42c:	4620      	mov	r0, r4
 23fb42e:	2124      	movs	r1, #36	; 0x24
 23fb430:	f7ff ffc5 	bl	23fb3be <_ZdlPvj>
 23fb434:	4620      	mov	r0, r4
 23fb436:	bd10      	pop	{r4, pc}

023fb438 <setup>:
//     //float t;
// 	} sample;
// 	uint8_t bytes[12];
// } Sample;

void setup() {
 23fb438:	b508      	push	{r3, lr}
  //DEBUGGING
  //Serial.begin(9600);
  //waitFor(Serial.isConnected, 15000);
  //Log.info("Serial connected or timed out!");

  adxl362.begin();
 23fb43a:	4806      	ldr	r0, [pc, #24]	; (23fb454 <setup+0x1c>)
 23fb43c:	f000 fa76 	bl	23fb92c <_ZN7ADXL3625beginEv>
  adxl362.beginMeasure(); //NECESSARY - starts measurement
 23fb440:	4804      	ldr	r0, [pc, #16]	; (23fb454 <setup+0x1c>)
 23fb442:	f000 f9ff 	bl	23fb844 <_ZN7ADXL36212beginMeasureEv>
  // //BLE setup for IMU example
  // BLE.addCharacteristic(valueCharacteristic);
	// BleAdvertisingData data;
	// data.appendServiceUUID(serviceUuid);
	// BLE.advertise(&data);
}
 23fb446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  adxl362.setRange(XL362_FILTER_FLAG_8G); //sets range to 8G - other options are 2G and 4G
 23fb44a:	2180      	movs	r1, #128	; 0x80
 23fb44c:	4801      	ldr	r0, [pc, #4]	; (23fb454 <setup+0x1c>)
 23fb44e:	f000 ba0b 	b.w	23fb868 <_ZN7ADXL3628setRangeEh>
 23fb452:	bf00      	nop
 23fb454:	1007ae24 	.word	0x1007ae24

023fb458 <loop>:


void loop() {
 23fb458:	b500      	push	{lr}
 23fb45a:	b08b      	sub	sp, #44	; 0x2c
  float r, p, t;

  //static unsigned long lastTime = 0; // initialize to starting time
  //unsigned long currentTime = millis(); // get time since start of program

  adxl362.readXYZmg(x, y, z); //burst read of axes - REQUIRED to guarantee all measurements correspond to same sample time 
 23fb45c:	ab06      	add	r3, sp, #24
 23fb45e:	aa05      	add	r2, sp, #20
 23fb460:	a904      	add	r1, sp, #16
 23fb462:	4809      	ldr	r0, [pc, #36]	; (23fb488 <loop+0x30>)
 23fb464:	f000 fa1c 	bl	23fb8a0 <_ZN7ADXL3629readXYZmgERiS0_S0_>
  adxl362.XYZmgtoRPT(x, y, z, r, p, t); //converts raw data to roll, pitch, tilt
 23fb468:	ab09      	add	r3, sp, #36	; 0x24
 23fb46a:	9302      	str	r3, [sp, #8]
 23fb46c:	ab08      	add	r3, sp, #32
 23fb46e:	9301      	str	r3, [sp, #4]
 23fb470:	ab07      	add	r3, sp, #28
 23fb472:	9300      	str	r3, [sp, #0]
 23fb474:	9904      	ldr	r1, [sp, #16]
 23fb476:	4804      	ldr	r0, [pc, #16]	; (23fb488 <loop+0x30>)
 23fb478:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 23fb47c:	f000 f8e4 	bl	23fb648 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>

  //Log.info("x: %d, y: %d, z: %d, r: %f, p: %f, t: %f", x, y, z, r, p, t);
  //Serial.printlnf("%d, %d, %d, %f, %f, %f", x, y, z, r, p, t); //DEBUGGING - Use Arduino Serial Plotter
  //Serial.printlnf("%f, %f, %f", r, p, t); //DEBUGGING - Use Arduino Serial Plotter
  //delay(1); //for DEBUGGING
 23fb480:	b00b      	add	sp, #44	; 0x2c
 23fb482:	f85d fb04 	ldr.w	pc, [sp], #4
 23fb486:	bf00      	nop
 23fb488:	1007ae24 	.word	0x1007ae24

023fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb48c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb48e:	2614      	movs	r6, #20
 23fb490:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb494:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb496:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb49a:	42ae      	cmp	r6, r5
 23fb49c:	d004      	beq.n	23fb4a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fb49e:	4628      	mov	r0, r5
 23fb4a0:	f002 fa7e 	bl	23fd9a0 <_ZN6StringD1Ev>
 23fb4a4:	3514      	adds	r5, #20
 23fb4a6:	e7f8      	b.n	23fb49a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb4a8:	6820      	ldr	r0, [r4, #0]
 23fb4aa:	f000 fe09 	bl	23fc0c0 <free>
    AllocatorT::free(data_);
}
 23fb4ae:	4620      	mov	r0, r4
 23fb4b0:	bd70      	pop	{r4, r5, r6, pc}

023fb4b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fb4b2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb4b6:	4604      	mov	r4, r0
 23fb4b8:	460d      	mov	r5, r1
 23fb4ba:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb4bc:	d916      	bls.n	23fb4ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fb4be:	4290      	cmp	r0, r2
 23fb4c0:	d215      	bcs.n	23fb4ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fb4c2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb4c6:	1a75      	subs	r5, r6, r1
 23fb4c8:	f1a1 0714 	sub.w	r7, r1, #20
 23fb4cc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb4ce:	42b7      	cmp	r7, r6
 23fb4d0:	d01c      	beq.n	23fb50c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fb4d2:	b12c      	cbz	r4, 23fb4e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fb4d4:	4631      	mov	r1, r6
 23fb4d6:	4620      	mov	r0, r4
 23fb4d8:	f002 facb 	bl	23fda72 <_ZN6StringC1EOS_>
 23fb4dc:	7c33      	ldrb	r3, [r6, #16]
 23fb4de:	7423      	strb	r3, [r4, #16]
 23fb4e0:	4630      	mov	r0, r6
 23fb4e2:	f002 fa5d 	bl	23fd9a0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb4e6:	3e14      	subs	r6, #20
 23fb4e8:	3c14      	subs	r4, #20
 23fb4ea:	e7f0      	b.n	23fb4ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fb4ec:	d00e      	beq.n	23fb50c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fb4ee:	42b5      	cmp	r5, r6
 23fb4f0:	d00c      	beq.n	23fb50c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fb4f2:	b12c      	cbz	r4, 23fb500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fb4f4:	4629      	mov	r1, r5
 23fb4f6:	4620      	mov	r0, r4
 23fb4f8:	f002 fabb 	bl	23fda72 <_ZN6StringC1EOS_>
 23fb4fc:	7c2b      	ldrb	r3, [r5, #16]
 23fb4fe:	7423      	strb	r3, [r4, #16]
 23fb500:	4628      	mov	r0, r5
 23fb502:	f002 fa4d 	bl	23fd9a0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb506:	3514      	adds	r5, #20
 23fb508:	3414      	adds	r4, #20
 23fb50a:	e7f0      	b.n	23fb4ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fb50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb50e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb50e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fb514:	e9c0 3300 	strd	r3, r3, [r0]
 23fb518:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb51a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb51c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb51e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb520:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb522:	dd24      	ble.n	23fb56e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fb524:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fb528:	fb08 f007 	mul.w	r0, r8, r7
 23fb52c:	f000 fdba 	bl	23fc0a4 <malloc>
            if (!d) {
 23fb530:	4605      	mov	r5, r0
 23fb532:	b1e0      	cbz	r0, 23fb56e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fb534:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fb538:	fb08 1202 	mla	r2, r8, r2, r1
 23fb53c:	f7ff ffb9 	bl	23fb4b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fb540:	6820      	ldr	r0, [r4, #0]
 23fb542:	f000 fdbd 	bl	23fc0c0 <free>
        data_ = d;
 23fb546:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fb548:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb54a:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fb54e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fb552:	45b8      	cmp	r8, r7
 23fb554:	d009      	beq.n	23fb56a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fb556:	4639      	mov	r1, r7
 23fb558:	4628      	mov	r0, r5
 23fb55a:	f002 faa4 	bl	23fdaa6 <_ZN6StringC1ERKS_>
 23fb55e:	7c3b      	ldrb	r3, [r7, #16]
 23fb560:	3514      	adds	r5, #20
 23fb562:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fb566:	3714      	adds	r7, #20
 23fb568:	e7f3      	b.n	23fb552 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fb56a:	6873      	ldr	r3, [r6, #4]
 23fb56c:	6063      	str	r3, [r4, #4]
}
 23fb56e:	4620      	mov	r0, r4
 23fb570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb574 <_GLOBAL__sub_I_adxl362>:
 23fb574:	b5f0      	push	{r4, r5, r6, r7, lr}
        capacity_(0) {
 23fb576:	2500      	movs	r5, #0
 23fb578:	b08d      	sub	sp, #52	; 0x34
ADXL362 adxl362;
 23fb57a:	2112      	movs	r1, #18
 23fb57c:	4820      	ldr	r0, [pc, #128]	; (23fb600 <_GLOBAL__sub_I_adxl362+0x8c>)
 23fb57e:	f000 f849 	bl	23fb614 <_ZN7ADXL362C1Ei>
 23fb582:	e9cd 5500 	strd	r5, r5, [sp]
 23fb586:	9502      	str	r5, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fb588:	f002 fb76 	bl	23fdc78 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fb58c:	4c1d      	ldr	r4, [pc, #116]	; (23fb604 <_GLOBAL__sub_I_adxl362+0x90>)
 23fb58e:	4606      	mov	r6, r0
 23fb590:	4627      	mov	r7, r4
 23fb592:	4669      	mov	r1, sp
 23fb594:	a803      	add	r0, sp, #12
 23fb596:	f7ff ffba 	bl	23fb50e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23fb59a:	a903      	add	r1, sp, #12
 23fb59c:	a806      	add	r0, sp, #24
 23fb59e:	f7ff ffb6 	bl	23fb50e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb5a2:	4b19      	ldr	r3, [pc, #100]	; (23fb608 <_GLOBAL__sub_I_adxl362+0x94>)
 23fb5a4:	a906      	add	r1, sp, #24
 23fb5a6:	f847 3b04 	str.w	r3, [r7], #4
 23fb5aa:	a809      	add	r0, sp, #36	; 0x24
 23fb5ac:	f7ff ffaf 	bl	23fb50e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb5b0:	aa09      	add	r2, sp, #36	; 0x24
 23fb5b2:	211e      	movs	r1, #30
 23fb5b4:	4638      	mov	r0, r7
 23fb5b6:	f001 fd9b 	bl	23fd0f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb5ba:	a809      	add	r0, sp, #36	; 0x24
 23fb5bc:	f7ff ff66 	bl	23fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb5c0:	a806      	add	r0, sp, #24
 23fb5c2:	f7ff ff63 	bl	23fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb5c6:	4b11      	ldr	r3, [pc, #68]	; (23fb60c <_GLOBAL__sub_I_adxl362+0x98>)
 23fb5c8:	a803      	add	r0, sp, #12
 23fb5ca:	6023      	str	r3, [r4, #0]
 23fb5cc:	6226      	str	r6, [r4, #32]
 23fb5ce:	f7ff ff5d 	bl	23fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb5d2:	4b0f      	ldr	r3, [pc, #60]	; (23fb610 <_GLOBAL__sub_I_adxl362+0x9c>)
 23fb5d4:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fb5d6:	f002 fb4f 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fb5da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb5de:	f002 fb3b 	bl	23fdc58 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fb5e2:	f001 fa69 	bl	23fcab8 <_ZN5spark10LogManager8instanceEv>
 23fb5e6:	4621      	mov	r1, r4
 23fb5e8:	f001 fc5a 	bl	23fcea0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 23fb5ec:	4668      	mov	r0, sp
 23fb5ee:	f7ff ff4d 	bl	23fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
SYSTEM_THREAD(ENABLED); //IMPORTANT for all Particle devices
 23fb5f2:	4629      	mov	r1, r5
 23fb5f4:	2001      	movs	r0, #1
 23fb5f6:	b00d      	add	sp, #52	; 0x34
 23fb5f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED); //IMPORTANT for all Particle devices
 23fb5fc:	f000 bc72 	b.w	23fbee4 <system_thread_set_state>
 23fb600:	1007ae24 	.word	0x1007ae24
 23fb604:	1007ae28 	.word	0x1007ae28
 23fb608:	023ffb40 	.word	0x023ffb40
 23fb60c:	023ffc80 	.word	0x023ffc80
 23fb610:	023ffb58 	.word	0x023ffb58

023fb614 <_ZN7ADXL362C1Ei>:
#define XL362_FILTER_CTL    0x2C
#define XL362_POWER_CTL     0x2D
#define XL362_SELF_TEST     0x2E


ADXL362::ADXL362(int slaveSelectPin) : slaveSelectPin(uint16_t(slaveSelectPin)) {}
 23fb614:	8041      	strh	r1, [r0, #2]
 23fb616:	4770      	bx	lr

023fb618 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 23fb618:	b510      	push	{r4, lr}
 23fb61a:	ed2d 8b02 	vpush	{d8}
 23fb61e:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23fb622:	f7ff fb2f 	bl	23fac84 <__aeabi_i2d>
 23fb626:	ec41 0b18 	vmov	d8, r0, r1
 23fb62a:	4620      	mov	r0, r4
 23fb62c:	f7ff fb3c 	bl	23faca8 <__aeabi_f2d>
 23fb630:	eeb0 1a48 	vmov.f32	s2, s16
 23fb634:	eef0 1a68 	vmov.f32	s3, s17
    }
 23fb638:	ecbd 8b02 	vpop	{d8}
 23fb63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
 23fb640:	ec41 0b10 	vmov	d0, r0, r1
 23fb644:	f002 bd90 	b.w	23fe168 <pow>

023fb648 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>:
  output.println("\tz = "); output.print(Z);
#endif
}

void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23fb648:	ee07 1a90 	vmov	s15, r1
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23fb64c:	b530      	push	{r4, r5, lr}
 23fb64e:	ed2d 8b04 	vpush	{d8-d9}
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23fb652:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 23fb656:	ee07 2a90 	vmov	s15, r2
 23fb65a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23fb65e:	ee08 3a10 	vmov	s16, r3
 23fb662:	b083      	sub	sp, #12
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23fb664:	2002      	movs	r0, #2
 23fb666:	eeb0 0a68 	vmov.f32	s0, s17
 23fb66a:	f7ff ffd5 	bl	23fb618 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb66e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23fb672:	ec55 4b10 	vmov	r4, r5, d0
 23fb676:	2002      	movs	r0, #2
 23fb678:	eeb0 0a48 	vmov.f32	s0, s16
 23fb67c:	f7ff ffcc 	bl	23fb618 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb680:	4620      	mov	r0, r4
 23fb682:	ec53 2b10 	vmov	r2, r3, d0
 23fb686:	4629      	mov	r1, r5
 23fb688:	f7ff f9b0 	bl	23fa9ec <__adddf3>
 23fb68c:	ec41 0b10 	vmov	d0, r0, r1
 23fb690:	f002 fe3c 	bl	23fe30c <sqrt>
      return atan2(__type(__y), __type(__x));
 23fb694:	ee19 0a10 	vmov	r0, s18
 23fb698:	ed8d 0b00 	vstr	d0, [sp]
 23fb69c:	f7ff fb04 	bl	23faca8 <__aeabi_f2d>
 23fb6a0:	ed9d 1b00 	vldr	d1, [sp]
 23fb6a4:	ec41 0b10 	vmov	d0, r0, r1
 23fb6a8:	f002 fd5c 	bl	23fe164 <atan2>
 23fb6ac:	ec51 0b10 	vmov	r0, r1, d0
 23fb6b0:	f7ff fe02 	bl	23fb2b8 <__aeabi_d2f>
  Rho *= 180/M_PI;
 23fb6b4:	f7ff faf8 	bl	23faca8 <__aeabi_f2d>
 23fb6b8:	a337      	add	r3, pc, #220	; (adr r3, 23fb798 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fb6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb6be:	f7ff fb4b 	bl	23fad58 <__aeabi_dmul>
 23fb6c2:	f7ff fdf9 	bl	23fb2b8 <__aeabi_d2f>
 23fb6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23fb6c8:	eeb0 0a49 	vmov.f32	s0, s18
  Rho *= 180/M_PI;
 23fb6cc:	6018      	str	r0, [r3, #0]
  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23fb6ce:	2002      	movs	r0, #2
 23fb6d0:	f7ff ffa2 	bl	23fb618 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb6d4:	2002      	movs	r0, #2
 23fb6d6:	ec55 4b10 	vmov	r4, r5, d0
 23fb6da:	eeb0 0a48 	vmov.f32	s0, s16
 23fb6de:	f7ff ff9b 	bl	23fb618 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb6e2:	4620      	mov	r0, r4
 23fb6e4:	ec53 2b10 	vmov	r2, r3, d0
 23fb6e8:	4629      	mov	r1, r5
 23fb6ea:	f7ff f97f 	bl	23fa9ec <__adddf3>
 23fb6ee:	ec41 0b10 	vmov	d0, r0, r1
 23fb6f2:	f002 fe0b 	bl	23fe30c <sqrt>
 23fb6f6:	ee18 0a90 	vmov	r0, s17
 23fb6fa:	ed8d 0b00 	vstr	d0, [sp]
 23fb6fe:	f7ff fad3 	bl	23faca8 <__aeabi_f2d>
 23fb702:	ed9d 1b00 	vldr	d1, [sp]
 23fb706:	ec41 0b10 	vmov	d0, r0, r1
 23fb70a:	f002 fd2b 	bl	23fe164 <atan2>
 23fb70e:	ec51 0b10 	vmov	r0, r1, d0
 23fb712:	f7ff fdd1 	bl	23fb2b8 <__aeabi_d2f>
  Phi *= 180/M_PI;
 23fb716:	f7ff fac7 	bl	23faca8 <__aeabi_f2d>
 23fb71a:	a31f      	add	r3, pc, #124	; (adr r3, 23fb798 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fb71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb720:	f7ff fb1a 	bl	23fad58 <__aeabi_dmul>
 23fb724:	f7ff fdc8 	bl	23fb2b8 <__aeabi_d2f>
 23fb728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23fb72a:	eeb0 0a49 	vmov.f32	s0, s18
  Phi *= 180/M_PI;
 23fb72e:	6018      	str	r0, [r3, #0]
  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23fb730:	2002      	movs	r0, #2
 23fb732:	f7ff ff71 	bl	23fb618 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb736:	2002      	movs	r0, #2
 23fb738:	ec55 4b10 	vmov	r4, r5, d0
 23fb73c:	eeb0 0a68 	vmov.f32	s0, s17
 23fb740:	f7ff ff6a 	bl	23fb618 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb744:	4620      	mov	r0, r4
 23fb746:	ec53 2b10 	vmov	r2, r3, d0
 23fb74a:	4629      	mov	r1, r5
 23fb74c:	f7ff f94e 	bl	23fa9ec <__adddf3>
 23fb750:	ec41 0b10 	vmov	d0, r0, r1
 23fb754:	f002 fdda 	bl	23fe30c <sqrt>
 23fb758:	ee18 0a10 	vmov	r0, s16
 23fb75c:	ed8d 0b00 	vstr	d0, [sp]
 23fb760:	f7ff faa2 	bl	23faca8 <__aeabi_f2d>
 23fb764:	ed9d 0b00 	vldr	d0, [sp]
 23fb768:	ec41 0b11 	vmov	d1, r0, r1
 23fb76c:	f002 fcfa 	bl	23fe164 <atan2>
 23fb770:	ec51 0b10 	vmov	r0, r1, d0
 23fb774:	f7ff fda0 	bl	23fb2b8 <__aeabi_d2f>
  Theta *= 180/M_PI;
 23fb778:	f7ff fa96 	bl	23faca8 <__aeabi_f2d>
 23fb77c:	a306      	add	r3, pc, #24	; (adr r3, 23fb798 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fb77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb782:	f7ff fae9 	bl	23fad58 <__aeabi_dmul>
 23fb786:	f7ff fd97 	bl	23fb2b8 <__aeabi_d2f>
 23fb78a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fb78c:	6018      	str	r0, [r3, #0]
}
 23fb78e:	b003      	add	sp, #12
 23fb790:	ecbd 8b04 	vpop	{d8-d9}
 23fb794:	bd30      	pop	{r4, r5, pc}
 23fb796:	bf00      	nop
 23fb798:	1a63c1f8 	.word	0x1a63c1f8
 23fb79c:	404ca5dc 	.word	0x404ca5dc

023fb7a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fb7a0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fb7a2:	4c0a      	ldr	r4, [pc, #40]	; (23fb7cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fb7a4:	e8d4 1f8f 	ldab	r1, [r4]
 23fb7a8:	f011 0101 	ands.w	r1, r1, #1
 23fb7ac:	d10b      	bne.n	23fb7c6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb7ae:	4620      	mov	r0, r4
 23fb7b0:	9101      	str	r1, [sp, #4]
 23fb7b2:	f7ff fe13 	bl	23fb3dc <__cxa_guard_acquire>
 23fb7b6:	9901      	ldr	r1, [sp, #4]
 23fb7b8:	b128      	cbz	r0, 23fb7c6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb7ba:	4805      	ldr	r0, [pc, #20]	; (23fb7d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb7bc:	f002 f8b8 	bl	23fd930 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb7c0:	4620      	mov	r0, r4
 23fb7c2:	f7ff fe10 	bl	23fb3e6 <__cxa_guard_release>
        return instance;
    }
 23fb7c6:	4802      	ldr	r0, [pc, #8]	; (23fb7d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb7c8:	b002      	add	sp, #8
 23fb7ca:	bd10      	pop	{r4, pc}
 23fb7cc:	1007ae4c 	.word	0x1007ae4c
 23fb7d0:	1007ae50 	.word	0x1007ae50

023fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 23fb7d4:	b507      	push	{r0, r1, r2, lr}
 23fb7d6:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
 23fb7d8:	f7ff ffe2 	bl	23fb7a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb7dc:	9901      	ldr	r1, [sp, #4]
    }
 23fb7de:	b003      	add	sp, #12
 23fb7e0:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
 23fb7e4:	f002 b8d6 	b.w	23fd994 <_ZN8SPIClass8transferEh>

023fb7e8 <_ZN7ADXL36219SPIwriteOneRegisterEhh>:
  digitalWrite(slaveSelectPin, HIGH);

  return regValue;
}

void ADXL362::SPIwriteOneRegister(uint8_t regAddress, uint8_t regValue){
 23fb7e8:	b570      	push	{r4, r5, r6, lr}
 23fb7ea:	460e      	mov	r6, r1
 23fb7ec:	4615      	mov	r5, r2
 23fb7ee:	4604      	mov	r4, r0

  digitalWrite(slaveSelectPin, LOW);
 23fb7f0:	2100      	movs	r1, #0
 23fb7f2:	8840      	ldrh	r0, [r0, #2]
 23fb7f4:	f002 fb99 	bl	23fdf2a <digitalWrite>
  SPI.transfer(0x0A);  // write instruction
 23fb7f8:	200a      	movs	r0, #10
 23fb7fa:	f7ff ffeb 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fb7fe:	4630      	mov	r0, r6
 23fb800:	f7ff ffe8 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regValue);
 23fb804:	4628      	mov	r0, r5
 23fb806:	f7ff ffe5 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  digitalWrite(slaveSelectPin, HIGH);
 23fb80a:	8860      	ldrh	r0, [r4, #2]
 23fb80c:	2101      	movs	r1, #1
}
 23fb80e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(slaveSelectPin, HIGH);
 23fb812:	f002 bb8a 	b.w	23fdf2a <digitalWrite>

023fb816 <_ZN7ADXL36218SPIreadOneRegisterEh>:
uint8_t ADXL362::SPIreadOneRegister(uint8_t regAddress){
 23fb816:	b538      	push	{r3, r4, r5, lr}
 23fb818:	460d      	mov	r5, r1
 23fb81a:	4604      	mov	r4, r0
  digitalWrite(slaveSelectPin, LOW);
 23fb81c:	2100      	movs	r1, #0
 23fb81e:	8840      	ldrh	r0, [r0, #2]
 23fb820:	f002 fb83 	bl	23fdf2a <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fb824:	200b      	movs	r0, #11
 23fb826:	f7ff ffd5 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fb82a:	4628      	mov	r0, r5
 23fb82c:	f7ff ffd2 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  regValue = SPI.transfer(0x00);
 23fb830:	2000      	movs	r0, #0
 23fb832:	f7ff ffcf 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb836:	4605      	mov	r5, r0
  digitalWrite(slaveSelectPin, HIGH);
 23fb838:	2101      	movs	r1, #1
 23fb83a:	8860      	ldrh	r0, [r4, #2]
 23fb83c:	f002 fb75 	bl	23fdf2a <digitalWrite>
}
 23fb840:	4628      	mov	r0, r5
 23fb842:	bd38      	pop	{r3, r4, r5, pc}

023fb844 <_ZN7ADXL36212beginMeasureEv>:
void ADXL362::beginMeasure() {
 23fb844:	b510      	push	{r4, lr}
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23fb846:	212d      	movs	r1, #45	; 0x2d
void ADXL362::beginMeasure() {
 23fb848:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23fb84a:	f7ff ffe4 	bl	23fb816 <_ZN7ADXL36218SPIreadOneRegisterEh>
  temp = (temp & 0b11111100) | XL362_POWER_FLAG_MEASURE_RUNING;     // turn on measurement bit in Reg XL362_POWER_CTL
 23fb84e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  SPIwriteOneRegister(XL362_POWER_CTL, temp); // Write to XL362_POWER_CTL, Measurement Mode
 23fb852:	f040 0202 	orr.w	r2, r0, #2
 23fb856:	212d      	movs	r1, #45	; 0x2d
 23fb858:	4620      	mov	r0, r4
 23fb85a:	f7ff ffc5 	bl	23fb7e8 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23fb85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23fb862:	200a      	movs	r0, #10
 23fb864:	f000 bc80 	b.w	23fc168 <delay>

023fb868 <_ZN7ADXL3628setRangeEh>:
void ADXL362::setRange(uint8_t Range){
 23fb868:	b538      	push	{r3, r4, r5, lr}
 23fb86a:	460d      	mov	r5, r1
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23fb86c:	212c      	movs	r1, #44	; 0x2c
void ADXL362::setRange(uint8_t Range){
 23fb86e:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23fb870:	f7ff ffd1 	bl	23fb816 <_ZN7ADXL36218SPIreadOneRegisterEh>
  switch ( Range ) { // Range affects converting LSB to mg
 23fb874:	2d40      	cmp	r5, #64	; 0x40
 23fb876:	d00f      	beq.n	23fb898 <_ZN7ADXL3628setRangeEh+0x30>
 23fb878:	2d80      	cmp	r5, #128	; 0x80
 23fb87a:	d00f      	beq.n	23fb89c <_ZN7ADXL3628setRangeEh+0x34>
    mgperLSB = 1;
 23fb87c:	2301      	movs	r3, #1
  temp = (temp & 0b00111111) | Range;
 23fb87e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    mgperLSB = 4;
 23fb882:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_FILTER_CTL, temp); // Write to XL362_FILTER_CTL
 23fb884:	4620      	mov	r0, r4
 23fb886:	432a      	orrs	r2, r5
 23fb888:	212c      	movs	r1, #44	; 0x2c
 23fb88a:	f7ff ffad 	bl	23fb7e8 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23fb88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
 23fb892:	200a      	movs	r0, #10
 23fb894:	f000 bc68 	b.w	23fc168 <delay>
    mgperLSB = 2;
 23fb898:	2302      	movs	r3, #2
 23fb89a:	e7f0      	b.n	23fb87e <_ZN7ADXL3628setRangeEh+0x16>
    mgperLSB = 4;
 23fb89c:	2304      	movs	r3, #4
 23fb89e:	e7ee      	b.n	23fb87e <_ZN7ADXL3628setRangeEh+0x16>

023fb8a0 <_ZN7ADXL3629readXYZmgERiS0_S0_>:
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23fb8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb8a4:	4604      	mov	r4, r0
 23fb8a6:	468b      	mov	fp, r1
  digitalWrite(slaveSelectPin, LOW);
 23fb8a8:	8840      	ldrh	r0, [r0, #2]
 23fb8aa:	2100      	movs	r1, #0
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23fb8ac:	4691      	mov	r9, r2
 23fb8ae:	4698      	mov	r8, r3
  digitalWrite(slaveSelectPin, LOW);
 23fb8b0:	f002 fb3b 	bl	23fdf2a <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fb8b4:	200b      	movs	r0, #11
 23fb8b6:	f7ff ff8d 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(XL362_XDATA_L);  // Start at XData Reg
 23fb8ba:	200e      	movs	r0, #14
 23fb8bc:	f7ff ff8a 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  short XData = SPI.transfer(0x00);
 23fb8c0:	2000      	movs	r0, #0
 23fb8c2:	f7ff ff87 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb8c6:	4607      	mov	r7, r0
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fb8c8:	2000      	movs	r0, #0
 23fb8ca:	f7ff ff83 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb8ce:	9001      	str	r0, [sp, #4]
  short YData = SPI.transfer(0x00);
 23fb8d0:	2000      	movs	r0, #0
 23fb8d2:	f7ff ff7f 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb8d6:	4606      	mov	r6, r0
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fb8d8:	2000      	movs	r0, #0
 23fb8da:	f7ff ff7b 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb8de:	9000      	str	r0, [sp, #0]
  short ZData = SPI.transfer(0x00);
 23fb8e0:	2000      	movs	r0, #0
 23fb8e2:	f7ff ff77 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb8e6:	4605      	mov	r5, r0
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23fb8e8:	2000      	movs	r0, #0
 23fb8ea:	f7ff ff73 	bl	23fb7d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb8ee:	4682      	mov	sl, r0
  digitalWrite(slaveSelectPin, HIGH);
 23fb8f0:	2101      	movs	r1, #1
 23fb8f2:	8860      	ldrh	r0, [r4, #2]
 23fb8f4:	f002 fb19 	bl	23fdf2a <digitalWrite>
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fb8f8:	9a01      	ldr	r2, [sp, #4]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fb8fa:	9b00      	ldr	r3, [sp, #0]
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fb8fc:	eb07 2702 	add.w	r7, r7, r2, lsl #8
  X = (int)XData * mgperLSB;
 23fb900:	7822      	ldrb	r2, [r4, #0]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fb902:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  X = (int)XData * mgperLSB;
 23fb906:	fb12 f707 	smulbb	r7, r2, r7
 23fb90a:	f8cb 7000 	str.w	r7, [fp]
  Y = (int)YData * mgperLSB;
 23fb90e:	7823      	ldrb	r3, [r4, #0]
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23fb910:	eb05 250a 	add.w	r5, r5, sl, lsl #8
  Y = (int)YData * mgperLSB;
 23fb914:	fb13 f606 	smulbb	r6, r3, r6
 23fb918:	f8c9 6000 	str.w	r6, [r9]
  Z = (int)ZData * mgperLSB;
 23fb91c:	7822      	ldrb	r2, [r4, #0]
 23fb91e:	fb12 f505 	smulbb	r5, r2, r5
 23fb922:	f8c8 5000 	str.w	r5, [r8]
}
 23fb926:	b003      	add	sp, #12
 23fb928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb92c <_ZN7ADXL3625beginEv>:
void ADXL362::begin() {
 23fb92c:	b510      	push	{r4, lr}
  pinMode(slaveSelectPin, OUTPUT);
 23fb92e:	2101      	movs	r1, #1
void ADXL362::begin() {
 23fb930:	4604      	mov	r4, r0
  pinMode(slaveSelectPin, OUTPUT);
 23fb932:	8840      	ldrh	r0, [r0, #2]
 23fb934:	f002 fae8 	bl	23fdf08 <pinMode>
        instance().begin();
 23fb938:	f7ff ff32 	bl	23fb7a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb93c:	f002 f802 	bl	23fd944 <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
 23fb940:	f7ff ff2e 	bl	23fb7a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb944:	2100      	movs	r1, #0
 23fb946:	f002 f811 	bl	23fd96c <_ZN8SPIClass11setDataModeEh>
  delay(500);
 23fb94a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fb94e:	f000 fc0b 	bl	23fc168 <delay>
  mgperLSB = 1;
 23fb952:	2301      	movs	r3, #1
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fb954:	4620      	mov	r0, r4
  mgperLSB = 1;
 23fb956:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fb958:	2252      	movs	r2, #82	; 0x52
 23fb95a:	211f      	movs	r1, #31
 23fb95c:	f7ff ff44 	bl	23fb7e8 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
 }
 23fb960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23fb964:	200a      	movs	r0, #10
 23fb966:	f000 bbff 	b.w	23fc168 <delay>
	...

023fb96c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fb96c:	b509      	push	{r0, r3, lr}
 23fb96e:	4804      	ldr	r0, [pc, #16]	; (23fb980 <os_mutex_recursive_create+0x14>)
 23fb970:	6800      	ldr	r0, [r0, #0]
 23fb972:	4b04      	ldr	r3, [pc, #16]	; (23fb984 <os_mutex_recursive_create+0x18>)
 23fb974:	4403      	add	r3, r0
 23fb976:	681b      	ldr	r3, [r3, #0]
 23fb978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb97a:	9302      	str	r3, [sp, #8]
 23fb97c:	bd09      	pop	{r0, r3, pc}
 23fb97e:	0000      	.short	0x0000
 23fb980:	1007ada8 	.word	0x1007ada8
 23fb984:	00000030 	.word	0x00000030

023fb988 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fb988:	b509      	push	{r0, r3, lr}
 23fb98a:	4804      	ldr	r0, [pc, #16]	; (23fb99c <os_mutex_recursive_destroy+0x14>)
 23fb98c:	6800      	ldr	r0, [r0, #0]
 23fb98e:	4b04      	ldr	r3, [pc, #16]	; (23fb9a0 <os_mutex_recursive_destroy+0x18>)
 23fb990:	4403      	add	r3, r0
 23fb992:	681b      	ldr	r3, [r3, #0]
 23fb994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fb996:	9302      	str	r3, [sp, #8]
 23fb998:	bd09      	pop	{r0, r3, pc}
 23fb99a:	0000      	.short	0x0000
 23fb99c:	1007ada8 	.word	0x1007ada8
 23fb9a0:	00000030 	.word	0x00000030

023fb9a4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fb9a4:	b509      	push	{r0, r3, lr}
 23fb9a6:	4804      	ldr	r0, [pc, #16]	; (23fb9b8 <os_mutex_recursive_lock+0x14>)
 23fb9a8:	6800      	ldr	r0, [r0, #0]
 23fb9aa:	4b04      	ldr	r3, [pc, #16]	; (23fb9bc <os_mutex_recursive_lock+0x18>)
 23fb9ac:	4403      	add	r3, r0
 23fb9ae:	681b      	ldr	r3, [r3, #0]
 23fb9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb9b2:	9302      	str	r3, [sp, #8]
 23fb9b4:	bd09      	pop	{r0, r3, pc}
 23fb9b6:	0000      	.short	0x0000
 23fb9b8:	1007ada8 	.word	0x1007ada8
 23fb9bc:	00000030 	.word	0x00000030

023fb9c0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fb9c0:	b509      	push	{r0, r3, lr}
 23fb9c2:	4804      	ldr	r0, [pc, #16]	; (23fb9d4 <os_mutex_recursive_unlock+0x14>)
 23fb9c4:	6800      	ldr	r0, [r0, #0]
 23fb9c6:	4b04      	ldr	r3, [pc, #16]	; (23fb9d8 <os_mutex_recursive_unlock+0x18>)
 23fb9c8:	4403      	add	r3, r0
 23fb9ca:	681b      	ldr	r3, [r3, #0]
 23fb9cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb9ce:	9302      	str	r3, [sp, #8]
 23fb9d0:	bd09      	pop	{r0, r3, pc}
 23fb9d2:	0000      	.short	0x0000
 23fb9d4:	1007ada8 	.word	0x1007ada8
 23fb9d8:	00000030 	.word	0x00000030

023fb9dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fb9dc:	b509      	push	{r0, r3, lr}
 23fb9de:	4804      	ldr	r0, [pc, #16]	; (23fb9f0 <HAL_RNG_GetRandomNumber+0x14>)
 23fb9e0:	6800      	ldr	r0, [r0, #0]
 23fb9e2:	4b04      	ldr	r3, [pc, #16]	; (23fb9f4 <HAL_RNG_GetRandomNumber+0x18>)
 23fb9e4:	4403      	add	r3, r0
 23fb9e6:	681b      	ldr	r3, [r3, #0]
 23fb9e8:	685b      	ldr	r3, [r3, #4]
 23fb9ea:	9302      	str	r3, [sp, #8]
 23fb9ec:	bd09      	pop	{r0, r3, pc}
 23fb9ee:	0000      	.short	0x0000
 23fb9f0:	1007ada8 	.word	0x1007ada8
 23fb9f4:	00000000 	.word	0x00000000

023fb9f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fb9f8:	b509      	push	{r0, r3, lr}
 23fb9fa:	4804      	ldr	r0, [pc, #16]	; (23fba0c <HAL_Delay_Microseconds+0x14>)
 23fb9fc:	6800      	ldr	r0, [r0, #0]
 23fb9fe:	4b04      	ldr	r3, [pc, #16]	; (23fba10 <HAL_Delay_Microseconds+0x18>)
 23fba00:	4403      	add	r3, r0
 23fba02:	681b      	ldr	r3, [r3, #0]
 23fba04:	68db      	ldr	r3, [r3, #12]
 23fba06:	9302      	str	r3, [sp, #8]
 23fba08:	bd09      	pop	{r0, r3, pc}
 23fba0a:	0000      	.short	0x0000
 23fba0c:	1007ada8 	.word	0x1007ada8
 23fba10:	00000000 	.word	0x00000000

023fba14 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fba14:	b509      	push	{r0, r3, lr}
 23fba16:	4804      	ldr	r0, [pc, #16]	; (23fba28 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fba18:	6800      	ldr	r0, [r0, #0]
 23fba1a:	4b04      	ldr	r3, [pc, #16]	; (23fba2c <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fba1c:	4403      	add	r3, r0
 23fba1e:	681b      	ldr	r3, [r3, #0]
 23fba20:	695b      	ldr	r3, [r3, #20]
 23fba22:	9302      	str	r3, [sp, #8]
 23fba24:	bd09      	pop	{r0, r3, pc}
 23fba26:	0000      	.short	0x0000
 23fba28:	1007ada8 	.word	0x1007ada8
 23fba2c:	00000000 	.word	0x00000000

023fba30 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fba30:	b509      	push	{r0, r3, lr}
 23fba32:	4804      	ldr	r0, [pc, #16]	; (23fba44 <hal_gpio_mode+0x14>)
 23fba34:	6800      	ldr	r0, [r0, #0]
 23fba36:	4b04      	ldr	r3, [pc, #16]	; (23fba48 <hal_gpio_mode+0x18>)
 23fba38:	4403      	add	r3, r0
 23fba3a:	681b      	ldr	r3, [r3, #0]
 23fba3c:	689b      	ldr	r3, [r3, #8]
 23fba3e:	9302      	str	r3, [sp, #8]
 23fba40:	bd09      	pop	{r0, r3, pc}
 23fba42:	0000      	.short	0x0000
 23fba44:	1007ada8 	.word	0x1007ada8
 23fba48:	00000014 	.word	0x00000014

023fba4c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fba4c:	b509      	push	{r0, r3, lr}
 23fba4e:	4804      	ldr	r0, [pc, #16]	; (23fba60 <hal_gpio_get_mode+0x14>)
 23fba50:	6800      	ldr	r0, [r0, #0]
 23fba52:	4b04      	ldr	r3, [pc, #16]	; (23fba64 <hal_gpio_get_mode+0x18>)
 23fba54:	4403      	add	r3, r0
 23fba56:	681b      	ldr	r3, [r3, #0]
 23fba58:	68db      	ldr	r3, [r3, #12]
 23fba5a:	9302      	str	r3, [sp, #8]
 23fba5c:	bd09      	pop	{r0, r3, pc}
 23fba5e:	0000      	.short	0x0000
 23fba60:	1007ada8 	.word	0x1007ada8
 23fba64:	00000014 	.word	0x00000014

023fba68 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fba68:	b509      	push	{r0, r3, lr}
 23fba6a:	4804      	ldr	r0, [pc, #16]	; (23fba7c <hal_gpio_write+0x14>)
 23fba6c:	6800      	ldr	r0, [r0, #0]
 23fba6e:	4b04      	ldr	r3, [pc, #16]	; (23fba80 <hal_gpio_write+0x18>)
 23fba70:	4403      	add	r3, r0
 23fba72:	681b      	ldr	r3, [r3, #0]
 23fba74:	691b      	ldr	r3, [r3, #16]
 23fba76:	9302      	str	r3, [sp, #8]
 23fba78:	bd09      	pop	{r0, r3, pc}
 23fba7a:	0000      	.short	0x0000
 23fba7c:	1007ada8 	.word	0x1007ada8
 23fba80:	00000014 	.word	0x00000014

023fba84 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fba84:	b509      	push	{r0, r3, lr}
 23fba86:	4804      	ldr	r0, [pc, #16]	; (23fba98 <hal_i2c_write+0x14>)
 23fba88:	6800      	ldr	r0, [r0, #0]
 23fba8a:	4b04      	ldr	r3, [pc, #16]	; (23fba9c <hal_i2c_write+0x18>)
 23fba8c:	4403      	add	r3, r0
 23fba8e:	681b      	ldr	r3, [r3, #0]
 23fba90:	6a1b      	ldr	r3, [r3, #32]
 23fba92:	9302      	str	r3, [sp, #8]
 23fba94:	bd09      	pop	{r0, r3, pc}
 23fba96:	0000      	.short	0x0000
 23fba98:	1007ada8 	.word	0x1007ada8
 23fba9c:	00000010 	.word	0x00000010

023fbaa0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fbaa0:	b509      	push	{r0, r3, lr}
 23fbaa2:	4804      	ldr	r0, [pc, #16]	; (23fbab4 <hal_i2c_available+0x14>)
 23fbaa4:	6800      	ldr	r0, [r0, #0]
 23fbaa6:	4b04      	ldr	r3, [pc, #16]	; (23fbab8 <hal_i2c_available+0x18>)
 23fbaa8:	4403      	add	r3, r0
 23fbaaa:	681b      	ldr	r3, [r3, #0]
 23fbaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbaae:	9302      	str	r3, [sp, #8]
 23fbab0:	bd09      	pop	{r0, r3, pc}
 23fbab2:	0000      	.short	0x0000
 23fbab4:	1007ada8 	.word	0x1007ada8
 23fbab8:	00000010 	.word	0x00000010

023fbabc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fbabc:	b509      	push	{r0, r3, lr}
 23fbabe:	4804      	ldr	r0, [pc, #16]	; (23fbad0 <hal_i2c_read+0x14>)
 23fbac0:	6800      	ldr	r0, [r0, #0]
 23fbac2:	4b04      	ldr	r3, [pc, #16]	; (23fbad4 <hal_i2c_read+0x18>)
 23fbac4:	4403      	add	r3, r0
 23fbac6:	681b      	ldr	r3, [r3, #0]
 23fbac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbaca:	9302      	str	r3, [sp, #8]
 23fbacc:	bd09      	pop	{r0, r3, pc}
 23fbace:	0000      	.short	0x0000
 23fbad0:	1007ada8 	.word	0x1007ada8
 23fbad4:	00000010 	.word	0x00000010

023fbad8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fbad8:	b509      	push	{r0, r3, lr}
 23fbada:	4804      	ldr	r0, [pc, #16]	; (23fbaec <hal_i2c_peek+0x14>)
 23fbadc:	6800      	ldr	r0, [r0, #0]
 23fbade:	4b04      	ldr	r3, [pc, #16]	; (23fbaf0 <hal_i2c_peek+0x18>)
 23fbae0:	4403      	add	r3, r0
 23fbae2:	681b      	ldr	r3, [r3, #0]
 23fbae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbae6:	9302      	str	r3, [sp, #8]
 23fbae8:	bd09      	pop	{r0, r3, pc}
 23fbaea:	0000      	.short	0x0000
 23fbaec:	1007ada8 	.word	0x1007ada8
 23fbaf0:	00000010 	.word	0x00000010

023fbaf4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fbaf4:	b509      	push	{r0, r3, lr}
 23fbaf6:	4804      	ldr	r0, [pc, #16]	; (23fbb08 <hal_i2c_flush+0x14>)
 23fbaf8:	6800      	ldr	r0, [r0, #0]
 23fbafa:	4b04      	ldr	r3, [pc, #16]	; (23fbb0c <hal_i2c_flush+0x18>)
 23fbafc:	4403      	add	r3, r0
 23fbafe:	681b      	ldr	r3, [r3, #0]
 23fbb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbb02:	9302      	str	r3, [sp, #8]
 23fbb04:	bd09      	pop	{r0, r3, pc}
 23fbb06:	0000      	.short	0x0000
 23fbb08:	1007ada8 	.word	0x1007ada8
 23fbb0c:	00000010 	.word	0x00000010

023fbb10 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fbb10:	b509      	push	{r0, r3, lr}
 23fbb12:	4804      	ldr	r0, [pc, #16]	; (23fbb24 <hal_i2c_is_enabled+0x14>)
 23fbb14:	6800      	ldr	r0, [r0, #0]
 23fbb16:	4b04      	ldr	r3, [pc, #16]	; (23fbb28 <hal_i2c_is_enabled+0x18>)
 23fbb18:	4403      	add	r3, r0
 23fbb1a:	681b      	ldr	r3, [r3, #0]
 23fbb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbb1e:	9302      	str	r3, [sp, #8]
 23fbb20:	bd09      	pop	{r0, r3, pc}
 23fbb22:	0000      	.short	0x0000
 23fbb24:	1007ada8 	.word	0x1007ada8
 23fbb28:	00000010 	.word	0x00000010

023fbb2c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fbb2c:	b509      	push	{r0, r3, lr}
 23fbb2e:	4804      	ldr	r0, [pc, #16]	; (23fbb40 <hal_i2c_init+0x14>)
 23fbb30:	6800      	ldr	r0, [r0, #0]
 23fbb32:	4b04      	ldr	r3, [pc, #16]	; (23fbb44 <hal_i2c_init+0x18>)
 23fbb34:	4403      	add	r3, r0
 23fbb36:	681b      	ldr	r3, [r3, #0]
 23fbb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbb3a:	9302      	str	r3, [sp, #8]
 23fbb3c:	bd09      	pop	{r0, r3, pc}
 23fbb3e:	0000      	.short	0x0000
 23fbb40:	1007ada8 	.word	0x1007ada8
 23fbb44:	00000010 	.word	0x00000010

023fbb48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fbb48:	b509      	push	{r0, r3, lr}
 23fbb4a:	4804      	ldr	r0, [pc, #16]	; (23fbb5c <inet_inet_ntop+0x14>)
 23fbb4c:	6800      	ldr	r0, [r0, #0]
 23fbb4e:	4b04      	ldr	r3, [pc, #16]	; (23fbb60 <inet_inet_ntop+0x18>)
 23fbb50:	4403      	add	r3, r0
 23fbb52:	681b      	ldr	r3, [r3, #0]
 23fbb54:	695b      	ldr	r3, [r3, #20]
 23fbb56:	9302      	str	r3, [sp, #8]
 23fbb58:	bd09      	pop	{r0, r3, pc}
 23fbb5a:	0000      	.short	0x0000
 23fbb5c:	1007ada8 	.word	0x1007ada8
 23fbb60:	0000004c 	.word	0x0000004c

023fbb64 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fbb64:	b509      	push	{r0, r3, lr}
 23fbb66:	4804      	ldr	r0, [pc, #16]	; (23fbb78 <netdb_freeaddrinfo+0x14>)
 23fbb68:	6800      	ldr	r0, [r0, #0]
 23fbb6a:	4b04      	ldr	r3, [pc, #16]	; (23fbb7c <netdb_freeaddrinfo+0x18>)
 23fbb6c:	4403      	add	r3, r0
 23fbb6e:	681b      	ldr	r3, [r3, #0]
 23fbb70:	689b      	ldr	r3, [r3, #8]
 23fbb72:	9302      	str	r3, [sp, #8]
 23fbb74:	bd09      	pop	{r0, r3, pc}
 23fbb76:	0000      	.short	0x0000
 23fbb78:	1007ada8 	.word	0x1007ada8
 23fbb7c:	00000050 	.word	0x00000050

023fbb80 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fbb80:	b509      	push	{r0, r3, lr}
 23fbb82:	4804      	ldr	r0, [pc, #16]	; (23fbb94 <netdb_getaddrinfo+0x14>)
 23fbb84:	6800      	ldr	r0, [r0, #0]
 23fbb86:	4b04      	ldr	r3, [pc, #16]	; (23fbb98 <netdb_getaddrinfo+0x18>)
 23fbb88:	4403      	add	r3, r0
 23fbb8a:	681b      	ldr	r3, [r3, #0]
 23fbb8c:	68db      	ldr	r3, [r3, #12]
 23fbb8e:	9302      	str	r3, [sp, #8]
 23fbb90:	bd09      	pop	{r0, r3, pc}
 23fbb92:	0000      	.short	0x0000
 23fbb94:	1007ada8 	.word	0x1007ada8
 23fbb98:	00000050 	.word	0x00000050

023fbb9c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fbb9c:	b509      	push	{r0, r3, lr}
 23fbb9e:	4804      	ldr	r0, [pc, #16]	; (23fbbb0 <hal_spi_begin+0x14>)
 23fbba0:	6800      	ldr	r0, [r0, #0]
 23fbba2:	4b04      	ldr	r3, [pc, #16]	; (23fbbb4 <hal_spi_begin+0x18>)
 23fbba4:	4403      	add	r3, r0
 23fbba6:	681b      	ldr	r3, [r3, #0]
 23fbba8:	681b      	ldr	r3, [r3, #0]
 23fbbaa:	9302      	str	r3, [sp, #8]
 23fbbac:	bd09      	pop	{r0, r3, pc}
 23fbbae:	0000      	.short	0x0000
 23fbbb0:	1007ada8 	.word	0x1007ada8
 23fbbb4:	00000018 	.word	0x00000018

023fbbb8 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fbbb8:	b509      	push	{r0, r3, lr}
 23fbbba:	4804      	ldr	r0, [pc, #16]	; (23fbbcc <hal_spi_set_data_mode+0x14>)
 23fbbbc:	6800      	ldr	r0, [r0, #0]
 23fbbbe:	4b04      	ldr	r3, [pc, #16]	; (23fbbd0 <hal_spi_set_data_mode+0x18>)
 23fbbc0:	4403      	add	r3, r0
 23fbbc2:	681b      	ldr	r3, [r3, #0]
 23fbbc4:	68db      	ldr	r3, [r3, #12]
 23fbbc6:	9302      	str	r3, [sp, #8]
 23fbbc8:	bd09      	pop	{r0, r3, pc}
 23fbbca:	0000      	.short	0x0000
 23fbbcc:	1007ada8 	.word	0x1007ada8
 23fbbd0:	00000018 	.word	0x00000018

023fbbd4 <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fbbd4:	b509      	push	{r0, r3, lr}
 23fbbd6:	4804      	ldr	r0, [pc, #16]	; (23fbbe8 <hal_spi_transfer+0x14>)
 23fbbd8:	6800      	ldr	r0, [r0, #0]
 23fbbda:	4b04      	ldr	r3, [pc, #16]	; (23fbbec <hal_spi_transfer+0x18>)
 23fbbdc:	4403      	add	r3, r0
 23fbbde:	681b      	ldr	r3, [r3, #0]
 23fbbe0:	695b      	ldr	r3, [r3, #20]
 23fbbe2:	9302      	str	r3, [sp, #8]
 23fbbe4:	bd09      	pop	{r0, r3, pc}
 23fbbe6:	0000      	.short	0x0000
 23fbbe8:	1007ada8 	.word	0x1007ada8
 23fbbec:	00000018 	.word	0x00000018

023fbbf0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fbbf0:	b509      	push	{r0, r3, lr}
 23fbbf2:	4804      	ldr	r0, [pc, #16]	; (23fbc04 <hal_spi_init+0x14>)
 23fbbf4:	6800      	ldr	r0, [r0, #0]
 23fbbf6:	4b04      	ldr	r3, [pc, #16]	; (23fbc08 <hal_spi_init+0x18>)
 23fbbf8:	4403      	add	r3, r0
 23fbbfa:	681b      	ldr	r3, [r3, #0]
 23fbbfc:	69db      	ldr	r3, [r3, #28]
 23fbbfe:	9302      	str	r3, [sp, #8]
 23fbc00:	bd09      	pop	{r0, r3, pc}
 23fbc02:	0000      	.short	0x0000
 23fbc04:	1007ada8 	.word	0x1007ada8
 23fbc08:	00000018 	.word	0x00000018

023fbc0c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fbc0c:	b509      	push	{r0, r3, lr}
 23fbc0e:	4804      	ldr	r0, [pc, #16]	; (23fbc20 <hal_spi_is_enabled+0x14>)
 23fbc10:	6800      	ldr	r0, [r0, #0]
 23fbc12:	4b04      	ldr	r3, [pc, #16]	; (23fbc24 <hal_spi_is_enabled+0x18>)
 23fbc14:	4403      	add	r3, r0
 23fbc16:	681b      	ldr	r3, [r3, #0]
 23fbc18:	6a1b      	ldr	r3, [r3, #32]
 23fbc1a:	9302      	str	r3, [sp, #8]
 23fbc1c:	bd09      	pop	{r0, r3, pc}
 23fbc1e:	0000      	.short	0x0000
 23fbc20:	1007ada8 	.word	0x1007ada8
 23fbc24:	00000018 	.word	0x00000018

023fbc28 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fbc28:	b509      	push	{r0, r3, lr}
 23fbc2a:	4804      	ldr	r0, [pc, #16]	; (23fbc3c <hal_spi_acquire+0x14>)
 23fbc2c:	6800      	ldr	r0, [r0, #0]
 23fbc2e:	4b04      	ldr	r3, [pc, #16]	; (23fbc40 <hal_spi_acquire+0x18>)
 23fbc30:	4403      	add	r3, r0
 23fbc32:	681b      	ldr	r3, [r3, #0]
 23fbc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbc36:	9302      	str	r3, [sp, #8]
 23fbc38:	bd09      	pop	{r0, r3, pc}
 23fbc3a:	0000      	.short	0x0000
 23fbc3c:	1007ada8 	.word	0x1007ada8
 23fbc40:	00000018 	.word	0x00000018

023fbc44 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fbc44:	b509      	push	{r0, r3, lr}
 23fbc46:	4804      	ldr	r0, [pc, #16]	; (23fbc58 <hal_spi_release+0x14>)
 23fbc48:	6800      	ldr	r0, [r0, #0]
 23fbc4a:	4b04      	ldr	r3, [pc, #16]	; (23fbc5c <hal_spi_release+0x18>)
 23fbc4c:	4403      	add	r3, r0
 23fbc4e:	681b      	ldr	r3, [r3, #0]
 23fbc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbc52:	9302      	str	r3, [sp, #8]
 23fbc54:	bd09      	pop	{r0, r3, pc}
 23fbc56:	0000      	.short	0x0000
 23fbc58:	1007ada8 	.word	0x1007ada8
 23fbc5c:	00000018 	.word	0x00000018

023fbc60 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fbc60:	b509      	push	{r0, r3, lr}
 23fbc62:	4804      	ldr	r0, [pc, #16]	; (23fbc74 <hal_usart_end+0x14>)
 23fbc64:	6800      	ldr	r0, [r0, #0]
 23fbc66:	4b04      	ldr	r3, [pc, #16]	; (23fbc78 <hal_usart_end+0x18>)
 23fbc68:	4403      	add	r3, r0
 23fbc6a:	681b      	ldr	r3, [r3, #0]
 23fbc6c:	689b      	ldr	r3, [r3, #8]
 23fbc6e:	9302      	str	r3, [sp, #8]
 23fbc70:	bd09      	pop	{r0, r3, pc}
 23fbc72:	0000      	.short	0x0000
 23fbc74:	1007ada8 	.word	0x1007ada8
 23fbc78:	00000024 	.word	0x00000024

023fbc7c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fbc7c:	b509      	push	{r0, r3, lr}
 23fbc7e:	4804      	ldr	r0, [pc, #16]	; (23fbc90 <hal_usart_write+0x14>)
 23fbc80:	6800      	ldr	r0, [r0, #0]
 23fbc82:	4b04      	ldr	r3, [pc, #16]	; (23fbc94 <hal_usart_write+0x18>)
 23fbc84:	4403      	add	r3, r0
 23fbc86:	681b      	ldr	r3, [r3, #0]
 23fbc88:	68db      	ldr	r3, [r3, #12]
 23fbc8a:	9302      	str	r3, [sp, #8]
 23fbc8c:	bd09      	pop	{r0, r3, pc}
 23fbc8e:	0000      	.short	0x0000
 23fbc90:	1007ada8 	.word	0x1007ada8
 23fbc94:	00000024 	.word	0x00000024

023fbc98 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fbc98:	b509      	push	{r0, r3, lr}
 23fbc9a:	4804      	ldr	r0, [pc, #16]	; (23fbcac <hal_usart_available+0x14>)
 23fbc9c:	6800      	ldr	r0, [r0, #0]
 23fbc9e:	4b04      	ldr	r3, [pc, #16]	; (23fbcb0 <hal_usart_available+0x18>)
 23fbca0:	4403      	add	r3, r0
 23fbca2:	681b      	ldr	r3, [r3, #0]
 23fbca4:	691b      	ldr	r3, [r3, #16]
 23fbca6:	9302      	str	r3, [sp, #8]
 23fbca8:	bd09      	pop	{r0, r3, pc}
 23fbcaa:	0000      	.short	0x0000
 23fbcac:	1007ada8 	.word	0x1007ada8
 23fbcb0:	00000024 	.word	0x00000024

023fbcb4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fbcb4:	b509      	push	{r0, r3, lr}
 23fbcb6:	4804      	ldr	r0, [pc, #16]	; (23fbcc8 <hal_usart_read+0x14>)
 23fbcb8:	6800      	ldr	r0, [r0, #0]
 23fbcba:	4b04      	ldr	r3, [pc, #16]	; (23fbccc <hal_usart_read+0x18>)
 23fbcbc:	4403      	add	r3, r0
 23fbcbe:	681b      	ldr	r3, [r3, #0]
 23fbcc0:	695b      	ldr	r3, [r3, #20]
 23fbcc2:	9302      	str	r3, [sp, #8]
 23fbcc4:	bd09      	pop	{r0, r3, pc}
 23fbcc6:	0000      	.short	0x0000
 23fbcc8:	1007ada8 	.word	0x1007ada8
 23fbccc:	00000024 	.word	0x00000024

023fbcd0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fbcd0:	b509      	push	{r0, r3, lr}
 23fbcd2:	4804      	ldr	r0, [pc, #16]	; (23fbce4 <hal_usart_peek+0x14>)
 23fbcd4:	6800      	ldr	r0, [r0, #0]
 23fbcd6:	4b04      	ldr	r3, [pc, #16]	; (23fbce8 <hal_usart_peek+0x18>)
 23fbcd8:	4403      	add	r3, r0
 23fbcda:	681b      	ldr	r3, [r3, #0]
 23fbcdc:	699b      	ldr	r3, [r3, #24]
 23fbcde:	9302      	str	r3, [sp, #8]
 23fbce0:	bd09      	pop	{r0, r3, pc}
 23fbce2:	0000      	.short	0x0000
 23fbce4:	1007ada8 	.word	0x1007ada8
 23fbce8:	00000024 	.word	0x00000024

023fbcec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fbcec:	b509      	push	{r0, r3, lr}
 23fbcee:	4804      	ldr	r0, [pc, #16]	; (23fbd00 <hal_usart_flush+0x14>)
 23fbcf0:	6800      	ldr	r0, [r0, #0]
 23fbcf2:	4b04      	ldr	r3, [pc, #16]	; (23fbd04 <hal_usart_flush+0x18>)
 23fbcf4:	4403      	add	r3, r0
 23fbcf6:	681b      	ldr	r3, [r3, #0]
 23fbcf8:	69db      	ldr	r3, [r3, #28]
 23fbcfa:	9302      	str	r3, [sp, #8]
 23fbcfc:	bd09      	pop	{r0, r3, pc}
 23fbcfe:	0000      	.short	0x0000
 23fbd00:	1007ada8 	.word	0x1007ada8
 23fbd04:	00000024 	.word	0x00000024

023fbd08 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fbd08:	b509      	push	{r0, r3, lr}
 23fbd0a:	4804      	ldr	r0, [pc, #16]	; (23fbd1c <hal_usart_is_enabled+0x14>)
 23fbd0c:	6800      	ldr	r0, [r0, #0]
 23fbd0e:	4b04      	ldr	r3, [pc, #16]	; (23fbd20 <hal_usart_is_enabled+0x18>)
 23fbd10:	4403      	add	r3, r0
 23fbd12:	681b      	ldr	r3, [r3, #0]
 23fbd14:	6a1b      	ldr	r3, [r3, #32]
 23fbd16:	9302      	str	r3, [sp, #8]
 23fbd18:	bd09      	pop	{r0, r3, pc}
 23fbd1a:	0000      	.short	0x0000
 23fbd1c:	1007ada8 	.word	0x1007ada8
 23fbd20:	00000024 	.word	0x00000024

023fbd24 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fbd24:	b509      	push	{r0, r3, lr}
 23fbd26:	4804      	ldr	r0, [pc, #16]	; (23fbd38 <hal_usart_available_data_for_write+0x14>)
 23fbd28:	6800      	ldr	r0, [r0, #0]
 23fbd2a:	4b04      	ldr	r3, [pc, #16]	; (23fbd3c <hal_usart_available_data_for_write+0x18>)
 23fbd2c:	4403      	add	r3, r0
 23fbd2e:	681b      	ldr	r3, [r3, #0]
 23fbd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbd32:	9302      	str	r3, [sp, #8]
 23fbd34:	bd09      	pop	{r0, r3, pc}
 23fbd36:	0000      	.short	0x0000
 23fbd38:	1007ada8 	.word	0x1007ada8
 23fbd3c:	00000024 	.word	0x00000024

023fbd40 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fbd40:	b509      	push	{r0, r3, lr}
 23fbd42:	4804      	ldr	r0, [pc, #16]	; (23fbd54 <hal_usart_begin_config+0x14>)
 23fbd44:	6800      	ldr	r0, [r0, #0]
 23fbd46:	4b04      	ldr	r3, [pc, #16]	; (23fbd58 <hal_usart_begin_config+0x18>)
 23fbd48:	4403      	add	r3, r0
 23fbd4a:	681b      	ldr	r3, [r3, #0]
 23fbd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbd4e:	9302      	str	r3, [sp, #8]
 23fbd50:	bd09      	pop	{r0, r3, pc}
 23fbd52:	0000      	.short	0x0000
 23fbd54:	1007ada8 	.word	0x1007ada8
 23fbd58:	00000024 	.word	0x00000024

023fbd5c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fbd5c:	b509      	push	{r0, r3, lr}
 23fbd5e:	4804      	ldr	r0, [pc, #16]	; (23fbd70 <hal_usart_init_ex+0x14>)
 23fbd60:	6800      	ldr	r0, [r0, #0]
 23fbd62:	4b04      	ldr	r3, [pc, #16]	; (23fbd74 <hal_usart_init_ex+0x18>)
 23fbd64:	4403      	add	r3, r0
 23fbd66:	681b      	ldr	r3, [r3, #0]
 23fbd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbd6a:	9302      	str	r3, [sp, #8]
 23fbd6c:	bd09      	pop	{r0, r3, pc}
 23fbd6e:	0000      	.short	0x0000
 23fbd70:	1007ada8 	.word	0x1007ada8
 23fbd74:	00000024 	.word	0x00000024

023fbd78 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fbd78:	b509      	push	{r0, r3, lr}
 23fbd7a:	4804      	ldr	r0, [pc, #16]	; (23fbd8c <HAL_USB_USART_Init+0x14>)
 23fbd7c:	6800      	ldr	r0, [r0, #0]
 23fbd7e:	4b04      	ldr	r3, [pc, #16]	; (23fbd90 <HAL_USB_USART_Init+0x18>)
 23fbd80:	4403      	add	r3, r0
 23fbd82:	681b      	ldr	r3, [r3, #0]
 23fbd84:	681b      	ldr	r3, [r3, #0]
 23fbd86:	9302      	str	r3, [sp, #8]
 23fbd88:	bd09      	pop	{r0, r3, pc}
 23fbd8a:	0000      	.short	0x0000
 23fbd8c:	1007ada8 	.word	0x1007ada8
 23fbd90:	00000034 	.word	0x00000034

023fbd94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fbd94:	b509      	push	{r0, r3, lr}
 23fbd96:	4804      	ldr	r0, [pc, #16]	; (23fbda8 <HAL_USB_USART_Begin+0x14>)
 23fbd98:	6800      	ldr	r0, [r0, #0]
 23fbd9a:	4b04      	ldr	r3, [pc, #16]	; (23fbdac <HAL_USB_USART_Begin+0x18>)
 23fbd9c:	4403      	add	r3, r0
 23fbd9e:	681b      	ldr	r3, [r3, #0]
 23fbda0:	685b      	ldr	r3, [r3, #4]
 23fbda2:	9302      	str	r3, [sp, #8]
 23fbda4:	bd09      	pop	{r0, r3, pc}
 23fbda6:	0000      	.short	0x0000
 23fbda8:	1007ada8 	.word	0x1007ada8
 23fbdac:	00000034 	.word	0x00000034

023fbdb0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fbdb0:	b509      	push	{r0, r3, lr}
 23fbdb2:	4804      	ldr	r0, [pc, #16]	; (23fbdc4 <HAL_USB_USART_End+0x14>)
 23fbdb4:	6800      	ldr	r0, [r0, #0]
 23fbdb6:	4b04      	ldr	r3, [pc, #16]	; (23fbdc8 <HAL_USB_USART_End+0x18>)
 23fbdb8:	4403      	add	r3, r0
 23fbdba:	681b      	ldr	r3, [r3, #0]
 23fbdbc:	689b      	ldr	r3, [r3, #8]
 23fbdbe:	9302      	str	r3, [sp, #8]
 23fbdc0:	bd09      	pop	{r0, r3, pc}
 23fbdc2:	0000      	.short	0x0000
 23fbdc4:	1007ada8 	.word	0x1007ada8
 23fbdc8:	00000034 	.word	0x00000034

023fbdcc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fbdcc:	b509      	push	{r0, r3, lr}
 23fbdce:	4804      	ldr	r0, [pc, #16]	; (23fbde0 <HAL_USB_USART_Available_Data+0x14>)
 23fbdd0:	6800      	ldr	r0, [r0, #0]
 23fbdd2:	4b04      	ldr	r3, [pc, #16]	; (23fbde4 <HAL_USB_USART_Available_Data+0x18>)
 23fbdd4:	4403      	add	r3, r0
 23fbdd6:	681b      	ldr	r3, [r3, #0]
 23fbdd8:	691b      	ldr	r3, [r3, #16]
 23fbdda:	9302      	str	r3, [sp, #8]
 23fbddc:	bd09      	pop	{r0, r3, pc}
 23fbdde:	0000      	.short	0x0000
 23fbde0:	1007ada8 	.word	0x1007ada8
 23fbde4:	00000034 	.word	0x00000034

023fbde8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fbde8:	b509      	push	{r0, r3, lr}
 23fbdea:	4804      	ldr	r0, [pc, #16]	; (23fbdfc <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fbdec:	6800      	ldr	r0, [r0, #0]
 23fbdee:	4b04      	ldr	r3, [pc, #16]	; (23fbe00 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fbdf0:	4403      	add	r3, r0
 23fbdf2:	681b      	ldr	r3, [r3, #0]
 23fbdf4:	695b      	ldr	r3, [r3, #20]
 23fbdf6:	9302      	str	r3, [sp, #8]
 23fbdf8:	bd09      	pop	{r0, r3, pc}
 23fbdfa:	0000      	.short	0x0000
 23fbdfc:	1007ada8 	.word	0x1007ada8
 23fbe00:	00000034 	.word	0x00000034

023fbe04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbe04:	b509      	push	{r0, r3, lr}
 23fbe06:	4804      	ldr	r0, [pc, #16]	; (23fbe18 <HAL_USB_USART_Receive_Data+0x14>)
 23fbe08:	6800      	ldr	r0, [r0, #0]
 23fbe0a:	4b04      	ldr	r3, [pc, #16]	; (23fbe1c <HAL_USB_USART_Receive_Data+0x18>)
 23fbe0c:	4403      	add	r3, r0
 23fbe0e:	681b      	ldr	r3, [r3, #0]
 23fbe10:	699b      	ldr	r3, [r3, #24]
 23fbe12:	9302      	str	r3, [sp, #8]
 23fbe14:	bd09      	pop	{r0, r3, pc}
 23fbe16:	0000      	.short	0x0000
 23fbe18:	1007ada8 	.word	0x1007ada8
 23fbe1c:	00000034 	.word	0x00000034

023fbe20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbe20:	b509      	push	{r0, r3, lr}
 23fbe22:	4804      	ldr	r0, [pc, #16]	; (23fbe34 <HAL_USB_USART_Send_Data+0x14>)
 23fbe24:	6800      	ldr	r0, [r0, #0]
 23fbe26:	4b04      	ldr	r3, [pc, #16]	; (23fbe38 <HAL_USB_USART_Send_Data+0x18>)
 23fbe28:	4403      	add	r3, r0
 23fbe2a:	681b      	ldr	r3, [r3, #0]
 23fbe2c:	69db      	ldr	r3, [r3, #28]
 23fbe2e:	9302      	str	r3, [sp, #8]
 23fbe30:	bd09      	pop	{r0, r3, pc}
 23fbe32:	0000      	.short	0x0000
 23fbe34:	1007ada8 	.word	0x1007ada8
 23fbe38:	00000034 	.word	0x00000034

023fbe3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fbe3c:	b509      	push	{r0, r3, lr}
 23fbe3e:	4804      	ldr	r0, [pc, #16]	; (23fbe50 <HAL_USB_USART_Flush_Data+0x14>)
 23fbe40:	6800      	ldr	r0, [r0, #0]
 23fbe42:	4b04      	ldr	r3, [pc, #16]	; (23fbe54 <HAL_USB_USART_Flush_Data+0x18>)
 23fbe44:	4403      	add	r3, r0
 23fbe46:	681b      	ldr	r3, [r3, #0]
 23fbe48:	6a1b      	ldr	r3, [r3, #32]
 23fbe4a:	9302      	str	r3, [sp, #8]
 23fbe4c:	bd09      	pop	{r0, r3, pc}
 23fbe4e:	0000      	.short	0x0000
 23fbe50:	1007ada8 	.word	0x1007ada8
 23fbe54:	00000034 	.word	0x00000034

023fbe58 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fbe58:	b509      	push	{r0, r3, lr}
 23fbe5a:	4804      	ldr	r0, [pc, #16]	; (23fbe6c <panic_+0x14>)
 23fbe5c:	6800      	ldr	r0, [r0, #0]
 23fbe5e:	4b04      	ldr	r3, [pc, #16]	; (23fbe70 <panic_+0x18>)
 23fbe60:	4403      	add	r3, r0
 23fbe62:	681b      	ldr	r3, [r3, #0]
 23fbe64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbe66:	9302      	str	r3, [sp, #8]
 23fbe68:	bd09      	pop	{r0, r3, pc}
 23fbe6a:	0000      	.short	0x0000
 23fbe6c:	1007ada8 	.word	0x1007ada8
 23fbe70:	00000048 	.word	0x00000048

023fbe74 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fbe74:	b509      	push	{r0, r3, lr}
 23fbe76:	4804      	ldr	r0, [pc, #16]	; (23fbe88 <log_level_name+0x14>)
 23fbe78:	6800      	ldr	r0, [r0, #0]
 23fbe7a:	4b04      	ldr	r3, [pc, #16]	; (23fbe8c <log_level_name+0x18>)
 23fbe7c:	4403      	add	r3, r0
 23fbe7e:	681b      	ldr	r3, [r3, #0]
 23fbe80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fbe82:	9302      	str	r3, [sp, #8]
 23fbe84:	bd09      	pop	{r0, r3, pc}
 23fbe86:	0000      	.short	0x0000
 23fbe88:	1007ada8 	.word	0x1007ada8
 23fbe8c:	00000048 	.word	0x00000048

023fbe90 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fbe90:	b509      	push	{r0, r3, lr}
 23fbe92:	4804      	ldr	r0, [pc, #16]	; (23fbea4 <log_set_callbacks+0x14>)
 23fbe94:	6800      	ldr	r0, [r0, #0]
 23fbe96:	4b04      	ldr	r3, [pc, #16]	; (23fbea8 <log_set_callbacks+0x18>)
 23fbe98:	4403      	add	r3, r0
 23fbe9a:	681b      	ldr	r3, [r3, #0]
 23fbe9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fbe9e:	9302      	str	r3, [sp, #8]
 23fbea0:	bd09      	pop	{r0, r3, pc}
 23fbea2:	0000      	.short	0x0000
 23fbea4:	1007ada8 	.word	0x1007ada8
 23fbea8:	00000048 	.word	0x00000048

023fbeac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fbeac:	b509      	push	{r0, r3, lr}
 23fbeae:	4804      	ldr	r0, [pc, #16]	; (23fbec0 <set_system_mode+0x14>)
 23fbeb0:	6800      	ldr	r0, [r0, #0]
 23fbeb2:	4b04      	ldr	r3, [pc, #16]	; (23fbec4 <set_system_mode+0x18>)
 23fbeb4:	4403      	add	r3, r0
 23fbeb6:	681b      	ldr	r3, [r3, #0]
 23fbeb8:	685b      	ldr	r3, [r3, #4]
 23fbeba:	9302      	str	r3, [sp, #8]
 23fbebc:	bd09      	pop	{r0, r3, pc}
 23fbebe:	0000      	.short	0x0000
 23fbec0:	1007ada8 	.word	0x1007ada8
 23fbec4:	00000008 	.word	0x00000008

023fbec8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fbec8:	b509      	push	{r0, r3, lr}
 23fbeca:	4804      	ldr	r0, [pc, #16]	; (23fbedc <system_delay_ms+0x14>)
 23fbecc:	6800      	ldr	r0, [r0, #0]
 23fbece:	4b04      	ldr	r3, [pc, #16]	; (23fbee0 <system_delay_ms+0x18>)
 23fbed0:	4403      	add	r3, r0
 23fbed2:	681b      	ldr	r3, [r3, #0]
 23fbed4:	695b      	ldr	r3, [r3, #20]
 23fbed6:	9302      	str	r3, [sp, #8]
 23fbed8:	bd09      	pop	{r0, r3, pc}
 23fbeda:	0000      	.short	0x0000
 23fbedc:	1007ada8 	.word	0x1007ada8
 23fbee0:	00000008 	.word	0x00000008

023fbee4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fbee4:	b509      	push	{r0, r3, lr}
 23fbee6:	4804      	ldr	r0, [pc, #16]	; (23fbef8 <system_thread_set_state+0x14>)
 23fbee8:	6800      	ldr	r0, [r0, #0]
 23fbeea:	4b04      	ldr	r3, [pc, #16]	; (23fbefc <system_thread_set_state+0x18>)
 23fbeec:	4403      	add	r3, r0
 23fbeee:	681b      	ldr	r3, [r3, #0]
 23fbef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbef2:	9302      	str	r3, [sp, #8]
 23fbef4:	bd09      	pop	{r0, r3, pc}
 23fbef6:	0000      	.short	0x0000
 23fbef8:	1007ada8 	.word	0x1007ada8
 23fbefc:	00000008 	.word	0x00000008

023fbf00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fbf00:	b509      	push	{r0, r3, lr}
 23fbf02:	4804      	ldr	r0, [pc, #16]	; (23fbf14 <system_ctrl_set_app_request_handler+0x14>)
 23fbf04:	6800      	ldr	r0, [r0, #0]
 23fbf06:	4b04      	ldr	r3, [pc, #16]	; (23fbf18 <system_ctrl_set_app_request_handler+0x18>)
 23fbf08:	4403      	add	r3, r0
 23fbf0a:	681b      	ldr	r3, [r3, #0]
 23fbf0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fbf10:	9302      	str	r3, [sp, #8]
 23fbf12:	bd09      	pop	{r0, r3, pc}
 23fbf14:	1007ada8 	.word	0x1007ada8
 23fbf18:	00000008 	.word	0x00000008

023fbf1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fbf1c:	b509      	push	{r0, r3, lr}
 23fbf1e:	4804      	ldr	r0, [pc, #16]	; (23fbf30 <system_ctrl_set_result+0x14>)
 23fbf20:	6800      	ldr	r0, [r0, #0]
 23fbf22:	4b04      	ldr	r3, [pc, #16]	; (23fbf34 <system_ctrl_set_result+0x18>)
 23fbf24:	4403      	add	r3, r0
 23fbf26:	681b      	ldr	r3, [r3, #0]
 23fbf28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fbf2c:	9302      	str	r3, [sp, #8]
 23fbf2e:	bd09      	pop	{r0, r3, pc}
 23fbf30:	1007ada8 	.word	0x1007ada8
 23fbf34:	00000008 	.word	0x00000008

023fbf38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fbf38:	b509      	push	{r0, r3, lr}
 23fbf3a:	4804      	ldr	r0, [pc, #16]	; (23fbf4c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fbf3c:	6800      	ldr	r0, [r0, #0]
 23fbf3e:	4b04      	ldr	r3, [pc, #16]	; (23fbf50 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fbf40:	4403      	add	r3, r0
 23fbf42:	681b      	ldr	r3, [r3, #0]
 23fbf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbf46:	9302      	str	r3, [sp, #8]
 23fbf48:	bd09      	pop	{r0, r3, pc}
 23fbf4a:	0000      	.short	0x0000
 23fbf4c:	1007ada8 	.word	0x1007ada8
 23fbf50:	0000002c 	.word	0x0000002c

023fbf54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbf54:	b509      	push	{r0, r3, lr}
 23fbf56:	4804      	ldr	r0, [pc, #16]	; (23fbf68 <network_connect+0x14>)
 23fbf58:	6800      	ldr	r0, [r0, #0]
 23fbf5a:	4b04      	ldr	r3, [pc, #16]	; (23fbf6c <network_connect+0x18>)
 23fbf5c:	4403      	add	r3, r0
 23fbf5e:	681b      	ldr	r3, [r3, #0]
 23fbf60:	685b      	ldr	r3, [r3, #4]
 23fbf62:	9302      	str	r3, [sp, #8]
 23fbf64:	bd09      	pop	{r0, r3, pc}
 23fbf66:	0000      	.short	0x0000
 23fbf68:	1007ada8 	.word	0x1007ada8
 23fbf6c:	00000028 	.word	0x00000028

023fbf70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fbf70:	b509      	push	{r0, r3, lr}
 23fbf72:	4804      	ldr	r0, [pc, #16]	; (23fbf84 <network_connecting+0x14>)
 23fbf74:	6800      	ldr	r0, [r0, #0]
 23fbf76:	4b04      	ldr	r3, [pc, #16]	; (23fbf88 <network_connecting+0x18>)
 23fbf78:	4403      	add	r3, r0
 23fbf7a:	681b      	ldr	r3, [r3, #0]
 23fbf7c:	689b      	ldr	r3, [r3, #8]
 23fbf7e:	9302      	str	r3, [sp, #8]
 23fbf80:	bd09      	pop	{r0, r3, pc}
 23fbf82:	0000      	.short	0x0000
 23fbf84:	1007ada8 	.word	0x1007ada8
 23fbf88:	00000028 	.word	0x00000028

023fbf8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fbf8c:	b509      	push	{r0, r3, lr}
 23fbf8e:	4804      	ldr	r0, [pc, #16]	; (23fbfa0 <network_disconnect+0x14>)
 23fbf90:	6800      	ldr	r0, [r0, #0]
 23fbf92:	4b04      	ldr	r3, [pc, #16]	; (23fbfa4 <network_disconnect+0x18>)
 23fbf94:	4403      	add	r3, r0
 23fbf96:	681b      	ldr	r3, [r3, #0]
 23fbf98:	68db      	ldr	r3, [r3, #12]
 23fbf9a:	9302      	str	r3, [sp, #8]
 23fbf9c:	bd09      	pop	{r0, r3, pc}
 23fbf9e:	0000      	.short	0x0000
 23fbfa0:	1007ada8 	.word	0x1007ada8
 23fbfa4:	00000028 	.word	0x00000028

023fbfa8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fbfa8:	b509      	push	{r0, r3, lr}
 23fbfaa:	4804      	ldr	r0, [pc, #16]	; (23fbfbc <network_ready+0x14>)
 23fbfac:	6800      	ldr	r0, [r0, #0]
 23fbfae:	4b04      	ldr	r3, [pc, #16]	; (23fbfc0 <network_ready+0x18>)
 23fbfb0:	4403      	add	r3, r0
 23fbfb2:	681b      	ldr	r3, [r3, #0]
 23fbfb4:	691b      	ldr	r3, [r3, #16]
 23fbfb6:	9302      	str	r3, [sp, #8]
 23fbfb8:	bd09      	pop	{r0, r3, pc}
 23fbfba:	0000      	.short	0x0000
 23fbfbc:	1007ada8 	.word	0x1007ada8
 23fbfc0:	00000028 	.word	0x00000028

023fbfc4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbfc4:	b509      	push	{r0, r3, lr}
 23fbfc6:	4804      	ldr	r0, [pc, #16]	; (23fbfd8 <network_on+0x14>)
 23fbfc8:	6800      	ldr	r0, [r0, #0]
 23fbfca:	4b04      	ldr	r3, [pc, #16]	; (23fbfdc <network_on+0x18>)
 23fbfcc:	4403      	add	r3, r0
 23fbfce:	681b      	ldr	r3, [r3, #0]
 23fbfd0:	695b      	ldr	r3, [r3, #20]
 23fbfd2:	9302      	str	r3, [sp, #8]
 23fbfd4:	bd09      	pop	{r0, r3, pc}
 23fbfd6:	0000      	.short	0x0000
 23fbfd8:	1007ada8 	.word	0x1007ada8
 23fbfdc:	00000028 	.word	0x00000028

023fbfe0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbfe0:	b509      	push	{r0, r3, lr}
 23fbfe2:	4804      	ldr	r0, [pc, #16]	; (23fbff4 <network_off+0x14>)
 23fbfe4:	6800      	ldr	r0, [r0, #0]
 23fbfe6:	4b04      	ldr	r3, [pc, #16]	; (23fbff8 <network_off+0x18>)
 23fbfe8:	4403      	add	r3, r0
 23fbfea:	681b      	ldr	r3, [r3, #0]
 23fbfec:	699b      	ldr	r3, [r3, #24]
 23fbfee:	9302      	str	r3, [sp, #8]
 23fbff0:	bd09      	pop	{r0, r3, pc}
 23fbff2:	0000      	.short	0x0000
 23fbff4:	1007ada8 	.word	0x1007ada8
 23fbff8:	00000028 	.word	0x00000028

023fbffc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fbffc:	b509      	push	{r0, r3, lr}
 23fbffe:	4804      	ldr	r0, [pc, #16]	; (23fc010 <network_listen+0x14>)
 23fc000:	6800      	ldr	r0, [r0, #0]
 23fc002:	4b04      	ldr	r3, [pc, #16]	; (23fc014 <network_listen+0x18>)
 23fc004:	4403      	add	r3, r0
 23fc006:	681b      	ldr	r3, [r3, #0]
 23fc008:	69db      	ldr	r3, [r3, #28]
 23fc00a:	9302      	str	r3, [sp, #8]
 23fc00c:	bd09      	pop	{r0, r3, pc}
 23fc00e:	0000      	.short	0x0000
 23fc010:	1007ada8 	.word	0x1007ada8
 23fc014:	00000028 	.word	0x00000028

023fc018 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc018:	b509      	push	{r0, r3, lr}
 23fc01a:	4804      	ldr	r0, [pc, #16]	; (23fc02c <network_listening+0x14>)
 23fc01c:	6800      	ldr	r0, [r0, #0]
 23fc01e:	4b04      	ldr	r3, [pc, #16]	; (23fc030 <network_listening+0x18>)
 23fc020:	4403      	add	r3, r0
 23fc022:	681b      	ldr	r3, [r3, #0]
 23fc024:	6a1b      	ldr	r3, [r3, #32]
 23fc026:	9302      	str	r3, [sp, #8]
 23fc028:	bd09      	pop	{r0, r3, pc}
 23fc02a:	0000      	.short	0x0000
 23fc02c:	1007ada8 	.word	0x1007ada8
 23fc030:	00000028 	.word	0x00000028

023fc034 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc034:	b509      	push	{r0, r3, lr}
 23fc036:	4804      	ldr	r0, [pc, #16]	; (23fc048 <network_set_listen_timeout+0x14>)
 23fc038:	6800      	ldr	r0, [r0, #0]
 23fc03a:	4b04      	ldr	r3, [pc, #16]	; (23fc04c <network_set_listen_timeout+0x18>)
 23fc03c:	4403      	add	r3, r0
 23fc03e:	681b      	ldr	r3, [r3, #0]
 23fc040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc042:	9302      	str	r3, [sp, #8]
 23fc044:	bd09      	pop	{r0, r3, pc}
 23fc046:	0000      	.short	0x0000
 23fc048:	1007ada8 	.word	0x1007ada8
 23fc04c:	00000028 	.word	0x00000028

023fc050 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc050:	b509      	push	{r0, r3, lr}
 23fc052:	4804      	ldr	r0, [pc, #16]	; (23fc064 <network_get_listen_timeout+0x14>)
 23fc054:	6800      	ldr	r0, [r0, #0]
 23fc056:	4b04      	ldr	r3, [pc, #16]	; (23fc068 <network_get_listen_timeout+0x18>)
 23fc058:	4403      	add	r3, r0
 23fc05a:	681b      	ldr	r3, [r3, #0]
 23fc05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc05e:	9302      	str	r3, [sp, #8]
 23fc060:	bd09      	pop	{r0, r3, pc}
 23fc062:	0000      	.short	0x0000
 23fc064:	1007ada8 	.word	0x1007ada8
 23fc068:	00000028 	.word	0x00000028

023fc06c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc06c:	b509      	push	{r0, r3, lr}
 23fc06e:	4804      	ldr	r0, [pc, #16]	; (23fc080 <network_is_on+0x14>)
 23fc070:	6800      	ldr	r0, [r0, #0]
 23fc072:	4b04      	ldr	r3, [pc, #16]	; (23fc084 <network_is_on+0x18>)
 23fc074:	4403      	add	r3, r0
 23fc076:	681b      	ldr	r3, [r3, #0]
 23fc078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc07a:	9302      	str	r3, [sp, #8]
 23fc07c:	bd09      	pop	{r0, r3, pc}
 23fc07e:	0000      	.short	0x0000
 23fc080:	1007ada8 	.word	0x1007ada8
 23fc084:	00000028 	.word	0x00000028

023fc088 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc088:	b509      	push	{r0, r3, lr}
 23fc08a:	4804      	ldr	r0, [pc, #16]	; (23fc09c <network_is_off+0x14>)
 23fc08c:	6800      	ldr	r0, [r0, #0]
 23fc08e:	4b04      	ldr	r3, [pc, #16]	; (23fc0a0 <network_is_off+0x18>)
 23fc090:	4403      	add	r3, r0
 23fc092:	681b      	ldr	r3, [r3, #0]
 23fc094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc096:	9302      	str	r3, [sp, #8]
 23fc098:	bd09      	pop	{r0, r3, pc}
 23fc09a:	0000      	.short	0x0000
 23fc09c:	1007ada8 	.word	0x1007ada8
 23fc0a0:	00000028 	.word	0x00000028

023fc0a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc0a4:	b509      	push	{r0, r3, lr}
 23fc0a6:	4804      	ldr	r0, [pc, #16]	; (23fc0b8 <malloc+0x14>)
 23fc0a8:	6800      	ldr	r0, [r0, #0]
 23fc0aa:	4b04      	ldr	r3, [pc, #16]	; (23fc0bc <malloc+0x18>)
 23fc0ac:	4403      	add	r3, r0
 23fc0ae:	681b      	ldr	r3, [r3, #0]
 23fc0b0:	681b      	ldr	r3, [r3, #0]
 23fc0b2:	9302      	str	r3, [sp, #8]
 23fc0b4:	bd09      	pop	{r0, r3, pc}
 23fc0b6:	0000      	.short	0x0000
 23fc0b8:	1007ada8 	.word	0x1007ada8
 23fc0bc:	00000004 	.word	0x00000004

023fc0c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc0c0:	b509      	push	{r0, r3, lr}
 23fc0c2:	4804      	ldr	r0, [pc, #16]	; (23fc0d4 <free+0x14>)
 23fc0c4:	6800      	ldr	r0, [r0, #0]
 23fc0c6:	4b04      	ldr	r3, [pc, #16]	; (23fc0d8 <free+0x18>)
 23fc0c8:	4403      	add	r3, r0
 23fc0ca:	681b      	ldr	r3, [r3, #0]
 23fc0cc:	685b      	ldr	r3, [r3, #4]
 23fc0ce:	9302      	str	r3, [sp, #8]
 23fc0d0:	bd09      	pop	{r0, r3, pc}
 23fc0d2:	0000      	.short	0x0000
 23fc0d4:	1007ada8 	.word	0x1007ada8
 23fc0d8:	00000004 	.word	0x00000004

023fc0dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc0dc:	b509      	push	{r0, r3, lr}
 23fc0de:	4804      	ldr	r0, [pc, #16]	; (23fc0f0 <realloc+0x14>)
 23fc0e0:	6800      	ldr	r0, [r0, #0]
 23fc0e2:	4b04      	ldr	r3, [pc, #16]	; (23fc0f4 <realloc+0x18>)
 23fc0e4:	4403      	add	r3, r0
 23fc0e6:	681b      	ldr	r3, [r3, #0]
 23fc0e8:	689b      	ldr	r3, [r3, #8]
 23fc0ea:	9302      	str	r3, [sp, #8]
 23fc0ec:	bd09      	pop	{r0, r3, pc}
 23fc0ee:	0000      	.short	0x0000
 23fc0f0:	1007ada8 	.word	0x1007ada8
 23fc0f4:	00000004 	.word	0x00000004

023fc0f8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc0f8:	b509      	push	{r0, r3, lr}
 23fc0fa:	4804      	ldr	r0, [pc, #16]	; (23fc10c <vsnprintf+0x14>)
 23fc0fc:	6800      	ldr	r0, [r0, #0]
 23fc0fe:	4b04      	ldr	r3, [pc, #16]	; (23fc110 <vsnprintf+0x18>)
 23fc100:	4403      	add	r3, r0
 23fc102:	681b      	ldr	r3, [r3, #0]
 23fc104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc106:	9302      	str	r3, [sp, #8]
 23fc108:	bd09      	pop	{r0, r3, pc}
 23fc10a:	0000      	.short	0x0000
 23fc10c:	1007ada8 	.word	0x1007ada8
 23fc110:	00000004 	.word	0x00000004

023fc114 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fc114:	b509      	push	{r0, r3, lr}
 23fc116:	4804      	ldr	r0, [pc, #16]	; (23fc128 <__errno+0x14>)
 23fc118:	6800      	ldr	r0, [r0, #0]
 23fc11a:	4b04      	ldr	r3, [pc, #16]	; (23fc12c <__errno+0x18>)
 23fc11c:	4403      	add	r3, r0
 23fc11e:	681b      	ldr	r3, [r3, #0]
 23fc120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc122:	9302      	str	r3, [sp, #8]
 23fc124:	bd09      	pop	{r0, r3, pc}
 23fc126:	0000      	.short	0x0000
 23fc128:	1007ada8 	.word	0x1007ada8
 23fc12c:	00000004 	.word	0x00000004

023fc130 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc130:	b509      	push	{r0, r3, lr}
 23fc132:	4804      	ldr	r0, [pc, #16]	; (23fc144 <__assert_func+0x14>)
 23fc134:	6800      	ldr	r0, [r0, #0]
 23fc136:	4b04      	ldr	r3, [pc, #16]	; (23fc148 <__assert_func+0x18>)
 23fc138:	4403      	add	r3, r0
 23fc13a:	681b      	ldr	r3, [r3, #0]
 23fc13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc13e:	9302      	str	r3, [sp, #8]
 23fc140:	bd09      	pop	{r0, r3, pc}
 23fc142:	0000      	.short	0x0000
 23fc144:	1007ada8 	.word	0x1007ada8
 23fc148:	00000004 	.word	0x00000004

023fc14c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc14c:	b509      	push	{r0, r3, lr}
 23fc14e:	4804      	ldr	r0, [pc, #16]	; (23fc160 <newlib_impure_ptr_callback+0x14>)
 23fc150:	6800      	ldr	r0, [r0, #0]
 23fc152:	4b04      	ldr	r3, [pc, #16]	; (23fc164 <newlib_impure_ptr_callback+0x18>)
 23fc154:	4403      	add	r3, r0
 23fc156:	681b      	ldr	r3, [r3, #0]
 23fc158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc15a:	9302      	str	r3, [sp, #8]
 23fc15c:	bd09      	pop	{r0, r3, pc}
 23fc15e:	0000      	.short	0x0000
 23fc160:	1007ada8 	.word	0x1007ada8
 23fc164:	00000004 	.word	0x00000004

023fc168 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fc168:	2100      	movs	r1, #0
 23fc16a:	f7ff bead 	b.w	23fbec8 <system_delay_ms>

023fc16e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fc16e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fc170:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fc172:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fc174:	b17c      	cbz	r4, 23fc196 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fc176:	6863      	ldr	r3, [r4, #4]
 23fc178:	3b01      	subs	r3, #1
 23fc17a:	6063      	str	r3, [r4, #4]
 23fc17c:	b95b      	cbnz	r3, 23fc196 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fc17e:	6823      	ldr	r3, [r4, #0]
 23fc180:	4620      	mov	r0, r4
 23fc182:	689b      	ldr	r3, [r3, #8]
 23fc184:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc186:	68a3      	ldr	r3, [r4, #8]
 23fc188:	3b01      	subs	r3, #1
 23fc18a:	60a3      	str	r3, [r4, #8]
 23fc18c:	b91b      	cbnz	r3, 23fc196 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fc18e:	6823      	ldr	r3, [r4, #0]
 23fc190:	4620      	mov	r0, r4
 23fc192:	68db      	ldr	r3, [r3, #12]
 23fc194:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fc196:	4628      	mov	r0, r5
 23fc198:	bd38      	pop	{r3, r4, r5, pc}

023fc19a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fc19a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc19c:	6843      	ldr	r3, [r0, #4]
    {
 23fc19e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc1a0:	3b01      	subs	r3, #1
 23fc1a2:	6043      	str	r3, [r0, #4]
 23fc1a4:	b963      	cbnz	r3, 23fc1c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fc1a6:	6803      	ldr	r3, [r0, #0]
 23fc1a8:	689b      	ldr	r3, [r3, #8]
 23fc1aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc1ac:	68a3      	ldr	r3, [r4, #8]
 23fc1ae:	3b01      	subs	r3, #1
 23fc1b0:	60a3      	str	r3, [r4, #8]
 23fc1b2:	b92b      	cbnz	r3, 23fc1c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc1b4:	6823      	ldr	r3, [r4, #0]
 23fc1b6:	4620      	mov	r0, r4
    }
 23fc1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc1bc:	68db      	ldr	r3, [r3, #12]
 23fc1be:	4718      	bx	r3
    }
 23fc1c0:	bd10      	pop	{r4, pc}

023fc1c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc1c2:	b570      	push	{r4, r5, r6, lr}
 23fc1c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc1c6:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc1ca:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fc1ce:	42ae      	cmp	r6, r5
 23fc1d0:	d004      	beq.n	23fc1dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fc1d2:	4628      	mov	r0, r5
 23fc1d4:	f001 fbe4 	bl	23fd9a0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fc1d8:	3510      	adds	r5, #16
 23fc1da:	e7f8      	b.n	23fc1ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc1dc:	6820      	ldr	r0, [r4, #0]
 23fc1de:	f7ff ff6f 	bl	23fc0c0 <free>
    AllocatorT::free(data_);
}
 23fc1e2:	4620      	mov	r0, r4
 23fc1e4:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc1e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fc1e8:	2300      	movs	r3, #0
 23fc1ea:	4802      	ldr	r0, [pc, #8]	; (23fc1f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fc1ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fc1ee:	f7ff bbbd 	b.w	23fb96c <os_mutex_recursive_create>
 23fc1f2:	bf00      	nop
 23fc1f4:	1007ae58 	.word	0x1007ae58

023fc1f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc1f8:	2200      	movs	r2, #0
 23fc1fa:	6840      	ldr	r0, [r0, #4]
 23fc1fc:	4611      	mov	r1, r2
 23fc1fe:	f7ff bf0b 	b.w	23fc018 <network_listening>

023fc202 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc202:	2200      	movs	r2, #0
 23fc204:	6840      	ldr	r0, [r0, #4]
 23fc206:	4611      	mov	r1, r2
 23fc208:	f7ff bf22 	b.w	23fc050 <network_get_listen_timeout>

023fc20c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc20c:	2200      	movs	r2, #0
 23fc20e:	6840      	ldr	r0, [r0, #4]
 23fc210:	f7ff bf10 	b.w	23fc034 <network_set_listen_timeout>

023fc214 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc214:	2200      	movs	r2, #0
 23fc216:	6840      	ldr	r0, [r0, #4]
 23fc218:	f081 0101 	eor.w	r1, r1, #1
 23fc21c:	f7ff beee 	b.w	23fbffc <network_listen>

023fc220 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc220:	2300      	movs	r3, #0
 23fc222:	6840      	ldr	r0, [r0, #4]
 23fc224:	461a      	mov	r2, r3
 23fc226:	4619      	mov	r1, r3
 23fc228:	f7ff beda 	b.w	23fbfe0 <network_off>

023fc22c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc22c:	2300      	movs	r3, #0
 23fc22e:	6840      	ldr	r0, [r0, #4]
 23fc230:	461a      	mov	r2, r3
 23fc232:	4619      	mov	r1, r3
 23fc234:	f7ff bec6 	b.w	23fbfc4 <network_on>

023fc238 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fc238:	2200      	movs	r2, #0
 23fc23a:	6840      	ldr	r0, [r0, #4]
 23fc23c:	4611      	mov	r1, r2
 23fc23e:	f7ff beb3 	b.w	23fbfa8 <network_ready>

023fc242 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc242:	2200      	movs	r2, #0
 23fc244:	6840      	ldr	r0, [r0, #4]
 23fc246:	4611      	mov	r1, r2
 23fc248:	f7ff be92 	b.w	23fbf70 <network_connecting>

023fc24c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc24c:	2200      	movs	r2, #0
 23fc24e:	2102      	movs	r1, #2
 23fc250:	6840      	ldr	r0, [r0, #4]
 23fc252:	f7ff be9b 	b.w	23fbf8c <network_disconnect>

023fc256 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc256:	2300      	movs	r3, #0
 23fc258:	6840      	ldr	r0, [r0, #4]
 23fc25a:	461a      	mov	r2, r3
 23fc25c:	f7ff be7a 	b.w	23fbf54 <network_connect>

023fc260 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc260:	2203      	movs	r2, #3
 23fc262:	4b02      	ldr	r3, [pc, #8]	; (23fc26c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fc264:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fc266:	4a02      	ldr	r2, [pc, #8]	; (23fc270 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fc268:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fc26a:	4770      	bx	lr
 23fc26c:	1007ae5c 	.word	0x1007ae5c
 23fc270:	023ffb70 	.word	0x023ffb70

023fc274 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fc274:	4770      	bx	lr

023fc276 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fc276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc278:	4606      	mov	r6, r0
 23fc27a:	4615      	mov	r5, r2
 23fc27c:	460c      	mov	r4, r1
 23fc27e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fc280:	42bc      	cmp	r4, r7
 23fc282:	d006      	beq.n	23fc292 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fc284:	6833      	ldr	r3, [r6, #0]
 23fc286:	4630      	mov	r0, r6
 23fc288:	689b      	ldr	r3, [r3, #8]
 23fc28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fc28e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fc290:	e7f6      	b.n	23fc280 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fc292:	4628      	mov	r0, r5
 23fc294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc296 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fc296:	2200      	movs	r2, #0
 23fc298:	7c00      	ldrb	r0, [r0, #16]
 23fc29a:	f7ff bbf3 	b.w	23fba84 <hal_i2c_write>

023fc29e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fc29e:	2100      	movs	r1, #0
 23fc2a0:	7c00      	ldrb	r0, [r0, #16]
 23fc2a2:	f7ff bbfd 	b.w	23fbaa0 <hal_i2c_available>

023fc2a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fc2a6:	2100      	movs	r1, #0
 23fc2a8:	7c00      	ldrb	r0, [r0, #16]
 23fc2aa:	f7ff bc07 	b.w	23fbabc <hal_i2c_read>

023fc2ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fc2ae:	2100      	movs	r1, #0
 23fc2b0:	7c00      	ldrb	r0, [r0, #16]
 23fc2b2:	f7ff bc11 	b.w	23fbad8 <hal_i2c_peek>

023fc2b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fc2b6:	2100      	movs	r1, #0
 23fc2b8:	7c00      	ldrb	r0, [r0, #16]
 23fc2ba:	f7ff bc1b 	b.w	23fbaf4 <hal_i2c_flush>

023fc2be <_ZN7TwoWireD0Ev>:
 23fc2be:	b510      	push	{r4, lr}
 23fc2c0:	4604      	mov	r4, r0
 23fc2c2:	2114      	movs	r1, #20
 23fc2c4:	f7ff f87b 	bl	23fb3be <_ZdlPvj>
 23fc2c8:	4620      	mov	r0, r4
 23fc2ca:	bd10      	pop	{r4, pc}

023fc2cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc2cc:	b538      	push	{r3, r4, r5, lr}
 23fc2ce:	4604      	mov	r4, r0
 23fc2d0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc2d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc2d6:	2200      	movs	r2, #0
 23fc2d8:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fc2dc:	4b09      	ldr	r3, [pc, #36]	; (23fc304 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fc2de:	4608      	mov	r0, r1
  _i2c = i2c;
 23fc2e0:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc2e2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fc2e4:	4629      	mov	r1, r5
 23fc2e6:	f7ff fc21 	bl	23fbb2c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc2ea:	30bf      	adds	r0, #191	; 0xbf
 23fc2ec:	d108      	bne.n	23fc300 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fc2ee:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc2f0:	07db      	lsls	r3, r3, #31
 23fc2f2:	d505      	bpl.n	23fc300 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fc2f4:	6868      	ldr	r0, [r5, #4]
 23fc2f6:	f7ff fee3 	bl	23fc0c0 <free>
    free(conf.tx_buffer);
 23fc2fa:	68e8      	ldr	r0, [r5, #12]
 23fc2fc:	f7ff fee0 	bl	23fc0c0 <free>
}
 23fc300:	4620      	mov	r0, r4
 23fc302:	bd38      	pop	{r3, r4, r5, pc}
 23fc304:	023ffbac 	.word	0x023ffbac

023fc308 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fc308:	4770      	bx	lr

023fc30a <_ZN9IPAddressD0Ev>:
 23fc30a:	b510      	push	{r4, lr}
 23fc30c:	4604      	mov	r4, r0
 23fc30e:	2118      	movs	r1, #24
 23fc310:	f7ff f855 	bl	23fb3be <_ZdlPvj>
 23fc314:	4620      	mov	r0, r4
 23fc316:	bd10      	pop	{r4, pc}

023fc318 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc318:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc31a:	7d03      	ldrb	r3, [r0, #20]
{
 23fc31c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc31e:	2b06      	cmp	r3, #6
 23fc320:	f04f 0400 	mov.w	r4, #0
{
 23fc324:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc326:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc32a:	d012      	beq.n	23fc352 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc32c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc330:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc334:	220a      	movs	r2, #10
 23fc336:	4630      	mov	r0, r6
 23fc338:	f001 facf 	bl	23fd8da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc33c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc33e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc340:	d019      	beq.n	23fc376 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc342:	2c00      	cmp	r4, #0
 23fc344:	d0f4      	beq.n	23fc330 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc346:	212e      	movs	r1, #46	; 0x2e
 23fc348:	4630      	mov	r0, r6
 23fc34a:	f001 fac3 	bl	23fd8d4 <_ZN5Print5printEc>
 23fc34e:	4404      	add	r4, r0
 23fc350:	e7ee      	b.n	23fc330 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc352:	232f      	movs	r3, #47	; 0x2f
 23fc354:	466a      	mov	r2, sp
 23fc356:	4639      	mov	r1, r7
 23fc358:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc35a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc35e:	f7ff fbf3 	bl	23fbb48 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc362:	4668      	mov	r0, sp
 23fc364:	f7ff f802 	bl	23fb36c <strlen>
 23fc368:	6833      	ldr	r3, [r6, #0]
 23fc36a:	4602      	mov	r2, r0
 23fc36c:	4669      	mov	r1, sp
 23fc36e:	4630      	mov	r0, r6
 23fc370:	68db      	ldr	r3, [r3, #12]
 23fc372:	4798      	blx	r3
 23fc374:	4604      	mov	r4, r0
    }
    return n;
}
 23fc376:	4620      	mov	r0, r4
 23fc378:	b00d      	add	sp, #52	; 0x34
 23fc37a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc37c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc37c:	b510      	push	{r4, lr}
 23fc37e:	4604      	mov	r4, r0
 23fc380:	4b04      	ldr	r3, [pc, #16]	; (23fc394 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc382:	2211      	movs	r2, #17
 23fc384:	2100      	movs	r1, #0
 23fc386:	f840 3b04 	str.w	r3, [r0], #4
 23fc38a:	f003 fa4e 	bl	23ff82a <memset>
}
 23fc38e:	4620      	mov	r0, r4
 23fc390:	bd10      	pop	{r4, pc}
 23fc392:	bf00      	nop
 23fc394:	023ffbd4 	.word	0x023ffbd4

023fc398 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc398:	4603      	mov	r3, r0
 23fc39a:	4a07      	ldr	r2, [pc, #28]	; (23fc3b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc39c:	b510      	push	{r4, lr}
 23fc39e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc3a2:	f101 0210 	add.w	r2, r1, #16
 23fc3a6:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc3aa:	4291      	cmp	r1, r2
 23fc3ac:	f843 4b04 	str.w	r4, [r3], #4
 23fc3b0:	d1f9      	bne.n	23fc3a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc3b2:	780a      	ldrb	r2, [r1, #0]
 23fc3b4:	701a      	strb	r2, [r3, #0]
}
 23fc3b6:	bd10      	pop	{r4, pc}
 23fc3b8:	023ffbd4 	.word	0x023ffbd4

023fc3bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc3bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc3be:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc3c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc3c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc3ca:	2304      	movs	r3, #4
 23fc3cc:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc3d0:	6041      	str	r1, [r0, #4]
 23fc3d2:	7503      	strb	r3, [r0, #20]
}
 23fc3d4:	bd10      	pop	{r4, pc}
	...

023fc3d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc3d8:	b507      	push	{r0, r1, r2, lr}
 23fc3da:	4b06      	ldr	r3, [pc, #24]	; (23fc3f4 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc3dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc3de:	78cb      	ldrb	r3, [r1, #3]
 23fc3e0:	9300      	str	r3, [sp, #0]
 23fc3e2:	788b      	ldrb	r3, [r1, #2]
 23fc3e4:	784a      	ldrb	r2, [r1, #1]
 23fc3e6:	7809      	ldrb	r1, [r1, #0]
 23fc3e8:	f7ff ffe8 	bl	23fc3bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc3ec:	b003      	add	sp, #12
 23fc3ee:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc3f2:	bf00      	nop
 23fc3f4:	023ffbd4 	.word	0x023ffbd4

023fc3f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fc3f8:	2201      	movs	r2, #1
 23fc3fa:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fc3fe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fc402:	4618      	mov	r0, r3
 23fc404:	2901      	cmp	r1, #1
 23fc406:	d108      	bne.n	23fc41a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fc408:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fc40c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fc410:	3a01      	subs	r2, #1
 23fc412:	f103 0310 	add.w	r3, r3, #16
 23fc416:	d1f2      	bne.n	23fc3fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fc418:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fc41a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fc41c:	bf04      	itt	eq
 23fc41e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fc422:	1852      	addeq	r2, r2, r1
 23fc424:	e7f4      	b.n	23fc410 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fc426 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc426:	b40e      	push	{r1, r2, r3}
 23fc428:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc42a:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc42c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc42e:	af00      	add	r7, sp, #0
 23fc430:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fc434:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc438:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc43a:	462b      	mov	r3, r5
 23fc43c:	1878      	adds	r0, r7, r1
 23fc43e:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc440:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc442:	f7ff fe59 	bl	23fc0f8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fc446:	280f      	cmp	r0, #15
 23fc448:	687a      	ldr	r2, [r7, #4]
 23fc44a:	d91a      	bls.n	23fc482 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fc44c:	f100 0308 	add.w	r3, r0, #8
 23fc450:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fc454:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fc456:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc45a:	1c41      	adds	r1, r0, #1
 23fc45c:	462b      	mov	r3, r5
 23fc45e:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc460:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc462:	f7ff fe49 	bl	23fc0f8 <vsnprintf>
        if (n > 0) {
 23fc466:	1e02      	subs	r2, r0, #0
 23fc468:	dd04      	ble.n	23fc474 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fc46a:	6823      	ldr	r3, [r4, #0]
 23fc46c:	4669      	mov	r1, sp
 23fc46e:	4620      	mov	r0, r4
 23fc470:	689b      	ldr	r3, [r3, #8]
 23fc472:	4798      	blx	r3
 23fc474:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fc476:	3720      	adds	r7, #32
 23fc478:	46bd      	mov	sp, r7
 23fc47a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc47e:	b003      	add	sp, #12
 23fc480:	4770      	bx	lr
    } else if (n > 0) {
 23fc482:	2800      	cmp	r0, #0
 23fc484:	d0f7      	beq.n	23fc476 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fc486:	6823      	ldr	r3, [r4, #0]
 23fc488:	4602      	mov	r2, r0
 23fc48a:	689b      	ldr	r3, [r3, #8]
 23fc48c:	4620      	mov	r0, r4
 23fc48e:	f107 0110 	add.w	r1, r7, #16
 23fc492:	4798      	blx	r3
}
 23fc494:	e7ef      	b.n	23fc476 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fc496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc496:	b538      	push	{r3, r4, r5, lr}
 23fc498:	680b      	ldr	r3, [r1, #0]
 23fc49a:	4604      	mov	r4, r0
 23fc49c:	6003      	str	r3, [r0, #0]
 23fc49e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fc4a0:	6843      	ldr	r3, [r0, #4]
 23fc4a2:	429d      	cmp	r5, r3
 23fc4a4:	d008      	beq.n	23fc4b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fc4a6:	b115      	cbz	r5, 23fc4ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fc4a8:	686b      	ldr	r3, [r5, #4]
 23fc4aa:	3301      	adds	r3, #1
 23fc4ac:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fc4ae:	6860      	ldr	r0, [r4, #4]
 23fc4b0:	b108      	cbz	r0, 23fc4b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fc4b2:	f7ff fe72 	bl	23fc19a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fc4b6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc4b8:	bd38      	pop	{r3, r4, r5, pc}

023fc4ba <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fc4ba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc4bc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fc4be:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc4c2:	2201      	movs	r2, #1
 23fc4c4:	689b      	ldr	r3, [r3, #8]
 23fc4c6:	f10d 0107 	add.w	r1, sp, #7
 23fc4ca:	4798      	blx	r3
}
 23fc4cc:	b003      	add	sp, #12
 23fc4ce:	f85d fb04 	ldr.w	pc, [sp], #4

023fc4d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc4d2:	460b      	mov	r3, r1
 23fc4d4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fc4d6:	2200      	movs	r2, #0
 23fc4d8:	b510      	push	{r4, lr}
 23fc4da:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc4dc:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fc4e0:	6083      	str	r3, [r0, #8]
    if (t) {
 23fc4e2:	b90b      	cbnz	r3, 23fc4e8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fc4e4:	4620      	mov	r0, r4
 23fc4e6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fc4e8:	f7ff ffd5 	bl	23fc496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fc4ec:	e7fa      	b.n	23fc4e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fc4ee <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fc4ee:	6883      	ldr	r3, [r0, #8]
 23fc4f0:	b1eb      	cbz	r3, 23fc52e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fc4f2:	781a      	ldrb	r2, [r3, #0]
 23fc4f4:	2a03      	cmp	r2, #3
 23fc4f6:	d81a      	bhi.n	23fc52e <_ZNK5spark9JSONValue4typeEv+0x40>
 23fc4f8:	e8df f002 	tbb	[pc, r2]
 23fc4fc:	1b021704 	.word	0x1b021704
 23fc500:	2005      	movs	r0, #5
 23fc502:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fc504:	6802      	ldr	r2, [r0, #0]
 23fc506:	685b      	ldr	r3, [r3, #4]
 23fc508:	6852      	ldr	r2, [r2, #4]
 23fc50a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fc50c:	282d      	cmp	r0, #45	; 0x2d
 23fc50e:	d012      	beq.n	23fc536 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fc510:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fc514:	2b09      	cmp	r3, #9
 23fc516:	d90e      	bls.n	23fc536 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fc518:	2874      	cmp	r0, #116	; 0x74
 23fc51a:	d00e      	beq.n	23fc53a <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fc51c:	2866      	cmp	r0, #102	; 0x66
 23fc51e:	d00c      	beq.n	23fc53a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fc520:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fc524:	4258      	negs	r0, r3
 23fc526:	4158      	adcs	r0, r3
 23fc528:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fc52a:	2006      	movs	r0, #6
 23fc52c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fc52e:	2000      	movs	r0, #0
 23fc530:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fc532:	2004      	movs	r0, #4
 23fc534:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fc536:	2003      	movs	r0, #3
 23fc538:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fc53a:	2002      	movs	r0, #2
}
 23fc53c:	4770      	bx	lr

023fc53e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fc53e:	b510      	push	{r4, lr}
 23fc540:	4604      	mov	r4, r0
    switch (type()) {
 23fc542:	f7ff ffd4 	bl	23fc4ee <_ZNK5spark9JSONValue4typeEv>
 23fc546:	2802      	cmp	r0, #2
 23fc548:	d00e      	beq.n	23fc568 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fc54a:	1ec3      	subs	r3, r0, #3
 23fc54c:	b2db      	uxtb	r3, r3
 23fc54e:	2b01      	cmp	r3, #1
 23fc550:	d814      	bhi.n	23fc57c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fc552:	6822      	ldr	r2, [r4, #0]
 23fc554:	68a3      	ldr	r3, [r4, #8]
 23fc556:	6850      	ldr	r0, [r2, #4]
 23fc558:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fc55a:	220a      	movs	r2, #10
}
 23fc55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fc560:	2100      	movs	r1, #0
 23fc562:	4418      	add	r0, r3
 23fc564:	f003 ba62 	b.w	23ffa2c <strtol>
        const char* const s = d_->json + t_->start;
 23fc568:	6822      	ldr	r2, [r4, #0]
 23fc56a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fc56c:	6852      	ldr	r2, [r2, #4]
 23fc56e:	685b      	ldr	r3, [r3, #4]
 23fc570:	5cd0      	ldrb	r0, [r2, r3]
 23fc572:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fc576:	4258      	negs	r0, r3
 23fc578:	4158      	adcs	r0, r3
}
 23fc57a:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fc57c:	2000      	movs	r0, #0
 23fc57e:	e7fc      	b.n	23fc57a <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fc580 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc580:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc582:	2300      	movs	r3, #0
 23fc584:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc586:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fc58a:	480e      	ldr	r0, [pc, #56]	; (23fc5c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fc58c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fc590:	b1a9      	cbz	r1, 23fc5be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fc592:	780b      	ldrb	r3, [r1, #0]
 23fc594:	2b03      	cmp	r3, #3
 23fc596:	d006      	beq.n	23fc5a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fc598:	b98b      	cbnz	r3, 23fc5be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fc59a:	6813      	ldr	r3, [r2, #0]
 23fc59c:	6858      	ldr	r0, [r3, #4]
 23fc59e:	684b      	ldr	r3, [r1, #4]
 23fc5a0:	5cc3      	ldrb	r3, [r0, r3]
 23fc5a2:	2b6e      	cmp	r3, #110	; 0x6e
 23fc5a4:	d007      	beq.n	23fc5b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fc5a6:	6813      	ldr	r3, [r2, #0]
 23fc5a8:	684d      	ldr	r5, [r1, #4]
 23fc5aa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fc5ac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fc5ae:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fc5b0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fc5b2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fc5b4:	60e3      	str	r3, [r4, #12]
 23fc5b6:	4611      	mov	r1, r2
 23fc5b8:	4620      	mov	r0, r4
 23fc5ba:	f7ff ff6c 	bl	23fc496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc5be:	4620      	mov	r0, r4
 23fc5c0:	bd38      	pop	{r3, r4, r5, pc}
 23fc5c2:	bf00      	nop
 23fc5c4:	023ffc46 	.word	0x023ffc46

023fc5c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc5c8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc5ca:	2500      	movs	r5, #0
 23fc5cc:	460b      	mov	r3, r1
 23fc5ce:	4604      	mov	r4, r0
 23fc5d0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc5d2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fc5d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fc5da:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fc5de:	b14b      	cbz	r3, 23fc5f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fc5e0:	781a      	ldrb	r2, [r3, #0]
 23fc5e2:	2a01      	cmp	r2, #1
 23fc5e4:	d106      	bne.n	23fc5f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fc5e6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fc5ea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fc5ec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fc5ee:	6143      	str	r3, [r0, #20]
 23fc5f0:	f7ff ff51 	bl	23fc496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc5f4:	4620      	mov	r0, r4
 23fc5f6:	bd38      	pop	{r3, r4, r5, pc}

023fc5f8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fc5f8:	b510      	push	{r4, lr}
    if (!n_) {
 23fc5fa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fc5fc:	4604      	mov	r4, r0
    if (!n_) {
 23fc5fe:	b163      	cbz	r3, 23fc61a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fc600:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fc602:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fc604:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fc606:	3010      	adds	r0, #16
 23fc608:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fc60a:	6120      	str	r0, [r4, #16]
    --n_;
 23fc60c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fc60e:	b113      	cbz	r3, 23fc616 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fc610:	f7ff fef2 	bl	23fc3f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fc614:	60a0      	str	r0, [r4, #8]
    return true;
 23fc616:	2001      	movs	r0, #1
 23fc618:	e000      	b.n	23fc61c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fc61a:	4618      	mov	r0, r3
}
 23fc61c:	bd10      	pop	{r4, pc}

023fc61e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc61e:	b510      	push	{r4, lr}
    write('}');
 23fc620:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc622:	4604      	mov	r4, r0
    write('}');
 23fc624:	f7ff ff49 	bl	23fc4ba <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fc628:	2301      	movs	r3, #1
}
 23fc62a:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc62c:	7123      	strb	r3, [r4, #4]
}
 23fc62e:	bd10      	pop	{r4, pc}

023fc630 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fc630:	b508      	push	{r3, lr}
    switch (state_) {
 23fc632:	7903      	ldrb	r3, [r0, #4]
 23fc634:	2b01      	cmp	r3, #1
 23fc636:	d002      	beq.n	23fc63e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fc638:	2b02      	cmp	r3, #2
 23fc63a:	d004      	beq.n	23fc646 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fc63c:	bd08      	pop	{r3, pc}
        write(',');
 23fc63e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fc640:	f7ff ff3b 	bl	23fc4ba <_ZN5spark10JSONWriter5writeEc>
}
 23fc644:	e7fa      	b.n	23fc63c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fc646:	213a      	movs	r1, #58	; 0x3a
 23fc648:	e7fa      	b.n	23fc640 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fc64a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fc64a:	b510      	push	{r4, lr}
 23fc64c:	4604      	mov	r4, r0
    writeSeparator();
 23fc64e:	f7ff ffef 	bl	23fc630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fc652:	4620      	mov	r0, r4
 23fc654:	217b      	movs	r1, #123	; 0x7b
 23fc656:	f7ff ff30 	bl	23fc4ba <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc65a:	2300      	movs	r3, #0
}
 23fc65c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc65e:	7123      	strb	r3, [r4, #4]
}
 23fc660:	bd10      	pop	{r4, pc}
	...

023fc664 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fc664:	b513      	push	{r0, r1, r4, lr}
 23fc666:	4604      	mov	r4, r0
 23fc668:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc66a:	f7ff ffe1 	bl	23fc630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fc66e:	6823      	ldr	r3, [r4, #0]
 23fc670:	4620      	mov	r0, r4
 23fc672:	68db      	ldr	r3, [r3, #12]
 23fc674:	9a01      	ldr	r2, [sp, #4]
 23fc676:	4903      	ldr	r1, [pc, #12]	; (23fc684 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fc678:	4798      	blx	r3
    state_ = NEXT;
 23fc67a:	2301      	movs	r3, #1
}
 23fc67c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc67e:	7123      	strb	r3, [r4, #4]
}
 23fc680:	b002      	add	sp, #8
 23fc682:	bd10      	pop	{r4, pc}
 23fc684:	023ffbe0 	.word	0x023ffbe0

023fc688 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fc688:	b513      	push	{r0, r1, r4, lr}
 23fc68a:	4604      	mov	r4, r0
 23fc68c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc68e:	f7ff ffcf 	bl	23fc630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fc692:	6823      	ldr	r3, [r4, #0]
 23fc694:	4620      	mov	r0, r4
 23fc696:	68db      	ldr	r3, [r3, #12]
 23fc698:	9a01      	ldr	r2, [sp, #4]
 23fc69a:	4903      	ldr	r1, [pc, #12]	; (23fc6a8 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fc69c:	4798      	blx	r3
    state_ = NEXT;
 23fc69e:	2301      	movs	r3, #1
}
 23fc6a0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc6a2:	7123      	strb	r3, [r4, #4]
}
 23fc6a4:	b002      	add	sp, #8
 23fc6a6:	bd10      	pop	{r4, pc}
 23fc6a8:	023ffbe3 	.word	0x023ffbe3

023fc6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc6b0:	460d      	mov	r5, r1
 23fc6b2:	4690      	mov	r8, r2
    write('"');
 23fc6b4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc6b6:	4604      	mov	r4, r0
 23fc6b8:	462f      	mov	r7, r5
    write('"');
 23fc6ba:	f7ff fefe 	bl	23fc4ba <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fc6be:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fc764 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fc6c2:	44a8      	add	r8, r5
    while (s != end) {
 23fc6c4:	4547      	cmp	r7, r8
 23fc6c6:	46ba      	mov	sl, r7
 23fc6c8:	d03d      	beq.n	23fc746 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fc6ca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fc6ce:	2e22      	cmp	r6, #34	; 0x22
 23fc6d0:	d006      	beq.n	23fc6e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc6d2:	2e5c      	cmp	r6, #92	; 0x5c
 23fc6d4:	d004      	beq.n	23fc6e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc6d6:	4630      	mov	r0, r6
 23fc6d8:	f003 f878 	bl	23ff7cc <isprint>
 23fc6dc:	2800      	cmp	r0, #0
 23fc6de:	d1f1      	bne.n	23fc6c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fc6e0:	6823      	ldr	r3, [r4, #0]
 23fc6e2:	4629      	mov	r1, r5
 23fc6e4:	4620      	mov	r0, r4
 23fc6e6:	689b      	ldr	r3, [r3, #8]
 23fc6e8:	ebaa 0205 	sub.w	r2, sl, r5
 23fc6ec:	4798      	blx	r3
            write('\\');
 23fc6ee:	215c      	movs	r1, #92	; 0x5c
 23fc6f0:	4620      	mov	r0, r4
 23fc6f2:	f7ff fee2 	bl	23fc4ba <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fc6f6:	2e0d      	cmp	r6, #13
 23fc6f8:	d80a      	bhi.n	23fc710 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fc6fa:	2e07      	cmp	r6, #7
 23fc6fc:	d91c      	bls.n	23fc738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc6fe:	f1a6 0308 	sub.w	r3, r6, #8
 23fc702:	2b05      	cmp	r3, #5
 23fc704:	d818      	bhi.n	23fc738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc706:	e8df f003 	tbb	[pc, r3]
 23fc70a:	0f0d      	.short	0x0f0d
 23fc70c:	15131711 	.word	0x15131711
 23fc710:	2e22      	cmp	r6, #34	; 0x22
 23fc712:	d001      	beq.n	23fc718 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fc714:	2e5c      	cmp	r6, #92	; 0x5c
 23fc716:	d10f      	bne.n	23fc738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fc718:	4631      	mov	r1, r6
                write('b');
 23fc71a:	4620      	mov	r0, r4
 23fc71c:	f7ff fecd 	bl	23fc4ba <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fc720:	463d      	mov	r5, r7
    while (s != end) {
 23fc722:	e7cf      	b.n	23fc6c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fc724:	2162      	movs	r1, #98	; 0x62
 23fc726:	e7f8      	b.n	23fc71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fc728:	2174      	movs	r1, #116	; 0x74
 23fc72a:	e7f6      	b.n	23fc71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fc72c:	216e      	movs	r1, #110	; 0x6e
 23fc72e:	e7f4      	b.n	23fc71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fc730:	2166      	movs	r1, #102	; 0x66
 23fc732:	e7f2      	b.n	23fc71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fc734:	2172      	movs	r1, #114	; 0x72
 23fc736:	e7f0      	b.n	23fc71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fc738:	6823      	ldr	r3, [r4, #0]
 23fc73a:	4632      	mov	r2, r6
 23fc73c:	4649      	mov	r1, r9
 23fc73e:	4620      	mov	r0, r4
 23fc740:	68db      	ldr	r3, [r3, #12]
 23fc742:	4798      	blx	r3
                break;
 23fc744:	e7ec      	b.n	23fc720 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fc746:	42bd      	cmp	r5, r7
 23fc748:	d005      	beq.n	23fc756 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fc74a:	6823      	ldr	r3, [r4, #0]
 23fc74c:	4629      	mov	r1, r5
 23fc74e:	4620      	mov	r0, r4
 23fc750:	689b      	ldr	r3, [r3, #8]
 23fc752:	1b7a      	subs	r2, r7, r5
 23fc754:	4798      	blx	r3
    }
    write('"');
 23fc756:	2122      	movs	r1, #34	; 0x22
 23fc758:	4620      	mov	r0, r4
 23fc75a:	f7ff feae 	bl	23fc4ba <_ZN5spark10JSONWriter5writeEc>
}
 23fc75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc762:	bf00      	nop
 23fc764:	023ffbe6 	.word	0x023ffbe6

023fc768 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fc768:	b513      	push	{r0, r1, r4, lr}
 23fc76a:	4604      	mov	r4, r0
 23fc76c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc770:	f7ff ff5e 	bl	23fc630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fc774:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc778:	4620      	mov	r0, r4
 23fc77a:	f7ff ff97 	bl	23fc6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fc77e:	2302      	movs	r3, #2
}
 23fc780:	4620      	mov	r0, r4
    state_ = VALUE;
 23fc782:	7123      	strb	r3, [r4, #4]
}
 23fc784:	b002      	add	sp, #8
 23fc786:	bd10      	pop	{r4, pc}

023fc788 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fc788:	b513      	push	{r0, r1, r4, lr}
 23fc78a:	4604      	mov	r4, r0
 23fc78c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc790:	f7ff ff4e 	bl	23fc630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fc794:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc798:	4620      	mov	r0, r4
 23fc79a:	f7ff ff87 	bl	23fc6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fc79e:	2301      	movs	r3, #1
}
 23fc7a0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc7a2:	7123      	strb	r3, [r4, #4]
}
 23fc7a4:	b002      	add	sp, #8
 23fc7a6:	bd10      	pop	{r4, pc}

023fc7a8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc7a8:	6880      	ldr	r0, [r0, #8]
 23fc7aa:	6803      	ldr	r3, [r0, #0]
 23fc7ac:	68db      	ldr	r3, [r3, #12]
 23fc7ae:	4718      	bx	r3

023fc7b0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc7b0:	4770      	bx	lr

023fc7b2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc7b2:	4608      	mov	r0, r1
 23fc7b4:	b111      	cbz	r1, 23fc7bc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc7b6:	680b      	ldr	r3, [r1, #0]
 23fc7b8:	685b      	ldr	r3, [r3, #4]
 23fc7ba:	4718      	bx	r3
}
 23fc7bc:	4770      	bx	lr

023fc7be <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc7be:	4770      	bx	lr

023fc7c0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc7c0:	4770      	bx	lr

023fc7c2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc7c2:	4770      	bx	lr

023fc7c4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc7c4:	4770      	bx	lr

023fc7c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc7c6:	b538      	push	{r3, r4, r5, lr}
 23fc7c8:	4604      	mov	r4, r0
 23fc7ca:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc7cc:	6800      	ldr	r0, [r0, #0]
 23fc7ce:	212e      	movs	r1, #46	; 0x2e
 23fc7d0:	f003 f86f 	bl	23ff8b2 <strchrnul>
    size = s - category;
 23fc7d4:	6823      	ldr	r3, [r4, #0]
 23fc7d6:	1ac3      	subs	r3, r0, r3
 23fc7d8:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc7da:	b123      	cbz	r3, 23fc7e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc7dc:	7803      	ldrb	r3, [r0, #0]
 23fc7de:	b103      	cbz	r3, 23fc7e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc7e0:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fc7e2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc7e4:	6020      	str	r0, [r4, #0]
}
 23fc7e6:	4618      	mov	r0, r3
 23fc7e8:	bd38      	pop	{r3, r4, r5, pc}

023fc7ea <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc7ea:	b510      	push	{r4, lr}
 23fc7ec:	4604      	mov	r4, r0
 23fc7ee:	210c      	movs	r1, #12
 23fc7f0:	f7fe fde5 	bl	23fb3be <_ZdlPvj>
 23fc7f4:	4620      	mov	r0, r4
 23fc7f6:	bd10      	pop	{r4, pc}

023fc7f8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fc7f8:	b510      	push	{r4, lr}
 23fc7fa:	4604      	mov	r4, r0
 23fc7fc:	2104      	movs	r1, #4
 23fc7fe:	f7fe fdde 	bl	23fb3be <_ZdlPvj>
 23fc802:	4620      	mov	r0, r4
 23fc804:	bd10      	pop	{r4, pc}

023fc806 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc806:	b510      	push	{r4, lr}
 23fc808:	4604      	mov	r4, r0
 23fc80a:	2104      	movs	r1, #4
 23fc80c:	f7fe fdd7 	bl	23fb3be <_ZdlPvj>
 23fc810:	4620      	mov	r0, r4
 23fc812:	bd10      	pop	{r4, pc}

023fc814 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fc814:	f7ff b8c6 	b.w	23fb9a4 <os_mutex_recursive_lock>

023fc818 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fc818:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fc81a:	f7fe fd9d 	bl	23fb358 <strcmp>
}
 23fc81e:	fab0 f080 	clz	r0, r0
 23fc822:	0940      	lsrs	r0, r0, #5
 23fc824:	bd08      	pop	{r3, pc}

023fc826 <__tcf_1>:
 23fc826:	4770      	bx	lr

023fc828 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fc828:	b510      	push	{r4, lr}
 23fc82a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fc82c:	f001 fa24 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fc830:	4284      	cmp	r4, r0
 23fc832:	d105      	bne.n	23fc840 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fc834:	f001 fa20 	bl	23fdc78 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fc838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fc83c:	f001 ba10 	b.w	23fdc60 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fc840:	f001 fbfc 	bl	23fe03c <_Z22__fetch_global_Serial1v>
 23fc844:	4284      	cmp	r4, r0
 23fc846:	d105      	bne.n	23fc854 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fc848:	f001 fbf8 	bl	23fe03c <_Z22__fetch_global_Serial1v>
}
 23fc84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fc850:	f001 b9a9 	b.w	23fdba6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fc854:	b12c      	cbz	r4, 23fc862 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fc856:	6823      	ldr	r3, [r4, #0]
 23fc858:	4620      	mov	r0, r4
}
 23fc85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc85e:	685b      	ldr	r3, [r3, #4]
 23fc860:	4718      	bx	r3
 23fc862:	bd10      	pop	{r4, pc}

023fc864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc864:	680b      	ldr	r3, [r1, #0]
 23fc866:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc868:	684b      	ldr	r3, [r1, #4]
 23fc86a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc86c:	b113      	cbz	r3, 23fc874 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fc86e:	685a      	ldr	r2, [r3, #4]
 23fc870:	3201      	adds	r2, #1
 23fc872:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc874:	4770      	bx	lr

023fc876 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fc876:	b513      	push	{r0, r1, r4, lr}
 23fc878:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fc87a:	4608      	mov	r0, r1
 23fc87c:	9101      	str	r1, [sp, #4]
 23fc87e:	f7fe fd75 	bl	23fb36c <strlen>
 23fc882:	4602      	mov	r2, r0
 23fc884:	4620      	mov	r0, r4
 23fc886:	9901      	ldr	r1, [sp, #4]
}
 23fc888:	b002      	add	sp, #8
 23fc88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fc88e:	f7ff bf7b 	b.w	23fc788 <_ZN5spark10JSONWriter5valueEPKcj>

023fc892 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fc892:	b513      	push	{r0, r1, r4, lr}
 23fc894:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fc896:	4608      	mov	r0, r1
 23fc898:	9101      	str	r1, [sp, #4]
 23fc89a:	f7fe fd67 	bl	23fb36c <strlen>
 23fc89e:	4602      	mov	r2, r0
 23fc8a0:	4620      	mov	r0, r4
 23fc8a2:	6823      	ldr	r3, [r4, #0]
 23fc8a4:	9901      	ldr	r1, [sp, #4]
 23fc8a6:	68db      	ldr	r3, [r3, #12]
}
 23fc8a8:	b002      	add	sp, #8
 23fc8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fc8ae:	4718      	bx	r3

023fc8b0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fc8b0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc8b2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fc8b4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc8b8:	2201      	movs	r2, #1
 23fc8ba:	68db      	ldr	r3, [r3, #12]
 23fc8bc:	f10d 0107 	add.w	r1, sp, #7
 23fc8c0:	4798      	blx	r3
}
 23fc8c2:	b003      	add	sp, #12
 23fc8c4:	f85d fb04 	ldr.w	pc, [sp], #4

023fc8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fc8c8:	680a      	ldr	r2, [r1, #0]
 23fc8ca:	b510      	push	{r4, lr}
 23fc8cc:	6002      	str	r2, [r0, #0]
 23fc8ce:	684a      	ldr	r2, [r1, #4]
 23fc8d0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fc8d2:	2200      	movs	r2, #0
 23fc8d4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fc8d8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc8da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc8dc:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc8de:	6084      	str	r4, [r0, #8]
 23fc8e0:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc8e2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc8e4:	60c4      	str	r4, [r0, #12]
 23fc8e6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc8e8:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc8ea:	6104      	str	r4, [r0, #16]
 23fc8ec:	bd10      	pop	{r4, pc}
	...

023fc8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fc8f4:	f04f 0a14 	mov.w	sl, #20
 23fc8f8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fc8fc:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fc8fe:	4645      	mov	r5, r8
 23fc900:	fb0a f404 	mul.w	r4, sl, r4
 23fc904:	9300      	str	r3, [sp, #0]
 23fc906:	4b17      	ldr	r3, [pc, #92]	; (23fc964 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc908:	10a4      	asrs	r4, r4, #2
 23fc90a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fc90c:	2c00      	cmp	r4, #0
 23fc90e:	dd21      	ble.n	23fc954 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fc910:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fc912:	fb0a f006 	mul.w	r0, sl, r6
 23fc916:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fc91a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fc91e:	463a      	mov	r2, r7
 23fc920:	455f      	cmp	r7, fp
 23fc922:	bf28      	it	cs
 23fc924:	465a      	movcs	r2, fp
 23fc926:	5828      	ldr	r0, [r5, r0]
 23fc928:	9101      	str	r1, [sp, #4]
 23fc92a:	f002 ffd4 	bl	23ff8d6 <strncmp>
                if (cmp == 0) {
 23fc92e:	2800      	cmp	r0, #0
 23fc930:	f04f 0301 	mov.w	r3, #1
 23fc934:	9901      	ldr	r1, [sp, #4]
 23fc936:	d10b      	bne.n	23fc950 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fc938:	455f      	cmp	r7, fp
 23fc93a:	d103      	bne.n	23fc944 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fc93c:	9a00      	ldr	r2, [sp, #0]
 23fc93e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc940:	4634      	mov	r4, r6
 23fc942:	e7e3      	b.n	23fc90c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fc944:	d9fc      	bls.n	23fc940 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fc946:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fc948:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fc94c:	3e01      	subs	r6, #1
 23fc94e:	e7f7      	b.n	23fc940 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fc950:	dbf9      	blt.n	23fc946 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fc952:	e7f5      	b.n	23fc940 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fc954:	eba5 0508 	sub.w	r5, r5, r8
}
 23fc958:	4802      	ldr	r0, [pc, #8]	; (23fc964 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc95a:	10ad      	asrs	r5, r5, #2
 23fc95c:	4368      	muls	r0, r5
 23fc95e:	b003      	add	sp, #12
 23fc960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc964:	cccccccd 	.word	0xcccccccd

023fc968 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fc96a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fc96c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc96e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fc970:	b303      	cbz	r3, 23fc9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fc972:	b1f9      	cbz	r1, 23fc9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fc974:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fc976:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fc97a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fc97c:	a903      	add	r1, sp, #12
 23fc97e:	a801      	add	r0, sp, #4
 23fc980:	f7ff ff21 	bl	23fc7c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fc984:	4601      	mov	r1, r0
 23fc986:	b1a8      	cbz	r0, 23fc9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc988:	f10d 030b 	add.w	r3, sp, #11
 23fc98c:	4620      	mov	r0, r4
 23fc98e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fc990:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc994:	f7ff ffac 	bl	23fc8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fc998:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fc99c:	b153      	cbz	r3, 23fc9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fc99e:	6823      	ldr	r3, [r4, #0]
 23fc9a0:	2414      	movs	r4, #20
 23fc9a2:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fc9a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fc9aa:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fc9ac:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fc9ae:	bfa8      	it	ge
 23fc9b0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fc9b2:	e7e3      	b.n	23fc97c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fc9b4:	4628      	mov	r0, r5
 23fc9b6:	b004      	add	sp, #16
 23fc9b8:	bd70      	pop	{r4, r5, r6, pc}

023fc9ba <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fc9ba:	b40e      	push	{r1, r2, r3}
 23fc9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc9be:	b08c      	sub	sp, #48	; 0x30
 23fc9c0:	af00      	add	r7, sp, #0
 23fc9c2:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fc9c6:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc9ca:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc9cc:	462b      	mov	r3, r5
 23fc9ce:	2120      	movs	r1, #32
 23fc9d0:	f107 0010 	add.w	r0, r7, #16
 23fc9d4:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc9d6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc9d8:	f7ff fb8e 	bl	23fc0f8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fc9dc:	281f      	cmp	r0, #31
 23fc9de:	687a      	ldr	r2, [r7, #4]
 23fc9e0:	d91a      	bls.n	23fca18 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fc9e2:	f100 0308 	add.w	r3, r0, #8
 23fc9e6:	f023 0307 	bic.w	r3, r3, #7
        }
 23fc9ea:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fc9ec:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc9f0:	1c41      	adds	r1, r0, #1
 23fc9f2:	462b      	mov	r3, r5
 23fc9f4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc9f6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc9f8:	f7ff fb7e 	bl	23fc0f8 <vsnprintf>
        if (n > 0) {
 23fc9fc:	1e02      	subs	r2, r0, #0
 23fc9fe:	dd04      	ble.n	23fca0a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fca00:	6823      	ldr	r3, [r4, #0]
 23fca02:	4669      	mov	r1, sp
 23fca04:	4620      	mov	r0, r4
 23fca06:	68db      	ldr	r3, [r3, #12]
 23fca08:	4798      	blx	r3
 23fca0a:	46b5      	mov	sp, r6
}
 23fca0c:	3730      	adds	r7, #48	; 0x30
 23fca0e:	46bd      	mov	sp, r7
 23fca10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fca14:	b003      	add	sp, #12
 23fca16:	4770      	bx	lr
    } else if (n > 0) {
 23fca18:	2800      	cmp	r0, #0
 23fca1a:	d0f7      	beq.n	23fca0c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fca1c:	6823      	ldr	r3, [r4, #0]
 23fca1e:	4602      	mov	r2, r0
 23fca20:	68db      	ldr	r3, [r3, #12]
 23fca22:	4620      	mov	r0, r4
 23fca24:	f107 0110 	add.w	r1, r7, #16
 23fca28:	4798      	blx	r3
}
 23fca2a:	e7ef      	b.n	23fca0c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fca2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fca2c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fca2e:	4c08      	ldr	r4, [pc, #32]	; (23fca50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fca30:	e8d4 3f8f 	ldab	r3, [r4]
 23fca34:	07db      	lsls	r3, r3, #31
 23fca36:	d409      	bmi.n	23fca4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fca38:	4620      	mov	r0, r4
 23fca3a:	f7fe fccf 	bl	23fb3dc <__cxa_guard_acquire>
 23fca3e:	b128      	cbz	r0, 23fca4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fca40:	4620      	mov	r0, r4
 23fca42:	f7fe fcd0 	bl	23fb3e6 <__cxa_guard_release>
 23fca46:	4803      	ldr	r0, [pc, #12]	; (23fca54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fca48:	f002 feba 	bl	23ff7c0 <atexit>
}
 23fca4c:	4802      	ldr	r0, [pc, #8]	; (23fca58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fca4e:	bd10      	pop	{r4, pc}
 23fca50:	1007ae68 	.word	0x1007ae68
 23fca54:	023fc7bf 	.word	0x023fc7bf
 23fca58:	1007adac 	.word	0x1007adac

023fca5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fca5c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fca5e:	4c08      	ldr	r4, [pc, #32]	; (23fca80 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fca60:	e8d4 3f8f 	ldab	r3, [r4]
 23fca64:	07db      	lsls	r3, r3, #31
 23fca66:	d409      	bmi.n	23fca7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fca68:	4620      	mov	r0, r4
 23fca6a:	f7fe fcb7 	bl	23fb3dc <__cxa_guard_acquire>
 23fca6e:	b128      	cbz	r0, 23fca7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fca70:	4620      	mov	r0, r4
 23fca72:	f7fe fcb8 	bl	23fb3e6 <__cxa_guard_release>
 23fca76:	4803      	ldr	r0, [pc, #12]	; (23fca84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fca78:	f002 fea2 	bl	23ff7c0 <atexit>
    return &factory;
}
 23fca7c:	4802      	ldr	r0, [pc, #8]	; (23fca88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fca7e:	bd10      	pop	{r4, pc}
 23fca80:	1007ae6c 	.word	0x1007ae6c
 23fca84:	023fc827 	.word	0x023fc827
 23fca88:	1007adb0 	.word	0x1007adb0

023fca8c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fca8c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fca8e:	2500      	movs	r5, #0
 23fca90:	4604      	mov	r4, r0
 23fca92:	e9c0 5500 	strd	r5, r5, [r0]
 23fca96:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fca9a:	6085      	str	r5, [r0, #8]
 23fca9c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fca9e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fcaa2:	f7fe ff63 	bl	23fb96c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fcaa6:	f7ff ffc1 	bl	23fca2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fcaaa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcaac:	f7ff ffd6 	bl	23fca5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fcab0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcab2:	6220      	str	r0, [r4, #32]
}
 23fcab4:	4620      	mov	r0, r4
 23fcab6:	bd38      	pop	{r3, r4, r5, pc}

023fcab8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fcab8:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fcaba:	4c0a      	ldr	r4, [pc, #40]	; (23fcae4 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fcabc:	e8d4 3f8f 	ldab	r3, [r4]
 23fcac0:	07db      	lsls	r3, r3, #31
 23fcac2:	d40c      	bmi.n	23fcade <_ZN5spark10LogManager8instanceEv+0x26>
 23fcac4:	4620      	mov	r0, r4
 23fcac6:	f7fe fc89 	bl	23fb3dc <__cxa_guard_acquire>
 23fcaca:	b140      	cbz	r0, 23fcade <_ZN5spark10LogManager8instanceEv+0x26>
 23fcacc:	4806      	ldr	r0, [pc, #24]	; (23fcae8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcace:	f7ff ffdd 	bl	23fca8c <_ZN5spark10LogManagerC1Ev>
 23fcad2:	4620      	mov	r0, r4
 23fcad4:	f7fe fc87 	bl	23fb3e6 <__cxa_guard_release>
 23fcad8:	4804      	ldr	r0, [pc, #16]	; (23fcaec <_ZN5spark10LogManager8instanceEv+0x34>)
 23fcada:	f002 fe71 	bl	23ff7c0 <atexit>
    return &mgr;
}
 23fcade:	4802      	ldr	r0, [pc, #8]	; (23fcae8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcae0:	bd10      	pop	{r4, pc}
 23fcae2:	bf00      	nop
 23fcae4:	1007ae64 	.word	0x1007ae64
 23fcae8:	1007ae74 	.word	0x1007ae74
 23fcaec:	023fd009 	.word	0x023fd009

023fcaf0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fcaf0:	2300      	movs	r3, #0
 23fcaf2:	4a02      	ldr	r2, [pc, #8]	; (23fcafc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fcaf4:	4902      	ldr	r1, [pc, #8]	; (23fcb00 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fcaf6:	4803      	ldr	r0, [pc, #12]	; (23fcb04 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fcaf8:	f7ff b9ca 	b.w	23fbe90 <log_set_callbacks>
 23fcafc:	023fcdf1 	.word	0x023fcdf1
 23fcb00:	023fcd7d 	.word	0x023fcd7d
 23fcb04:	023fccfd 	.word	0x023fccfd

023fcb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fcb08:	2300      	movs	r3, #0
 23fcb0a:	461a      	mov	r2, r3
 23fcb0c:	4619      	mov	r1, r3
 23fcb0e:	4618      	mov	r0, r3
 23fcb10:	f7ff b9be 	b.w	23fbe90 <log_set_callbacks>

023fcb14 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fcb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcb16:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fcb18:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fcb1a:	4668      	mov	r0, sp
 23fcb1c:	f7ff fea2 	bl	23fc864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcb20:	466a      	mov	r2, sp
 23fcb22:	4629      	mov	r1, r5
 23fcb24:	4620      	mov	r0, r4
 23fcb26:	f7ff fd4f 	bl	23fc5c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fcb2a:	a801      	add	r0, sp, #4
 23fcb2c:	f7ff fb1f 	bl	23fc16e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcb30:	4620      	mov	r0, r4
 23fcb32:	b003      	add	sp, #12
 23fcb34:	bd30      	pop	{r4, r5, pc}

023fcb36 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fcb36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcb38:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fcb3a:	68cd      	ldr	r5, [r1, #12]
 23fcb3c:	4668      	mov	r0, sp
 23fcb3e:	f7ff fe91 	bl	23fc864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcb42:	466a      	mov	r2, sp
 23fcb44:	4629      	mov	r1, r5
 23fcb46:	4620      	mov	r0, r4
 23fcb48:	f7ff fd1a 	bl	23fc580 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcb4c:	a801      	add	r0, sp, #4
 23fcb4e:	f7ff fb0e 	bl	23fc16e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcb52:	4620      	mov	r0, r4
 23fcb54:	b003      	add	sp, #12
 23fcb56:	bd30      	pop	{r4, r5, pc}

023fcb58 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fcb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcb5a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fcb5c:	690d      	ldr	r5, [r1, #16]
 23fcb5e:	4668      	mov	r0, sp
 23fcb60:	f7ff fe80 	bl	23fc864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcb64:	466a      	mov	r2, sp
 23fcb66:	4629      	mov	r1, r5
 23fcb68:	4620      	mov	r0, r4
 23fcb6a:	f7ff fcb2 	bl	23fc4d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcb6e:	a801      	add	r0, sp, #4
 23fcb70:	f7ff fafd 	bl	23fc16e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcb74:	4620      	mov	r0, r4
 23fcb76:	b003      	add	sp, #12
 23fcb78:	bd30      	pop	{r4, r5, pc}
	...

023fcb7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fcb7c:	b570      	push	{r4, r5, r6, lr}
 23fcb7e:	b08a      	sub	sp, #40	; 0x28
 23fcb80:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fcb82:	4601      	mov	r1, r0
 23fcb84:	a804      	add	r0, sp, #16
 23fcb86:	f7ff ffc5 	bl	23fcb14 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fcb8a:	4e14      	ldr	r6, [pc, #80]	; (23fcbdc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fcb8c:	a804      	add	r0, sp, #16
 23fcb8e:	f7ff fd33 	bl	23fc5f8 <_ZN5spark18JSONObjectIterator4nextEv>
 23fcb92:	b1e8      	cbz	r0, 23fcbd0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fcb94:	4668      	mov	r0, sp
 23fcb96:	a904      	add	r1, sp, #16
 23fcb98:	f7ff ffcd 	bl	23fcb36 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fcb9c:	4631      	mov	r1, r6
 23fcb9e:	9802      	ldr	r0, [sp, #8]
 23fcba0:	f7ff fe3a 	bl	23fc818 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fcba4:	4604      	mov	r4, r0
 23fcba6:	b110      	cbz	r0, 23fcbae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fcba8:	1e2c      	subs	r4, r5, #0
 23fcbaa:	bf18      	it	ne
 23fcbac:	2401      	movne	r4, #1
 23fcbae:	a801      	add	r0, sp, #4
 23fcbb0:	f7ff fadd 	bl	23fc16e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcbb4:	2c00      	cmp	r4, #0
 23fcbb6:	d0e9      	beq.n	23fcb8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fcbb8:	4668      	mov	r0, sp
 23fcbba:	a904      	add	r1, sp, #16
 23fcbbc:	f7ff ffcc 	bl	23fcb58 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fcbc0:	4668      	mov	r0, sp
 23fcbc2:	f7ff fcbc 	bl	23fc53e <_ZNK5spark9JSONValue5toIntEv>
 23fcbc6:	6028      	str	r0, [r5, #0]
 23fcbc8:	a801      	add	r0, sp, #4
 23fcbca:	f7ff fad0 	bl	23fc16e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcbce:	e7dd      	b.n	23fcb8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fcbd0:	a805      	add	r0, sp, #20
 23fcbd2:	f7ff facc 	bl	23fc16e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcbd6:	b00a      	add	sp, #40	; 0x28
 23fcbd8:	bd70      	pop	{r4, r5, r6, pc}
 23fcbda:	bf00      	nop
 23fcbdc:	023ffbec 	.word	0x023ffbec

023fcbe0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcbe2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fcbe4:	4913      	ldr	r1, [pc, #76]	; (23fcc34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fcbe6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcbe8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fcbea:	f7fe fbb5 	bl	23fb358 <strcmp>
 23fcbee:	b950      	cbnz	r0, 23fcc06 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fcbf0:	f001 f842 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fcbf4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fcbf8:	f001 f82e 	bl	23fdc58 <_ZN9USBSerial5beginEl>
}
 23fcbfc:	b003      	add	sp, #12
 23fcbfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fcc02:	f001 b839 	b.w	23fdc78 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fcc06:	4620      	mov	r0, r4
 23fcc08:	490b      	ldr	r1, [pc, #44]	; (23fcc38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fcc0a:	f7fe fba5 	bl	23fb358 <strcmp>
 23fcc0e:	b978      	cbnz	r0, 23fcc30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fcc10:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fcc14:	a901      	add	r1, sp, #4
 23fcc16:	4628      	mov	r0, r5
        int baud = 9600;
 23fcc18:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fcc1a:	f7ff ffaf 	bl	23fcb7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fcc1e:	f001 fa0d 	bl	23fe03c <_Z22__fetch_global_Serial1v>
 23fcc22:	9901      	ldr	r1, [sp, #4]
 23fcc24:	f000 ffbc 	bl	23fdba0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fcc28:	f001 fa08 	bl	23fe03c <_Z22__fetch_global_Serial1v>
}
 23fcc2c:	b003      	add	sp, #12
 23fcc2e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fcc30:	2000      	movs	r0, #0
 23fcc32:	e7fb      	b.n	23fcc2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fcc34:	023ffbf1 	.word	0x023ffbf1
 23fcc38:	023ffbf8 	.word	0x023ffbf8

023fcc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcc3c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fcc3e:	2614      	movs	r6, #20
 23fcc40:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcc44:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcc46:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcc4a:	42ae      	cmp	r6, r5
 23fcc4c:	d005      	beq.n	23fcc5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fcc4e:	f105 0008 	add.w	r0, r5, #8
 23fcc52:	f7ff fff3 	bl	23fcc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcc56:	3514      	adds	r5, #20
 23fcc58:	e7f7      	b.n	23fcc4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fcc5a:	6820      	ldr	r0, [r4, #0]
 23fcc5c:	f7ff fa30 	bl	23fc0c0 <free>
}
 23fcc60:	4620      	mov	r0, r4
 23fcc62:	bd70      	pop	{r4, r5, r6, pc}

023fcc64 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fcc64:	b510      	push	{r4, lr}
 23fcc66:	4604      	mov	r4, r0
 23fcc68:	300c      	adds	r0, #12
 23fcc6a:	f7ff ffe7 	bl	23fcc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcc6e:	4620      	mov	r0, r4
 23fcc70:	f7ff faa7 	bl	23fc1c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcc74:	4620      	mov	r0, r4
 23fcc76:	bd10      	pop	{r4, pc}

023fcc78 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fcc78:	b510      	push	{r4, lr}
 23fcc7a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fcc7c:	4b03      	ldr	r3, [pc, #12]	; (23fcc8c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fcc7e:	f840 3b04 	str.w	r3, [r0], #4
 23fcc82:	f7ff ffef 	bl	23fcc64 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fcc86:	4620      	mov	r0, r4
 23fcc88:	bd10      	pop	{r4, pc}
 23fcc8a:	bf00      	nop
 23fcc8c:	023ffb40 	.word	0x023ffb40

023fcc90 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fcc90:	b510      	push	{r4, lr}
 23fcc92:	4604      	mov	r4, r0
 23fcc94:	f7ff fff0 	bl	23fcc78 <_ZN5spark16StreamLogHandlerD1Ev>
 23fcc98:	4620      	mov	r0, r4
 23fcc9a:	2124      	movs	r1, #36	; 0x24
 23fcc9c:	f7fe fb8f 	bl	23fb3be <_ZdlPvj>
 23fcca0:	4620      	mov	r0, r4
 23fcca2:	bd10      	pop	{r4, pc}

023fcca4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fcca4:	b510      	push	{r4, lr}
 23fcca6:	4604      	mov	r4, r0
 23fcca8:	4b02      	ldr	r3, [pc, #8]	; (23fccb4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fccaa:	6003      	str	r3, [r0, #0]
 23fccac:	f7ff ffe4 	bl	23fcc78 <_ZN5spark16StreamLogHandlerD1Ev>
 23fccb0:	4620      	mov	r0, r4
 23fccb2:	bd10      	pop	{r4, pc}
 23fccb4:	023ffc98 	.word	0x023ffc98

023fccb8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fccb8:	b510      	push	{r4, lr}
 23fccba:	4604      	mov	r4, r0
 23fccbc:	f7ff fff2 	bl	23fcca4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fccc0:	4620      	mov	r0, r4
 23fccc2:	2124      	movs	r1, #36	; 0x24
 23fccc4:	f7fe fb7b 	bl	23fb3be <_ZdlPvj>
 23fccc8:	4620      	mov	r0, r4
 23fccca:	bd10      	pop	{r4, pc}

023fcccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fcccc:	2200      	movs	r2, #0
 23fccce:	e9c0 2200 	strd	r2, r2, [r0]
 23fccd2:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fccd4:	b510      	push	{r4, lr}
 23fccd6:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fccd8:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fccda:	6004      	str	r4, [r0, #0]
 23fccdc:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fccde:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcce0:	6044      	str	r4, [r0, #4]
 23fcce2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcce4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcce6:	6084      	str	r4, [r0, #8]
}
 23fcce8:	bd10      	pop	{r4, pc}

023fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fccea:	b510      	push	{r4, lr}
 23fccec:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fccee:	6803      	ldr	r3, [r0, #0]
 23fccf0:	6818      	ldr	r0, [r3, #0]
 23fccf2:	f7fe fe65 	bl	23fb9c0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fccf6:	4620      	mov	r0, r4
 23fccf8:	bd10      	pop	{r4, pc}
	...

023fccfc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcd00:	b087      	sub	sp, #28
 23fcd02:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fcd04:	4b1c      	ldr	r3, [pc, #112]	; (23fcd78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fcd06:	4680      	mov	r8, r0
 23fcd08:	685b      	ldr	r3, [r3, #4]
 23fcd0a:	4689      	mov	r9, r1
 23fcd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fcd10:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fcd12:	b96b      	cbnz	r3, 23fcd30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fcd14:	f7ff fed0 	bl	23fcab8 <_ZN5spark10LogManager8instanceEv>
 23fcd18:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcd1a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fcd1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcd20:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fcd22:	f7ff fd77 	bl	23fc814 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fcd26:	7b23      	ldrb	r3, [r4, #12]
 23fcd28:	b12b      	cbz	r3, 23fcd36 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fcd2a:	a805      	add	r0, sp, #20
 23fcd2c:	f7ff ffdd 	bl	23fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fcd30:	b007      	add	sp, #28
 23fcd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fcd36:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fcd38:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fcd3c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fcd3e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fcd42:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcd46:	45aa      	cmp	sl, r5
 23fcd48:	d012      	beq.n	23fcd70 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fcd4a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fcd4e:	4631      	mov	r1, r6
 23fcd50:	1d38      	adds	r0, r7, #4
 23fcd52:	f7ff fe09 	bl	23fc968 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fcd56:	4581      	cmp	r9, r0
 23fcd58:	d3f5      	bcc.n	23fcd46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fcd5a:	9a03      	ldr	r2, [sp, #12]
 23fcd5c:	683b      	ldr	r3, [r7, #0]
 23fcd5e:	9200      	str	r2, [sp, #0]
 23fcd60:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fcd64:	464a      	mov	r2, r9
 23fcd66:	4633      	mov	r3, r6
 23fcd68:	4641      	mov	r1, r8
 23fcd6a:	4638      	mov	r0, r7
 23fcd6c:	47d8      	blx	fp
 23fcd6e:	e7ea      	b.n	23fcd46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fcd70:	2300      	movs	r3, #0
 23fcd72:	7323      	strb	r3, [r4, #12]
 23fcd74:	e7d9      	b.n	23fcd2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fcd76:	bf00      	nop
 23fcd78:	e000ed00 	.word	0xe000ed00

023fcd7c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fcd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcd80:	469b      	mov	fp, r3
 23fcd82:	4b1a      	ldr	r3, [pc, #104]	; (23fcdec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fcd84:	4680      	mov	r8, r0
 23fcd86:	685b      	ldr	r3, [r3, #4]
 23fcd88:	4689      	mov	r9, r1
 23fcd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fcd8e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fcd90:	b96b      	cbnz	r3, 23fcdae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fcd92:	f7ff fe91 	bl	23fcab8 <_ZN5spark10LogManager8instanceEv>
 23fcd96:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcd98:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcd9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcd9e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fcda0:	f7ff fd38 	bl	23fc814 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fcda4:	7b23      	ldrb	r3, [r4, #12]
 23fcda6:	b12b      	cbz	r3, 23fcdb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fcda8:	a801      	add	r0, sp, #4
 23fcdaa:	f7ff ff9e 	bl	23fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fcdae:	b003      	add	sp, #12
 23fcdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fcdb4:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fcdb6:	b2f6      	uxtb	r6, r6
 23fcdb8:	7323      	strb	r3, [r4, #12]
 23fcdba:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fcdbe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcdc2:	4555      	cmp	r5, sl
 23fcdc4:	d00e      	beq.n	23fcde4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fcdc6:	f855 7b04 	ldr.w	r7, [r5], #4
 23fcdca:	4659      	mov	r1, fp
 23fcdcc:	1d38      	adds	r0, r7, #4
 23fcdce:	f7ff fdcb 	bl	23fc968 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fcdd2:	4286      	cmp	r6, r0
 23fcdd4:	d3f5      	bcc.n	23fcdc2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fcdd6:	683b      	ldr	r3, [r7, #0]
 23fcdd8:	464a      	mov	r2, r9
 23fcdda:	4641      	mov	r1, r8
 23fcddc:	4638      	mov	r0, r7
 23fcdde:	68db      	ldr	r3, [r3, #12]
 23fcde0:	4798      	blx	r3
 23fcde2:	e7ee      	b.n	23fcdc2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fcde4:	2300      	movs	r3, #0
 23fcde6:	7323      	strb	r3, [r4, #12]
 23fcde8:	e7de      	b.n	23fcda8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fcdea:	bf00      	nop
 23fcdec:	e000ed00 	.word	0xe000ed00

023fcdf0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fcdf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fcdf4:	4b16      	ldr	r3, [pc, #88]	; (23fce50 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fcdf6:	4605      	mov	r5, r0
 23fcdf8:	685b      	ldr	r3, [r3, #4]
 23fcdfa:	460f      	mov	r7, r1
 23fcdfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fce00:	bb1b      	cbnz	r3, 23fce4a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fce02:	f7ff fe59 	bl	23fcab8 <_ZN5spark10LogManager8instanceEv>
 23fce06:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fce08:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fce0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fce0e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fce10:	f7ff fd00 	bl	23fc814 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fce14:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fce18:	2446      	movs	r4, #70	; 0x46
 23fce1a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fce1e:	45b0      	cmp	r8, r6
 23fce20:	d109      	bne.n	23fce36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fce22:	a801      	add	r0, sp, #4
 23fce24:	f7ff ff61 	bl	23fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fce28:	42a5      	cmp	r5, r4
 23fce2a:	bfb4      	ite	lt
 23fce2c:	2000      	movlt	r0, #0
 23fce2e:	2001      	movge	r0, #1
}
 23fce30:	b002      	add	sp, #8
 23fce32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fce36:	f856 0b04 	ldr.w	r0, [r6], #4
 23fce3a:	4639      	mov	r1, r7
 23fce3c:	3004      	adds	r0, #4
 23fce3e:	f7ff fd93 	bl	23fc968 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fce42:	4284      	cmp	r4, r0
 23fce44:	bfa8      	it	ge
 23fce46:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fce48:	e7e9      	b.n	23fce1e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fce4a:	2000      	movs	r0, #0
 23fce4c:	e7f0      	b.n	23fce30 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fce4e:	bf00      	nop
 23fce50:	e000ed00 	.word	0xe000ed00

023fce54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fce56:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fce5a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fce5c:	4604      	mov	r4, r0
 23fce5e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fce60:	db0d      	blt.n	23fce7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fce62:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fce64:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fce66:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fce68:	dd04      	ble.n	23fce74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fce6a:	00b9      	lsls	r1, r7, #2
 23fce6c:	f7ff f936 	bl	23fc0dc <realloc>
            if (!d) {
 23fce70:	b918      	cbnz	r0, 23fce7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fce72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fce74:	f7ff f924 	bl	23fc0c0 <free>
        T* d = nullptr;
 23fce78:	2000      	movs	r0, #0
        data_ = d;
 23fce7a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fce7c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fce7e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fce80:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fce82:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fce86:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fce88:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fce8c:	1d08      	adds	r0, r1, #4
 23fce8e:	f002 fcb2 	bl	23ff7f6 <memmove>
    new(p) T(std::move(value));
 23fce92:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fce96:	6863      	ldr	r3, [r4, #4]
    return true;
 23fce98:	2001      	movs	r0, #1
    ++size_;
 23fce9a:	3301      	adds	r3, #1
 23fce9c:	6063      	str	r3, [r4, #4]
    return true;
 23fce9e:	e7e8      	b.n	23fce72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fcea0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fcea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcea2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fcea4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcea8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fceaa:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fceac:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fceae:	f7ff fcb1 	bl	23fc814 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fceb2:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fceb6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fceba:	4293      	cmp	r3, r2
 23fcebc:	4619      	mov	r1, r3
 23fcebe:	d00a      	beq.n	23fced6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fcec0:	6809      	ldr	r1, [r1, #0]
 23fcec2:	3304      	adds	r3, #4
 23fcec4:	42a9      	cmp	r1, r5
 23fcec6:	d1f8      	bne.n	23fceba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fcec8:	a801      	add	r0, sp, #4
 23fceca:	f7ff ff0e 	bl	23fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fcece:	2500      	movs	r5, #0
}
 23fced0:	4628      	mov	r0, r5
 23fced2:	b003      	add	sp, #12
 23fced4:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fced6:	4629      	mov	r1, r5
 23fced8:	4620      	mov	r0, r4
 23fceda:	f7ff ffbb 	bl	23fce54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fcede:	4605      	mov	r5, r0
 23fcee0:	2800      	cmp	r0, #0
 23fcee2:	d0f1      	beq.n	23fcec8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fcee4:	6863      	ldr	r3, [r4, #4]
 23fcee6:	2b01      	cmp	r3, #1
 23fcee8:	d101      	bne.n	23fceee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fceea:	f7ff fe01 	bl	23fcaf0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fceee:	a801      	add	r0, sp, #4
 23fcef0:	f7ff fefb 	bl	23fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fcef4:	e7ec      	b.n	23fced0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fcef6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fcef6:	460b      	mov	r3, r1
 23fcef8:	b570      	push	{r4, r5, r6, lr}
 23fcefa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fcefc:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fcf00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fcf04:	4282      	cmp	r2, r0
 23fcf06:	d00f      	beq.n	23fcf28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fcf08:	4601      	mov	r1, r0
            if (*p == value) {
 23fcf0a:	681d      	ldr	r5, [r3, #0]
 23fcf0c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fcf10:	42ae      	cmp	r6, r5
 23fcf12:	d107      	bne.n	23fcf24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcf14:	1a52      	subs	r2, r2, r1
 23fcf16:	f002 fc6e 	bl	23ff7f6 <memmove>
    return true;
 23fcf1a:	2001      	movs	r0, #1
    --size_;
 23fcf1c:	6863      	ldr	r3, [r4, #4]
 23fcf1e:	3b01      	subs	r3, #1
 23fcf20:	6063      	str	r3, [r4, #4]
}
 23fcf22:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fcf24:	4608      	mov	r0, r1
 23fcf26:	e7ed      	b.n	23fcf04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fcf28:	2000      	movs	r0, #0
 23fcf2a:	e7fa      	b.n	23fcf22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fcf2c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fcf2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fcf2e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fcf30:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcf34:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fcf36:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcf38:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fcf3a:	f7ff fc6b 	bl	23fc814 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fcf3e:	4620      	mov	r0, r4
 23fcf40:	a901      	add	r1, sp, #4
 23fcf42:	f7ff ffd8 	bl	23fcef6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fcf46:	b118      	cbz	r0, 23fcf50 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fcf48:	6863      	ldr	r3, [r4, #4]
 23fcf4a:	b90b      	cbnz	r3, 23fcf50 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fcf4c:	f7ff fddc 	bl	23fcb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fcf50:	a803      	add	r0, sp, #12
 23fcf52:	f7ff feca 	bl	23fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fcf56:	b004      	add	sp, #16
 23fcf58:	bd10      	pop	{r4, pc}

023fcf5a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fcf5a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fcf5c:	b570      	push	{r4, r5, r6, lr}
 23fcf5e:	4604      	mov	r4, r0
 23fcf60:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fcf64:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fcf68:	42ae      	cmp	r6, r5
 23fcf6a:	d015      	beq.n	23fcf98 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fcf6c:	4620      	mov	r0, r4
 23fcf6e:	f105 0110 	add.w	r1, r5, #16
 23fcf72:	f7ff ffc0 	bl	23fcef6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fcf76:	6863      	ldr	r3, [r4, #4]
 23fcf78:	b90b      	cbnz	r3, 23fcf7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fcf7a:	f7ff fdc5 	bl	23fcb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fcf7e:	69e0      	ldr	r0, [r4, #28]
 23fcf80:	6929      	ldr	r1, [r5, #16]
 23fcf82:	6803      	ldr	r3, [r0, #0]
 23fcf84:	68db      	ldr	r3, [r3, #12]
 23fcf86:	4798      	blx	r3
        if (h.stream) {
 23fcf88:	6969      	ldr	r1, [r5, #20]
 23fcf8a:	b119      	cbz	r1, 23fcf94 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fcf8c:	6a20      	ldr	r0, [r4, #32]
 23fcf8e:	6803      	ldr	r3, [r0, #0]
 23fcf90:	68db      	ldr	r3, [r3, #12]
 23fcf92:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fcf94:	3518      	adds	r5, #24
 23fcf96:	e7e7      	b.n	23fcf68 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fcf98:	2618      	movs	r6, #24
 23fcf9a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fcf9e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcfa2:	42ae      	cmp	r6, r5
 23fcfa4:	d004      	beq.n	23fcfb0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fcfa6:	4628      	mov	r0, r5
 23fcfa8:	f000 fcfa 	bl	23fd9a0 <_ZN6StringD1Ev>
 23fcfac:	3518      	adds	r5, #24
 23fcfae:	e7f8      	b.n	23fcfa2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fcfb0:	2300      	movs	r3, #0
 23fcfb2:	6163      	str	r3, [r4, #20]
}
 23fcfb4:	bd70      	pop	{r4, r5, r6, pc}

023fcfb6 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fcfb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fcfb8:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fcfba:	f7ff fda5 	bl	23fcb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fcfbe:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fcfc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcfc4:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fcfc6:	f7ff fc25 	bl	23fc814 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fcfca:	4620      	mov	r0, r4
 23fcfcc:	f7ff ffc5 	bl	23fcf5a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fcfd0:	a801      	add	r0, sp, #4
 23fcfd2:	f7ff fe8a 	bl	23fccea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fcfd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fcfd8:	b108      	cbz	r0, 23fcfde <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fcfda:	f7fe fcd5 	bl	23fb988 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fcfde:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fcfe2:	2618      	movs	r6, #24
 23fcfe4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcfe8:	42ae      	cmp	r6, r5
 23fcfea:	d004      	beq.n	23fcff6 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fcfec:	4628      	mov	r0, r5
 23fcfee:	f000 fcd7 	bl	23fd9a0 <_ZN6StringD1Ev>
 23fcff2:	3518      	adds	r5, #24
 23fcff4:	e7f8      	b.n	23fcfe8 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fcff6:	6920      	ldr	r0, [r4, #16]
 23fcff8:	f7ff f862 	bl	23fc0c0 <free>
 23fcffc:	6820      	ldr	r0, [r4, #0]
 23fcffe:	f7ff f85f 	bl	23fc0c0 <free>
}
 23fd002:	4620      	mov	r0, r4
 23fd004:	b002      	add	sp, #8
 23fd006:	bd70      	pop	{r4, r5, r6, pc}

023fd008 <__tcf_2>:
    static LogManager mgr;
 23fd008:	4801      	ldr	r0, [pc, #4]	; (23fd010 <__tcf_2+0x8>)
 23fd00a:	f7ff bfd4 	b.w	23fcfb6 <_ZN5spark10LogManagerD1Ev>
 23fd00e:	bf00      	nop
 23fd010:	1007ae74 	.word	0x1007ae74

023fd014 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd014:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd018:	4604      	mov	r4, r0
 23fd01a:	460d      	mov	r5, r1
 23fd01c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd01e:	d915      	bls.n	23fd04c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd020:	4290      	cmp	r0, r2
 23fd022:	d214      	bcs.n	23fd04e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd024:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd028:	1a75      	subs	r5, r6, r1
 23fd02a:	f1a1 0714 	sub.w	r7, r1, #20
 23fd02e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd030:	42b7      	cmp	r7, r6
 23fd032:	d01a      	beq.n	23fd06a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd034:	b11c      	cbz	r4, 23fd03e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd036:	4631      	mov	r1, r6
 23fd038:	4620      	mov	r0, r4
 23fd03a:	f7ff fc45 	bl	23fc8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd03e:	f106 0008 	add.w	r0, r6, #8
 23fd042:	f7ff fdfb 	bl	23fcc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd046:	3e14      	subs	r6, #20
 23fd048:	3c14      	subs	r4, #20
 23fd04a:	e7f1      	b.n	23fd030 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd04c:	d00d      	beq.n	23fd06a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd04e:	42b5      	cmp	r5, r6
 23fd050:	d00b      	beq.n	23fd06a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd052:	b11c      	cbz	r4, 23fd05c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd054:	4629      	mov	r1, r5
 23fd056:	4620      	mov	r0, r4
 23fd058:	f7ff fc36 	bl	23fc8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd05c:	f105 0008 	add.w	r0, r5, #8
 23fd060:	f7ff fdec 	bl	23fcc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd064:	3514      	adds	r5, #20
 23fd066:	3414      	adds	r4, #20
 23fd068:	e7f1      	b.n	23fd04e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd06c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd06c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd070:	4604      	mov	r4, r0
 23fd072:	460d      	mov	r5, r1
 23fd074:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd076:	d914      	bls.n	23fd0a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd078:	4290      	cmp	r0, r2
 23fd07a:	d213      	bcs.n	23fd0a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd07c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd080:	1a75      	subs	r5, r6, r1
 23fd082:	f1a1 0710 	sub.w	r7, r1, #16
 23fd086:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd088:	42b7      	cmp	r7, r6
 23fd08a:	d018      	beq.n	23fd0be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd08c:	b11c      	cbz	r4, 23fd096 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd08e:	4631      	mov	r1, r6
 23fd090:	4620      	mov	r0, r4
 23fd092:	f000 fcee 	bl	23fda72 <_ZN6StringC1EOS_>
                end->~T();
 23fd096:	4630      	mov	r0, r6
 23fd098:	f000 fc82 	bl	23fd9a0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd09c:	3e10      	subs	r6, #16
 23fd09e:	3c10      	subs	r4, #16
 23fd0a0:	e7f2      	b.n	23fd088 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd0a2:	d00c      	beq.n	23fd0be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd0a4:	42b5      	cmp	r5, r6
 23fd0a6:	d00a      	beq.n	23fd0be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd0a8:	b11c      	cbz	r4, 23fd0b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd0aa:	4629      	mov	r1, r5
 23fd0ac:	4620      	mov	r0, r4
 23fd0ae:	f000 fce0 	bl	23fda72 <_ZN6StringC1EOS_>
                p->~T();
 23fd0b2:	4628      	mov	r0, r5
 23fd0b4:	f000 fc74 	bl	23fd9a0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd0b8:	3510      	adds	r5, #16
 23fd0ba:	3410      	adds	r4, #16
 23fd0bc:	e7f2      	b.n	23fd0a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd0c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd0c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd0c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd0c4:	4605      	mov	r5, r0
        if (n > 0) {
 23fd0c6:	dd11      	ble.n	23fd0ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd0c8:	0130      	lsls	r0, r6, #4
 23fd0ca:	f7fe ffeb 	bl	23fc0a4 <malloc>
            if (!d) {
 23fd0ce:	4604      	mov	r4, r0
 23fd0d0:	b158      	cbz	r0, 23fd0ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd0d2:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd0d6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd0da:	f7ff ffc7 	bl	23fd06c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd0de:	6828      	ldr	r0, [r5, #0]
 23fd0e0:	f7fe ffee 	bl	23fc0c0 <free>
        return true;
 23fd0e4:	2001      	movs	r0, #1
        data_ = d;
 23fd0e6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd0e8:	60ae      	str	r6, [r5, #8]
    }
 23fd0ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd0ec:	2400      	movs	r4, #0
 23fd0ee:	e7f6      	b.n	23fd0de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd0f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd0f4:	4690      	mov	r8, r2
        capacity_(0) {
 23fd0f6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd0f8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd0fa:	b095      	sub	sp, #84	; 0x54
 23fd0fc:	9103      	str	r1, [sp, #12]
    return size_;
 23fd0fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd102:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd104:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd106:	e9c0 3300 	strd	r3, r3, [r0]
 23fd10a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd112:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd116:	7602      	strb	r2, [r0, #24]
 23fd118:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd11a:	dc23      	bgt.n	23fd164 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd11c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd120:	2314      	movs	r3, #20
 23fd122:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd126:	42af      	cmp	r7, r5
 23fd128:	d03b      	beq.n	23fd1a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd12a:	4629      	mov	r1, r5
 23fd12c:	a80b      	add	r0, sp, #44	; 0x2c
 23fd12e:	f000 fca0 	bl	23fda72 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd132:	a90b      	add	r1, sp, #44	; 0x2c
 23fd134:	a80f      	add	r0, sp, #60	; 0x3c
 23fd136:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd138:	f000 fc9b 	bl	23fda72 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd13c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd140:	4299      	cmp	r1, r3
 23fd142:	da1b      	bge.n	23fd17c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd144:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd146:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd148:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd14c:	4631      	mov	r1, r6
 23fd14e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd152:	f106 0010 	add.w	r0, r6, #16
 23fd156:	f7ff ff89 	bl	23fd06c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd15a:	b9ee      	cbnz	r6, 23fd198 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd15e:	3301      	adds	r3, #1
 23fd160:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd162:	e011      	b.n	23fd188 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd164:	a808      	add	r0, sp, #32
 23fd166:	f7ff ffab 	bl	23fd0c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd16a:	2800      	cmp	r0, #0
 23fd16c:	d1d6      	bne.n	23fd11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd16e:	a808      	add	r0, sp, #32
 23fd170:	f7ff f827 	bl	23fc1c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd174:	4620      	mov	r0, r4
 23fd176:	b015      	add	sp, #84	; 0x54
 23fd178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd17c:	3101      	adds	r1, #1
 23fd17e:	a808      	add	r0, sp, #32
 23fd180:	f7ff ff9e 	bl	23fd0c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd184:	2800      	cmp	r0, #0
 23fd186:	d1dd      	bne.n	23fd144 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd188:	a80f      	add	r0, sp, #60	; 0x3c
 23fd18a:	f000 fc09 	bl	23fd9a0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd18e:	a80b      	add	r0, sp, #44	; 0x2c
 23fd190:	f000 fc06 	bl	23fd9a0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd194:	3514      	adds	r5, #20
 23fd196:	e7c6      	b.n	23fd126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd198:	4630      	mov	r0, r6
 23fd19a:	a90f      	add	r1, sp, #60	; 0x3c
 23fd19c:	f000 fc69 	bl	23fda72 <_ZN6StringC1EOS_>
 23fd1a0:	e7dc      	b.n	23fd15c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd1a2:	2600      	movs	r6, #0
 23fd1a4:	f04f 0914 	mov.w	r9, #20
 23fd1a8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd1ac:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd1ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd1b2:	429e      	cmp	r6, r3
 23fd1b4:	da7c      	bge.n	23fd2b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fd1b6:	0133      	lsls	r3, r6, #4
 23fd1b8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd1ba:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd1bc:	b90b      	cbnz	r3, 23fd1c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd1be:	3601      	adds	r6, #1
 23fd1c0:	e7f5      	b.n	23fd1ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd1c2:	2300      	movs	r3, #0
 23fd1c4:	9307      	str	r3, [sp, #28]
 23fd1c6:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd1ca:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd1cc:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd1ce:	a907      	add	r1, sp, #28
 23fd1d0:	a806      	add	r0, sp, #24
 23fd1d2:	f7ff faf8 	bl	23fc7c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd1d6:	4682      	mov	sl, r0
 23fd1d8:	2800      	cmp	r0, #0
 23fd1da:	d0f0      	beq.n	23fd1be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd1dc:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd1e0:	4601      	mov	r1, r0
            bool found = false;
 23fd1e2:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd1e6:	4628      	mov	r0, r5
 23fd1e8:	9a07      	ldr	r2, [sp, #28]
 23fd1ea:	f10d 0317 	add.w	r3, sp, #23
 23fd1ee:	f7ff fb7f 	bl	23fc8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd1f2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd1f6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd1f8:	2f00      	cmp	r7, #0
 23fd1fa:	d14a      	bne.n	23fd292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd1fc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd200:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd204:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd20c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd210:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd214:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd216:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd21a:	4293      	cmp	r3, r2
 23fd21c:	db17      	blt.n	23fd24e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd21e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd222:	f1ba 0f00 	cmp.w	sl, #0
 23fd226:	dd30      	ble.n	23fd28a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd228:	fb09 f00a 	mul.w	r0, r9, sl
 23fd22c:	f7fe ff3a 	bl	23fc0a4 <malloc>
            if (!d) {
 23fd230:	4683      	mov	fp, r0
 23fd232:	b360      	cbz	r0, 23fd28e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd234:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd238:	fb09 1202 	mla	r2, r9, r2, r1
 23fd23c:	f7ff feea 	bl	23fd014 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd240:	6828      	ldr	r0, [r5, #0]
 23fd242:	f7fe ff3d 	bl	23fc0c0 <free>
        data_ = d;
 23fd246:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd24a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd24e:	682b      	ldr	r3, [r5, #0]
 23fd250:	9a01      	ldr	r2, [sp, #4]
 23fd252:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd256:	686a      	ldr	r2, [r5, #4]
 23fd258:	4651      	mov	r1, sl
 23fd25a:	fb09 3202 	mla	r2, r9, r2, r3
 23fd25e:	f10a 0014 	add.w	r0, sl, #20
 23fd262:	f7ff fed7 	bl	23fd014 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd266:	f1ba 0f00 	cmp.w	sl, #0
 23fd26a:	d003      	beq.n	23fd274 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd26c:	4650      	mov	r0, sl
 23fd26e:	a90f      	add	r1, sp, #60	; 0x3c
 23fd270:	f7ff fb2a 	bl	23fc8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd274:	686b      	ldr	r3, [r5, #4]
 23fd276:	3301      	adds	r3, #1
 23fd278:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd27a:	a811      	add	r0, sp, #68	; 0x44
 23fd27c:	f7ff fcde 	bl	23fcc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd280:	b13f      	cbz	r7, 23fd292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd282:	a80b      	add	r0, sp, #44	; 0x2c
 23fd284:	f7ff fcda 	bl	23fcc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd288:	e771      	b.n	23fd16e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd28a:	46bb      	mov	fp, r7
 23fd28c:	e7d8      	b.n	23fd240 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd28e:	2701      	movs	r7, #1
 23fd290:	e7f3      	b.n	23fd27a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd292:	9b01      	ldr	r3, [sp, #4]
 23fd294:	682d      	ldr	r5, [r5, #0]
 23fd296:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd29a:	9b06      	ldr	r3, [sp, #24]
 23fd29c:	781b      	ldrb	r3, [r3, #0]
 23fd29e:	b92b      	cbnz	r3, 23fd2ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd2a0:	f8d8 3000 	ldr.w	r3, [r8]
 23fd2a4:	9a02      	ldr	r2, [sp, #8]
 23fd2a6:	4413      	add	r3, r2
 23fd2a8:	7c1b      	ldrb	r3, [r3, #16]
 23fd2aa:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd2ac:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd2ae:	e78e      	b.n	23fd1ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd2b0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd2b2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd2b4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd2b6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd2b8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd2ba:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd2be:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd2c0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd2c2:	60a2      	str	r2, [r4, #8]
 23fd2c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd2c6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd2c8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd2ca:	60e2      	str	r2, [r4, #12]
 23fd2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd2ce:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd2d0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd2d2:	6122      	str	r2, [r4, #16]
 23fd2d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd2d6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd2d8:	9b03      	ldr	r3, [sp, #12]
 23fd2da:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd2dc:	6162      	str	r2, [r4, #20]
 23fd2de:	7623      	strb	r3, [r4, #24]
 23fd2e0:	e7cf      	b.n	23fd282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd2e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd2e6:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd2e8:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd2ea:	4617      	mov	r7, r2
 23fd2ec:	b087      	sub	sp, #28
 23fd2ee:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd2f0:	4668      	mov	r0, sp
 23fd2f2:	4619      	mov	r1, r3
 23fd2f4:	f7fe f90b 	bl	23fb50e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd2f8:	4b0b      	ldr	r3, [pc, #44]	; (23fd328 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd2fa:	4669      	mov	r1, sp
 23fd2fc:	f846 3b04 	str.w	r3, [r6], #4
 23fd300:	a803      	add	r0, sp, #12
 23fd302:	f7fe f904 	bl	23fb50e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd306:	4639      	mov	r1, r7
 23fd308:	aa03      	add	r2, sp, #12
 23fd30a:	4630      	mov	r0, r6
 23fd30c:	f7ff fef0 	bl	23fd0f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd310:	a803      	add	r0, sp, #12
 23fd312:	f7fe f8bb 	bl	23fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd316:	4668      	mov	r0, sp
 23fd318:	f7fe f8b8 	bl	23fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd31c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd31e:	4b03      	ldr	r3, [pc, #12]	; (23fd32c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd320:	6225      	str	r5, [r4, #32]
 23fd322:	6023      	str	r3, [r4, #0]
}
 23fd324:	b007      	add	sp, #28
 23fd326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd328:	023ffb40 	.word	0x023ffb40
 23fd32c:	023ffc80 	.word	0x023ffc80

023fd330 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd330:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd332:	460f      	mov	r7, r1
 23fd334:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd336:	4638      	mov	r0, r7
 23fd338:	491c      	ldr	r1, [pc, #112]	; (23fd3ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd33a:	4616      	mov	r6, r2
 23fd33c:	461d      	mov	r5, r3
 23fd33e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd340:	f7fe f80a 	bl	23fb358 <strcmp>
 23fd344:	b9c0      	cbnz	r0, 23fd378 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd346:	b1a4      	cbz	r4, 23fd372 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd348:	4629      	mov	r1, r5
 23fd34a:	a801      	add	r0, sp, #4
 23fd34c:	f7ff fcbe 	bl	23fcccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd350:	2024      	movs	r0, #36	; 0x24
 23fd352:	4917      	ldr	r1, [pc, #92]	; (23fd3b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd354:	f000 ff02 	bl	23fe15c <_ZnwjRKSt9nothrow_t>
 23fd358:	4605      	mov	r5, r0
 23fd35a:	b130      	cbz	r0, 23fd36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd35c:	ab01      	add	r3, sp, #4
 23fd35e:	4632      	mov	r2, r6
 23fd360:	4621      	mov	r1, r4
 23fd362:	f7ff ffbf 	bl	23fd2e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd366:	4b13      	ldr	r3, [pc, #76]	; (23fd3b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd368:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd36a:	a801      	add	r0, sp, #4
 23fd36c:	f7fe f88e 	bl	23fb48c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd370:	462c      	mov	r4, r5
}
 23fd372:	4620      	mov	r0, r4
 23fd374:	b005      	add	sp, #20
 23fd376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd378:	4638      	mov	r0, r7
 23fd37a:	490f      	ldr	r1, [pc, #60]	; (23fd3b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd37c:	f7fd ffec 	bl	23fb358 <strcmp>
 23fd380:	b990      	cbnz	r0, 23fd3a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd382:	2c00      	cmp	r4, #0
 23fd384:	d0f5      	beq.n	23fd372 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd386:	4629      	mov	r1, r5
 23fd388:	a801      	add	r0, sp, #4
 23fd38a:	f7ff fc9f 	bl	23fcccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd38e:	2024      	movs	r0, #36	; 0x24
 23fd390:	4907      	ldr	r1, [pc, #28]	; (23fd3b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd392:	f000 fee3 	bl	23fe15c <_ZnwjRKSt9nothrow_t>
 23fd396:	4605      	mov	r5, r0
 23fd398:	2800      	cmp	r0, #0
 23fd39a:	d0e6      	beq.n	23fd36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fd39c:	4632      	mov	r2, r6
 23fd39e:	4621      	mov	r1, r4
 23fd3a0:	ab01      	add	r3, sp, #4
 23fd3a2:	f7ff ff9f 	bl	23fd2e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd3a6:	e7e0      	b.n	23fd36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fd3a8:	2400      	movs	r4, #0
 23fd3aa:	e7e2      	b.n	23fd372 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fd3ac:	023ffc00 	.word	0x023ffc00
 23fd3b0:	023ffdcc 	.word	0x023ffdcc
 23fd3b4:	023ffc98 	.word	0x023ffc98
 23fd3b8:	023ffc04 	.word	0x023ffc04

023fd3bc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fd3bc:	4b01      	ldr	r3, [pc, #4]	; (23fd3c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd3be:	4a02      	ldr	r2, [pc, #8]	; (23fd3c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd3c0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd3c2:	4770      	bx	lr
 23fd3c4:	1007ae70 	.word	0x1007ae70
 23fd3c8:	023ffc15 	.word	0x023ffc15

023fd3cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd3d0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fd3d2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd3d6:	4604      	mov	r4, r0
 23fd3d8:	460e      	mov	r6, r1
 23fd3da:	4617      	mov	r7, r2
 23fd3dc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fd3de:	f000 fc4b 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fd3e2:	4581      	cmp	r9, r0
 23fd3e4:	d04d      	beq.n	23fd482 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fd3e6:	792b      	ldrb	r3, [r5, #4]
 23fd3e8:	0719      	lsls	r1, r3, #28
 23fd3ea:	d504      	bpl.n	23fd3f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fd3ec:	4620      	mov	r0, r4
 23fd3ee:	696a      	ldr	r2, [r5, #20]
 23fd3f0:	4954      	ldr	r1, [pc, #336]	; (23fd544 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fd3f2:	f7ff fae2 	bl	23fc9ba <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fd3f6:	f1b8 0f00 	cmp.w	r8, #0
 23fd3fa:	d00d      	beq.n	23fd418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fd3fc:	215b      	movs	r1, #91	; 0x5b
 23fd3fe:	4620      	mov	r0, r4
 23fd400:	f7ff fa56 	bl	23fc8b0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fd404:	4641      	mov	r1, r8
 23fd406:	4620      	mov	r0, r4
 23fd408:	f7ff fa43 	bl	23fc892 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fd40c:	6823      	ldr	r3, [r4, #0]
 23fd40e:	2202      	movs	r2, #2
 23fd410:	4620      	mov	r0, r4
 23fd412:	68db      	ldr	r3, [r3, #12]
 23fd414:	494c      	ldr	r1, [pc, #304]	; (23fd548 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fd416:	4798      	blx	r3
    if (attr.has_file) {
 23fd418:	792b      	ldrb	r3, [r5, #4]
 23fd41a:	07da      	lsls	r2, r3, #31
 23fd41c:	d524      	bpl.n	23fd468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fd41e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fd422:	212f      	movs	r1, #47	; 0x2f
 23fd424:	4640      	mov	r0, r8
 23fd426:	f002 fa6a 	bl	23ff8fe <strrchr>
    if (s1) {
 23fd42a:	b108      	cbz	r0, 23fd430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fd42c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fd430:	4641      	mov	r1, r8
 23fd432:	4620      	mov	r0, r4
 23fd434:	f7ff fa2d 	bl	23fc892 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fd438:	792b      	ldrb	r3, [r5, #4]
 23fd43a:	079b      	lsls	r3, r3, #30
 23fd43c:	d508      	bpl.n	23fd450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fd43e:	213a      	movs	r1, #58	; 0x3a
 23fd440:	4620      	mov	r0, r4
 23fd442:	f7ff fa35 	bl	23fc8b0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fd446:	4620      	mov	r0, r4
 23fd448:	68ea      	ldr	r2, [r5, #12]
 23fd44a:	4940      	ldr	r1, [pc, #256]	; (23fd54c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fd44c:	f7ff fab5 	bl	23fc9ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fd450:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fd452:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fd454:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fd458:	4620      	mov	r0, r4
            write(", ", 2);
 23fd45a:	f04f 0202 	mov.w	r2, #2
 23fd45e:	68db      	ldr	r3, [r3, #12]
 23fd460:	bf14      	ite	ne
 23fd462:	493b      	ldrne	r1, [pc, #236]	; (23fd550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fd464:	493b      	ldreq	r1, [pc, #236]	; (23fd554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd466:	4798      	blx	r3
    if (attr.has_function) {
 23fd468:	792b      	ldrb	r3, [r5, #4]
 23fd46a:	0758      	lsls	r0, r3, #29
 23fd46c:	d51d      	bpl.n	23fd4aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd46e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd470:	460b      	mov	r3, r1
 23fd472:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fd474:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd478:	b160      	cbz	r0, 23fd494 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fd47a:	2820      	cmp	r0, #32
 23fd47c:	d108      	bne.n	23fd490 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fd47e:	4619      	mov	r1, r3
 23fd480:	e7f7      	b.n	23fd472 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fd482:	4835      	ldr	r0, [pc, #212]	; (23fd558 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fd484:	f000 f983 	bl	23fd78e <_ZN5spark12NetworkClass9listeningEv>
 23fd488:	2800      	cmp	r0, #0
 23fd48a:	d0ac      	beq.n	23fd3e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fd48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fd490:	2828      	cmp	r0, #40	; 0x28
 23fd492:	d1ee      	bne.n	23fd472 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fd494:	6823      	ldr	r3, [r4, #0]
 23fd496:	1a52      	subs	r2, r2, r1
 23fd498:	4620      	mov	r0, r4
 23fd49a:	68db      	ldr	r3, [r3, #12]
 23fd49c:	4798      	blx	r3
        write("(): ", 4);
 23fd49e:	6823      	ldr	r3, [r4, #0]
 23fd4a0:	2204      	movs	r2, #4
 23fd4a2:	4620      	mov	r0, r4
 23fd4a4:	68db      	ldr	r3, [r3, #12]
 23fd4a6:	492d      	ldr	r1, [pc, #180]	; (23fd55c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fd4a8:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fd4aa:	2100      	movs	r1, #0
 23fd4ac:	4638      	mov	r0, r7
 23fd4ae:	f7fe fce1 	bl	23fbe74 <log_level_name>
 23fd4b2:	4601      	mov	r1, r0
    write(s);
 23fd4b4:	4620      	mov	r0, r4
 23fd4b6:	f7ff f9ec 	bl	23fc892 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fd4ba:	6823      	ldr	r3, [r4, #0]
 23fd4bc:	2202      	movs	r2, #2
 23fd4be:	4620      	mov	r0, r4
 23fd4c0:	68db      	ldr	r3, [r3, #12]
 23fd4c2:	4924      	ldr	r1, [pc, #144]	; (23fd554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd4c4:	4798      	blx	r3
    if (msg) {
 23fd4c6:	b11e      	cbz	r6, 23fd4d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fd4c8:	4631      	mov	r1, r6
 23fd4ca:	4620      	mov	r0, r4
 23fd4cc:	f7ff f9e1 	bl	23fc892 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fd4d0:	792b      	ldrb	r3, [r5, #4]
 23fd4d2:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fd4d6:	d02c      	beq.n	23fd532 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fd4d8:	6823      	ldr	r3, [r4, #0]
 23fd4da:	4921      	ldr	r1, [pc, #132]	; (23fd560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fd4dc:	68db      	ldr	r3, [r3, #12]
 23fd4de:	2202      	movs	r2, #2
 23fd4e0:	4620      	mov	r0, r4
 23fd4e2:	4798      	blx	r3
        if (attr.has_code) {
 23fd4e4:	792b      	ldrb	r3, [r5, #4]
 23fd4e6:	06d9      	lsls	r1, r3, #27
 23fd4e8:	d50a      	bpl.n	23fd500 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fd4ea:	6823      	ldr	r3, [r4, #0]
 23fd4ec:	2207      	movs	r2, #7
 23fd4ee:	4620      	mov	r0, r4
 23fd4f0:	491c      	ldr	r1, [pc, #112]	; (23fd564 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fd4f2:	68db      	ldr	r3, [r3, #12]
 23fd4f4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fd4f6:	4620      	mov	r0, r4
 23fd4f8:	69aa      	ldr	r2, [r5, #24]
 23fd4fa:	491b      	ldr	r1, [pc, #108]	; (23fd568 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fd4fc:	f7ff fa5d 	bl	23fc9ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fd500:	792b      	ldrb	r3, [r5, #4]
 23fd502:	069a      	lsls	r2, r3, #26
 23fd504:	d511      	bpl.n	23fd52a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fd506:	06db      	lsls	r3, r3, #27
 23fd508:	d505      	bpl.n	23fd516 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fd50a:	6823      	ldr	r3, [r4, #0]
 23fd50c:	2202      	movs	r2, #2
 23fd50e:	4620      	mov	r0, r4
 23fd510:	68db      	ldr	r3, [r3, #12]
 23fd512:	490f      	ldr	r1, [pc, #60]	; (23fd550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fd514:	4798      	blx	r3
            write("details = ", 10);
 23fd516:	6823      	ldr	r3, [r4, #0]
 23fd518:	4620      	mov	r0, r4
 23fd51a:	4914      	ldr	r1, [pc, #80]	; (23fd56c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fd51c:	220a      	movs	r2, #10
 23fd51e:	68db      	ldr	r3, [r3, #12]
 23fd520:	4798      	blx	r3
            write(attr.details);
 23fd522:	4620      	mov	r0, r4
 23fd524:	69e9      	ldr	r1, [r5, #28]
 23fd526:	f7ff f9b4 	bl	23fc892 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fd52a:	215d      	movs	r1, #93	; 0x5d
 23fd52c:	4620      	mov	r0, r4
 23fd52e:	f7ff f9bf 	bl	23fc8b0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fd532:	6823      	ldr	r3, [r4, #0]
 23fd534:	4620      	mov	r0, r4
}
 23fd536:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fd53a:	2202      	movs	r2, #2
 23fd53c:	68db      	ldr	r3, [r3, #12]
 23fd53e:	490c      	ldr	r1, [pc, #48]	; (23fd570 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fd540:	4718      	bx	r3
 23fd542:	bf00      	nop
 23fd544:	023ffc19 	.word	0x023ffc19
 23fd548:	023ffc20 	.word	0x023ffc20
 23fd54c:	023ffbe0 	.word	0x023ffbe0
 23fd550:	023ffc23 	.word	0x023ffc23
 23fd554:	023ffc28 	.word	0x023ffc28
 23fd558:	1007ae9c 	.word	0x1007ae9c
 23fd55c:	023ffc26 	.word	0x023ffc26
 23fd560:	023ffc2b 	.word	0x023ffc2b
 23fd564:	023ffc2e 	.word	0x023ffc2e
 23fd568:	023ffc36 	.word	0x023ffc36
 23fd56c:	023ffc39 	.word	0x023ffc39
 23fd570:	023ffc44 	.word	0x023ffc44

023fd574 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd578:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fd57a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd57c:	460d      	mov	r5, r1
 23fd57e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fd580:	f000 fb7a 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fd584:	4287      	cmp	r7, r0
 23fd586:	d007      	beq.n	23fd598 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fd588:	6a20      	ldr	r0, [r4, #32]
 23fd58a:	4632      	mov	r2, r6
 23fd58c:	6803      	ldr	r3, [r0, #0]
 23fd58e:	4629      	mov	r1, r5
}
 23fd590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fd594:	68db      	ldr	r3, [r3, #12]
 23fd596:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fd598:	4803      	ldr	r0, [pc, #12]	; (23fd5a8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fd59a:	f000 f8f8 	bl	23fd78e <_ZN5spark12NetworkClass9listeningEv>
 23fd59e:	2800      	cmp	r0, #0
 23fd5a0:	d0f2      	beq.n	23fd588 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fd5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd5a6:	bf00      	nop
 23fd5a8:	1007ae9c 	.word	0x1007ae9c

023fd5ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd5b0:	b085      	sub	sp, #20
    return stream_;
 23fd5b2:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fd5b6:	4605      	mov	r5, r0
 23fd5b8:	460f      	mov	r7, r1
 23fd5ba:	4690      	mov	r8, r2
 23fd5bc:	461e      	mov	r6, r3
 23fd5be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fd5c0:	f000 fb5a 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fd5c4:	4581      	cmp	r9, r0
 23fd5c6:	d105      	bne.n	23fd5d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fd5c8:	4849      	ldr	r0, [pc, #292]	; (23fd6f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fd5ca:	f000 f8e0 	bl	23fd78e <_ZN5spark12NetworkClass9listeningEv>
 23fd5ce:	2800      	cmp	r0, #0
 23fd5d0:	f040 808a 	bne.w	23fd6e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fd5d4:	f04f 0900 	mov.w	r9, #0
 23fd5d8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fd5da:	4a46      	ldr	r2, [pc, #280]	; (23fd6f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fd5dc:	a801      	add	r0, sp, #4
 23fd5de:	9201      	str	r2, [sp, #4]
 23fd5e0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fd5e2:	f88d 9008 	strb.w	r9, [sp, #8]
 23fd5e6:	f7ff f830 	bl	23fc64a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fd5ea:	4649      	mov	r1, r9
 23fd5ec:	4640      	mov	r0, r8
 23fd5ee:	f7fe fc41 	bl	23fbe74 <log_level_name>
 23fd5f2:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd5f4:	4940      	ldr	r1, [pc, #256]	; (23fd6f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd5f6:	2201      	movs	r2, #1
 23fd5f8:	a801      	add	r0, sp, #4
 23fd5fa:	f7ff f8b5 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd5fe:	4641      	mov	r1, r8
 23fd600:	f7ff f939 	bl	23fc876 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd604:	b13f      	cbz	r7, 23fd616 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd606:	493d      	ldr	r1, [pc, #244]	; (23fd6fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd608:	2201      	movs	r2, #1
 23fd60a:	a801      	add	r0, sp, #4
 23fd60c:	f7ff f8ac 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd610:	4639      	mov	r1, r7
 23fd612:	f7ff f930 	bl	23fc876 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd616:	b13e      	cbz	r6, 23fd628 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd618:	4939      	ldr	r1, [pc, #228]	; (23fd700 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd61a:	2201      	movs	r2, #1
 23fd61c:	a801      	add	r0, sp, #4
 23fd61e:	f7ff f8a3 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd622:	4631      	mov	r1, r6
 23fd624:	f7ff f927 	bl	23fc876 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd628:	7923      	ldrb	r3, [r4, #4]
 23fd62a:	07df      	lsls	r7, r3, #31
 23fd62c:	d50e      	bpl.n	23fd64c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd62e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd630:	212f      	movs	r1, #47	; 0x2f
 23fd632:	4630      	mov	r0, r6
 23fd634:	f002 f963 	bl	23ff8fe <strrchr>
    if (s1) {
 23fd638:	b100      	cbz	r0, 23fd63c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd63a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd63c:	4931      	ldr	r1, [pc, #196]	; (23fd704 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd63e:	2201      	movs	r2, #1
 23fd640:	a801      	add	r0, sp, #4
 23fd642:	f7ff f891 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd646:	4631      	mov	r1, r6
 23fd648:	f7ff f915 	bl	23fc876 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd64c:	7923      	ldrb	r3, [r4, #4]
 23fd64e:	079e      	lsls	r6, r3, #30
 23fd650:	d507      	bpl.n	23fd662 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd652:	492d      	ldr	r1, [pc, #180]	; (23fd708 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd654:	2202      	movs	r2, #2
 23fd656:	a801      	add	r0, sp, #4
 23fd658:	f7ff f886 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd65c:	68e1      	ldr	r1, [r4, #12]
 23fd65e:	f7ff f801 	bl	23fc664 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd662:	7923      	ldrb	r3, [r4, #4]
 23fd664:	0758      	lsls	r0, r3, #29
 23fd666:	d514      	bpl.n	23fd692 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd668:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd66a:	4633      	mov	r3, r6
 23fd66c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd672:	b12a      	cbz	r2, 23fd680 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd674:	2a20      	cmp	r2, #32
 23fd676:	d101      	bne.n	23fd67c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd678:	461e      	mov	r6, r3
 23fd67a:	e7f7      	b.n	23fd66c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd67c:	2a28      	cmp	r2, #40	; 0x28
 23fd67e:	d1f5      	bne.n	23fd66c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd680:	2202      	movs	r2, #2
 23fd682:	4922      	ldr	r1, [pc, #136]	; (23fd70c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd684:	a801      	add	r0, sp, #4
 23fd686:	f7ff f86f 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd68a:	4631      	mov	r1, r6
 23fd68c:	1bba      	subs	r2, r7, r6
 23fd68e:	f7ff f87b 	bl	23fc788 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd692:	7923      	ldrb	r3, [r4, #4]
 23fd694:	0719      	lsls	r1, r3, #28
 23fd696:	d507      	bpl.n	23fd6a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd698:	491d      	ldr	r1, [pc, #116]	; (23fd710 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd69a:	2201      	movs	r2, #1
 23fd69c:	a801      	add	r0, sp, #4
 23fd69e:	f7ff f863 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd6a2:	6961      	ldr	r1, [r4, #20]
 23fd6a4:	f7fe fff0 	bl	23fc688 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd6a8:	7923      	ldrb	r3, [r4, #4]
 23fd6aa:	06da      	lsls	r2, r3, #27
 23fd6ac:	d508      	bpl.n	23fd6c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd6ae:	2204      	movs	r2, #4
 23fd6b0:	4918      	ldr	r1, [pc, #96]	; (23fd714 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd6b2:	eb0d 0002 	add.w	r0, sp, r2
 23fd6b6:	f7ff f857 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd6ba:	69a1      	ldr	r1, [r4, #24]
 23fd6bc:	f7fe ffd2 	bl	23fc664 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd6c0:	7923      	ldrb	r3, [r4, #4]
 23fd6c2:	069b      	lsls	r3, r3, #26
 23fd6c4:	d507      	bpl.n	23fd6d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd6c6:	4914      	ldr	r1, [pc, #80]	; (23fd718 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd6c8:	2206      	movs	r2, #6
 23fd6ca:	a801      	add	r0, sp, #4
 23fd6cc:	f7ff f84c 	bl	23fc768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd6d0:	69e1      	ldr	r1, [r4, #28]
 23fd6d2:	f7ff f8d0 	bl	23fc876 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd6d6:	a801      	add	r0, sp, #4
 23fd6d8:	f7fe ffa1 	bl	23fc61e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd6dc:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd6de:	2202      	movs	r2, #2
 23fd6e0:	6803      	ldr	r3, [r0, #0]
 23fd6e2:	490e      	ldr	r1, [pc, #56]	; (23fd71c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd6e4:	68db      	ldr	r3, [r3, #12]
 23fd6e6:	4798      	blx	r3
}
 23fd6e8:	b005      	add	sp, #20
 23fd6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd6ee:	bf00      	nop
 23fd6f0:	1007ae9c 	.word	0x1007ae9c
 23fd6f4:	023ffc68 	.word	0x023ffc68
 23fd6f8:	023ffbf6 	.word	0x023ffbf6
 23fd6fc:	023ffc47 	.word	0x023ffc47
 23fd700:	023ffec6 	.word	0x023ffec6
 23fd704:	023ffc49 	.word	0x023ffc49
 23fd708:	023ffc4b 	.word	0x023ffc4b
 23fd70c:	023ffc4e 	.word	0x023ffc4e
 23fd710:	023ffc51 	.word	0x023ffc51
 23fd714:	023ffc53 	.word	0x023ffc53
 23fd718:	023ffc58 	.word	0x023ffc58
 23fd71c:	023ffc44 	.word	0x023ffc44

023fd720 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd720:	2300      	movs	r3, #0
 23fd722:	6840      	ldr	r0, [r0, #4]
 23fd724:	461a      	mov	r2, r3
 23fd726:	f7fe bc15 	b.w	23fbf54 <network_connect>

023fd72a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd72a:	2200      	movs	r2, #0
 23fd72c:	2102      	movs	r1, #2
 23fd72e:	6840      	ldr	r0, [r0, #4]
 23fd730:	f7fe bc2c 	b.w	23fbf8c <network_disconnect>

023fd734 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd734:	2200      	movs	r2, #0
 23fd736:	6840      	ldr	r0, [r0, #4]
 23fd738:	4611      	mov	r1, r2
 23fd73a:	f7fe bc19 	b.w	23fbf70 <network_connecting>

023fd73e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd73e:	2200      	movs	r2, #0
 23fd740:	6840      	ldr	r0, [r0, #4]
 23fd742:	4611      	mov	r1, r2
 23fd744:	f7fe bc30 	b.w	23fbfa8 <network_ready>

023fd748 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd748:	2300      	movs	r3, #0
 23fd74a:	6840      	ldr	r0, [r0, #4]
 23fd74c:	461a      	mov	r2, r3
 23fd74e:	4619      	mov	r1, r3
 23fd750:	f7fe bc38 	b.w	23fbfc4 <network_on>

023fd754 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd754:	2300      	movs	r3, #0
 23fd756:	6840      	ldr	r0, [r0, #4]
 23fd758:	461a      	mov	r2, r3
 23fd75a:	4619      	mov	r1, r3
 23fd75c:	f7fe bc40 	b.w	23fbfe0 <network_off>

023fd760 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd760:	2100      	movs	r1, #0
 23fd762:	6840      	ldr	r0, [r0, #4]
 23fd764:	f7fe bc82 	b.w	23fc06c <network_is_on>

023fd768 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd768:	2100      	movs	r1, #0
 23fd76a:	6840      	ldr	r0, [r0, #4]
 23fd76c:	f7fe bc8c 	b.w	23fc088 <network_is_off>

023fd770 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd770:	2200      	movs	r2, #0
 23fd772:	6840      	ldr	r0, [r0, #4]
 23fd774:	f081 0101 	eor.w	r1, r1, #1
 23fd778:	f7fe bc40 	b.w	23fbffc <network_listen>

023fd77c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fd77c:	2200      	movs	r2, #0
 23fd77e:	6840      	ldr	r0, [r0, #4]
 23fd780:	f7fe bc58 	b.w	23fc034 <network_set_listen_timeout>

023fd784 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fd784:	2200      	movs	r2, #0
 23fd786:	6840      	ldr	r0, [r0, #4]
 23fd788:	4611      	mov	r1, r2
 23fd78a:	f7fe bc61 	b.w	23fc050 <network_get_listen_timeout>

023fd78e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fd78e:	2200      	movs	r2, #0
 23fd790:	6840      	ldr	r0, [r0, #4]
 23fd792:	4611      	mov	r1, r2
 23fd794:	f7fe bc40 	b.w	23fc018 <network_listening>

023fd798 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fd798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd79c:	b095      	sub	sp, #84	; 0x54
 23fd79e:	4614      	mov	r4, r2
 23fd7a0:	460d      	mov	r5, r1
 23fd7a2:	4607      	mov	r7, r0
    IPAddress addr;
 23fd7a4:	f7fe fdea 	bl	23fc37c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fd7a8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fd7aa:	221c      	movs	r2, #28
 23fd7ac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fd7ae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fd7b0:	f002 f83b 	bl	23ff82a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fd7b4:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd7b6:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fd7b8:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd7ba:	2100      	movs	r1, #0
 23fd7bc:	466b      	mov	r3, sp
 23fd7be:	aa0c      	add	r2, sp, #48	; 0x30
 23fd7c0:	f7fe f9de 	bl	23fbb80 <netdb_getaddrinfo>
    if (!r) {
 23fd7c4:	4604      	mov	r4, r0
 23fd7c6:	2800      	cmp	r0, #0
 23fd7c8:	d14b      	bne.n	23fd862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd7ca:	4602      	mov	r2, r0
 23fd7cc:	2101      	movs	r1, #1
 23fd7ce:	6868      	ldr	r0, [r5, #4]
 23fd7d0:	f7fe fbea 	bl	23fbfa8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd7d4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd7d6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd7d8:	4622      	mov	r2, r4
 23fd7da:	6868      	ldr	r0, [r5, #4]
 23fd7dc:	f7fe fbe4 	bl	23fbfa8 <network_ready>
        bool ok = false;
 23fd7e0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd7e2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd7e4:	9e00      	ldr	r6, [sp, #0]
 23fd7e6:	2e00      	cmp	r6, #0
 23fd7e8:	d03b      	beq.n	23fd862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fd7ea:	2900      	cmp	r1, #0
 23fd7ec:	d139      	bne.n	23fd862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fd7ee:	6873      	ldr	r3, [r6, #4]
 23fd7f0:	2b02      	cmp	r3, #2
 23fd7f2:	d003      	beq.n	23fd7fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fd7f4:	2b0a      	cmp	r3, #10
 23fd7f6:	d011      	beq.n	23fd81c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd7f8:	69f6      	ldr	r6, [r6, #28]
 23fd7fa:	e7f4      	b.n	23fd7e6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fd7fc:	f1b8 0f00 	cmp.w	r8, #0
 23fd800:	d0fa      	beq.n	23fd7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fd802:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fd804:	a806      	add	r0, sp, #24
 23fd806:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fd808:	1d3c      	adds	r4, r7, #4
 23fd80a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fd80c:	f7fe fde4 	bl	23fc3d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fd810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd814:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd816:	4641      	mov	r1, r8
 23fd818:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fd81a:	e7ed      	b.n	23fd7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fd81c:	f1b9 0f00 	cmp.w	r9, #0
 23fd820:	d0ea      	beq.n	23fd7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fd822:	2210      	movs	r2, #16
 23fd824:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fd826:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fd828:	f001 ffff 	bl	23ff82a <memset>
                    a.v = 6;
 23fd82c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd82e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fd830:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd834:	f104 0308 	add.w	r3, r4, #8
 23fd838:	3418      	adds	r4, #24
 23fd83a:	462a      	mov	r2, r5
 23fd83c:	6818      	ldr	r0, [r3, #0]
 23fd83e:	6859      	ldr	r1, [r3, #4]
 23fd840:	3308      	adds	r3, #8
 23fd842:	c203      	stmia	r2!, {r0, r1}
 23fd844:	42a3      	cmp	r3, r4
 23fd846:	4615      	mov	r5, r2
 23fd848:	d1f7      	bne.n	23fd83a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fd84a:	a901      	add	r1, sp, #4
 23fd84c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fd84e:	1d3c      	adds	r4, r7, #4
 23fd850:	ad07      	add	r5, sp, #28
 23fd852:	f7fe fda1 	bl	23fc398 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fd856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd85a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd85c:	4649      	mov	r1, r9
 23fd85e:	7023      	strb	r3, [r4, #0]
                    break;
 23fd860:	e7ca      	b.n	23fd7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fd862:	9800      	ldr	r0, [sp, #0]
 23fd864:	f7fe f97e 	bl	23fbb64 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fd868:	4638      	mov	r0, r7
 23fd86a:	b015      	add	sp, #84	; 0x54
 23fd86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd870 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fd870:	4b02      	ldr	r3, [pc, #8]	; (23fd87c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fd872:	4a03      	ldr	r2, [pc, #12]	; (23fd880 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fd874:	601a      	str	r2, [r3, #0]
 23fd876:	2200      	movs	r2, #0
 23fd878:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fd87a:	4770      	bx	lr
 23fd87c:	1007ae9c 	.word	0x1007ae9c
 23fd880:	023ffce0 	.word	0x023ffce0

023fd884 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd886:	4606      	mov	r6, r0
 23fd888:	460d      	mov	r5, r1
  size_t n = 0;
 23fd88a:	2400      	movs	r4, #0
 23fd88c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd88e:	42bd      	cmp	r5, r7
 23fd890:	d00c      	beq.n	23fd8ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd892:	6833      	ldr	r3, [r6, #0]
 23fd894:	4630      	mov	r0, r6
 23fd896:	689b      	ldr	r3, [r3, #8]
 23fd898:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd89c:	4798      	blx	r3
     if (chunk>=0)
 23fd89e:	1e03      	subs	r3, r0, #0
 23fd8a0:	db01      	blt.n	23fd8a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd8a2:	441c      	add	r4, r3
  while (size--) {
 23fd8a4:	e7f3      	b.n	23fd88e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd8a6:	2c00      	cmp	r4, #0
 23fd8a8:	bf08      	it	eq
 23fd8aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd8ac:	4620      	mov	r0, r4
 23fd8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd8b0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd8b0:	b513      	push	{r0, r1, r4, lr}
 23fd8b2:	4604      	mov	r4, r0
    }
 23fd8b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd8b6:	b159      	cbz	r1, 23fd8d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd8b8:	9101      	str	r1, [sp, #4]
 23fd8ba:	f7fd fd57 	bl	23fb36c <strlen>
 23fd8be:	4602      	mov	r2, r0
 23fd8c0:	4620      	mov	r0, r4
 23fd8c2:	6823      	ldr	r3, [r4, #0]
 23fd8c4:	9901      	ldr	r1, [sp, #4]
 23fd8c6:	68db      	ldr	r3, [r3, #12]
    }
 23fd8c8:	b002      	add	sp, #8
 23fd8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd8ce:	4718      	bx	r3
    }
 23fd8d0:	b002      	add	sp, #8
 23fd8d2:	bd10      	pop	{r4, pc}

023fd8d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd8d4:	6803      	ldr	r3, [r0, #0]
 23fd8d6:	689b      	ldr	r3, [r3, #8]
 23fd8d8:	4718      	bx	r3

023fd8da <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd8da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd8dc:	2a01      	cmp	r2, #1
 23fd8de:	bf98      	it	ls
 23fd8e0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd8e2:	b530      	push	{r4, r5, lr}
 23fd8e4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd8e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd8ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd8ec:	460d      	mov	r5, r1
 23fd8ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd8f2:	fb01 5312 	mls	r3, r1, r2, r5
 23fd8f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd8fa:	2b09      	cmp	r3, #9
 23fd8fc:	bf94      	ite	ls
 23fd8fe:	3330      	addls	r3, #48	; 0x30
 23fd900:	3337      	addhi	r3, #55	; 0x37
 23fd902:	b2db      	uxtb	r3, r3
  } while(n);
 23fd904:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd906:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd90a:	d9ef      	bls.n	23fd8ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd90c:	4621      	mov	r1, r4
 23fd90e:	f7ff ffcf 	bl	23fd8b0 <_ZN5Print5writeEPKc>
}
 23fd912:	b00b      	add	sp, #44	; 0x2c
 23fd914:	bd30      	pop	{r4, r5, pc}
	...

023fd918 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fd918:	2200      	movs	r2, #0
 23fd91a:	4b01      	ldr	r3, [pc, #4]	; (23fd920 <_GLOBAL__sub_I_RGB+0x8>)
 23fd91c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd91e:	4770      	bx	lr
 23fd920:	1007aea4 	.word	0x1007aea4

023fd924 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd924:	2100      	movs	r1, #0
 23fd926:	f7fe b98d 	b.w	23fbc44 <hal_spi_release>

023fd92a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd92a:	2100      	movs	r1, #0
 23fd92c:	f7fe b97c 	b.w	23fbc28 <hal_spi_acquire>

023fd930 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd930:	b510      	push	{r4, lr}
 23fd932:	4604      	mov	r4, r0
 23fd934:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd936:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd938:	f7fe f95a 	bl	23fbbf0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd93c:	2300      	movs	r3, #0
}
 23fd93e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd940:	6063      	str	r3, [r4, #4]
}
 23fd942:	bd10      	pop	{r4, pc}

023fd944 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd944:	b513      	push	{r0, r1, r4, lr}
 23fd946:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd948:	7800      	ldrb	r0, [r0, #0]
 23fd94a:	f7ff ffee 	bl	23fd92a <_ZN8SPIClass4lockEv.isra.0>
 23fd94e:	b958      	cbnz	r0, 23fd968 <_ZN8SPIClass5beginEv+0x24>
 23fd950:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd952:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd956:	9001      	str	r0, [sp, #4]
 23fd958:	f7fe f920 	bl	23fbb9c <hal_spi_begin>
        unlock();
 23fd95c:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd95e:	b002      	add	sp, #8
 23fd960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd964:	f7ff bfde 	b.w	23fd924 <_ZN8SPIClass6unlockEv.isra.0>
 23fd968:	b002      	add	sp, #8
 23fd96a:	bd10      	pop	{r4, pc}

023fd96c <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fd96c:	b513      	push	{r0, r1, r4, lr}
 23fd96e:	4604      	mov	r4, r0
    if (!lock())
 23fd970:	7800      	ldrb	r0, [r0, #0]
{
 23fd972:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fd974:	f7ff ffd9 	bl	23fd92a <_ZN8SPIClass4lockEv.isra.0>
 23fd978:	9901      	ldr	r1, [sp, #4]
 23fd97a:	b948      	cbnz	r0, 23fd990 <_ZN8SPIClass11setDataModeEh+0x24>
 23fd97c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fd97e:	9001      	str	r0, [sp, #4]
 23fd980:	f7fe f91a 	bl	23fbbb8 <hal_spi_set_data_mode>
        unlock();
 23fd984:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd986:	b002      	add	sp, #8
 23fd988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd98c:	f7ff bfca 	b.w	23fd924 <_ZN8SPIClass6unlockEv.isra.0>
 23fd990:	b002      	add	sp, #8
 23fd992:	bd10      	pop	{r4, pc}

023fd994 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fd994:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd996:	7800      	ldrb	r0, [r0, #0]
 23fd998:	f7fe f91c 	bl	23fbbd4 <hal_spi_transfer>
}
 23fd99c:	b2c0      	uxtb	r0, r0
 23fd99e:	bd08      	pop	{r3, pc}

023fd9a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fd9a0:	b510      	push	{r4, lr}
 23fd9a2:	4604      	mov	r4, r0
{
	free(buffer);
 23fd9a4:	6800      	ldr	r0, [r0, #0]
 23fd9a6:	f7fe fb8b 	bl	23fc0c0 <free>
}
 23fd9aa:	4620      	mov	r0, r4
 23fd9ac:	bd10      	pop	{r4, pc}

023fd9ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fd9ae:	b510      	push	{r4, lr}
 23fd9b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fd9b2:	6800      	ldr	r0, [r0, #0]
 23fd9b4:	b108      	cbz	r0, 23fd9ba <_ZN6String10invalidateEv+0xc>
 23fd9b6:	f7fe fb83 	bl	23fc0c0 <free>
	buffer = NULL;
 23fd9ba:	2300      	movs	r3, #0
	capacity = len = 0;
 23fd9bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fd9c0:	6023      	str	r3, [r4, #0]
}
 23fd9c2:	bd10      	pop	{r4, pc}

023fd9c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd9c4:	b538      	push	{r3, r4, r5, lr}
 23fd9c6:	4604      	mov	r4, r0
 23fd9c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd9ca:	6800      	ldr	r0, [r0, #0]
 23fd9cc:	3101      	adds	r1, #1
 23fd9ce:	f7fe fb85 	bl	23fc0dc <realloc>
	if (newbuffer) {
 23fd9d2:	b110      	cbz	r0, 23fd9da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fd9d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fd9d8:	2001      	movs	r0, #1
	}
	return 0;
}
 23fd9da:	bd38      	pop	{r3, r4, r5, pc}

023fd9dc <_ZN6String7reserveEj>:
{
 23fd9dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fd9de:	6803      	ldr	r3, [r0, #0]
{
 23fd9e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fd9e2:	b123      	cbz	r3, 23fd9ee <_ZN6String7reserveEj+0x12>
 23fd9e4:	6843      	ldr	r3, [r0, #4]
 23fd9e6:	428b      	cmp	r3, r1
 23fd9e8:	d301      	bcc.n	23fd9ee <_ZN6String7reserveEj+0x12>
 23fd9ea:	2001      	movs	r0, #1
}
 23fd9ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fd9ee:	4620      	mov	r0, r4
 23fd9f0:	f7ff ffe8 	bl	23fd9c4 <_ZN6String12changeBufferEj>
 23fd9f4:	2800      	cmp	r0, #0
 23fd9f6:	d0f9      	beq.n	23fd9ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fd9f8:	68a3      	ldr	r3, [r4, #8]
 23fd9fa:	2b00      	cmp	r3, #0
 23fd9fc:	d1f5      	bne.n	23fd9ea <_ZN6String7reserveEj+0xe>
 23fd9fe:	6822      	ldr	r2, [r4, #0]
 23fda00:	7013      	strb	r3, [r2, #0]
 23fda02:	e7f2      	b.n	23fd9ea <_ZN6String7reserveEj+0xe>

023fda04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fda04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fda06:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fda08:	4611      	mov	r1, r2
 23fda0a:	9201      	str	r2, [sp, #4]
{
 23fda0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fda0e:	f7ff ffe5 	bl	23fd9dc <_ZN6String7reserveEj>
 23fda12:	9a01      	ldr	r2, [sp, #4]
 23fda14:	b928      	cbnz	r0, 23fda22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fda16:	4620      	mov	r0, r4
 23fda18:	f7ff ffc9 	bl	23fd9ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fda1c:	4620      	mov	r0, r4
 23fda1e:	b003      	add	sp, #12
 23fda20:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fda22:	4629      	mov	r1, r5
	len = length;
 23fda24:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fda26:	6820      	ldr	r0, [r4, #0]
 23fda28:	f001 fed8 	bl	23ff7dc <memcpy>
	buffer[len] = 0;
 23fda2c:	2100      	movs	r1, #0
 23fda2e:	6822      	ldr	r2, [r4, #0]
 23fda30:	68a3      	ldr	r3, [r4, #8]
 23fda32:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fda34:	e7f2      	b.n	23fda1c <_ZN6String4copyEPKcj+0x18>

023fda36 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fda36:	b538      	push	{r3, r4, r5, lr}
 23fda38:	4605      	mov	r5, r0
	if (buffer) {
 23fda3a:	6800      	ldr	r0, [r0, #0]
{
 23fda3c:	460c      	mov	r4, r1
	if (buffer) {
 23fda3e:	b170      	cbz	r0, 23fda5e <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fda40:	686a      	ldr	r2, [r5, #4]
 23fda42:	688b      	ldr	r3, [r1, #8]
 23fda44:	429a      	cmp	r2, r3
 23fda46:	d308      	bcc.n	23fda5a <_ZN6String4moveERS_+0x24>
 23fda48:	6809      	ldr	r1, [r1, #0]
 23fda4a:	b131      	cbz	r1, 23fda5a <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fda4c:	f001 ff3b 	bl	23ff8c6 <strcpy>
			len = rhs.len;
 23fda50:	68a3      	ldr	r3, [r4, #8]
 23fda52:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fda54:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fda56:	60a3      	str	r3, [r4, #8]
}
 23fda58:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fda5a:	f7fe fb31 	bl	23fc0c0 <free>
	buffer = rhs.buffer;
 23fda5e:	6823      	ldr	r3, [r4, #0]
 23fda60:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fda62:	6863      	ldr	r3, [r4, #4]
 23fda64:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fda66:	68a3      	ldr	r3, [r4, #8]
 23fda68:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fda6a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fda6c:	e9c4 3300 	strd	r3, r3, [r4]
 23fda70:	e7f1      	b.n	23fda56 <_ZN6String4moveERS_+0x20>

023fda72 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fda72:	2300      	movs	r3, #0
String::String(String &&rval)
 23fda74:	b510      	push	{r4, lr}
 23fda76:	4604      	mov	r4, r0
	capacity = 0;
 23fda78:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fda7c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fda7e:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fda80:	f7ff ffd9 	bl	23fda36 <_ZN6String4moveERS_>
}
 23fda84:	4620      	mov	r0, r4
 23fda86:	bd10      	pop	{r4, pc}

023fda88 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fda88:	4288      	cmp	r0, r1
{
 23fda8a:	b510      	push	{r4, lr}
 23fda8c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fda8e:	d005      	beq.n	23fda9c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fda90:	680b      	ldr	r3, [r1, #0]
 23fda92:	b12b      	cbz	r3, 23fdaa0 <_ZN6StringaSERKS_+0x18>
 23fda94:	688a      	ldr	r2, [r1, #8]
 23fda96:	4619      	mov	r1, r3
 23fda98:	f7ff ffb4 	bl	23fda04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fda9c:	4620      	mov	r0, r4
 23fda9e:	bd10      	pop	{r4, pc}
	else invalidate();
 23fdaa0:	f7ff ff85 	bl	23fd9ae <_ZN6String10invalidateEv>
 23fdaa4:	e7fa      	b.n	23fda9c <_ZN6StringaSERKS_+0x14>

023fdaa6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fdaa6:	2300      	movs	r3, #0
String::String(const String &value)
 23fdaa8:	b510      	push	{r4, lr}
 23fdaaa:	4604      	mov	r4, r0
	capacity = 0;
 23fdaac:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fdab0:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fdab2:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fdab4:	f7ff ffe8 	bl	23fda88 <_ZN6StringaSERKS_>
}
 23fdab8:	4620      	mov	r0, r4
 23fdaba:	bd10      	pop	{r4, pc}

023fdabc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fdabc:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fdabe:	2000      	movs	r0, #0
 23fdac0:	4b04      	ldr	r3, [pc, #16]	; (23fdad4 <_GLOBAL__sub_I_System+0x18>)
 23fdac2:	601a      	str	r2, [r3, #0]
 23fdac4:	4b04      	ldr	r3, [pc, #16]	; (23fdad8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fdac6:	4a05      	ldr	r2, [pc, #20]	; (23fdadc <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fdac8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fdacc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fdace:	f7fe b9ed 	b.w	23fbeac <set_system_mode>
 23fdad2:	bf00      	nop
 23fdad4:	1007aec0 	.word	0x1007aec0
 23fdad8:	1007aeb4 	.word	0x1007aeb4
 23fdadc:	ffff0000 	.word	0xffff0000

023fdae0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdae0:	4b02      	ldr	r3, [pc, #8]	; (23fdaec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdae2:	681a      	ldr	r2, [r3, #0]
 23fdae4:	4b02      	ldr	r3, [pc, #8]	; (23fdaf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdae6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdae8:	4770      	bx	lr
 23fdaea:	bf00      	nop
 23fdaec:	1007adb4 	.word	0x1007adb4
 23fdaf0:	1007aec4 	.word	0x1007aec4

023fdaf4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fdaf4:	4770      	bx	lr

023fdaf6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdaf6:	7441      	strb	r1, [r0, #17]
}
 23fdaf8:	4770      	bx	lr

023fdafa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fdafa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fdafc:	7c00      	ldrb	r0, [r0, #16]
 23fdafe:	f7fe f911 	bl	23fbd24 <hal_usart_available_data_for_write>
}
 23fdb02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdb06:	bd08      	pop	{r3, pc}

023fdb08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fdb08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fdb0a:	7c00      	ldrb	r0, [r0, #16]
 23fdb0c:	f7fe f8c4 	bl	23fbc98 <hal_usart_available>
}
 23fdb10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdb14:	bd08      	pop	{r3, pc}

023fdb16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fdb16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fdb18:	7c00      	ldrb	r0, [r0, #16]
 23fdb1a:	f7fe f8d9 	bl	23fbcd0 <hal_usart_peek>
}
 23fdb1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdb22:	bd08      	pop	{r3, pc}

023fdb24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fdb24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fdb26:	7c00      	ldrb	r0, [r0, #16]
 23fdb28:	f7fe f8c4 	bl	23fbcb4 <hal_usart_read>
}
 23fdb2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdb30:	bd08      	pop	{r3, pc}

023fdb32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fdb32:	7c00      	ldrb	r0, [r0, #16]
 23fdb34:	f7fe b8da 	b.w	23fbcec <hal_usart_flush>

023fdb38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fdb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdb3a:	7c45      	ldrb	r5, [r0, #17]
{
 23fdb3c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdb3e:	b12d      	cbz	r5, 23fdb4c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fdb40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fdb42:	b003      	add	sp, #12
 23fdb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fdb48:	f7fe b898 	b.w	23fbc7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdb4c:	7c00      	ldrb	r0, [r0, #16]
 23fdb4e:	9101      	str	r1, [sp, #4]
 23fdb50:	f7fe f8e8 	bl	23fbd24 <hal_usart_available_data_for_write>
 23fdb54:	2800      	cmp	r0, #0
 23fdb56:	9901      	ldr	r1, [sp, #4]
 23fdb58:	dcf2      	bgt.n	23fdb40 <_ZN11USARTSerial5writeEh+0x8>
}
 23fdb5a:	4628      	mov	r0, r5
 23fdb5c:	b003      	add	sp, #12
 23fdb5e:	bd30      	pop	{r4, r5, pc}

023fdb60 <_ZN11USARTSerialD0Ev>:
 23fdb60:	b510      	push	{r4, lr}
 23fdb62:	4604      	mov	r4, r0
 23fdb64:	2114      	movs	r1, #20
 23fdb66:	f7fd fc2a 	bl	23fb3be <_ZdlPvj>
 23fdb6a:	4620      	mov	r0, r4
 23fdb6c:	bd10      	pop	{r4, pc}
	...

023fdb70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdb70:	b510      	push	{r4, lr}
 23fdb72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdb76:	4604      	mov	r4, r0
 23fdb78:	4608      	mov	r0, r1
 23fdb7a:	4611      	mov	r1, r2
 23fdb7c:	2200      	movs	r2, #0
 23fdb7e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdb82:	4b04      	ldr	r3, [pc, #16]	; (23fdb94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fdb84:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdb86:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdb88:	2301      	movs	r3, #1
 23fdb8a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fdb8c:	f7fe f8e6 	bl	23fbd5c <hal_usart_init_ex>
}
 23fdb90:	4620      	mov	r0, r4
 23fdb92:	bd10      	pop	{r4, pc}
 23fdb94:	023ffd38 	.word	0x023ffd38

023fdb98 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fdb98:	2300      	movs	r3, #0
 23fdb9a:	7c00      	ldrb	r0, [r0, #16]
 23fdb9c:	f7fe b8d0 	b.w	23fbd40 <hal_usart_begin_config>

023fdba0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fdba0:	2200      	movs	r2, #0
 23fdba2:	f7ff bff9 	b.w	23fdb98 <_ZN11USARTSerial5beginEmm>

023fdba6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fdba6:	7c00      	ldrb	r0, [r0, #16]
 23fdba8:	f7fe b85a 	b.w	23fbc60 <hal_usart_end>

023fdbac <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fdbac:	7c00      	ldrb	r0, [r0, #16]
 23fdbae:	f7fe b8ab 	b.w	23fbd08 <hal_usart_is_enabled>

023fdbb2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdbb2:	7441      	strb	r1, [r0, #17]
}
 23fdbb4:	4770      	bx	lr

023fdbb6 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdbb6:	4770      	bx	lr

023fdbb8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fdbb8:	4770      	bx	lr

023fdbba <_ZN9USBSerial4readEv>:
{
 23fdbba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fdbbc:	2100      	movs	r1, #0
 23fdbbe:	7c00      	ldrb	r0, [r0, #16]
 23fdbc0:	f7fe f920 	bl	23fbe04 <HAL_USB_USART_Receive_Data>
}
 23fdbc4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdbc8:	bd08      	pop	{r3, pc}

023fdbca <_ZN9USBSerial4peekEv>:
{
 23fdbca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fdbcc:	2101      	movs	r1, #1
 23fdbce:	7c00      	ldrb	r0, [r0, #16]
 23fdbd0:	f7fe f918 	bl	23fbe04 <HAL_USB_USART_Receive_Data>
}
 23fdbd4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdbd8:	bd08      	pop	{r3, pc}

023fdbda <_ZN9USBSerial17availableForWriteEv>:
{
 23fdbda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fdbdc:	7c00      	ldrb	r0, [r0, #16]
 23fdbde:	f7fe f903 	bl	23fbde8 <HAL_USB_USART_Available_Data_For_Write>
}
 23fdbe2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdbe6:	bd08      	pop	{r3, pc}

023fdbe8 <_ZN9USBSerial9availableEv>:
{
 23fdbe8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fdbea:	7c00      	ldrb	r0, [r0, #16]
 23fdbec:	f7fe f8ee 	bl	23fbdcc <HAL_USB_USART_Available_Data>
}
 23fdbf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdbf4:	bd08      	pop	{r3, pc}

023fdbf6 <_ZN9USBSerial5writeEh>:
{
 23fdbf6:	b513      	push	{r0, r1, r4, lr}
 23fdbf8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdbfa:	7c00      	ldrb	r0, [r0, #16]
{
 23fdbfc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdbfe:	f7fe f8f3 	bl	23fbde8 <HAL_USB_USART_Available_Data_For_Write>
 23fdc02:	2800      	cmp	r0, #0
 23fdc04:	9901      	ldr	r1, [sp, #4]
 23fdc06:	dc01      	bgt.n	23fdc0c <_ZN9USBSerial5writeEh+0x16>
 23fdc08:	7c60      	ldrb	r0, [r4, #17]
 23fdc0a:	b120      	cbz	r0, 23fdc16 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fdc0c:	7c20      	ldrb	r0, [r4, #16]
 23fdc0e:	f7fe f907 	bl	23fbe20 <HAL_USB_USART_Send_Data>
 23fdc12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fdc16:	b002      	add	sp, #8
 23fdc18:	bd10      	pop	{r4, pc}

023fdc1a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fdc1a:	7c00      	ldrb	r0, [r0, #16]
 23fdc1c:	f7fe b90e 	b.w	23fbe3c <HAL_USB_USART_Flush_Data>

023fdc20 <_ZN9USBSerialD0Ev>:
 23fdc20:	b510      	push	{r4, lr}
 23fdc22:	4604      	mov	r4, r0
 23fdc24:	2114      	movs	r1, #20
 23fdc26:	f7fd fbca 	bl	23fb3be <_ZdlPvj>
 23fdc2a:	4620      	mov	r0, r4
 23fdc2c:	bd10      	pop	{r4, pc}
	...

023fdc30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdc30:	b510      	push	{r4, lr}
 23fdc32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdc36:	4604      	mov	r4, r0
 23fdc38:	4608      	mov	r0, r1
 23fdc3a:	2100      	movs	r1, #0
 23fdc3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fdc40:	4b04      	ldr	r3, [pc, #16]	; (23fdc54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fdc42:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdc44:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdc46:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fdc48:	4611      	mov	r1, r2
  _blocking = true;
 23fdc4a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fdc4c:	f7fe f894 	bl	23fbd78 <HAL_USB_USART_Init>
}
 23fdc50:	4620      	mov	r0, r4
 23fdc52:	bd10      	pop	{r4, pc}
 23fdc54:	023ffd68 	.word	0x023ffd68

023fdc58 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fdc58:	2200      	movs	r2, #0
 23fdc5a:	7c00      	ldrb	r0, [r0, #16]
 23fdc5c:	f7fe b89a 	b.w	23fbd94 <HAL_USB_USART_Begin>

023fdc60 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fdc60:	7c00      	ldrb	r0, [r0, #16]
 23fdc62:	f7fe b8a5 	b.w	23fbdb0 <HAL_USB_USART_End>

023fdc66 <_Z19acquireSerialBufferv>:
{
 23fdc66:	b510      	push	{r4, lr}
 23fdc68:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fdc6a:	2214      	movs	r2, #20
 23fdc6c:	2100      	movs	r1, #0
 23fdc6e:	f001 fddc 	bl	23ff82a <memset>
}
 23fdc72:	4620      	mov	r0, r4
 23fdc74:	bd10      	pop	{r4, pc}
	...

023fdc78 <_Z16_fetch_usbserialv>:
{
 23fdc78:	b510      	push	{r4, lr}
 23fdc7a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fdc7c:	a803      	add	r0, sp, #12
 23fdc7e:	f7ff fff2 	bl	23fdc66 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdc82:	4c0c      	ldr	r4, [pc, #48]	; (23fdcb4 <_Z16_fetch_usbserialv+0x3c>)
 23fdc84:	e8d4 1f8f 	ldab	r1, [r4]
 23fdc88:	f011 0101 	ands.w	r1, r1, #1
 23fdc8c:	d10f      	bne.n	23fdcae <_Z16_fetch_usbserialv+0x36>
 23fdc8e:	4620      	mov	r0, r4
 23fdc90:	9101      	str	r1, [sp, #4]
 23fdc92:	f7fd fba3 	bl	23fb3dc <__cxa_guard_acquire>
 23fdc96:	9901      	ldr	r1, [sp, #4]
 23fdc98:	b148      	cbz	r0, 23fdcae <_Z16_fetch_usbserialv+0x36>
 23fdc9a:	aa03      	add	r2, sp, #12
 23fdc9c:	4806      	ldr	r0, [pc, #24]	; (23fdcb8 <_Z16_fetch_usbserialv+0x40>)
 23fdc9e:	f7ff ffc7 	bl	23fdc30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fdca2:	4620      	mov	r0, r4
 23fdca4:	f7fd fb9f 	bl	23fb3e6 <__cxa_guard_release>
 23fdca8:	4804      	ldr	r0, [pc, #16]	; (23fdcbc <_Z16_fetch_usbserialv+0x44>)
 23fdcaa:	f001 fd89 	bl	23ff7c0 <atexit>
	return _usbserial;
}
 23fdcae:	4802      	ldr	r0, [pc, #8]	; (23fdcb8 <_Z16_fetch_usbserialv+0x40>)
 23fdcb0:	b008      	add	sp, #32
 23fdcb2:	bd10      	pop	{r4, pc}
 23fdcb4:	1007aec8 	.word	0x1007aec8
 23fdcb8:	1007aecc 	.word	0x1007aecc
 23fdcbc:	023fdbb7 	.word	0x023fdbb7

023fdcc0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fdcc0:	2200      	movs	r2, #0
 23fdcc2:	6840      	ldr	r0, [r0, #4]
 23fdcc4:	4611      	mov	r1, r2
 23fdcc6:	f7fe b96f 	b.w	23fbfa8 <network_ready>

023fdcca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fdcca:	2200      	movs	r2, #0
 23fdccc:	6840      	ldr	r0, [r0, #4]
 23fdcce:	4611      	mov	r1, r2
 23fdcd0:	f7fe b9a2 	b.w	23fc018 <network_listening>

023fdcd4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fdcd4:	2200      	movs	r2, #0
 23fdcd6:	6840      	ldr	r0, [r0, #4]
 23fdcd8:	4611      	mov	r1, r2
 23fdcda:	f7fe b9b9 	b.w	23fc050 <network_get_listen_timeout>

023fdcde <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fdcde:	2200      	movs	r2, #0
 23fdce0:	6840      	ldr	r0, [r0, #4]
 23fdce2:	f7fe b9a7 	b.w	23fc034 <network_set_listen_timeout>

023fdce6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fdce6:	2200      	movs	r2, #0
 23fdce8:	6840      	ldr	r0, [r0, #4]
 23fdcea:	f081 0101 	eor.w	r1, r1, #1
 23fdcee:	f7fe b985 	b.w	23fbffc <network_listen>

023fdcf2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fdcf2:	2300      	movs	r3, #0
 23fdcf4:	6840      	ldr	r0, [r0, #4]
 23fdcf6:	461a      	mov	r2, r3
 23fdcf8:	4619      	mov	r1, r3
 23fdcfa:	f7fe b971 	b.w	23fbfe0 <network_off>

023fdcfe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fdcfe:	2300      	movs	r3, #0
 23fdd00:	6840      	ldr	r0, [r0, #4]
 23fdd02:	461a      	mov	r2, r3
 23fdd04:	4619      	mov	r1, r3
 23fdd06:	f7fe b95d 	b.w	23fbfc4 <network_on>

023fdd0a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fdd0a:	2200      	movs	r2, #0
 23fdd0c:	6840      	ldr	r0, [r0, #4]
 23fdd0e:	4611      	mov	r1, r2
 23fdd10:	f7fe b92e 	b.w	23fbf70 <network_connecting>

023fdd14 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fdd14:	2200      	movs	r2, #0
 23fdd16:	2102      	movs	r1, #2
 23fdd18:	6840      	ldr	r0, [r0, #4]
 23fdd1a:	f7fe b937 	b.w	23fbf8c <network_disconnect>

023fdd1e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fdd1e:	2300      	movs	r3, #0
 23fdd20:	6840      	ldr	r0, [r0, #4]
 23fdd22:	461a      	mov	r2, r3
 23fdd24:	f7fe b916 	b.w	23fbf54 <network_connect>

023fdd28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fdd28:	2204      	movs	r2, #4
 23fdd2a:	4b02      	ldr	r3, [pc, #8]	; (23fdd34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fdd2c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fdd2e:	4a02      	ldr	r2, [pc, #8]	; (23fdd38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fdd30:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fdd32:	4770      	bx	lr
 23fdd34:	1007aee0 	.word	0x1007aee0
 23fdd38:	023ffd98 	.word	0x023ffd98

023fdd3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdd3c:	4b01      	ldr	r3, [pc, #4]	; (23fdd44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fdd3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fdd40:	4770      	bx	lr
 23fdd42:	bf00      	nop
 23fdd44:	1007adbc 	.word	0x1007adbc

023fdd48 <serialEventRun>:
{
 23fdd48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fdd4a:	4b0f      	ldr	r3, [pc, #60]	; (23fdd88 <serialEventRun+0x40>)
 23fdd4c:	b143      	cbz	r3, 23fdd60 <serialEventRun+0x18>
 23fdd4e:	f7ff ff93 	bl	23fdc78 <_Z16_fetch_usbserialv>
 23fdd52:	6803      	ldr	r3, [r0, #0]
 23fdd54:	691b      	ldr	r3, [r3, #16]
 23fdd56:	4798      	blx	r3
 23fdd58:	2800      	cmp	r0, #0
 23fdd5a:	dd01      	ble.n	23fdd60 <serialEventRun+0x18>
        serialEvent();
 23fdd5c:	e000      	b.n	23fdd60 <serialEventRun+0x18>
 23fdd5e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fdd60:	4b0a      	ldr	r3, [pc, #40]	; (23fdd8c <serialEventRun+0x44>)
 23fdd62:	b143      	cbz	r3, 23fdd76 <serialEventRun+0x2e>
 23fdd64:	f000 f96a 	bl	23fe03c <_Z22__fetch_global_Serial1v>
 23fdd68:	6803      	ldr	r3, [r0, #0]
 23fdd6a:	691b      	ldr	r3, [r3, #16]
 23fdd6c:	4798      	blx	r3
 23fdd6e:	2800      	cmp	r0, #0
 23fdd70:	dd01      	ble.n	23fdd76 <serialEventRun+0x2e>
        serialEvent1();
 23fdd72:	e000      	b.n	23fdd76 <serialEventRun+0x2e>
 23fdd74:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fdd76:	4b06      	ldr	r3, [pc, #24]	; (23fdd90 <serialEventRun+0x48>)
 23fdd78:	b10b      	cbz	r3, 23fdd7e <serialEventRun+0x36>
 23fdd7a:	f000 f9a5 	bl	23fe0c8 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fdd7e:	4b05      	ldr	r3, [pc, #20]	; (23fdd94 <serialEventRun+0x4c>)
 23fdd80:	b10b      	cbz	r3, 23fdd86 <serialEventRun+0x3e>
 23fdd82:	f000 f9d7 	bl	23fe134 <_Z15serialEventRun3v>
}
 23fdd86:	bd08      	pop	{r3, pc}
	...

023fdd98 <_post_loop>:
{
 23fdd98:	b508      	push	{r3, lr}
	serialEventRun();
 23fdd9a:	f7ff ffd5 	bl	23fdd48 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fdd9e:	f7fd fe39 	bl	23fba14 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fdda2:	4b01      	ldr	r3, [pc, #4]	; (23fdda8 <_post_loop+0x10>)
 23fdda4:	6018      	str	r0, [r3, #0]
}
 23fdda6:	bd08      	pop	{r3, pc}
 23fdda8:	1007aef0 	.word	0x1007aef0

023fddac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fddac:	4805      	ldr	r0, [pc, #20]	; (23fddc4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fddae:	4a06      	ldr	r2, [pc, #24]	; (23fddc8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fddb0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fddb2:	1a12      	subs	r2, r2, r0
 23fddb4:	4905      	ldr	r1, [pc, #20]	; (23fddcc <_Z33system_initialize_user_backup_ramv+0x20>)
 23fddb6:	f001 fd11 	bl	23ff7dc <memcpy>
    __backup_sram_signature = signature;
 23fddba:	4b05      	ldr	r3, [pc, #20]	; (23fddd0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fddbc:	4a05      	ldr	r2, [pc, #20]	; (23fddd4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fddbe:	601a      	str	r2, [r3, #0]
}
 23fddc0:	bd08      	pop	{r3, pc}
 23fddc2:	bf00      	nop
 23fddc4:	1007b400 	.word	0x1007b400
 23fddc8:	1007b404 	.word	0x1007b404
 23fddcc:	085ff73c 	.word	0x085ff73c
 23fddd0:	1007b400 	.word	0x1007b400
 23fddd4:	9a271c1e 	.word	0x9a271c1e

023fddd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fddd8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fddda:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdddc:	461a      	mov	r2, r3
 23fddde:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdde2:	9300      	str	r3, [sp, #0]
 23fdde4:	f7fe f89a 	bl	23fbf1c <system_ctrl_set_result>
}
 23fdde8:	b003      	add	sp, #12
 23fddea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fddf0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fddf0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fddf2:	8843      	ldrh	r3, [r0, #2]
 23fddf4:	2b0a      	cmp	r3, #10
 23fddf6:	d008      	beq.n	23fde0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fddf8:	2b50      	cmp	r3, #80	; 0x50
 23fddfa:	d10b      	bne.n	23fde14 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fddfc:	4b09      	ldr	r3, [pc, #36]	; (23fde24 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fddfe:	681b      	ldr	r3, [r3, #0]
 23fde00:	b14b      	cbz	r3, 23fde16 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fde02:	b003      	add	sp, #12
 23fde04:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fde08:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fde0a:	f7ff ffe5 	bl	23fddd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fde0e:	b003      	add	sp, #12
 23fde10:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fde14:	2300      	movs	r3, #0
 23fde16:	461a      	mov	r2, r3
 23fde18:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fde1c:	9300      	str	r3, [sp, #0]
 23fde1e:	f7fe f87d 	bl	23fbf1c <system_ctrl_set_result>
}
 23fde22:	e7f4      	b.n	23fde0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fde24:	1007aeec 	.word	0x1007aeec

023fde28 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fde28:	2100      	movs	r1, #0
{
 23fde2a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fde2c:	4811      	ldr	r0, [pc, #68]	; (23fde74 <module_user_init_hook+0x4c>)
 23fde2e:	f7fe f98d 	bl	23fc14c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fde32:	4b11      	ldr	r3, [pc, #68]	; (23fde78 <module_user_init_hook+0x50>)
 23fde34:	681a      	ldr	r2, [r3, #0]
 23fde36:	4b11      	ldr	r3, [pc, #68]	; (23fde7c <module_user_init_hook+0x54>)
 23fde38:	429a      	cmp	r2, r3
 23fde3a:	bf0c      	ite	eq
 23fde3c:	2201      	moveq	r2, #1
 23fde3e:	2200      	movne	r2, #0
 23fde40:	4b0f      	ldr	r3, [pc, #60]	; (23fde80 <module_user_init_hook+0x58>)
 23fde42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fde44:	d001      	beq.n	23fde4a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fde46:	f7ff ffb1 	bl	23fddac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fde4a:	f7fd fdc7 	bl	23fb9dc <HAL_RNG_GetRandomNumber>
 23fde4e:	4604      	mov	r4, r0
    srand(seed);
 23fde50:	f001 fcf4 	bl	23ff83c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fde54:	4b0b      	ldr	r3, [pc, #44]	; (23fde84 <module_user_init_hook+0x5c>)
 23fde56:	b113      	cbz	r3, 23fde5e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fde58:	4620      	mov	r0, r4
 23fde5a:	e000      	b.n	23fde5e <module_user_init_hook+0x36>
 23fde5c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fde5e:	2100      	movs	r1, #0
 23fde60:	4808      	ldr	r0, [pc, #32]	; (23fde84 <module_user_init_hook+0x5c>)
 23fde62:	f7fe f869 	bl	23fbf38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fde66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fde6a:	2100      	movs	r1, #0
 23fde6c:	4806      	ldr	r0, [pc, #24]	; (23fde88 <module_user_init_hook+0x60>)
 23fde6e:	f7fe b847 	b.w	23fbf00 <system_ctrl_set_app_request_handler>
 23fde72:	bf00      	nop
 23fde74:	023fdd3d 	.word	0x023fdd3d
 23fde78:	1007b400 	.word	0x1007b400
 23fde7c:	9a271c1e 	.word	0x9a271c1e
 23fde80:	1007aee8 	.word	0x1007aee8
 23fde84:	00000000 	.word	0x00000000
 23fde88:	023fddf1 	.word	0x023fddf1

023fde8c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fde8c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fde8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fde90:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fde92:	d902      	bls.n	23fde9a <pinAvailable+0xe>
    return false;
 23fde94:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fde96:	b003      	add	sp, #12
 23fde98:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fde9a:	f1a0 030f 	sub.w	r3, r0, #15
 23fde9e:	2b02      	cmp	r3, #2
 23fdea0:	d90b      	bls.n	23fdeba <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fdea2:	2801      	cmp	r0, #1
 23fdea4:	d821      	bhi.n	23fdeea <pinAvailable+0x5e>
 23fdea6:	f000 f875 	bl	23fdf94 <_Z19__fetch_global_Wirev>
 23fdeaa:	2100      	movs	r1, #0
 23fdeac:	7c00      	ldrb	r0, [r0, #16]
 23fdeae:	f7fd fe2f 	bl	23fbb10 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fdeb2:	f080 0001 	eor.w	r0, r0, #1
 23fdeb6:	b2c0      	uxtb	r0, r0
 23fdeb8:	e7ed      	b.n	23fde96 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fdeba:	4d11      	ldr	r5, [pc, #68]	; (23fdf00 <pinAvailable+0x74>)
 23fdebc:	e8d5 1f8f 	ldab	r1, [r5]
 23fdec0:	f011 0101 	ands.w	r1, r1, #1
 23fdec4:	d10b      	bne.n	23fdede <pinAvailable+0x52>
 23fdec6:	4628      	mov	r0, r5
 23fdec8:	9101      	str	r1, [sp, #4]
 23fdeca:	f7fd fa87 	bl	23fb3dc <__cxa_guard_acquire>
 23fdece:	9901      	ldr	r1, [sp, #4]
 23fded0:	b128      	cbz	r0, 23fdede <pinAvailable+0x52>
 23fded2:	480c      	ldr	r0, [pc, #48]	; (23fdf04 <pinAvailable+0x78>)
 23fded4:	f7ff fd2c 	bl	23fd930 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fded8:	4628      	mov	r0, r5
 23fdeda:	f7fd fa84 	bl	23fb3e6 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fdede:	4b09      	ldr	r3, [pc, #36]	; (23fdf04 <pinAvailable+0x78>)
 23fdee0:	7818      	ldrb	r0, [r3, #0]
 23fdee2:	f7fd fe93 	bl	23fbc0c <hal_spi_is_enabled>
 23fdee6:	2800      	cmp	r0, #0
 23fdee8:	d1d4      	bne.n	23fde94 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fdeea:	3c08      	subs	r4, #8
 23fdeec:	2c01      	cmp	r4, #1
 23fdeee:	d805      	bhi.n	23fdefc <pinAvailable+0x70>
 23fdef0:	f000 f8a4 	bl	23fe03c <_Z22__fetch_global_Serial1v>
 23fdef4:	7c00      	ldrb	r0, [r0, #16]
 23fdef6:	f7fd ff07 	bl	23fbd08 <hal_usart_is_enabled>
 23fdefa:	e7da      	b.n	23fdeb2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fdefc:	2001      	movs	r0, #1
 23fdefe:	e7ca      	b.n	23fde96 <pinAvailable+0xa>
 23fdf00:	1007ae4c 	.word	0x1007ae4c
 23fdf04:	1007ae50 	.word	0x1007ae50

023fdf08 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fdf08:	281b      	cmp	r0, #27
{
 23fdf0a:	b538      	push	{r3, r4, r5, lr}
 23fdf0c:	4604      	mov	r4, r0
 23fdf0e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fdf10:	d80a      	bhi.n	23fdf28 <pinMode+0x20>
 23fdf12:	29ff      	cmp	r1, #255	; 0xff
 23fdf14:	d008      	beq.n	23fdf28 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fdf16:	f7ff ffb9 	bl	23fde8c <pinAvailable>
 23fdf1a:	b128      	cbz	r0, 23fdf28 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fdf1c:	4629      	mov	r1, r5
 23fdf1e:	4620      	mov	r0, r4
}
 23fdf20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fdf24:	f7fd bd84 	b.w	23fba30 <hal_gpio_mode>
}
 23fdf28:	bd38      	pop	{r3, r4, r5, pc}

023fdf2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fdf2a:	b538      	push	{r3, r4, r5, lr}
 23fdf2c:	4604      	mov	r4, r0
 23fdf2e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fdf30:	f7fd fd8c 	bl	23fba4c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fdf34:	28ff      	cmp	r0, #255	; 0xff
 23fdf36:	d010      	beq.n	23fdf5a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fdf38:	2806      	cmp	r0, #6
 23fdf3a:	d804      	bhi.n	23fdf46 <digitalWrite+0x1c>
 23fdf3c:	234d      	movs	r3, #77	; 0x4d
 23fdf3e:	fa23 f000 	lsr.w	r0, r3, r0
 23fdf42:	07c3      	lsls	r3, r0, #31
 23fdf44:	d409      	bmi.n	23fdf5a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fdf46:	4620      	mov	r0, r4
 23fdf48:	f7ff ffa0 	bl	23fde8c <pinAvailable>
 23fdf4c:	b128      	cbz	r0, 23fdf5a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fdf4e:	4629      	mov	r1, r5
 23fdf50:	4620      	mov	r0, r4
}
 23fdf52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fdf56:	f7fd bd87 	b.w	23fba68 <hal_gpio_write>
}
 23fdf5a:	bd38      	pop	{r3, r4, r5, pc}

023fdf5c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdf5c:	4770      	bx	lr
	...

023fdf60 <_Z17acquireWireBufferv>:
{
 23fdf60:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fdf62:	4b0a      	ldr	r3, [pc, #40]	; (23fdf8c <_Z17acquireWireBufferv+0x2c>)
{
 23fdf64:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fdf66:	6003      	str	r3, [r0, #0]
 23fdf68:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf6a:	4909      	ldr	r1, [pc, #36]	; (23fdf90 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fdf6c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf6e:	2020      	movs	r0, #32
 23fdf70:	f000 f8f6 	bl	23fe160 <_ZnajRKSt9nothrow_t>
	};
 23fdf74:	2520      	movs	r5, #32
 23fdf76:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf78:	4905      	ldr	r1, [pc, #20]	; (23fdf90 <_Z17acquireWireBufferv+0x30>)
 23fdf7a:	4628      	mov	r0, r5
	};
 23fdf7c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf7e:	f000 f8ef 	bl	23fe160 <_ZnajRKSt9nothrow_t>
	};
 23fdf82:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fdf86:	4620      	mov	r0, r4
 23fdf88:	bd38      	pop	{r3, r4, r5, pc}
 23fdf8a:	bf00      	nop
 23fdf8c:	00010018 	.word	0x00010018
 23fdf90:	023ffdcc 	.word	0x023ffdcc

023fdf94 <_Z19__fetch_global_Wirev>:
{
 23fdf94:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdf96:	4d0e      	ldr	r5, [pc, #56]	; (23fdfd0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fdf98:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdf9a:	e8d5 1f8f 	ldab	r1, [r5]
 23fdf9e:	f011 0401 	ands.w	r4, r1, #1
 23fdfa2:	d111      	bne.n	23fdfc8 <_Z19__fetch_global_Wirev+0x34>
 23fdfa4:	4628      	mov	r0, r5
 23fdfa6:	f7fd fa19 	bl	23fb3dc <__cxa_guard_acquire>
 23fdfaa:	b168      	cbz	r0, 23fdfc8 <_Z19__fetch_global_Wirev+0x34>
 23fdfac:	4668      	mov	r0, sp
 23fdfae:	f7ff ffd7 	bl	23fdf60 <_Z17acquireWireBufferv>
 23fdfb2:	466a      	mov	r2, sp
 23fdfb4:	4621      	mov	r1, r4
 23fdfb6:	4807      	ldr	r0, [pc, #28]	; (23fdfd4 <_Z19__fetch_global_Wirev+0x40>)
 23fdfb8:	f7fe f988 	bl	23fc2cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fdfbc:	4628      	mov	r0, r5
 23fdfbe:	f7fd fa12 	bl	23fb3e6 <__cxa_guard_release>
 23fdfc2:	4805      	ldr	r0, [pc, #20]	; (23fdfd8 <_Z19__fetch_global_Wirev+0x44>)
 23fdfc4:	f001 fbfc 	bl	23ff7c0 <atexit>
	return wire;
}
 23fdfc8:	4802      	ldr	r0, [pc, #8]	; (23fdfd4 <_Z19__fetch_global_Wirev+0x40>)
 23fdfca:	b007      	add	sp, #28
 23fdfcc:	bd30      	pop	{r4, r5, pc}
 23fdfce:	bf00      	nop
 23fdfd0:	1007aef4 	.word	0x1007aef4
 23fdfd4:	1007aef8 	.word	0x1007aef8
 23fdfd8:	023fdf5d 	.word	0x023fdf5d

023fdfdc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdfdc:	4770      	bx	lr
	...

023fdfe0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdfe0:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fdfe2:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdfe4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fdfe6:	462a      	mov	r2, r5
 23fdfe8:	2100      	movs	r1, #0
 23fdfea:	f001 fc1e 	bl	23ff82a <memset>
 23fdfee:	8025      	strh	r5, [r4, #0]
 23fdff0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdff2:	4907      	ldr	r1, [pc, #28]	; (23fe010 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fdff4:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fdff6:	8125      	strh	r5, [r4, #8]
 23fdff8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdffa:	f000 f8b1 	bl	23fe160 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdffe:	4904      	ldr	r1, [pc, #16]	; (23fe010 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe000:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe002:	4628      	mov	r0, r5
 23fe004:	f000 f8ac 	bl	23fe160 <_ZnajRKSt9nothrow_t>
    };
 23fe008:	60e0      	str	r0, [r4, #12]
}
 23fe00a:	4620      	mov	r0, r4
 23fe00c:	bd38      	pop	{r3, r4, r5, pc}
 23fe00e:	bf00      	nop
 23fe010:	023ffdcc 	.word	0x023ffdcc

023fe014 <__tcf_2>:
 23fe014:	4770      	bx	lr

023fe016 <__tcf_1>:
 23fe016:	4770      	bx	lr

023fe018 <_Z20acquireSerial1Bufferv>:
{
 23fe018:	b510      	push	{r4, lr}
 23fe01a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe01c:	f7ff ffe0 	bl	23fdfe0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe020:	4620      	mov	r0, r4
 23fe022:	bd10      	pop	{r4, pc}

023fe024 <_Z20acquireSerial2Bufferv>:
 23fe024:	b510      	push	{r4, lr}
 23fe026:	4604      	mov	r4, r0
 23fe028:	f7ff ffda 	bl	23fdfe0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe02c:	4620      	mov	r0, r4
 23fe02e:	bd10      	pop	{r4, pc}

023fe030 <_Z20acquireSerial3Bufferv>:
 23fe030:	b510      	push	{r4, lr}
 23fe032:	4604      	mov	r4, r0
 23fe034:	f7ff ffd4 	bl	23fdfe0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe038:	4620      	mov	r0, r4
 23fe03a:	bd10      	pop	{r4, pc}

023fe03c <_Z22__fetch_global_Serial1v>:
{
 23fe03c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe03e:	4d0e      	ldr	r5, [pc, #56]	; (23fe078 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe040:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe042:	e8d5 1f8f 	ldab	r1, [r5]
 23fe046:	f011 0401 	ands.w	r4, r1, #1
 23fe04a:	d111      	bne.n	23fe070 <_Z22__fetch_global_Serial1v+0x34>
 23fe04c:	4628      	mov	r0, r5
 23fe04e:	f7fd f9c5 	bl	23fb3dc <__cxa_guard_acquire>
 23fe052:	b168      	cbz	r0, 23fe070 <_Z22__fetch_global_Serial1v+0x34>
 23fe054:	a801      	add	r0, sp, #4
 23fe056:	f7ff ffdf 	bl	23fe018 <_Z20acquireSerial1Bufferv>
 23fe05a:	4621      	mov	r1, r4
 23fe05c:	aa01      	add	r2, sp, #4
 23fe05e:	4807      	ldr	r0, [pc, #28]	; (23fe07c <_Z22__fetch_global_Serial1v+0x40>)
 23fe060:	f7ff fd86 	bl	23fdb70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe064:	4628      	mov	r0, r5
 23fe066:	f7fd f9be 	bl	23fb3e6 <__cxa_guard_release>
 23fe06a:	4805      	ldr	r0, [pc, #20]	; (23fe080 <_Z22__fetch_global_Serial1v+0x44>)
 23fe06c:	f001 fba8 	bl	23ff7c0 <atexit>
    return serial1;
}
 23fe070:	4802      	ldr	r0, [pc, #8]	; (23fe07c <_Z22__fetch_global_Serial1v+0x40>)
 23fe072:	b007      	add	sp, #28
 23fe074:	bd30      	pop	{r4, r5, pc}
 23fe076:	bf00      	nop
 23fe078:	1007af0c 	.word	0x1007af0c
 23fe07c:	1007af18 	.word	0x1007af18
 23fe080:	023fdfdd 	.word	0x023fdfdd

023fe084 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe084:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe086:	4c0d      	ldr	r4, [pc, #52]	; (23fe0bc <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe088:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe08a:	e8d4 3f8f 	ldab	r3, [r4]
 23fe08e:	07db      	lsls	r3, r3, #31
 23fe090:	d411      	bmi.n	23fe0b6 <_Z22__fetch_global_Serial2v+0x32>
 23fe092:	4620      	mov	r0, r4
 23fe094:	f7fd f9a2 	bl	23fb3dc <__cxa_guard_acquire>
 23fe098:	b168      	cbz	r0, 23fe0b6 <_Z22__fetch_global_Serial2v+0x32>
 23fe09a:	a801      	add	r0, sp, #4
 23fe09c:	f7ff ffc2 	bl	23fe024 <_Z20acquireSerial2Bufferv>
 23fe0a0:	2101      	movs	r1, #1
 23fe0a2:	aa01      	add	r2, sp, #4
 23fe0a4:	4806      	ldr	r0, [pc, #24]	; (23fe0c0 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe0a6:	f7ff fd63 	bl	23fdb70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe0aa:	4620      	mov	r0, r4
 23fe0ac:	f7fd f99b 	bl	23fb3e6 <__cxa_guard_release>
 23fe0b0:	4804      	ldr	r0, [pc, #16]	; (23fe0c4 <_Z22__fetch_global_Serial2v+0x40>)
 23fe0b2:	f001 fb85 	bl	23ff7c0 <atexit>
	return serial2;
}
 23fe0b6:	4802      	ldr	r0, [pc, #8]	; (23fe0c0 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe0b8:	b006      	add	sp, #24
 23fe0ba:	bd10      	pop	{r4, pc}
 23fe0bc:	1007af10 	.word	0x1007af10
 23fe0c0:	1007af2c 	.word	0x1007af2c
 23fe0c4:	023fe017 	.word	0x023fe017

023fe0c8 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe0c8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe0ca:	f7ff ffdb 	bl	23fe084 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe0ce:	4b07      	ldr	r3, [pc, #28]	; (23fe0ec <_Z15serialEventRun2v+0x24>)
 23fe0d0:	4604      	mov	r4, r0
 23fe0d2:	b153      	cbz	r3, 23fe0ea <_Z15serialEventRun2v+0x22>
 23fe0d4:	f7ff fd6a 	bl	23fdbac <_ZN11USARTSerial9isEnabledEv>
 23fe0d8:	b138      	cbz	r0, 23fe0ea <_Z15serialEventRun2v+0x22>
 23fe0da:	6823      	ldr	r3, [r4, #0]
 23fe0dc:	4620      	mov	r0, r4
 23fe0de:	691b      	ldr	r3, [r3, #16]
 23fe0e0:	4798      	blx	r3
 23fe0e2:	2800      	cmp	r0, #0
 23fe0e4:	dd01      	ble.n	23fe0ea <_Z15serialEventRun2v+0x22>
        handler();
 23fe0e6:	e000      	b.n	23fe0ea <_Z15serialEventRun2v+0x22>
 23fe0e8:	bf00      	nop
}
 23fe0ea:	bd10      	pop	{r4, pc}
 23fe0ec:	00000000 	.word	0x00000000

023fe0f0 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe0f0:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe0f2:	4c0d      	ldr	r4, [pc, #52]	; (23fe128 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe0f4:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe0f6:	e8d4 3f8f 	ldab	r3, [r4]
 23fe0fa:	07db      	lsls	r3, r3, #31
 23fe0fc:	d411      	bmi.n	23fe122 <_Z22__fetch_global_Serial3v+0x32>
 23fe0fe:	4620      	mov	r0, r4
 23fe100:	f7fd f96c 	bl	23fb3dc <__cxa_guard_acquire>
 23fe104:	b168      	cbz	r0, 23fe122 <_Z22__fetch_global_Serial3v+0x32>
 23fe106:	a801      	add	r0, sp, #4
 23fe108:	f7ff ff92 	bl	23fe030 <_Z20acquireSerial3Bufferv>
 23fe10c:	2102      	movs	r1, #2
 23fe10e:	aa01      	add	r2, sp, #4
 23fe110:	4806      	ldr	r0, [pc, #24]	; (23fe12c <_Z22__fetch_global_Serial3v+0x3c>)
 23fe112:	f7ff fd2d 	bl	23fdb70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe116:	4620      	mov	r0, r4
 23fe118:	f7fd f965 	bl	23fb3e6 <__cxa_guard_release>
 23fe11c:	4804      	ldr	r0, [pc, #16]	; (23fe130 <_Z22__fetch_global_Serial3v+0x40>)
 23fe11e:	f001 fb4f 	bl	23ff7c0 <atexit>
	return serial3;
}
 23fe122:	4802      	ldr	r0, [pc, #8]	; (23fe12c <_Z22__fetch_global_Serial3v+0x3c>)
 23fe124:	b006      	add	sp, #24
 23fe126:	bd10      	pop	{r4, pc}
 23fe128:	1007af14 	.word	0x1007af14
 23fe12c:	1007af40 	.word	0x1007af40
 23fe130:	023fe015 	.word	0x023fe015

023fe134 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe134:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe136:	f7ff ffdb 	bl	23fe0f0 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe13a:	4b07      	ldr	r3, [pc, #28]	; (23fe158 <_Z15serialEventRun3v+0x24>)
 23fe13c:	4604      	mov	r4, r0
 23fe13e:	b153      	cbz	r3, 23fe156 <_Z15serialEventRun3v+0x22>
 23fe140:	f7ff fd34 	bl	23fdbac <_ZN11USARTSerial9isEnabledEv>
 23fe144:	b138      	cbz	r0, 23fe156 <_Z15serialEventRun3v+0x22>
 23fe146:	6823      	ldr	r3, [r4, #0]
 23fe148:	4620      	mov	r0, r4
 23fe14a:	691b      	ldr	r3, [r3, #16]
 23fe14c:	4798      	blx	r3
 23fe14e:	2800      	cmp	r0, #0
 23fe150:	dd01      	ble.n	23fe156 <_Z15serialEventRun3v+0x22>
        handler();
 23fe152:	e000      	b.n	23fe156 <_Z15serialEventRun3v+0x22>
 23fe154:	bf00      	nop
}
 23fe156:	bd10      	pop	{r4, pc}
 23fe158:	00000000 	.word	0x00000000

023fe15c <_ZnwjRKSt9nothrow_t>:
 23fe15c:	f7fd b92b 	b.w	23fb3b6 <_Znwj>

023fe160 <_ZnajRKSt9nothrow_t>:
 23fe160:	f7fd b92b 	b.w	23fb3ba <_Znaj>

023fe164 <atan2>:
 23fe164:	f000 b90c 	b.w	23fe380 <__ieee754_atan2>

023fe168 <pow>:
 23fe168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe16a:	ed2d 8b02 	vpush	{d8}
 23fe16e:	ec57 6b10 	vmov	r6, r7, d0
 23fe172:	ec55 4b11 	vmov	r4, r5, d1
 23fe176:	f000 f9d7 	bl	23fe528 <__ieee754_pow>
 23fe17a:	4b63      	ldr	r3, [pc, #396]	; (23fe308 <pow+0x1a0>)
 23fe17c:	eeb0 8a40 	vmov.f32	s16, s0
 23fe180:	eef0 8a60 	vmov.f32	s17, s1
 23fe184:	f993 3000 	ldrsb.w	r3, [r3]
 23fe188:	3301      	adds	r3, #1
 23fe18a:	d02a      	beq.n	23fe1e2 <pow+0x7a>
 23fe18c:	4622      	mov	r2, r4
 23fe18e:	462b      	mov	r3, r5
 23fe190:	4620      	mov	r0, r4
 23fe192:	4629      	mov	r1, r5
 23fe194:	f7fd f87a 	bl	23fb28c <__aeabi_dcmpun>
 23fe198:	bb18      	cbnz	r0, 23fe1e2 <pow+0x7a>
 23fe19a:	4632      	mov	r2, r6
 23fe19c:	463b      	mov	r3, r7
 23fe19e:	4630      	mov	r0, r6
 23fe1a0:	4639      	mov	r1, r7
 23fe1a2:	f7fd f873 	bl	23fb28c <__aeabi_dcmpun>
 23fe1a6:	2800      	cmp	r0, #0
 23fe1a8:	d144      	bne.n	23fe234 <pow+0xcc>
 23fe1aa:	2200      	movs	r2, #0
 23fe1ac:	2300      	movs	r3, #0
 23fe1ae:	4630      	mov	r0, r6
 23fe1b0:	4639      	mov	r1, r7
 23fe1b2:	f7fd f839 	bl	23fb228 <__aeabi_dcmpeq>
 23fe1b6:	b1d8      	cbz	r0, 23fe1f0 <pow+0x88>
 23fe1b8:	2200      	movs	r2, #0
 23fe1ba:	2300      	movs	r3, #0
 23fe1bc:	4620      	mov	r0, r4
 23fe1be:	4629      	mov	r1, r5
 23fe1c0:	f7fd f832 	bl	23fb228 <__aeabi_dcmpeq>
 23fe1c4:	2800      	cmp	r0, #0
 23fe1c6:	d13d      	bne.n	23fe244 <pow+0xdc>
 23fe1c8:	ec45 4b10 	vmov	d0, r4, r5
 23fe1cc:	f001 f9b2 	bl	23ff534 <finite>
 23fe1d0:	b138      	cbz	r0, 23fe1e2 <pow+0x7a>
 23fe1d2:	4620      	mov	r0, r4
 23fe1d4:	4629      	mov	r1, r5
 23fe1d6:	2200      	movs	r2, #0
 23fe1d8:	2300      	movs	r3, #0
 23fe1da:	f7fd f82f 	bl	23fb23c <__aeabi_dcmplt>
 23fe1de:	2800      	cmp	r0, #0
 23fe1e0:	d15c      	bne.n	23fe29c <pow+0x134>
 23fe1e2:	eeb0 0a48 	vmov.f32	s0, s16
 23fe1e6:	eef0 0a68 	vmov.f32	s1, s17
 23fe1ea:	ecbd 8b02 	vpop	{d8}
 23fe1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe1f0:	eeb0 0a48 	vmov.f32	s0, s16
 23fe1f4:	eef0 0a68 	vmov.f32	s1, s17
 23fe1f8:	f001 f99c 	bl	23ff534 <finite>
 23fe1fc:	b358      	cbz	r0, 23fe256 <pow+0xee>
 23fe1fe:	2200      	movs	r2, #0
 23fe200:	2300      	movs	r3, #0
 23fe202:	ec51 0b18 	vmov	r0, r1, d8
 23fe206:	f7fd f80f 	bl	23fb228 <__aeabi_dcmpeq>
 23fe20a:	2800      	cmp	r0, #0
 23fe20c:	d0e9      	beq.n	23fe1e2 <pow+0x7a>
 23fe20e:	ec47 6b10 	vmov	d0, r6, r7
 23fe212:	f001 f98f 	bl	23ff534 <finite>
 23fe216:	2800      	cmp	r0, #0
 23fe218:	d0e3      	beq.n	23fe1e2 <pow+0x7a>
 23fe21a:	ec45 4b10 	vmov	d0, r4, r5
 23fe21e:	f001 f989 	bl	23ff534 <finite>
 23fe222:	2800      	cmp	r0, #0
 23fe224:	d0dd      	beq.n	23fe1e2 <pow+0x7a>
 23fe226:	f7fd ff75 	bl	23fc114 <__errno>
 23fe22a:	2322      	movs	r3, #34	; 0x22
 23fe22c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fe2e8 <pow+0x180>
 23fe230:	6003      	str	r3, [r0, #0]
 23fe232:	e7d6      	b.n	23fe1e2 <pow+0x7a>
 23fe234:	4620      	mov	r0, r4
 23fe236:	4629      	mov	r1, r5
 23fe238:	2200      	movs	r2, #0
 23fe23a:	2300      	movs	r3, #0
 23fe23c:	f7fc fff4 	bl	23fb228 <__aeabi_dcmpeq>
 23fe240:	2800      	cmp	r0, #0
 23fe242:	d0ce      	beq.n	23fe1e2 <pow+0x7a>
 23fe244:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fe2f0 <pow+0x188>
 23fe248:	eeb0 0a48 	vmov.f32	s0, s16
 23fe24c:	eef0 0a68 	vmov.f32	s1, s17
 23fe250:	ecbd 8b02 	vpop	{d8}
 23fe254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe256:	ec47 6b10 	vmov	d0, r6, r7
 23fe25a:	f001 f96b 	bl	23ff534 <finite>
 23fe25e:	2800      	cmp	r0, #0
 23fe260:	d0cd      	beq.n	23fe1fe <pow+0x96>
 23fe262:	ec45 4b10 	vmov	d0, r4, r5
 23fe266:	f001 f965 	bl	23ff534 <finite>
 23fe26a:	2800      	cmp	r0, #0
 23fe26c:	d0c7      	beq.n	23fe1fe <pow+0x96>
 23fe26e:	ee18 0a10 	vmov	r0, s16
 23fe272:	ec53 2b18 	vmov	r2, r3, d8
 23fe276:	4619      	mov	r1, r3
 23fe278:	f7fd f808 	bl	23fb28c <__aeabi_dcmpun>
 23fe27c:	bb20      	cbnz	r0, 23fe2c8 <pow+0x160>
 23fe27e:	f7fd ff49 	bl	23fc114 <__errno>
 23fe282:	2222      	movs	r2, #34	; 0x22
 23fe284:	4603      	mov	r3, r0
 23fe286:	4639      	mov	r1, r7
 23fe288:	4630      	mov	r0, r6
 23fe28a:	601a      	str	r2, [r3, #0]
 23fe28c:	2200      	movs	r2, #0
 23fe28e:	2300      	movs	r3, #0
 23fe290:	f7fc ffd4 	bl	23fb23c <__aeabi_dcmplt>
 23fe294:	b948      	cbnz	r0, 23fe2aa <pow+0x142>
 23fe296:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fe2f8 <pow+0x190>
 23fe29a:	e7a2      	b.n	23fe1e2 <pow+0x7a>
 23fe29c:	f7fd ff3a 	bl	23fc114 <__errno>
 23fe2a0:	2321      	movs	r3, #33	; 0x21
 23fe2a2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fe300 <pow+0x198>
 23fe2a6:	6003      	str	r3, [r0, #0]
 23fe2a8:	e79b      	b.n	23fe1e2 <pow+0x7a>
 23fe2aa:	ec45 4b10 	vmov	d0, r4, r5
 23fe2ae:	f001 f957 	bl	23ff560 <rint>
 23fe2b2:	4622      	mov	r2, r4
 23fe2b4:	462b      	mov	r3, r5
 23fe2b6:	ec51 0b10 	vmov	r0, r1, d0
 23fe2ba:	f7fc ffb5 	bl	23fb228 <__aeabi_dcmpeq>
 23fe2be:	2800      	cmp	r0, #0
 23fe2c0:	d1e9      	bne.n	23fe296 <pow+0x12e>
 23fe2c2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fe300 <pow+0x198>
 23fe2c6:	e78c      	b.n	23fe1e2 <pow+0x7a>
 23fe2c8:	f7fd ff24 	bl	23fc114 <__errno>
 23fe2cc:	2200      	movs	r2, #0
 23fe2ce:	2300      	movs	r3, #0
 23fe2d0:	2121      	movs	r1, #33	; 0x21
 23fe2d2:	6001      	str	r1, [r0, #0]
 23fe2d4:	4610      	mov	r0, r2
 23fe2d6:	4619      	mov	r1, r3
 23fe2d8:	f7fc fe68 	bl	23fafac <__aeabi_ddiv>
 23fe2dc:	ec41 0b18 	vmov	d8, r0, r1
 23fe2e0:	e77f      	b.n	23fe1e2 <pow+0x7a>
 23fe2e2:	bf00      	nop
 23fe2e4:	f3af 8000 	nop.w
	...
 23fe2f4:	3ff00000 	.word	0x3ff00000
 23fe2f8:	00000000 	.word	0x00000000
 23fe2fc:	7ff00000 	.word	0x7ff00000
 23fe300:	00000000 	.word	0x00000000
 23fe304:	fff00000 	.word	0xfff00000
 23fe308:	1007adb8 	.word	0x1007adb8

023fe30c <sqrt>:
 23fe30c:	b538      	push	{r3, r4, r5, lr}
 23fe30e:	ed2d 8b02 	vpush	{d8}
 23fe312:	ec55 4b10 	vmov	r4, r5, d0
 23fe316:	f000 fe99 	bl	23ff04c <__ieee754_sqrt>
 23fe31a:	4b18      	ldr	r3, [pc, #96]	; (23fe37c <sqrt+0x70>)
 23fe31c:	eeb0 8a40 	vmov.f32	s16, s0
 23fe320:	eef0 8a60 	vmov.f32	s17, s1
 23fe324:	f993 3000 	ldrsb.w	r3, [r3]
 23fe328:	3301      	adds	r3, #1
 23fe32a:	d00d      	beq.n	23fe348 <sqrt+0x3c>
 23fe32c:	4622      	mov	r2, r4
 23fe32e:	462b      	mov	r3, r5
 23fe330:	4620      	mov	r0, r4
 23fe332:	4629      	mov	r1, r5
 23fe334:	f7fc ffaa 	bl	23fb28c <__aeabi_dcmpun>
 23fe338:	b930      	cbnz	r0, 23fe348 <sqrt+0x3c>
 23fe33a:	2200      	movs	r2, #0
 23fe33c:	2300      	movs	r3, #0
 23fe33e:	4620      	mov	r0, r4
 23fe340:	4629      	mov	r1, r5
 23fe342:	f7fc ff7b 	bl	23fb23c <__aeabi_dcmplt>
 23fe346:	b930      	cbnz	r0, 23fe356 <sqrt+0x4a>
 23fe348:	eeb0 0a48 	vmov.f32	s0, s16
 23fe34c:	eef0 0a68 	vmov.f32	s1, s17
 23fe350:	ecbd 8b02 	vpop	{d8}
 23fe354:	bd38      	pop	{r3, r4, r5, pc}
 23fe356:	f7fd fedd 	bl	23fc114 <__errno>
 23fe35a:	2200      	movs	r2, #0
 23fe35c:	2300      	movs	r3, #0
 23fe35e:	2121      	movs	r1, #33	; 0x21
 23fe360:	6001      	str	r1, [r0, #0]
 23fe362:	4610      	mov	r0, r2
 23fe364:	4619      	mov	r1, r3
 23fe366:	f7fc fe21 	bl	23fafac <__aeabi_ddiv>
 23fe36a:	ec41 0b18 	vmov	d8, r0, r1
 23fe36e:	eeb0 0a48 	vmov.f32	s0, s16
 23fe372:	eef0 0a68 	vmov.f32	s1, s17
 23fe376:	ecbd 8b02 	vpop	{d8}
 23fe37a:	bd38      	pop	{r3, r4, r5, pc}
 23fe37c:	1007adb8 	.word	0x1007adb8

023fe380 <__ieee754_atan2>:
 23fe380:	ec51 0b11 	vmov	r0, r1, d1
 23fe384:	4243      	negs	r3, r0
 23fe386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe38a:	4303      	orrs	r3, r0
 23fe38c:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fe390:	4e61      	ldr	r6, [pc, #388]	; (23fe518 <__ieee754_atan2+0x198>)
 23fe392:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fe396:	42b3      	cmp	r3, r6
 23fe398:	ec55 4b10 	vmov	r4, r5, d0
 23fe39c:	d83c      	bhi.n	23fe418 <__ieee754_atan2+0x98>
 23fe39e:	4263      	negs	r3, r4
 23fe3a0:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fe3a4:	46a9      	mov	r9, r5
 23fe3a6:	4323      	orrs	r3, r4
 23fe3a8:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fe3ac:	42b3      	cmp	r3, r6
 23fe3ae:	d833      	bhi.n	23fe418 <__ieee754_atan2+0x98>
 23fe3b0:	4b5a      	ldr	r3, [pc, #360]	; (23fe51c <__ieee754_atan2+0x19c>)
 23fe3b2:	440b      	add	r3, r1
 23fe3b4:	4303      	orrs	r3, r0
 23fe3b6:	d03e      	beq.n	23fe436 <__ieee754_atan2+0xb6>
 23fe3b8:	178f      	asrs	r7, r1, #30
 23fe3ba:	ea5a 0304 	orrs.w	r3, sl, r4
 23fe3be:	f007 0702 	and.w	r7, r7, #2
 23fe3c2:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fe3c6:	d02f      	beq.n	23fe428 <__ieee754_atan2+0xa8>
 23fe3c8:	ea5e 0300 	orrs.w	r3, lr, r0
 23fe3cc:	d037      	beq.n	23fe43e <__ieee754_atan2+0xbe>
 23fe3ce:	45b6      	cmp	lr, r6
 23fe3d0:	d044      	beq.n	23fe45c <__ieee754_atan2+0xdc>
 23fe3d2:	45b2      	cmp	sl, r6
 23fe3d4:	d033      	beq.n	23fe43e <__ieee754_atan2+0xbe>
 23fe3d6:	ebaa 0e0e 	sub.w	lr, sl, lr
 23fe3da:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23fe3de:	ea4f 532e 	mov.w	r3, lr, asr #20
 23fe3e2:	da38      	bge.n	23fe456 <__ieee754_atan2+0xd6>
 23fe3e4:	2900      	cmp	r1, #0
 23fe3e6:	da6a      	bge.n	23fe4be <__ieee754_atan2+0x13e>
 23fe3e8:	333c      	adds	r3, #60	; 0x3c
 23fe3ea:	da68      	bge.n	23fe4be <__ieee754_atan2+0x13e>
 23fe3ec:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fe4e0 <__ieee754_atan2+0x160>
 23fe3f0:	2f01      	cmp	r7, #1
 23fe3f2:	d050      	beq.n	23fe496 <__ieee754_atan2+0x116>
 23fe3f4:	2f02      	cmp	r7, #2
 23fe3f6:	d03d      	beq.n	23fe474 <__ieee754_atan2+0xf4>
 23fe3f8:	b1a7      	cbz	r7, 23fe424 <__ieee754_atan2+0xa4>
 23fe3fa:	ec51 0b10 	vmov	r0, r1, d0
 23fe3fe:	a33a      	add	r3, pc, #232	; (adr r3, 23fe4e8 <__ieee754_atan2+0x168>)
 23fe400:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe404:	f7fc faf0 	bl	23fa9e8 <__aeabi_dsub>
 23fe408:	a339      	add	r3, pc, #228	; (adr r3, 23fe4f0 <__ieee754_atan2+0x170>)
 23fe40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe40e:	f7fc faeb 	bl	23fa9e8 <__aeabi_dsub>
 23fe412:	ec41 0b10 	vmov	d0, r0, r1
 23fe416:	e005      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe418:	4622      	mov	r2, r4
 23fe41a:	462b      	mov	r3, r5
 23fe41c:	f7fc fae6 	bl	23fa9ec <__adddf3>
 23fe420:	ec41 0b10 	vmov	d0, r0, r1
 23fe424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe428:	2f02      	cmp	r7, #2
 23fe42a:	d00e      	beq.n	23fe44a <__ieee754_atan2+0xca>
 23fe42c:	2f03      	cmp	r7, #3
 23fe42e:	d1f9      	bne.n	23fe424 <__ieee754_atan2+0xa4>
 23fe430:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fe4f8 <__ieee754_atan2+0x178>
 23fe434:	e7f6      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe436:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe43a:	f000 bec9 	b.w	23ff1d0 <atan>
 23fe43e:	f1b9 0f00 	cmp.w	r9, #0
 23fe442:	db05      	blt.n	23fe450 <__ieee754_atan2+0xd0>
 23fe444:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fe500 <__ieee754_atan2+0x180>
 23fe448:	e7ec      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe44a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fe4f0 <__ieee754_atan2+0x170>
 23fe44e:	e7e9      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe450:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fe508 <__ieee754_atan2+0x188>
 23fe454:	e7e6      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe456:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fe500 <__ieee754_atan2+0x180>
 23fe45a:	e7c9      	b.n	23fe3f0 <__ieee754_atan2+0x70>
 23fe45c:	45f2      	cmp	sl, lr
 23fe45e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fe462:	d021      	beq.n	23fe4a8 <__ieee754_atan2+0x128>
 23fe464:	2f02      	cmp	r7, #2
 23fe466:	d827      	bhi.n	23fe4b8 <__ieee754_atan2+0x138>
 23fe468:	4b2d      	ldr	r3, [pc, #180]	; (23fe520 <__ieee754_atan2+0x1a0>)
 23fe46a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe46e:	ed97 0b00 	vldr	d0, [r7]
 23fe472:	e7d7      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe474:	a31c      	add	r3, pc, #112	; (adr r3, 23fe4e8 <__ieee754_atan2+0x168>)
 23fe476:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe47a:	ec51 0b10 	vmov	r0, r1, d0
 23fe47e:	f7fc fab3 	bl	23fa9e8 <__aeabi_dsub>
 23fe482:	4602      	mov	r2, r0
 23fe484:	460b      	mov	r3, r1
 23fe486:	a11a      	add	r1, pc, #104	; (adr r1, 23fe4f0 <__ieee754_atan2+0x170>)
 23fe488:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fe48c:	f7fc faac 	bl	23fa9e8 <__aeabi_dsub>
 23fe490:	ec41 0b10 	vmov	d0, r0, r1
 23fe494:	e7c6      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe496:	ee10 1a90 	vmov	r1, s1
 23fe49a:	ec53 2b10 	vmov	r2, r3, d0
 23fe49e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fe4a2:	ec43 2b10 	vmov	d0, r2, r3
 23fe4a6:	e7bd      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe4a8:	2f02      	cmp	r7, #2
 23fe4aa:	d815      	bhi.n	23fe4d8 <__ieee754_atan2+0x158>
 23fe4ac:	4b1d      	ldr	r3, [pc, #116]	; (23fe524 <__ieee754_atan2+0x1a4>)
 23fe4ae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe4b2:	ed97 0b00 	vldr	d0, [r7]
 23fe4b6:	e7b5      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe4b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fe4e0 <__ieee754_atan2+0x160>
 23fe4bc:	e7b2      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe4be:	4602      	mov	r2, r0
 23fe4c0:	460b      	mov	r3, r1
 23fe4c2:	4620      	mov	r0, r4
 23fe4c4:	4629      	mov	r1, r5
 23fe4c6:	f7fc fd71 	bl	23fafac <__aeabi_ddiv>
 23fe4ca:	ec41 0b10 	vmov	d0, r0, r1
 23fe4ce:	f001 f827 	bl	23ff520 <fabs>
 23fe4d2:	f000 fe7d 	bl	23ff1d0 <atan>
 23fe4d6:	e78b      	b.n	23fe3f0 <__ieee754_atan2+0x70>
 23fe4d8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fe510 <__ieee754_atan2+0x190>
 23fe4dc:	e7a2      	b.n	23fe424 <__ieee754_atan2+0xa4>
 23fe4de:	bf00      	nop
	...
 23fe4e8:	33145c07 	.word	0x33145c07
 23fe4ec:	3ca1a626 	.word	0x3ca1a626
 23fe4f0:	54442d18 	.word	0x54442d18
 23fe4f4:	400921fb 	.word	0x400921fb
 23fe4f8:	54442d18 	.word	0x54442d18
 23fe4fc:	c00921fb 	.word	0xc00921fb
 23fe500:	54442d18 	.word	0x54442d18
 23fe504:	3ff921fb 	.word	0x3ff921fb
 23fe508:	54442d18 	.word	0x54442d18
 23fe50c:	bff921fb 	.word	0xbff921fb
 23fe510:	54442d18 	.word	0x54442d18
 23fe514:	3fe921fb 	.word	0x3fe921fb
 23fe518:	7ff00000 	.word	0x7ff00000
 23fe51c:	c0100000 	.word	0xc0100000
 23fe520:	023ffde8 	.word	0x023ffde8
 23fe524:	023ffdd0 	.word	0x023ffdd0

023fe528 <__ieee754_pow>:
 23fe528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe52c:	ec55 4b11 	vmov	r4, r5, d1
 23fe530:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fe534:	ea5a 0204 	orrs.w	r2, sl, r4
 23fe538:	ed2d 8b0c 	vpush	{d8-d13}
 23fe53c:	b087      	sub	sp, #28
 23fe53e:	d01f      	beq.n	23fe580 <__ieee754_pow+0x58>
 23fe540:	495d      	ldr	r1, [pc, #372]	; (23fe6b8 <__ieee754_pow+0x190>)
 23fe542:	ee10 2a10 	vmov	r2, s0
 23fe546:	ec57 6b10 	vmov	r6, r7, d0
 23fe54a:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fe54e:	46b9      	mov	r9, r7
 23fe550:	4588      	cmp	r8, r1
 23fe552:	dc11      	bgt.n	23fe578 <__ieee754_pow+0x50>
 23fe554:	46ab      	mov	fp, r5
 23fe556:	ee11 3a10 	vmov	r3, s2
 23fe55a:	d108      	bne.n	23fe56e <__ieee754_pow+0x46>
 23fe55c:	b13e      	cbz	r6, 23fe56e <__ieee754_pow+0x46>
 23fe55e:	4857      	ldr	r0, [pc, #348]	; (23fe6bc <__ieee754_pow+0x194>)
 23fe560:	b007      	add	sp, #28
 23fe562:	ecbd 8b0c 	vpop	{d8-d13}
 23fe566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe56a:	f000 bff1 	b.w	23ff550 <nan>
 23fe56e:	4952      	ldr	r1, [pc, #328]	; (23fe6b8 <__ieee754_pow+0x190>)
 23fe570:	458a      	cmp	sl, r1
 23fe572:	dc01      	bgt.n	23fe578 <__ieee754_pow+0x50>
 23fe574:	d10b      	bne.n	23fe58e <__ieee754_pow+0x66>
 23fe576:	b153      	cbz	r3, 23fe58e <__ieee754_pow+0x66>
 23fe578:	4b51      	ldr	r3, [pc, #324]	; (23fe6c0 <__ieee754_pow+0x198>)
 23fe57a:	4443      	add	r3, r8
 23fe57c:	4313      	orrs	r3, r2
 23fe57e:	d1ee      	bne.n	23fe55e <__ieee754_pow+0x36>
 23fe580:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fe6a8 <__ieee754_pow+0x180>
 23fe584:	b007      	add	sp, #28
 23fe586:	ecbd 8b0c 	vpop	{d8-d13}
 23fe58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe58e:	f1b9 0f00 	cmp.w	r9, #0
 23fe592:	db45      	blt.n	23fe620 <__ieee754_pow+0xf8>
 23fe594:	2100      	movs	r1, #0
 23fe596:	9100      	str	r1, [sp, #0]
 23fe598:	b983      	cbnz	r3, 23fe5bc <__ieee754_pow+0x94>
 23fe59a:	4b47      	ldr	r3, [pc, #284]	; (23fe6b8 <__ieee754_pow+0x190>)
 23fe59c:	459a      	cmp	sl, r3
 23fe59e:	d05b      	beq.n	23fe658 <__ieee754_pow+0x130>
 23fe5a0:	4b48      	ldr	r3, [pc, #288]	; (23fe6c4 <__ieee754_pow+0x19c>)
 23fe5a2:	459a      	cmp	sl, r3
 23fe5a4:	d06a      	beq.n	23fe67c <__ieee754_pow+0x154>
 23fe5a6:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fe5aa:	f000 84b0 	beq.w	23fef0e <__ieee754_pow+0x9e6>
 23fe5ae:	4b46      	ldr	r3, [pc, #280]	; (23fe6c8 <__ieee754_pow+0x1a0>)
 23fe5b0:	459b      	cmp	fp, r3
 23fe5b2:	d103      	bne.n	23fe5bc <__ieee754_pow+0x94>
 23fe5b4:	f1b9 0f00 	cmp.w	r9, #0
 23fe5b8:	f280 850d 	bge.w	23fefd6 <__ieee754_pow+0xaae>
 23fe5bc:	9202      	str	r2, [sp, #8]
 23fe5be:	ec47 6b10 	vmov	d0, r6, r7
 23fe5c2:	f000 ffad 	bl	23ff520 <fabs>
 23fe5c6:	9a02      	ldr	r2, [sp, #8]
 23fe5c8:	b94a      	cbnz	r2, 23fe5de <__ieee754_pow+0xb6>
 23fe5ca:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fe5ce:	4a3d      	ldr	r2, [pc, #244]	; (23fe6c4 <__ieee754_pow+0x19c>)
 23fe5d0:	4293      	cmp	r3, r2
 23fe5d2:	f000 83a8 	beq.w	23fed26 <__ieee754_pow+0x7fe>
 23fe5d6:	f1b8 0f00 	cmp.w	r8, #0
 23fe5da:	f000 83a4 	beq.w	23fed26 <__ieee754_pow+0x7fe>
 23fe5de:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fe5e2:	9a00      	ldr	r2, [sp, #0]
 23fe5e4:	3b01      	subs	r3, #1
 23fe5e6:	9304      	str	r3, [sp, #16]
 23fe5e8:	4313      	orrs	r3, r2
 23fe5ea:	d04e      	beq.n	23fe68a <__ieee754_pow+0x162>
 23fe5ec:	4b37      	ldr	r3, [pc, #220]	; (23fe6cc <__ieee754_pow+0x1a4>)
 23fe5ee:	459a      	cmp	sl, r3
 23fe5f0:	dd72      	ble.n	23fe6d8 <__ieee754_pow+0x1b0>
 23fe5f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fe5f6:	459a      	cmp	sl, r3
 23fe5f8:	4b35      	ldr	r3, [pc, #212]	; (23fe6d0 <__ieee754_pow+0x1a8>)
 23fe5fa:	f340 842b 	ble.w	23fee54 <__ieee754_pow+0x92c>
 23fe5fe:	4598      	cmp	r8, r3
 23fe600:	f340 83a9 	ble.w	23fed56 <__ieee754_pow+0x82e>
 23fe604:	f1bb 0f00 	cmp.w	fp, #0
 23fe608:	f340 83a9 	ble.w	23fed5e <__ieee754_pow+0x836>
 23fe60c:	a328      	add	r3, pc, #160	; (adr r3, 23fe6b0 <__ieee754_pow+0x188>)
 23fe60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe612:	4610      	mov	r0, r2
 23fe614:	4619      	mov	r1, r3
 23fe616:	f7fc fb9f 	bl	23fad58 <__aeabi_dmul>
 23fe61a:	ec41 0b10 	vmov	d0, r0, r1
 23fe61e:	e7b1      	b.n	23fe584 <__ieee754_pow+0x5c>
 23fe620:	492c      	ldr	r1, [pc, #176]	; (23fe6d4 <__ieee754_pow+0x1ac>)
 23fe622:	458a      	cmp	sl, r1
 23fe624:	dc27      	bgt.n	23fe676 <__ieee754_pow+0x14e>
 23fe626:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fe62a:	458a      	cmp	sl, r1
 23fe62c:	ddb2      	ble.n	23fe594 <__ieee754_pow+0x6c>
 23fe62e:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fe632:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fe636:	2914      	cmp	r1, #20
 23fe638:	f340 847d 	ble.w	23fef36 <__ieee754_pow+0xa0e>
 23fe63c:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fe640:	fa23 f001 	lsr.w	r0, r3, r1
 23fe644:	fa00 f101 	lsl.w	r1, r0, r1
 23fe648:	4299      	cmp	r1, r3
 23fe64a:	d1a3      	bne.n	23fe594 <__ieee754_pow+0x6c>
 23fe64c:	f000 0001 	and.w	r0, r0, #1
 23fe650:	f1c0 0102 	rsb	r1, r0, #2
 23fe654:	9100      	str	r1, [sp, #0]
 23fe656:	e79f      	b.n	23fe598 <__ieee754_pow+0x70>
 23fe658:	4b19      	ldr	r3, [pc, #100]	; (23fe6c0 <__ieee754_pow+0x198>)
 23fe65a:	4443      	add	r3, r8
 23fe65c:	4313      	orrs	r3, r2
 23fe65e:	d08f      	beq.n	23fe580 <__ieee754_pow+0x58>
 23fe660:	4b1b      	ldr	r3, [pc, #108]	; (23fe6d0 <__ieee754_pow+0x1a8>)
 23fe662:	4598      	cmp	r8, r3
 23fe664:	f340 83ab 	ble.w	23fedbe <__ieee754_pow+0x896>
 23fe668:	f1bb 0f00 	cmp.w	fp, #0
 23fe66c:	f2c0 8377 	blt.w	23fed5e <__ieee754_pow+0x836>
 23fe670:	ec45 4b10 	vmov	d0, r4, r5
 23fe674:	e786      	b.n	23fe584 <__ieee754_pow+0x5c>
 23fe676:	2102      	movs	r1, #2
 23fe678:	9100      	str	r1, [sp, #0]
 23fe67a:	e78d      	b.n	23fe598 <__ieee754_pow+0x70>
 23fe67c:	f1bb 0f00 	cmp.w	fp, #0
 23fe680:	f2c0 844f 	blt.w	23fef22 <__ieee754_pow+0x9fa>
 23fe684:	ec47 6b10 	vmov	d0, r6, r7
 23fe688:	e77c      	b.n	23fe584 <__ieee754_pow+0x5c>
 23fe68a:	4632      	mov	r2, r6
 23fe68c:	463b      	mov	r3, r7
 23fe68e:	4610      	mov	r0, r2
 23fe690:	4619      	mov	r1, r3
 23fe692:	f7fc f9a9 	bl	23fa9e8 <__aeabi_dsub>
 23fe696:	4602      	mov	r2, r0
 23fe698:	460b      	mov	r3, r1
 23fe69a:	f7fc fc87 	bl	23fafac <__aeabi_ddiv>
 23fe69e:	ec41 0b10 	vmov	d0, r0, r1
 23fe6a2:	e76f      	b.n	23fe584 <__ieee754_pow+0x5c>
 23fe6a4:	f3af 8000 	nop.w
 23fe6a8:	00000000 	.word	0x00000000
 23fe6ac:	3ff00000 	.word	0x3ff00000
 23fe6b0:	8800759c 	.word	0x8800759c
 23fe6b4:	7e37e43c 	.word	0x7e37e43c
 23fe6b8:	7ff00000 	.word	0x7ff00000
 23fe6bc:	023ffe00 	.word	0x023ffe00
 23fe6c0:	c0100000 	.word	0xc0100000
 23fe6c4:	3ff00000 	.word	0x3ff00000
 23fe6c8:	3fe00000 	.word	0x3fe00000
 23fe6cc:	41e00000 	.word	0x41e00000
 23fe6d0:	3fefffff 	.word	0x3fefffff
 23fe6d4:	433fffff 	.word	0x433fffff
 23fe6d8:	4be3      	ldr	r3, [pc, #908]	; (23fea68 <__ieee754_pow+0x540>)
 23fe6da:	2200      	movs	r2, #0
 23fe6dc:	ea09 0303 	and.w	r3, r9, r3
 23fe6e0:	b953      	cbnz	r3, 23fe6f8 <__ieee754_pow+0x1d0>
 23fe6e2:	4be2      	ldr	r3, [pc, #904]	; (23fea6c <__ieee754_pow+0x544>)
 23fe6e4:	ec51 0b10 	vmov	r0, r1, d0
 23fe6e8:	f7fc fb36 	bl	23fad58 <__aeabi_dmul>
 23fe6ec:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fe6f0:	ec41 0b10 	vmov	d0, r0, r1
 23fe6f4:	ee10 8a90 	vmov	r8, s1
 23fe6f8:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fe6fc:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fe700:	4edb      	ldr	r6, [pc, #876]	; (23fea70 <__ieee754_pow+0x548>)
 23fe702:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fe706:	ea48 0606 	orr.w	r6, r8, r6
 23fe70a:	189a      	adds	r2, r3, r2
 23fe70c:	4bd9      	ldr	r3, [pc, #868]	; (23fea74 <__ieee754_pow+0x54c>)
 23fe70e:	4598      	cmp	r8, r3
 23fe710:	9205      	str	r2, [sp, #20]
 23fe712:	dd07      	ble.n	23fe724 <__ieee754_pow+0x1fc>
 23fe714:	4bd8      	ldr	r3, [pc, #864]	; (23fea78 <__ieee754_pow+0x550>)
 23fe716:	4598      	cmp	r8, r3
 23fe718:	f340 8433 	ble.w	23fef82 <__ieee754_pow+0xa5a>
 23fe71c:	3201      	adds	r2, #1
 23fe71e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fe722:	9205      	str	r2, [sp, #20]
 23fe724:	2700      	movs	r7, #0
 23fe726:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fea08 <__ieee754_pow+0x4e0>
 23fe72a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fea10 <__ieee754_pow+0x4e8>
 23fe72e:	eeb0 da47 	vmov.f32	s26, s14
 23fe732:	eef0 da67 	vmov.f32	s27, s15
 23fe736:	eeb0 ca47 	vmov.f32	s24, s14
 23fe73a:	eef0 ca67 	vmov.f32	s25, s15
 23fe73e:	ec51 0b16 	vmov	r0, r1, d6
 23fe742:	ec53 2b10 	vmov	r2, r3, d0
 23fe746:	4633      	mov	r3, r6
 23fe748:	1076      	asrs	r6, r6, #1
 23fe74a:	ec43 2b19 	vmov	d9, r2, r3
 23fe74e:	ec41 0b1a 	vmov	d10, r0, r1
 23fe752:	4602      	mov	r2, r0
 23fe754:	460b      	mov	r3, r1
 23fe756:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fe75a:	ec51 0b19 	vmov	r0, r1, d9
 23fe75e:	f7fc f943 	bl	23fa9e8 <__aeabi_dsub>
 23fe762:	4680      	mov	r8, r0
 23fe764:	4689      	mov	r9, r1
 23fe766:	ec53 2b1a 	vmov	r2, r3, d10
 23fe76a:	ec51 0b19 	vmov	r0, r1, d9
 23fe76e:	f7fc f93d 	bl	23fa9ec <__adddf3>
 23fe772:	4602      	mov	r2, r0
 23fe774:	460b      	mov	r3, r1
 23fe776:	2000      	movs	r0, #0
 23fe778:	49bd      	ldr	r1, [pc, #756]	; (23fea70 <__ieee754_pow+0x548>)
 23fe77a:	f7fc fc17 	bl	23fafac <__aeabi_ddiv>
 23fe77e:	ec41 0b1b 	vmov	d11, r0, r1
 23fe782:	ec53 2b1b 	vmov	r2, r3, d11
 23fe786:	4640      	mov	r0, r8
 23fe788:	4649      	mov	r1, r9
 23fe78a:	f7fc fae5 	bl	23fad58 <__aeabi_dmul>
 23fe78e:	460a      	mov	r2, r1
 23fe790:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fe794:	ec41 0b18 	vmov	d8, r0, r1
 23fe798:	4601      	mov	r1, r0
 23fe79a:	2000      	movs	r0, #0
 23fe79c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fe7a0:	2100      	movs	r1, #0
 23fe7a2:	4606      	mov	r6, r0
 23fe7a4:	4602      	mov	r2, r0
 23fe7a6:	9102      	str	r1, [sp, #8]
 23fe7a8:	19d9      	adds	r1, r3, r7
 23fe7aa:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fe7ae:	460f      	mov	r7, r1
 23fe7b0:	460b      	mov	r3, r1
 23fe7b2:	4650      	mov	r0, sl
 23fe7b4:	4659      	mov	r1, fp
 23fe7b6:	f7fc facf 	bl	23fad58 <__aeabi_dmul>
 23fe7ba:	4602      	mov	r2, r0
 23fe7bc:	460b      	mov	r3, r1
 23fe7be:	4640      	mov	r0, r8
 23fe7c0:	4649      	mov	r1, r9
 23fe7c2:	f7fc f911 	bl	23fa9e8 <__aeabi_dsub>
 23fe7c6:	4680      	mov	r8, r0
 23fe7c8:	4689      	mov	r9, r1
 23fe7ca:	4630      	mov	r0, r6
 23fe7cc:	4639      	mov	r1, r7
 23fe7ce:	ec53 2b1a 	vmov	r2, r3, d10
 23fe7d2:	f7fc f909 	bl	23fa9e8 <__aeabi_dsub>
 23fe7d6:	4602      	mov	r2, r0
 23fe7d8:	460b      	mov	r3, r1
 23fe7da:	ec51 0b19 	vmov	r0, r1, d9
 23fe7de:	f7fc f903 	bl	23fa9e8 <__aeabi_dsub>
 23fe7e2:	4652      	mov	r2, sl
 23fe7e4:	465b      	mov	r3, fp
 23fe7e6:	f7fc fab7 	bl	23fad58 <__aeabi_dmul>
 23fe7ea:	4602      	mov	r2, r0
 23fe7ec:	460b      	mov	r3, r1
 23fe7ee:	4640      	mov	r0, r8
 23fe7f0:	4649      	mov	r1, r9
 23fe7f2:	f7fc f8f9 	bl	23fa9e8 <__aeabi_dsub>
 23fe7f6:	ec53 2b1b 	vmov	r2, r3, d11
 23fe7fa:	f7fc faad 	bl	23fad58 <__aeabi_dmul>
 23fe7fe:	ec53 2b18 	vmov	r2, r3, d8
 23fe802:	ec41 0b1a 	vmov	d10, r0, r1
 23fe806:	ec51 0b18 	vmov	r0, r1, d8
 23fe80a:	f7fc faa5 	bl	23fad58 <__aeabi_dmul>
 23fe80e:	4606      	mov	r6, r0
 23fe810:	460f      	mov	r7, r1
 23fe812:	a381      	add	r3, pc, #516	; (adr r3, 23fea18 <__ieee754_pow+0x4f0>)
 23fe814:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe818:	f7fc fa9e 	bl	23fad58 <__aeabi_dmul>
 23fe81c:	a380      	add	r3, pc, #512	; (adr r3, 23fea20 <__ieee754_pow+0x4f8>)
 23fe81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe822:	f7fc f8e3 	bl	23fa9ec <__adddf3>
 23fe826:	4632      	mov	r2, r6
 23fe828:	463b      	mov	r3, r7
 23fe82a:	f7fc fa95 	bl	23fad58 <__aeabi_dmul>
 23fe82e:	a37e      	add	r3, pc, #504	; (adr r3, 23fea28 <__ieee754_pow+0x500>)
 23fe830:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe834:	f7fc f8da 	bl	23fa9ec <__adddf3>
 23fe838:	4632      	mov	r2, r6
 23fe83a:	463b      	mov	r3, r7
 23fe83c:	f7fc fa8c 	bl	23fad58 <__aeabi_dmul>
 23fe840:	a37b      	add	r3, pc, #492	; (adr r3, 23fea30 <__ieee754_pow+0x508>)
 23fe842:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe846:	f7fc f8d1 	bl	23fa9ec <__adddf3>
 23fe84a:	4632      	mov	r2, r6
 23fe84c:	463b      	mov	r3, r7
 23fe84e:	f7fc fa83 	bl	23fad58 <__aeabi_dmul>
 23fe852:	a379      	add	r3, pc, #484	; (adr r3, 23fea38 <__ieee754_pow+0x510>)
 23fe854:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe858:	f7fc f8c8 	bl	23fa9ec <__adddf3>
 23fe85c:	4632      	mov	r2, r6
 23fe85e:	463b      	mov	r3, r7
 23fe860:	f7fc fa7a 	bl	23fad58 <__aeabi_dmul>
 23fe864:	a376      	add	r3, pc, #472	; (adr r3, 23fea40 <__ieee754_pow+0x518>)
 23fe866:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe86a:	f7fc f8bf 	bl	23fa9ec <__adddf3>
 23fe86e:	4680      	mov	r8, r0
 23fe870:	4689      	mov	r9, r1
 23fe872:	4632      	mov	r2, r6
 23fe874:	463b      	mov	r3, r7
 23fe876:	4630      	mov	r0, r6
 23fe878:	4639      	mov	r1, r7
 23fe87a:	f7fc fa6d 	bl	23fad58 <__aeabi_dmul>
 23fe87e:	4602      	mov	r2, r0
 23fe880:	460b      	mov	r3, r1
 23fe882:	4640      	mov	r0, r8
 23fe884:	4649      	mov	r1, r9
 23fe886:	f04f 0800 	mov.w	r8, #0
 23fe88a:	f7fc fa65 	bl	23fad58 <__aeabi_dmul>
 23fe88e:	4652      	mov	r2, sl
 23fe890:	4606      	mov	r6, r0
 23fe892:	460f      	mov	r7, r1
 23fe894:	465b      	mov	r3, fp
 23fe896:	ec51 0b18 	vmov	r0, r1, d8
 23fe89a:	f7fc f8a7 	bl	23fa9ec <__adddf3>
 23fe89e:	ec53 2b1a 	vmov	r2, r3, d10
 23fe8a2:	f7fc fa59 	bl	23fad58 <__aeabi_dmul>
 23fe8a6:	4632      	mov	r2, r6
 23fe8a8:	463b      	mov	r3, r7
 23fe8aa:	f7fc f89f 	bl	23fa9ec <__adddf3>
 23fe8ae:	4652      	mov	r2, sl
 23fe8b0:	465b      	mov	r3, fp
 23fe8b2:	ec41 0b19 	vmov	d9, r0, r1
 23fe8b6:	4650      	mov	r0, sl
 23fe8b8:	4659      	mov	r1, fp
 23fe8ba:	f7fc fa4d 	bl	23fad58 <__aeabi_dmul>
 23fe8be:	2200      	movs	r2, #0
 23fe8c0:	4b6e      	ldr	r3, [pc, #440]	; (23fea7c <__ieee754_pow+0x554>)
 23fe8c2:	4606      	mov	r6, r0
 23fe8c4:	460f      	mov	r7, r1
 23fe8c6:	f7fc f891 	bl	23fa9ec <__adddf3>
 23fe8ca:	ec53 2b19 	vmov	r2, r3, d9
 23fe8ce:	f7fc f88d 	bl	23fa9ec <__adddf3>
 23fe8d2:	4689      	mov	r9, r1
 23fe8d4:	4642      	mov	r2, r8
 23fe8d6:	4650      	mov	r0, sl
 23fe8d8:	464b      	mov	r3, r9
 23fe8da:	4659      	mov	r1, fp
 23fe8dc:	f7fc fa3c 	bl	23fad58 <__aeabi_dmul>
 23fe8e0:	2200      	movs	r2, #0
 23fe8e2:	4682      	mov	sl, r0
 23fe8e4:	468b      	mov	fp, r1
 23fe8e6:	4b65      	ldr	r3, [pc, #404]	; (23fea7c <__ieee754_pow+0x554>)
 23fe8e8:	4640      	mov	r0, r8
 23fe8ea:	4649      	mov	r1, r9
 23fe8ec:	f7fc f87c 	bl	23fa9e8 <__aeabi_dsub>
 23fe8f0:	4632      	mov	r2, r6
 23fe8f2:	463b      	mov	r3, r7
 23fe8f4:	f7fc f878 	bl	23fa9e8 <__aeabi_dsub>
 23fe8f8:	4602      	mov	r2, r0
 23fe8fa:	460b      	mov	r3, r1
 23fe8fc:	ec51 0b19 	vmov	r0, r1, d9
 23fe900:	f7fc f872 	bl	23fa9e8 <__aeabi_dsub>
 23fe904:	ec53 2b18 	vmov	r2, r3, d8
 23fe908:	f7fc fa26 	bl	23fad58 <__aeabi_dmul>
 23fe90c:	4606      	mov	r6, r0
 23fe90e:	460f      	mov	r7, r1
 23fe910:	4642      	mov	r2, r8
 23fe912:	464b      	mov	r3, r9
 23fe914:	ec51 0b1a 	vmov	r0, r1, d10
 23fe918:	f7fc fa1e 	bl	23fad58 <__aeabi_dmul>
 23fe91c:	4602      	mov	r2, r0
 23fe91e:	460b      	mov	r3, r1
 23fe920:	4630      	mov	r0, r6
 23fe922:	4639      	mov	r1, r7
 23fe924:	f7fc f862 	bl	23fa9ec <__adddf3>
 23fe928:	4680      	mov	r8, r0
 23fe92a:	4689      	mov	r9, r1
 23fe92c:	4650      	mov	r0, sl
 23fe92e:	4642      	mov	r2, r8
 23fe930:	4659      	mov	r1, fp
 23fe932:	464b      	mov	r3, r9
 23fe934:	f7fc f85a 	bl	23fa9ec <__adddf3>
 23fe938:	2000      	movs	r0, #0
 23fe93a:	460f      	mov	r7, r1
 23fe93c:	4606      	mov	r6, r0
 23fe93e:	a342      	add	r3, pc, #264	; (adr r3, 23fea48 <__ieee754_pow+0x520>)
 23fe940:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe944:	f7fc fa08 	bl	23fad58 <__aeabi_dmul>
 23fe948:	4652      	mov	r2, sl
 23fe94a:	465b      	mov	r3, fp
 23fe94c:	ec41 0b19 	vmov	d9, r0, r1
 23fe950:	4630      	mov	r0, r6
 23fe952:	4639      	mov	r1, r7
 23fe954:	f7fc f848 	bl	23fa9e8 <__aeabi_dsub>
 23fe958:	4602      	mov	r2, r0
 23fe95a:	460b      	mov	r3, r1
 23fe95c:	4640      	mov	r0, r8
 23fe95e:	4649      	mov	r1, r9
 23fe960:	f7fc f842 	bl	23fa9e8 <__aeabi_dsub>
 23fe964:	a33a      	add	r3, pc, #232	; (adr r3, 23fea50 <__ieee754_pow+0x528>)
 23fe966:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe96a:	f7fc f9f5 	bl	23fad58 <__aeabi_dmul>
 23fe96e:	4680      	mov	r8, r0
 23fe970:	4689      	mov	r9, r1
 23fe972:	4630      	mov	r0, r6
 23fe974:	4639      	mov	r1, r7
 23fe976:	a338      	add	r3, pc, #224	; (adr r3, 23fea58 <__ieee754_pow+0x530>)
 23fe978:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe97c:	f7fc f9ec 	bl	23fad58 <__aeabi_dmul>
 23fe980:	4602      	mov	r2, r0
 23fe982:	460b      	mov	r3, r1
 23fe984:	4640      	mov	r0, r8
 23fe986:	4649      	mov	r1, r9
 23fe988:	f7fc f830 	bl	23fa9ec <__adddf3>
 23fe98c:	ec53 2b1c 	vmov	r2, r3, d12
 23fe990:	f7fc f82c 	bl	23fa9ec <__adddf3>
 23fe994:	4606      	mov	r6, r0
 23fe996:	460f      	mov	r7, r1
 23fe998:	9805      	ldr	r0, [sp, #20]
 23fe99a:	f7fc f973 	bl	23fac84 <__aeabi_i2d>
 23fe99e:	4632      	mov	r2, r6
 23fe9a0:	4680      	mov	r8, r0
 23fe9a2:	4689      	mov	r9, r1
 23fe9a4:	463b      	mov	r3, r7
 23fe9a6:	ec51 0b19 	vmov	r0, r1, d9
 23fe9aa:	f7fc f81f 	bl	23fa9ec <__adddf3>
 23fe9ae:	ec53 2b1d 	vmov	r2, r3, d13
 23fe9b2:	f7fc f81b 	bl	23fa9ec <__adddf3>
 23fe9b6:	4642      	mov	r2, r8
 23fe9b8:	464b      	mov	r3, r9
 23fe9ba:	f7fc f817 	bl	23fa9ec <__adddf3>
 23fe9be:	2000      	movs	r0, #0
 23fe9c0:	4642      	mov	r2, r8
 23fe9c2:	464b      	mov	r3, r9
 23fe9c4:	4682      	mov	sl, r0
 23fe9c6:	468b      	mov	fp, r1
 23fe9c8:	f7fc f80e 	bl	23fa9e8 <__aeabi_dsub>
 23fe9cc:	ec53 2b1d 	vmov	r2, r3, d13
 23fe9d0:	f7fc f80a 	bl	23fa9e8 <__aeabi_dsub>
 23fe9d4:	ec53 2b19 	vmov	r2, r3, d9
 23fe9d8:	f7fc f806 	bl	23fa9e8 <__aeabi_dsub>
 23fe9dc:	4602      	mov	r2, r0
 23fe9de:	460b      	mov	r3, r1
 23fe9e0:	4630      	mov	r0, r6
 23fe9e2:	4639      	mov	r1, r7
 23fe9e4:	f7fc f800 	bl	23fa9e8 <__aeabi_dsub>
 23fe9e8:	9b00      	ldr	r3, [sp, #0]
 23fe9ea:	9a04      	ldr	r2, [sp, #16]
 23fe9ec:	3b01      	subs	r3, #1
 23fe9ee:	4313      	orrs	r3, r2
 23fe9f0:	ec41 0b18 	vmov	d8, r0, r1
 23fe9f4:	f040 81dc 	bne.w	23fedb0 <__ieee754_pow+0x888>
 23fe9f8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fea60 <__ieee754_pow+0x538>
 23fe9fc:	eeb0 9a47 	vmov.f32	s18, s14
 23fea00:	eef0 9a67 	vmov.f32	s19, s15
 23fea04:	e03c      	b.n	23fea80 <__ieee754_pow+0x558>
 23fea06:	bf00      	nop
	...
 23fea14:	3ff00000 	.word	0x3ff00000
 23fea18:	4a454eef 	.word	0x4a454eef
 23fea1c:	3fca7e28 	.word	0x3fca7e28
 23fea20:	93c9db65 	.word	0x93c9db65
 23fea24:	3fcd864a 	.word	0x3fcd864a
 23fea28:	a91d4101 	.word	0xa91d4101
 23fea2c:	3fd17460 	.word	0x3fd17460
 23fea30:	518f264d 	.word	0x518f264d
 23fea34:	3fd55555 	.word	0x3fd55555
 23fea38:	db6fabff 	.word	0xdb6fabff
 23fea3c:	3fdb6db6 	.word	0x3fdb6db6
 23fea40:	33333303 	.word	0x33333303
 23fea44:	3fe33333 	.word	0x3fe33333
 23fea48:	e0000000 	.word	0xe0000000
 23fea4c:	3feec709 	.word	0x3feec709
 23fea50:	dc3a03fd 	.word	0xdc3a03fd
 23fea54:	3feec709 	.word	0x3feec709
 23fea58:	145b01f5 	.word	0x145b01f5
 23fea5c:	be3e2fe0 	.word	0xbe3e2fe0
 23fea60:	00000000 	.word	0x00000000
 23fea64:	bff00000 	.word	0xbff00000
 23fea68:	7ff00000 	.word	0x7ff00000
 23fea6c:	43400000 	.word	0x43400000
 23fea70:	3ff00000 	.word	0x3ff00000
 23fea74:	0003988e 	.word	0x0003988e
 23fea78:	000bb679 	.word	0x000bb679
 23fea7c:	40080000 	.word	0x40080000
 23fea80:	2300      	movs	r3, #0
 23fea82:	4620      	mov	r0, r4
 23fea84:	4629      	mov	r1, r5
 23fea86:	e9cd 4500 	strd	r4, r5, [sp]
 23fea8a:	9300      	str	r3, [sp, #0]
 23fea8c:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fea90:	4642      	mov	r2, r8
 23fea92:	464b      	mov	r3, r9
 23fea94:	f7fb ffa8 	bl	23fa9e8 <__aeabi_dsub>
 23fea98:	465b      	mov	r3, fp
 23fea9a:	4652      	mov	r2, sl
 23fea9c:	f7fc f95c 	bl	23fad58 <__aeabi_dmul>
 23feaa0:	4606      	mov	r6, r0
 23feaa2:	460f      	mov	r7, r1
 23feaa4:	4622      	mov	r2, r4
 23feaa6:	462b      	mov	r3, r5
 23feaa8:	ec51 0b18 	vmov	r0, r1, d8
 23feaac:	f7fc f954 	bl	23fad58 <__aeabi_dmul>
 23feab0:	4602      	mov	r2, r0
 23feab2:	460b      	mov	r3, r1
 23feab4:	4630      	mov	r0, r6
 23feab6:	4639      	mov	r1, r7
 23feab8:	f7fb ff98 	bl	23fa9ec <__adddf3>
 23feabc:	4642      	mov	r2, r8
 23feabe:	4604      	mov	r4, r0
 23feac0:	460d      	mov	r5, r1
 23feac2:	464b      	mov	r3, r9
 23feac4:	4659      	mov	r1, fp
 23feac6:	4650      	mov	r0, sl
 23feac8:	46a0      	mov	r8, r4
 23feaca:	f7fc f945 	bl	23fad58 <__aeabi_dmul>
 23feace:	4606      	mov	r6, r0
 23fead0:	460f      	mov	r7, r1
 23fead2:	4620      	mov	r0, r4
 23fead4:	4629      	mov	r1, r5
 23fead6:	4632      	mov	r2, r6
 23fead8:	463b      	mov	r3, r7
 23feada:	46a9      	mov	r9, r5
 23feadc:	f7fb ff86 	bl	23fa9ec <__adddf3>
 23feae0:	4bd5      	ldr	r3, [pc, #852]	; (23fee38 <__ieee754_pow+0x910>)
 23feae2:	4604      	mov	r4, r0
 23feae4:	460d      	mov	r5, r1
 23feae6:	4299      	cmp	r1, r3
 23feae8:	468b      	mov	fp, r1
 23feaea:	f340 813b 	ble.w	23fed64 <__ieee754_pow+0x83c>
 23feaee:	4bd3      	ldr	r3, [pc, #844]	; (23fee3c <__ieee754_pow+0x914>)
 23feaf0:	440b      	add	r3, r1
 23feaf2:	4303      	orrs	r3, r0
 23feaf4:	f040 8235 	bne.w	23fef62 <__ieee754_pow+0xa3a>
 23feaf8:	4640      	mov	r0, r8
 23feafa:	4649      	mov	r1, r9
 23feafc:	a3b6      	add	r3, pc, #728	; (adr r3, 23fedd8 <__ieee754_pow+0x8b0>)
 23feafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb02:	f7fb ff73 	bl	23fa9ec <__adddf3>
 23feb06:	4632      	mov	r2, r6
 23feb08:	463b      	mov	r3, r7
 23feb0a:	ec41 0b18 	vmov	d8, r0, r1
 23feb0e:	4620      	mov	r0, r4
 23feb10:	4629      	mov	r1, r5
 23feb12:	f7fb ff69 	bl	23fa9e8 <__aeabi_dsub>
 23feb16:	4602      	mov	r2, r0
 23feb18:	460b      	mov	r3, r1
 23feb1a:	ec51 0b18 	vmov	r0, r1, d8
 23feb1e:	f7fc fbab 	bl	23fb278 <__aeabi_dcmpgt>
 23feb22:	2800      	cmp	r0, #0
 23feb24:	f040 821d 	bne.w	23fef62 <__ieee754_pow+0xa3a>
 23feb28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23feb2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23feb30:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23feb34:	4cc2      	ldr	r4, [pc, #776]	; (23fee40 <__ieee754_pow+0x918>)
 23feb36:	f1bb 0f00 	cmp.w	fp, #0
 23feb3a:	fa42 f303 	asr.w	r3, r2, r3
 23feb3e:	f04f 0000 	mov.w	r0, #0
 23feb42:	445b      	add	r3, fp
 23feb44:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23feb48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23feb4c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23feb50:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23feb54:	fa44 f402 	asr.w	r4, r4, r2
 23feb58:	f1c2 0214 	rsb	r2, r2, #20
 23feb5c:	ea23 0104 	bic.w	r1, r3, r4
 23feb60:	fa4a fa02 	asr.w	sl, sl, r2
 23feb64:	4602      	mov	r2, r0
 23feb66:	4630      	mov	r0, r6
 23feb68:	460b      	mov	r3, r1
 23feb6a:	bfb8      	it	lt
 23feb6c:	f1ca 0a00 	rsblt	sl, sl, #0
 23feb70:	4639      	mov	r1, r7
 23feb72:	f7fb ff39 	bl	23fa9e8 <__aeabi_dsub>
 23feb76:	4602      	mov	r2, r0
 23feb78:	460b      	mov	r3, r1
 23feb7a:	4606      	mov	r6, r0
 23feb7c:	460f      	mov	r7, r1
 23feb7e:	4640      	mov	r0, r8
 23feb80:	4649      	mov	r1, r9
 23feb82:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23feb86:	f7fb ff31 	bl	23fa9ec <__adddf3>
 23feb8a:	460d      	mov	r5, r1
 23feb8c:	2400      	movs	r4, #0
 23feb8e:	4629      	mov	r1, r5
 23feb90:	a393      	add	r3, pc, #588	; (adr r3, 23fede0 <__ieee754_pow+0x8b8>)
 23feb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb96:	4620      	mov	r0, r4
 23feb98:	f7fc f8de 	bl	23fad58 <__aeabi_dmul>
 23feb9c:	4632      	mov	r2, r6
 23feb9e:	463b      	mov	r3, r7
 23feba0:	4606      	mov	r6, r0
 23feba2:	460f      	mov	r7, r1
 23feba4:	4620      	mov	r0, r4
 23feba6:	4629      	mov	r1, r5
 23feba8:	f7fb ff1e 	bl	23fa9e8 <__aeabi_dsub>
 23febac:	4602      	mov	r2, r0
 23febae:	460b      	mov	r3, r1
 23febb0:	4640      	mov	r0, r8
 23febb2:	4649      	mov	r1, r9
 23febb4:	f7fb ff18 	bl	23fa9e8 <__aeabi_dsub>
 23febb8:	a38b      	add	r3, pc, #556	; (adr r3, 23fede8 <__ieee754_pow+0x8c0>)
 23febba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23febbe:	f7fc f8cb 	bl	23fad58 <__aeabi_dmul>
 23febc2:	4680      	mov	r8, r0
 23febc4:	4689      	mov	r9, r1
 23febc6:	4620      	mov	r0, r4
 23febc8:	4629      	mov	r1, r5
 23febca:	a389      	add	r3, pc, #548	; (adr r3, 23fedf0 <__ieee754_pow+0x8c8>)
 23febcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23febd0:	f7fc f8c2 	bl	23fad58 <__aeabi_dmul>
 23febd4:	4602      	mov	r2, r0
 23febd6:	460b      	mov	r3, r1
 23febd8:	4640      	mov	r0, r8
 23febda:	4649      	mov	r1, r9
 23febdc:	f7fb ff06 	bl	23fa9ec <__adddf3>
 23febe0:	4680      	mov	r8, r0
 23febe2:	4689      	mov	r9, r1
 23febe4:	4630      	mov	r0, r6
 23febe6:	4642      	mov	r2, r8
 23febe8:	4639      	mov	r1, r7
 23febea:	464b      	mov	r3, r9
 23febec:	f7fb fefe 	bl	23fa9ec <__adddf3>
 23febf0:	4632      	mov	r2, r6
 23febf2:	4604      	mov	r4, r0
 23febf4:	460d      	mov	r5, r1
 23febf6:	463b      	mov	r3, r7
 23febf8:	f7fb fef6 	bl	23fa9e8 <__aeabi_dsub>
 23febfc:	4602      	mov	r2, r0
 23febfe:	460b      	mov	r3, r1
 23fec00:	4640      	mov	r0, r8
 23fec02:	4649      	mov	r1, r9
 23fec04:	f7fb fef0 	bl	23fa9e8 <__aeabi_dsub>
 23fec08:	4622      	mov	r2, r4
 23fec0a:	4680      	mov	r8, r0
 23fec0c:	4689      	mov	r9, r1
 23fec0e:	462b      	mov	r3, r5
 23fec10:	4620      	mov	r0, r4
 23fec12:	4629      	mov	r1, r5
 23fec14:	f7fc f8a0 	bl	23fad58 <__aeabi_dmul>
 23fec18:	4606      	mov	r6, r0
 23fec1a:	460f      	mov	r7, r1
 23fec1c:	a376      	add	r3, pc, #472	; (adr r3, 23fedf8 <__ieee754_pow+0x8d0>)
 23fec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec22:	f7fc f899 	bl	23fad58 <__aeabi_dmul>
 23fec26:	a376      	add	r3, pc, #472	; (adr r3, 23fee00 <__ieee754_pow+0x8d8>)
 23fec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec2c:	f7fb fedc 	bl	23fa9e8 <__aeabi_dsub>
 23fec30:	4632      	mov	r2, r6
 23fec32:	463b      	mov	r3, r7
 23fec34:	f7fc f890 	bl	23fad58 <__aeabi_dmul>
 23fec38:	a373      	add	r3, pc, #460	; (adr r3, 23fee08 <__ieee754_pow+0x8e0>)
 23fec3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec3e:	f7fb fed5 	bl	23fa9ec <__adddf3>
 23fec42:	4632      	mov	r2, r6
 23fec44:	463b      	mov	r3, r7
 23fec46:	f7fc f887 	bl	23fad58 <__aeabi_dmul>
 23fec4a:	a371      	add	r3, pc, #452	; (adr r3, 23fee10 <__ieee754_pow+0x8e8>)
 23fec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec50:	f7fb feca 	bl	23fa9e8 <__aeabi_dsub>
 23fec54:	4632      	mov	r2, r6
 23fec56:	463b      	mov	r3, r7
 23fec58:	f7fc f87e 	bl	23fad58 <__aeabi_dmul>
 23fec5c:	a36e      	add	r3, pc, #440	; (adr r3, 23fee18 <__ieee754_pow+0x8f0>)
 23fec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec62:	f7fb fec3 	bl	23fa9ec <__adddf3>
 23fec66:	4632      	mov	r2, r6
 23fec68:	463b      	mov	r3, r7
 23fec6a:	f7fc f875 	bl	23fad58 <__aeabi_dmul>
 23fec6e:	4602      	mov	r2, r0
 23fec70:	460b      	mov	r3, r1
 23fec72:	4620      	mov	r0, r4
 23fec74:	4629      	mov	r1, r5
 23fec76:	f7fb feb7 	bl	23fa9e8 <__aeabi_dsub>
 23fec7a:	4606      	mov	r6, r0
 23fec7c:	460f      	mov	r7, r1
 23fec7e:	4620      	mov	r0, r4
 23fec80:	4632      	mov	r2, r6
 23fec82:	4629      	mov	r1, r5
 23fec84:	463b      	mov	r3, r7
 23fec86:	f7fc f867 	bl	23fad58 <__aeabi_dmul>
 23fec8a:	2200      	movs	r2, #0
 23fec8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fec90:	ec41 0b18 	vmov	d8, r0, r1
 23fec94:	4630      	mov	r0, r6
 23fec96:	4639      	mov	r1, r7
 23fec98:	f7fb fea6 	bl	23fa9e8 <__aeabi_dsub>
 23fec9c:	4602      	mov	r2, r0
 23fec9e:	460b      	mov	r3, r1
 23feca0:	ec51 0b18 	vmov	r0, r1, d8
 23feca4:	f7fc f982 	bl	23fafac <__aeabi_ddiv>
 23feca8:	4642      	mov	r2, r8
 23fecaa:	4606      	mov	r6, r0
 23fecac:	460f      	mov	r7, r1
 23fecae:	464b      	mov	r3, r9
 23fecb0:	4620      	mov	r0, r4
 23fecb2:	4629      	mov	r1, r5
 23fecb4:	f7fc f850 	bl	23fad58 <__aeabi_dmul>
 23fecb8:	4642      	mov	r2, r8
 23fecba:	464b      	mov	r3, r9
 23fecbc:	f7fb fe96 	bl	23fa9ec <__adddf3>
 23fecc0:	4602      	mov	r2, r0
 23fecc2:	460b      	mov	r3, r1
 23fecc4:	4630      	mov	r0, r6
 23fecc6:	4639      	mov	r1, r7
 23fecc8:	f7fb fe8e 	bl	23fa9e8 <__aeabi_dsub>
 23feccc:	4622      	mov	r2, r4
 23fecce:	462b      	mov	r3, r5
 23fecd0:	f7fb fe8a 	bl	23fa9e8 <__aeabi_dsub>
 23fecd4:	4602      	mov	r2, r0
 23fecd6:	460b      	mov	r3, r1
 23fecd8:	2000      	movs	r0, #0
 23fecda:	495a      	ldr	r1, [pc, #360]	; (23fee44 <__ieee754_pow+0x91c>)
 23fecdc:	f7fb fe84 	bl	23fa9e8 <__aeabi_dsub>
 23fece0:	448b      	add	fp, r1
 23fece2:	4602      	mov	r2, r0
 23fece4:	460b      	mov	r3, r1
 23fece6:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fecea:	f2c0 816c 	blt.w	23fefc6 <__ieee754_pow+0xa9e>
 23fecee:	4659      	mov	r1, fp
 23fecf0:	ec53 2b19 	vmov	r2, r3, d9
 23fecf4:	f7fc f830 	bl	23fad58 <__aeabi_dmul>
 23fecf8:	ec41 0b10 	vmov	d0, r0, r1
 23fecfc:	e442      	b.n	23fe584 <__ieee754_pow+0x5c>
 23fecfe:	ec47 6b10 	vmov	d0, r6, r7
 23fed02:	9200      	str	r2, [sp, #0]
 23fed04:	f000 fc0c 	bl	23ff520 <fabs>
 23fed08:	9a00      	ldr	r2, [sp, #0]
 23fed0a:	2a00      	cmp	r2, #0
 23fed0c:	f47f acbd 	bne.w	23fe68a <__ieee754_pow+0x162>
 23fed10:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fed14:	4a4b      	ldr	r2, [pc, #300]	; (23fee44 <__ieee754_pow+0x91c>)
 23fed16:	4293      	cmp	r3, r2
 23fed18:	d003      	beq.n	23fed22 <__ieee754_pow+0x7fa>
 23fed1a:	f1b8 0f00 	cmp.w	r8, #0
 23fed1e:	f47f acb4 	bne.w	23fe68a <__ieee754_pow+0x162>
 23fed22:	2300      	movs	r3, #0
 23fed24:	9300      	str	r3, [sp, #0]
 23fed26:	f1bb 0f00 	cmp.w	fp, #0
 23fed2a:	da07      	bge.n	23fed3c <__ieee754_pow+0x814>
 23fed2c:	2000      	movs	r0, #0
 23fed2e:	4945      	ldr	r1, [pc, #276]	; (23fee44 <__ieee754_pow+0x91c>)
 23fed30:	ec53 2b10 	vmov	r2, r3, d0
 23fed34:	f7fc f93a 	bl	23fafac <__aeabi_ddiv>
 23fed38:	ec41 0b10 	vmov	d0, r0, r1
 23fed3c:	f1b9 0f00 	cmp.w	r9, #0
 23fed40:	f6bf ac20 	bge.w	23fe584 <__ieee754_pow+0x5c>
 23fed44:	4b40      	ldr	r3, [pc, #256]	; (23fee48 <__ieee754_pow+0x920>)
 23fed46:	9a00      	ldr	r2, [sp, #0]
 23fed48:	4443      	add	r3, r8
 23fed4a:	4313      	orrs	r3, r2
 23fed4c:	f040 812d 	bne.w	23fefaa <__ieee754_pow+0xa82>
 23fed50:	ec53 2b10 	vmov	r2, r3, d0
 23fed54:	e49b      	b.n	23fe68e <__ieee754_pow+0x166>
 23fed56:	f1bb 0f00 	cmp.w	fp, #0
 23fed5a:	f6ff ac57 	blt.w	23fe60c <__ieee754_pow+0xe4>
 23fed5e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fee20 <__ieee754_pow+0x8f8>
 23fed62:	e40f      	b.n	23fe584 <__ieee754_pow+0x5c>
 23fed64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fed68:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fee50 <__ieee754_pow+0x928>
 23fed6c:	4563      	cmp	r3, ip
 23fed6e:	f340 80f0 	ble.w	23fef52 <__ieee754_pow+0xa2a>
 23fed72:	4b36      	ldr	r3, [pc, #216]	; (23fee4c <__ieee754_pow+0x924>)
 23fed74:	440b      	add	r3, r1
 23fed76:	4303      	orrs	r3, r0
 23fed78:	d10a      	bne.n	23fed90 <__ieee754_pow+0x868>
 23fed7a:	4632      	mov	r2, r6
 23fed7c:	463b      	mov	r3, r7
 23fed7e:	f7fb fe33 	bl	23fa9e8 <__aeabi_dsub>
 23fed82:	4642      	mov	r2, r8
 23fed84:	464b      	mov	r3, r9
 23fed86:	f7fc fa6d 	bl	23fb264 <__aeabi_dcmpge>
 23fed8a:	2800      	cmp	r0, #0
 23fed8c:	f43f aecc 	beq.w	23feb28 <__ieee754_pow+0x600>
 23fed90:	a325      	add	r3, pc, #148	; (adr r3, 23fee28 <__ieee754_pow+0x900>)
 23fed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fed96:	ec51 0b19 	vmov	r0, r1, d9
 23fed9a:	f7fb ffdd 	bl	23fad58 <__aeabi_dmul>
 23fed9e:	a322      	add	r3, pc, #136	; (adr r3, 23fee28 <__ieee754_pow+0x900>)
 23feda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feda4:	f7fb ffd8 	bl	23fad58 <__aeabi_dmul>
 23feda8:	ec41 0b10 	vmov	d0, r0, r1
 23fedac:	f7ff bbea 	b.w	23fe584 <__ieee754_pow+0x5c>
 23fedb0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fee30 <__ieee754_pow+0x908>
 23fedb4:	eeb0 9a47 	vmov.f32	s18, s14
 23fedb8:	eef0 9a67 	vmov.f32	s19, s15
 23fedbc:	e660      	b.n	23fea80 <__ieee754_pow+0x558>
 23fedbe:	f1bb 0f00 	cmp.w	fp, #0
 23fedc2:	dacc      	bge.n	23fed5e <__ieee754_pow+0x836>
 23fedc4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fedc8:	ee00 4a10 	vmov	s0, r4
 23fedcc:	ee00 3a90 	vmov	s1, r3
 23fedd0:	f7ff bbd8 	b.w	23fe584 <__ieee754_pow+0x5c>
 23fedd4:	f3af 8000 	nop.w
 23fedd8:	652b82fe 	.word	0x652b82fe
 23feddc:	3c971547 	.word	0x3c971547
 23fede0:	00000000 	.word	0x00000000
 23fede4:	3fe62e43 	.word	0x3fe62e43
 23fede8:	fefa39ef 	.word	0xfefa39ef
 23fedec:	3fe62e42 	.word	0x3fe62e42
 23fedf0:	0ca86c39 	.word	0x0ca86c39
 23fedf4:	be205c61 	.word	0xbe205c61
 23fedf8:	72bea4d0 	.word	0x72bea4d0
 23fedfc:	3e663769 	.word	0x3e663769
 23fee00:	c5d26bf1 	.word	0xc5d26bf1
 23fee04:	3ebbbd41 	.word	0x3ebbbd41
 23fee08:	af25de2c 	.word	0xaf25de2c
 23fee0c:	3f11566a 	.word	0x3f11566a
 23fee10:	16bebd93 	.word	0x16bebd93
 23fee14:	3f66c16c 	.word	0x3f66c16c
 23fee18:	5555553e 	.word	0x5555553e
 23fee1c:	3fc55555 	.word	0x3fc55555
	...
 23fee28:	c2f8f359 	.word	0xc2f8f359
 23fee2c:	01a56e1f 	.word	0x01a56e1f
 23fee30:	00000000 	.word	0x00000000
 23fee34:	3ff00000 	.word	0x3ff00000
 23fee38:	408fffff 	.word	0x408fffff
 23fee3c:	bf700000 	.word	0xbf700000
 23fee40:	000fffff 	.word	0x000fffff
 23fee44:	3ff00000 	.word	0x3ff00000
 23fee48:	c0100000 	.word	0xc0100000
 23fee4c:	3f6f3400 	.word	0x3f6f3400
 23fee50:	4090cbff 	.word	0x4090cbff
 23fee54:	4598      	cmp	r8, r3
 23fee56:	f6ff af7e 	blt.w	23fed56 <__ieee754_pow+0x82e>
 23fee5a:	4b79      	ldr	r3, [pc, #484]	; (23ff040 <__ieee754_pow+0xb18>)
 23fee5c:	4598      	cmp	r8, r3
 23fee5e:	f73f abd1 	bgt.w	23fe604 <__ieee754_pow+0xdc>
 23fee62:	2200      	movs	r2, #0
 23fee64:	4b76      	ldr	r3, [pc, #472]	; (23ff040 <__ieee754_pow+0xb18>)
 23fee66:	ec51 0b10 	vmov	r0, r1, d0
 23fee6a:	f7fb fdbd 	bl	23fa9e8 <__aeabi_dsub>
 23fee6e:	4606      	mov	r6, r0
 23fee70:	460f      	mov	r7, r1
 23fee72:	a363      	add	r3, pc, #396	; (adr r3, 23ff000 <__ieee754_pow+0xad8>)
 23fee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee78:	f7fb ff6e 	bl	23fad58 <__aeabi_dmul>
 23fee7c:	4682      	mov	sl, r0
 23fee7e:	468b      	mov	fp, r1
 23fee80:	4630      	mov	r0, r6
 23fee82:	4639      	mov	r1, r7
 23fee84:	a360      	add	r3, pc, #384	; (adr r3, 23ff008 <__ieee754_pow+0xae0>)
 23fee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee8a:	f7fb ff65 	bl	23fad58 <__aeabi_dmul>
 23fee8e:	2200      	movs	r2, #0
 23fee90:	4b6c      	ldr	r3, [pc, #432]	; (23ff044 <__ieee754_pow+0xb1c>)
 23fee92:	ec41 0b18 	vmov	d8, r0, r1
 23fee96:	4630      	mov	r0, r6
 23fee98:	4639      	mov	r1, r7
 23fee9a:	f7fb ff5d 	bl	23fad58 <__aeabi_dmul>
 23fee9e:	4602      	mov	r2, r0
 23feea0:	460b      	mov	r3, r1
 23feea2:	a15b      	add	r1, pc, #364	; (adr r1, 23ff010 <__ieee754_pow+0xae8>)
 23feea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 23feea8:	f7fb fd9e 	bl	23fa9e8 <__aeabi_dsub>
 23feeac:	4632      	mov	r2, r6
 23feeae:	463b      	mov	r3, r7
 23feeb0:	f7fb ff52 	bl	23fad58 <__aeabi_dmul>
 23feeb4:	4602      	mov	r2, r0
 23feeb6:	460b      	mov	r3, r1
 23feeb8:	2000      	movs	r0, #0
 23feeba:	4963      	ldr	r1, [pc, #396]	; (23ff048 <__ieee754_pow+0xb20>)
 23feebc:	f7fb fd94 	bl	23fa9e8 <__aeabi_dsub>
 23feec0:	4680      	mov	r8, r0
 23feec2:	4689      	mov	r9, r1
 23feec4:	4632      	mov	r2, r6
 23feec6:	463b      	mov	r3, r7
 23feec8:	4630      	mov	r0, r6
 23feeca:	4639      	mov	r1, r7
 23feecc:	f7fb ff44 	bl	23fad58 <__aeabi_dmul>
 23feed0:	4602      	mov	r2, r0
 23feed2:	460b      	mov	r3, r1
 23feed4:	4640      	mov	r0, r8
 23feed6:	4649      	mov	r1, r9
 23feed8:	f7fb ff3e 	bl	23fad58 <__aeabi_dmul>
 23feedc:	a34e      	add	r3, pc, #312	; (adr r3, 23ff018 <__ieee754_pow+0xaf0>)
 23feede:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feee2:	f7fb ff39 	bl	23fad58 <__aeabi_dmul>
 23feee6:	4602      	mov	r2, r0
 23feee8:	460b      	mov	r3, r1
 23feeea:	ec51 0b18 	vmov	r0, r1, d8
 23feeee:	f7fb fd7b 	bl	23fa9e8 <__aeabi_dsub>
 23feef2:	4606      	mov	r6, r0
 23feef4:	460f      	mov	r7, r1
 23feef6:	4650      	mov	r0, sl
 23feef8:	4659      	mov	r1, fp
 23feefa:	4632      	mov	r2, r6
 23feefc:	463b      	mov	r3, r7
 23feefe:	f7fb fd75 	bl	23fa9ec <__adddf3>
 23fef02:	2000      	movs	r0, #0
 23fef04:	4652      	mov	r2, sl
 23fef06:	465b      	mov	r3, fp
 23fef08:	4682      	mov	sl, r0
 23fef0a:	468b      	mov	fp, r1
 23fef0c:	e564      	b.n	23fe9d8 <__ieee754_pow+0x4b0>
 23fef0e:	4632      	mov	r2, r6
 23fef10:	463b      	mov	r3, r7
 23fef12:	4630      	mov	r0, r6
 23fef14:	4639      	mov	r1, r7
 23fef16:	f7fb ff1f 	bl	23fad58 <__aeabi_dmul>
 23fef1a:	ec41 0b10 	vmov	d0, r0, r1
 23fef1e:	f7ff bb31 	b.w	23fe584 <__ieee754_pow+0x5c>
 23fef22:	2000      	movs	r0, #0
 23fef24:	4946      	ldr	r1, [pc, #280]	; (23ff040 <__ieee754_pow+0xb18>)
 23fef26:	4632      	mov	r2, r6
 23fef28:	463b      	mov	r3, r7
 23fef2a:	f7fc f83f 	bl	23fafac <__aeabi_ddiv>
 23fef2e:	ec41 0b10 	vmov	d0, r0, r1
 23fef32:	f7ff bb27 	b.w	23fe584 <__ieee754_pow+0x5c>
 23fef36:	2b00      	cmp	r3, #0
 23fef38:	f47f aee1 	bne.w	23fecfe <__ieee754_pow+0x7d6>
 23fef3c:	f1c1 0114 	rsb	r1, r1, #20
 23fef40:	fa4a f001 	asr.w	r0, sl, r1
 23fef44:	fa00 f101 	lsl.w	r1, r0, r1
 23fef48:	4551      	cmp	r1, sl
 23fef4a:	d04d      	beq.n	23fefe8 <__ieee754_pow+0xac0>
 23fef4c:	9300      	str	r3, [sp, #0]
 23fef4e:	f7ff bb27 	b.w	23fe5a0 <__ieee754_pow+0x78>
 23fef52:	4a3d      	ldr	r2, [pc, #244]	; (23ff048 <__ieee754_pow+0xb20>)
 23fef54:	4293      	cmp	r3, r2
 23fef56:	dc4e      	bgt.n	23feff6 <__ieee754_pow+0xace>
 23fef58:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fef5c:	4693      	mov	fp, r2
 23fef5e:	4692      	mov	sl, r2
 23fef60:	e614      	b.n	23feb8c <__ieee754_pow+0x664>
 23fef62:	a32f      	add	r3, pc, #188	; (adr r3, 23ff020 <__ieee754_pow+0xaf8>)
 23fef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fef68:	ec51 0b19 	vmov	r0, r1, d9
 23fef6c:	f7fb fef4 	bl	23fad58 <__aeabi_dmul>
 23fef70:	a32b      	add	r3, pc, #172	; (adr r3, 23ff020 <__ieee754_pow+0xaf8>)
 23fef72:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fef76:	f7fb feef 	bl	23fad58 <__aeabi_dmul>
 23fef7a:	ec41 0b10 	vmov	d0, r0, r1
 23fef7e:	f7ff bb01 	b.w	23fe584 <__ieee754_pow+0x5c>
 23fef82:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23ff028 <__ieee754_pow+0xb00>
 23fef86:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fef8a:	eeb0 da47 	vmov.f32	s26, s14
 23fef8e:	eef0 da67 	vmov.f32	s27, s15
 23fef92:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23ff030 <__ieee754_pow+0xb08>
 23fef96:	eeb0 ca47 	vmov.f32	s24, s14
 23fef9a:	eef0 ca67 	vmov.f32	s25, s15
 23fef9e:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23ff038 <__ieee754_pow+0xb10>
 23fefa2:	ec51 0b17 	vmov	r0, r1, d7
 23fefa6:	f7ff bbcc 	b.w	23fe742 <__ieee754_pow+0x21a>
 23fefaa:	9b00      	ldr	r3, [sp, #0]
 23fefac:	2b01      	cmp	r3, #1
 23fefae:	f47f aae9 	bne.w	23fe584 <__ieee754_pow+0x5c>
 23fefb2:	ee10 1a90 	vmov	r1, s1
 23fefb6:	ee10 2a10 	vmov	r2, s0
 23fefba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fefbe:	ec43 2b10 	vmov	d0, r2, r3
 23fefc2:	f7ff badf 	b.w	23fe584 <__ieee754_pow+0x5c>
 23fefc6:	4650      	mov	r0, sl
 23fefc8:	ec43 2b10 	vmov	d0, r2, r3
 23fefcc:	f000 fb64 	bl	23ff698 <scalbn>
 23fefd0:	ec51 0b10 	vmov	r0, r1, d0
 23fefd4:	e68c      	b.n	23fecf0 <__ieee754_pow+0x7c8>
 23fefd6:	ec47 6b10 	vmov	d0, r6, r7
 23fefda:	b007      	add	sp, #28
 23fefdc:	ecbd 8b0c 	vpop	{d8-d13}
 23fefe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fefe4:	f000 b832 	b.w	23ff04c <__ieee754_sqrt>
 23fefe8:	f000 0001 	and.w	r0, r0, #1
 23fefec:	f1c0 0302 	rsb	r3, r0, #2
 23feff0:	9300      	str	r3, [sp, #0]
 23feff2:	f7ff bad5 	b.w	23fe5a0 <__ieee754_pow+0x78>
 23feff6:	151b      	asrs	r3, r3, #20
 23feff8:	e598      	b.n	23feb2c <__ieee754_pow+0x604>
 23feffa:	bf00      	nop
 23feffc:	f3af 8000 	nop.w
 23ff000:	60000000 	.word	0x60000000
 23ff004:	3ff71547 	.word	0x3ff71547
 23ff008:	f85ddf44 	.word	0xf85ddf44
 23ff00c:	3e54ae0b 	.word	0x3e54ae0b
 23ff010:	55555555 	.word	0x55555555
 23ff014:	3fd55555 	.word	0x3fd55555
 23ff018:	652b82fe 	.word	0x652b82fe
 23ff01c:	3ff71547 	.word	0x3ff71547
 23ff020:	8800759c 	.word	0x8800759c
 23ff024:	7e37e43c 	.word	0x7e37e43c
 23ff028:	40000000 	.word	0x40000000
 23ff02c:	3fe2b803 	.word	0x3fe2b803
 23ff030:	43cfd006 	.word	0x43cfd006
 23ff034:	3e4cfdeb 	.word	0x3e4cfdeb
 23ff038:	00000000 	.word	0x00000000
 23ff03c:	3ff80000 	.word	0x3ff80000
 23ff040:	3ff00000 	.word	0x3ff00000
 23ff044:	3fd00000 	.word	0x3fd00000
 23ff048:	3fe00000 	.word	0x3fe00000

023ff04c <__ieee754_sqrt>:
 23ff04c:	495e      	ldr	r1, [pc, #376]	; (23ff1c8 <__ieee754_sqrt+0x17c>)
 23ff04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff052:	ec55 4b10 	vmov	r4, r5, d0
 23ff056:	43a9      	bics	r1, r5
 23ff058:	f000 8094 	beq.w	23ff184 <__ieee754_sqrt+0x138>
 23ff05c:	2d00      	cmp	r5, #0
 23ff05e:	462b      	mov	r3, r5
 23ff060:	ee10 2a10 	vmov	r2, s0
 23ff064:	dd5a      	ble.n	23ff11c <__ieee754_sqrt+0xd0>
 23ff066:	1528      	asrs	r0, r5, #20
 23ff068:	d067      	beq.n	23ff13a <__ieee754_sqrt+0xee>
 23ff06a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff06e:	07c1      	lsls	r1, r0, #31
 23ff070:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23ff074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ff078:	d403      	bmi.n	23ff082 <__ieee754_sqrt+0x36>
 23ff07a:	005b      	lsls	r3, r3, #1
 23ff07c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23ff080:	0052      	lsls	r2, r2, #1
 23ff082:	0fd1      	lsrs	r1, r2, #31
 23ff084:	2600      	movs	r6, #0
 23ff086:	107f      	asrs	r7, r7, #1
 23ff088:	f04f 0c16 	mov.w	ip, #22
 23ff08c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23ff090:	46b6      	mov	lr, r6
 23ff092:	0052      	lsls	r2, r2, #1
 23ff094:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23ff098:	eb0e 0001 	add.w	r0, lr, r1
 23ff09c:	4298      	cmp	r0, r3
 23ff09e:	dc03      	bgt.n	23ff0a8 <__ieee754_sqrt+0x5c>
 23ff0a0:	1a1b      	subs	r3, r3, r0
 23ff0a2:	eb00 0e01 	add.w	lr, r0, r1
 23ff0a6:	440e      	add	r6, r1
 23ff0a8:	005b      	lsls	r3, r3, #1
 23ff0aa:	f1bc 0c01 	subs.w	ip, ip, #1
 23ff0ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23ff0b2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23ff0b6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ff0ba:	d1ed      	bne.n	23ff098 <__ieee754_sqrt+0x4c>
 23ff0bc:	4665      	mov	r5, ip
 23ff0be:	2420      	movs	r4, #32
 23ff0c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23ff0c4:	e014      	b.n	23ff0f0 <__ieee754_sqrt+0xa4>
 23ff0c6:	d10a      	bne.n	23ff0de <__ieee754_sqrt+0x92>
 23ff0c8:	4290      	cmp	r0, r2
 23ff0ca:	d808      	bhi.n	23ff0de <__ieee754_sqrt+0x92>
 23ff0cc:	2800      	cmp	r0, #0
 23ff0ce:	eb00 0c01 	add.w	ip, r0, r1
 23ff0d2:	db1d      	blt.n	23ff110 <__ieee754_sqrt+0xc4>
 23ff0d4:	46f0      	mov	r8, lr
 23ff0d6:	2300      	movs	r3, #0
 23ff0d8:	1a12      	subs	r2, r2, r0
 23ff0da:	440d      	add	r5, r1
 23ff0dc:	46c6      	mov	lr, r8
 23ff0de:	0fd0      	lsrs	r0, r2, #31
 23ff0e0:	3c01      	subs	r4, #1
 23ff0e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23ff0e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23ff0ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ff0ee:	d033      	beq.n	23ff158 <__ieee754_sqrt+0x10c>
 23ff0f0:	4573      	cmp	r3, lr
 23ff0f2:	eb01 000c 	add.w	r0, r1, ip
 23ff0f6:	dde6      	ble.n	23ff0c6 <__ieee754_sqrt+0x7a>
 23ff0f8:	2800      	cmp	r0, #0
 23ff0fa:	eb00 0c01 	add.w	ip, r0, r1
 23ff0fe:	db07      	blt.n	23ff110 <__ieee754_sqrt+0xc4>
 23ff100:	46f0      	mov	r8, lr
 23ff102:	eba3 030e 	sub.w	r3, r3, lr
 23ff106:	4290      	cmp	r0, r2
 23ff108:	bf88      	it	hi
 23ff10a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23ff10e:	e7e3      	b.n	23ff0d8 <__ieee754_sqrt+0x8c>
 23ff110:	f1bc 0f00 	cmp.w	ip, #0
 23ff114:	dbf4      	blt.n	23ff100 <__ieee754_sqrt+0xb4>
 23ff116:	f10e 0801 	add.w	r8, lr, #1
 23ff11a:	e7f2      	b.n	23ff102 <__ieee754_sqrt+0xb6>
 23ff11c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23ff120:	4321      	orrs	r1, r4
 23ff122:	d028      	beq.n	23ff176 <__ieee754_sqrt+0x12a>
 23ff124:	2d00      	cmp	r5, #0
 23ff126:	d13d      	bne.n	23ff1a4 <__ieee754_sqrt+0x158>
 23ff128:	4628      	mov	r0, r5
 23ff12a:	0ad1      	lsrs	r1, r2, #11
 23ff12c:	3815      	subs	r0, #21
 23ff12e:	0552      	lsls	r2, r2, #21
 23ff130:	460b      	mov	r3, r1
 23ff132:	2900      	cmp	r1, #0
 23ff134:	d0f9      	beq.n	23ff12a <__ieee754_sqrt+0xde>
 23ff136:	02cf      	lsls	r7, r1, #11
 23ff138:	d441      	bmi.n	23ff1be <__ieee754_sqrt+0x172>
 23ff13a:	2400      	movs	r4, #0
 23ff13c:	005b      	lsls	r3, r3, #1
 23ff13e:	4625      	mov	r5, r4
 23ff140:	3401      	adds	r4, #1
 23ff142:	02de      	lsls	r6, r3, #11
 23ff144:	d5fa      	bpl.n	23ff13c <__ieee754_sqrt+0xf0>
 23ff146:	4619      	mov	r1, r3
 23ff148:	4613      	mov	r3, r2
 23ff14a:	40a2      	lsls	r2, r4
 23ff14c:	f1c4 0420 	rsb	r4, r4, #32
 23ff150:	40e3      	lsrs	r3, r4
 23ff152:	1b40      	subs	r0, r0, r5
 23ff154:	430b      	orrs	r3, r1
 23ff156:	e788      	b.n	23ff06a <__ieee754_sqrt+0x1e>
 23ff158:	4313      	orrs	r3, r2
 23ff15a:	d10e      	bne.n	23ff17a <__ieee754_sqrt+0x12e>
 23ff15c:	086c      	lsrs	r4, r5, #1
 23ff15e:	07f3      	lsls	r3, r6, #31
 23ff160:	491a      	ldr	r1, [pc, #104]	; (23ff1cc <__ieee754_sqrt+0x180>)
 23ff162:	bf48      	it	mi
 23ff164:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23ff168:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23ff16c:	4622      	mov	r2, r4
 23ff16e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23ff172:	ec43 2b10 	vmov	d0, r2, r3
 23ff176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff17a:	1c6a      	adds	r2, r5, #1
 23ff17c:	d01d      	beq.n	23ff1ba <__ieee754_sqrt+0x16e>
 23ff17e:	1c6c      	adds	r4, r5, #1
 23ff180:	0864      	lsrs	r4, r4, #1
 23ff182:	e7ec      	b.n	23ff15e <__ieee754_sqrt+0x112>
 23ff184:	ee10 2a10 	vmov	r2, s0
 23ff188:	462b      	mov	r3, r5
 23ff18a:	ee10 0a10 	vmov	r0, s0
 23ff18e:	4629      	mov	r1, r5
 23ff190:	f7fb fde2 	bl	23fad58 <__aeabi_dmul>
 23ff194:	4622      	mov	r2, r4
 23ff196:	462b      	mov	r3, r5
 23ff198:	f7fb fc28 	bl	23fa9ec <__adddf3>
 23ff19c:	ec41 0b10 	vmov	d0, r0, r1
 23ff1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff1a4:	4620      	mov	r0, r4
 23ff1a6:	4629      	mov	r1, r5
 23ff1a8:	f7fb fc1e 	bl	23fa9e8 <__aeabi_dsub>
 23ff1ac:	4602      	mov	r2, r0
 23ff1ae:	460b      	mov	r3, r1
 23ff1b0:	f7fb fefc 	bl	23fafac <__aeabi_ddiv>
 23ff1b4:	ec41 0b10 	vmov	d0, r0, r1
 23ff1b8:	e7dd      	b.n	23ff176 <__ieee754_sqrt+0x12a>
 23ff1ba:	3601      	adds	r6, #1
 23ff1bc:	e7cf      	b.n	23ff15e <__ieee754_sqrt+0x112>
 23ff1be:	4613      	mov	r3, r2
 23ff1c0:	2420      	movs	r4, #32
 23ff1c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23ff1c6:	e7c3      	b.n	23ff150 <__ieee754_sqrt+0x104>
 23ff1c8:	7ff00000 	.word	0x7ff00000
 23ff1cc:	3fe00000 	.word	0x3fe00000

023ff1d0 <atan>:
 23ff1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff1d4:	ec55 4b10 	vmov	r4, r5, d0
 23ff1d8:	4bc7      	ldr	r3, [pc, #796]	; (23ff4f8 <atan+0x328>)
 23ff1da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23ff1de:	46aa      	mov	sl, r5
 23ff1e0:	429e      	cmp	r6, r3
 23ff1e2:	dd16      	ble.n	23ff212 <atan+0x42>
 23ff1e4:	4bc5      	ldr	r3, [pc, #788]	; (23ff4fc <atan+0x32c>)
 23ff1e6:	429e      	cmp	r6, r3
 23ff1e8:	dc01      	bgt.n	23ff1ee <atan+0x1e>
 23ff1ea:	d10a      	bne.n	23ff202 <atan+0x32>
 23ff1ec:	b14c      	cbz	r4, 23ff202 <atan+0x32>
 23ff1ee:	4622      	mov	r2, r4
 23ff1f0:	462b      	mov	r3, r5
 23ff1f2:	4620      	mov	r0, r4
 23ff1f4:	4629      	mov	r1, r5
 23ff1f6:	f7fb fbf9 	bl	23fa9ec <__adddf3>
 23ff1fa:	ec41 0b10 	vmov	d0, r0, r1
 23ff1fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff202:	f1ba 0f00 	cmp.w	sl, #0
 23ff206:	f340 80bf 	ble.w	23ff388 <atan+0x1b8>
 23ff20a:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23ff488 <atan+0x2b8>
 23ff20e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff212:	4bbb      	ldr	r3, [pc, #748]	; (23ff500 <atan+0x330>)
 23ff214:	429e      	cmp	r6, r3
 23ff216:	f300 80ba 	bgt.w	23ff38e <atan+0x1be>
 23ff21a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23ff21e:	429e      	cmp	r6, r3
 23ff220:	f340 80a0 	ble.w	23ff364 <atan+0x194>
 23ff224:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23ff228:	4622      	mov	r2, r4
 23ff22a:	462b      	mov	r3, r5
 23ff22c:	4620      	mov	r0, r4
 23ff22e:	4629      	mov	r1, r5
 23ff230:	f7fb fd92 	bl	23fad58 <__aeabi_dmul>
 23ff234:	4602      	mov	r2, r0
 23ff236:	460b      	mov	r3, r1
 23ff238:	4680      	mov	r8, r0
 23ff23a:	4689      	mov	r9, r1
 23ff23c:	f7fb fd8c 	bl	23fad58 <__aeabi_dmul>
 23ff240:	4606      	mov	r6, r0
 23ff242:	460f      	mov	r7, r1
 23ff244:	a392      	add	r3, pc, #584	; (adr r3, 23ff490 <atan+0x2c0>)
 23ff246:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff24a:	f7fb fd85 	bl	23fad58 <__aeabi_dmul>
 23ff24e:	a392      	add	r3, pc, #584	; (adr r3, 23ff498 <atan+0x2c8>)
 23ff250:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff254:	f7fb fbca 	bl	23fa9ec <__adddf3>
 23ff258:	4632      	mov	r2, r6
 23ff25a:	463b      	mov	r3, r7
 23ff25c:	f7fb fd7c 	bl	23fad58 <__aeabi_dmul>
 23ff260:	a38f      	add	r3, pc, #572	; (adr r3, 23ff4a0 <atan+0x2d0>)
 23ff262:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff266:	f7fb fbc1 	bl	23fa9ec <__adddf3>
 23ff26a:	4632      	mov	r2, r6
 23ff26c:	463b      	mov	r3, r7
 23ff26e:	f7fb fd73 	bl	23fad58 <__aeabi_dmul>
 23ff272:	a38d      	add	r3, pc, #564	; (adr r3, 23ff4a8 <atan+0x2d8>)
 23ff274:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff278:	f7fb fbb8 	bl	23fa9ec <__adddf3>
 23ff27c:	4632      	mov	r2, r6
 23ff27e:	463b      	mov	r3, r7
 23ff280:	f7fb fd6a 	bl	23fad58 <__aeabi_dmul>
 23ff284:	a38a      	add	r3, pc, #552	; (adr r3, 23ff4b0 <atan+0x2e0>)
 23ff286:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff28a:	f7fb fbaf 	bl	23fa9ec <__adddf3>
 23ff28e:	4632      	mov	r2, r6
 23ff290:	463b      	mov	r3, r7
 23ff292:	f7fb fd61 	bl	23fad58 <__aeabi_dmul>
 23ff296:	a388      	add	r3, pc, #544	; (adr r3, 23ff4b8 <atan+0x2e8>)
 23ff298:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff29c:	f7fb fba6 	bl	23fa9ec <__adddf3>
 23ff2a0:	4642      	mov	r2, r8
 23ff2a2:	464b      	mov	r3, r9
 23ff2a4:	f7fb fd58 	bl	23fad58 <__aeabi_dmul>
 23ff2a8:	4680      	mov	r8, r0
 23ff2aa:	4689      	mov	r9, r1
 23ff2ac:	4630      	mov	r0, r6
 23ff2ae:	4639      	mov	r1, r7
 23ff2b0:	a383      	add	r3, pc, #524	; (adr r3, 23ff4c0 <atan+0x2f0>)
 23ff2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2b6:	f7fb fd4f 	bl	23fad58 <__aeabi_dmul>
 23ff2ba:	a383      	add	r3, pc, #524	; (adr r3, 23ff4c8 <atan+0x2f8>)
 23ff2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2c0:	f7fb fb92 	bl	23fa9e8 <__aeabi_dsub>
 23ff2c4:	4632      	mov	r2, r6
 23ff2c6:	463b      	mov	r3, r7
 23ff2c8:	f7fb fd46 	bl	23fad58 <__aeabi_dmul>
 23ff2cc:	a380      	add	r3, pc, #512	; (adr r3, 23ff4d0 <atan+0x300>)
 23ff2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2d2:	f7fb fb89 	bl	23fa9e8 <__aeabi_dsub>
 23ff2d6:	4632      	mov	r2, r6
 23ff2d8:	463b      	mov	r3, r7
 23ff2da:	f7fb fd3d 	bl	23fad58 <__aeabi_dmul>
 23ff2de:	a37e      	add	r3, pc, #504	; (adr r3, 23ff4d8 <atan+0x308>)
 23ff2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2e4:	f7fb fb80 	bl	23fa9e8 <__aeabi_dsub>
 23ff2e8:	4632      	mov	r2, r6
 23ff2ea:	463b      	mov	r3, r7
 23ff2ec:	f7fb fd34 	bl	23fad58 <__aeabi_dmul>
 23ff2f0:	a37b      	add	r3, pc, #492	; (adr r3, 23ff4e0 <atan+0x310>)
 23ff2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2f6:	f7fb fb77 	bl	23fa9e8 <__aeabi_dsub>
 23ff2fa:	4632      	mov	r2, r6
 23ff2fc:	463b      	mov	r3, r7
 23ff2fe:	f7fb fd2b 	bl	23fad58 <__aeabi_dmul>
 23ff302:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23ff306:	4602      	mov	r2, r0
 23ff308:	460b      	mov	r3, r1
 23ff30a:	4640      	mov	r0, r8
 23ff30c:	4649      	mov	r1, r9
 23ff30e:	d063      	beq.n	23ff3d8 <atan+0x208>
 23ff310:	4e7c      	ldr	r6, [pc, #496]	; (23ff504 <atan+0x334>)
 23ff312:	f7fb fb6b 	bl	23fa9ec <__adddf3>
 23ff316:	4622      	mov	r2, r4
 23ff318:	462b      	mov	r3, r5
 23ff31a:	f7fb fd1d 	bl	23fad58 <__aeabi_dmul>
 23ff31e:	4b7a      	ldr	r3, [pc, #488]	; (23ff508 <atan+0x338>)
 23ff320:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23ff324:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23ff328:	449b      	add	fp, r3
 23ff32a:	e9db 2300 	ldrd	r2, r3, [fp]
 23ff32e:	f7fb fb5b 	bl	23fa9e8 <__aeabi_dsub>
 23ff332:	4622      	mov	r2, r4
 23ff334:	462b      	mov	r3, r5
 23ff336:	f7fb fb57 	bl	23fa9e8 <__aeabi_dsub>
 23ff33a:	4602      	mov	r2, r0
 23ff33c:	460b      	mov	r3, r1
 23ff33e:	e9d6 0100 	ldrd	r0, r1, [r6]
 23ff342:	f7fb fb51 	bl	23fa9e8 <__aeabi_dsub>
 23ff346:	f1ba 0f00 	cmp.w	sl, #0
 23ff34a:	ec41 0b10 	vmov	d0, r0, r1
 23ff34e:	f6bf af56 	bge.w	23ff1fe <atan+0x2e>
 23ff352:	ee10 1a90 	vmov	r1, s1
 23ff356:	4602      	mov	r2, r0
 23ff358:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23ff35c:	ec43 2b10 	vmov	d0, r2, r3
 23ff360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff364:	a360      	add	r3, pc, #384	; (adr r3, 23ff4e8 <atan+0x318>)
 23ff366:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff36a:	ee10 0a10 	vmov	r0, s0
 23ff36e:	4629      	mov	r1, r5
 23ff370:	f7fb fb3c 	bl	23fa9ec <__adddf3>
 23ff374:	2200      	movs	r2, #0
 23ff376:	4b65      	ldr	r3, [pc, #404]	; (23ff50c <atan+0x33c>)
 23ff378:	f7fb ff7e 	bl	23fb278 <__aeabi_dcmpgt>
 23ff37c:	2800      	cmp	r0, #0
 23ff37e:	f43f af51 	beq.w	23ff224 <atan+0x54>
 23ff382:	ec45 4b10 	vmov	d0, r4, r5
 23ff386:	e73a      	b.n	23ff1fe <atan+0x2e>
 23ff388:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23ff4f0 <atan+0x320>
 23ff38c:	e737      	b.n	23ff1fe <atan+0x2e>
 23ff38e:	f000 f8c7 	bl	23ff520 <fabs>
 23ff392:	4b5f      	ldr	r3, [pc, #380]	; (23ff510 <atan+0x340>)
 23ff394:	429e      	cmp	r6, r3
 23ff396:	ec55 4b10 	vmov	r4, r5, d0
 23ff39a:	dc2d      	bgt.n	23ff3f8 <atan+0x228>
 23ff39c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23ff3a0:	429e      	cmp	r6, r3
 23ff3a2:	dd58      	ble.n	23ff456 <atan+0x286>
 23ff3a4:	2200      	movs	r2, #0
 23ff3a6:	4b59      	ldr	r3, [pc, #356]	; (23ff50c <atan+0x33c>)
 23ff3a8:	ee10 0a10 	vmov	r0, s0
 23ff3ac:	4629      	mov	r1, r5
 23ff3ae:	f7fb fb1b 	bl	23fa9e8 <__aeabi_dsub>
 23ff3b2:	f04f 0b01 	mov.w	fp, #1
 23ff3b6:	4606      	mov	r6, r0
 23ff3b8:	460f      	mov	r7, r1
 23ff3ba:	4620      	mov	r0, r4
 23ff3bc:	4629      	mov	r1, r5
 23ff3be:	2200      	movs	r2, #0
 23ff3c0:	4b52      	ldr	r3, [pc, #328]	; (23ff50c <atan+0x33c>)
 23ff3c2:	f7fb fb13 	bl	23fa9ec <__adddf3>
 23ff3c6:	4602      	mov	r2, r0
 23ff3c8:	460b      	mov	r3, r1
 23ff3ca:	4630      	mov	r0, r6
 23ff3cc:	4639      	mov	r1, r7
 23ff3ce:	f7fb fded 	bl	23fafac <__aeabi_ddiv>
 23ff3d2:	4604      	mov	r4, r0
 23ff3d4:	460d      	mov	r5, r1
 23ff3d6:	e727      	b.n	23ff228 <atan+0x58>
 23ff3d8:	f7fb fb08 	bl	23fa9ec <__adddf3>
 23ff3dc:	4622      	mov	r2, r4
 23ff3de:	462b      	mov	r3, r5
 23ff3e0:	f7fb fcba 	bl	23fad58 <__aeabi_dmul>
 23ff3e4:	4602      	mov	r2, r0
 23ff3e6:	460b      	mov	r3, r1
 23ff3e8:	4620      	mov	r0, r4
 23ff3ea:	4629      	mov	r1, r5
 23ff3ec:	f7fb fafc 	bl	23fa9e8 <__aeabi_dsub>
 23ff3f0:	ec41 0b10 	vmov	d0, r0, r1
 23ff3f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff3f8:	4b46      	ldr	r3, [pc, #280]	; (23ff514 <atan+0x344>)
 23ff3fa:	429e      	cmp	r6, r3
 23ff3fc:	da1f      	bge.n	23ff43e <atan+0x26e>
 23ff3fe:	ee10 0a10 	vmov	r0, s0
 23ff402:	2200      	movs	r2, #0
 23ff404:	4b44      	ldr	r3, [pc, #272]	; (23ff518 <atan+0x348>)
 23ff406:	4629      	mov	r1, r5
 23ff408:	f7fb faee 	bl	23fa9e8 <__aeabi_dsub>
 23ff40c:	4602      	mov	r2, r0
 23ff40e:	460b      	mov	r3, r1
 23ff410:	4620      	mov	r0, r4
 23ff412:	4629      	mov	r1, r5
 23ff414:	4614      	mov	r4, r2
 23ff416:	461d      	mov	r5, r3
 23ff418:	2200      	movs	r2, #0
 23ff41a:	4b3f      	ldr	r3, [pc, #252]	; (23ff518 <atan+0x348>)
 23ff41c:	f04f 0b02 	mov.w	fp, #2
 23ff420:	f7fb fc9a 	bl	23fad58 <__aeabi_dmul>
 23ff424:	2200      	movs	r2, #0
 23ff426:	4b39      	ldr	r3, [pc, #228]	; (23ff50c <atan+0x33c>)
 23ff428:	f7fb fae0 	bl	23fa9ec <__adddf3>
 23ff42c:	4602      	mov	r2, r0
 23ff42e:	460b      	mov	r3, r1
 23ff430:	4620      	mov	r0, r4
 23ff432:	4629      	mov	r1, r5
 23ff434:	f7fb fdba 	bl	23fafac <__aeabi_ddiv>
 23ff438:	4604      	mov	r4, r0
 23ff43a:	460d      	mov	r5, r1
 23ff43c:	e6f4      	b.n	23ff228 <atan+0x58>
 23ff43e:	462b      	mov	r3, r5
 23ff440:	2000      	movs	r0, #0
 23ff442:	4936      	ldr	r1, [pc, #216]	; (23ff51c <atan+0x34c>)
 23ff444:	ee10 2a10 	vmov	r2, s0
 23ff448:	f7fb fdb0 	bl	23fafac <__aeabi_ddiv>
 23ff44c:	f04f 0b03 	mov.w	fp, #3
 23ff450:	4604      	mov	r4, r0
 23ff452:	460d      	mov	r5, r1
 23ff454:	e6e8      	b.n	23ff228 <atan+0x58>
 23ff456:	ee10 2a10 	vmov	r2, s0
 23ff45a:	462b      	mov	r3, r5
 23ff45c:	ee10 0a10 	vmov	r0, s0
 23ff460:	4629      	mov	r1, r5
 23ff462:	f7fb fac3 	bl	23fa9ec <__adddf3>
 23ff466:	2200      	movs	r2, #0
 23ff468:	4b28      	ldr	r3, [pc, #160]	; (23ff50c <atan+0x33c>)
 23ff46a:	f04f 0b00 	mov.w	fp, #0
 23ff46e:	f7fb fabb 	bl	23fa9e8 <__aeabi_dsub>
 23ff472:	2200      	movs	r2, #0
 23ff474:	4606      	mov	r6, r0
 23ff476:	460f      	mov	r7, r1
 23ff478:	4620      	mov	r0, r4
 23ff47a:	4629      	mov	r1, r5
 23ff47c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23ff480:	e79f      	b.n	23ff3c2 <atan+0x1f2>
 23ff482:	bf00      	nop
 23ff484:	f3af 8000 	nop.w
 23ff488:	54442d18 	.word	0x54442d18
 23ff48c:	3ff921fb 	.word	0x3ff921fb
 23ff490:	e322da11 	.word	0xe322da11
 23ff494:	3f90ad3a 	.word	0x3f90ad3a
 23ff498:	24760deb 	.word	0x24760deb
 23ff49c:	3fa97b4b 	.word	0x3fa97b4b
 23ff4a0:	a0d03d51 	.word	0xa0d03d51
 23ff4a4:	3fb10d66 	.word	0x3fb10d66
 23ff4a8:	c54c206e 	.word	0xc54c206e
 23ff4ac:	3fb745cd 	.word	0x3fb745cd
 23ff4b0:	920083ff 	.word	0x920083ff
 23ff4b4:	3fc24924 	.word	0x3fc24924
 23ff4b8:	5555550d 	.word	0x5555550d
 23ff4bc:	3fd55555 	.word	0x3fd55555
 23ff4c0:	2c6a6c2f 	.word	0x2c6a6c2f
 23ff4c4:	bfa2b444 	.word	0xbfa2b444
 23ff4c8:	52defd9a 	.word	0x52defd9a
 23ff4cc:	3fadde2d 	.word	0x3fadde2d
 23ff4d0:	af749a6d 	.word	0xaf749a6d
 23ff4d4:	3fb3b0f2 	.word	0x3fb3b0f2
 23ff4d8:	fe231671 	.word	0xfe231671
 23ff4dc:	3fbc71c6 	.word	0x3fbc71c6
 23ff4e0:	9998ebc4 	.word	0x9998ebc4
 23ff4e4:	3fc99999 	.word	0x3fc99999
 23ff4e8:	8800759c 	.word	0x8800759c
 23ff4ec:	7e37e43c 	.word	0x7e37e43c
 23ff4f0:	54442d18 	.word	0x54442d18
 23ff4f4:	bff921fb 	.word	0xbff921fb
 23ff4f8:	440fffff 	.word	0x440fffff
 23ff4fc:	7ff00000 	.word	0x7ff00000
 23ff500:	3fdbffff 	.word	0x3fdbffff
 23ff504:	023ffe08 	.word	0x023ffe08
 23ff508:	023ffe28 	.word	0x023ffe28
 23ff50c:	3ff00000 	.word	0x3ff00000
 23ff510:	3ff2ffff 	.word	0x3ff2ffff
 23ff514:	40038000 	.word	0x40038000
 23ff518:	3ff80000 	.word	0x3ff80000
 23ff51c:	bff00000 	.word	0xbff00000

023ff520 <fabs>:
 23ff520:	ec51 0b10 	vmov	r0, r1, d0
 23ff524:	ee10 2a10 	vmov	r2, s0
 23ff528:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23ff52c:	ec43 2b10 	vmov	d0, r2, r3
 23ff530:	4770      	bx	lr
 23ff532:	bf00      	nop

023ff534 <finite>:
 23ff534:	b082      	sub	sp, #8
 23ff536:	4805      	ldr	r0, [pc, #20]	; (23ff54c <finite+0x18>)
 23ff538:	ed8d 0b00 	vstr	d0, [sp]
 23ff53c:	9b01      	ldr	r3, [sp, #4]
 23ff53e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23ff542:	4418      	add	r0, r3
 23ff544:	0fc0      	lsrs	r0, r0, #31
 23ff546:	b002      	add	sp, #8
 23ff548:	4770      	bx	lr
 23ff54a:	bf00      	nop
 23ff54c:	80100000 	.word	0x80100000

023ff550 <nan>:
 23ff550:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23ff558 <nan+0x8>
 23ff554:	4770      	bx	lr
 23ff556:	bf00      	nop
 23ff558:	00000000 	.word	0x00000000
 23ff55c:	7ff80000 	.word	0x7ff80000

023ff560 <rint>:
 23ff560:	ec53 2b10 	vmov	r2, r3, d0
 23ff564:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23ff568:	ee10 0a10 	vmov	r0, s0
 23ff56c:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23ff570:	2913      	cmp	r1, #19
 23ff572:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff574:	461c      	mov	r4, r3
 23ff576:	b083      	sub	sp, #12
 23ff578:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23ff57c:	dc3a      	bgt.n	23ff5f4 <rint+0x94>
 23ff57e:	2900      	cmp	r1, #0
 23ff580:	db30      	blt.n	23ff5e4 <rint+0x84>
 23ff582:	4d42      	ldr	r5, [pc, #264]	; (23ff68c <rint+0x12c>)
 23ff584:	fa45 fc01 	asr.w	ip, r5, r1
 23ff588:	ea03 050c 	and.w	r5, r3, ip
 23ff58c:	4315      	orrs	r5, r2
 23ff58e:	d02d      	beq.n	23ff5ec <rint+0x8c>
 23ff590:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23ff594:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23ff598:	4318      	orrs	r0, r3
 23ff59a:	d00c      	beq.n	23ff5b6 <rint+0x56>
 23ff59c:	ea24 0c0c 	bic.w	ip, r4, ip
 23ff5a0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23ff5a4:	2913      	cmp	r1, #19
 23ff5a6:	fa44 f101 	asr.w	r1, r4, r1
 23ff5aa:	bf0c      	ite	eq
 23ff5ac:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23ff5b0:	2000      	movne	r0, #0
 23ff5b2:	ea4c 0401 	orr.w	r4, ip, r1
 23ff5b6:	4936      	ldr	r1, [pc, #216]	; (23ff690 <rint+0x130>)
 23ff5b8:	4623      	mov	r3, r4
 23ff5ba:	4602      	mov	r2, r0
 23ff5bc:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23ff5c0:	e9de 4500 	ldrd	r4, r5, [lr]
 23ff5c4:	4620      	mov	r0, r4
 23ff5c6:	4629      	mov	r1, r5
 23ff5c8:	f7fb fa10 	bl	23fa9ec <__adddf3>
 23ff5cc:	4622      	mov	r2, r4
 23ff5ce:	462b      	mov	r3, r5
 23ff5d0:	e9cd 0100 	strd	r0, r1, [sp]
 23ff5d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff5d8:	f7fb fa06 	bl	23fa9e8 <__aeabi_dsub>
 23ff5dc:	ec41 0b10 	vmov	d0, r0, r1
 23ff5e0:	b003      	add	sp, #12
 23ff5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff5e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23ff5e8:	4311      	orrs	r1, r2
 23ff5ea:	d124      	bne.n	23ff636 <rint+0xd6>
 23ff5ec:	ec43 2b10 	vmov	d0, r2, r3
 23ff5f0:	b003      	add	sp, #12
 23ff5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff5f4:	2933      	cmp	r1, #51	; 0x33
 23ff5f6:	dd08      	ble.n	23ff60a <rint+0xaa>
 23ff5f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23ff5fc:	d1f6      	bne.n	23ff5ec <rint+0x8c>
 23ff5fe:	4619      	mov	r1, r3
 23ff600:	f7fb f9f4 	bl	23fa9ec <__adddf3>
 23ff604:	ec41 0b10 	vmov	d0, r0, r1
 23ff608:	e7f2      	b.n	23ff5f0 <rint+0x90>
 23ff60a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23ff60e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ff612:	fa21 f10c 	lsr.w	r1, r1, ip
 23ff616:	420a      	tst	r2, r1
 23ff618:	d0e8      	beq.n	23ff5ec <rint+0x8c>
 23ff61a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23ff61e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23ff622:	d0c8      	beq.n	23ff5b6 <rint+0x56>
 23ff624:	ea20 0303 	bic.w	r3, r0, r3
 23ff628:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ff62c:	fa40 fc0c 	asr.w	ip, r0, ip
 23ff630:	ea43 000c 	orr.w	r0, r3, ip
 23ff634:	e7bf      	b.n	23ff5b6 <rint+0x56>
 23ff636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff63a:	4a16      	ldr	r2, [pc, #88]	; (23ff694 <rint+0x134>)
 23ff63c:	4318      	orrs	r0, r3
 23ff63e:	4022      	ands	r2, r4
 23ff640:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23ff644:	4243      	negs	r3, r0
 23ff646:	4303      	orrs	r3, r0
 23ff648:	0b1b      	lsrs	r3, r3, #12
 23ff64a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23ff64e:	ea43 0702 	orr.w	r7, r3, r2
 23ff652:	4b0f      	ldr	r3, [pc, #60]	; (23ff690 <rint+0x130>)
 23ff654:	ee10 2a10 	vmov	r2, s0
 23ff658:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23ff65c:	463b      	mov	r3, r7
 23ff65e:	e9de 6700 	ldrd	r6, r7, [lr]
 23ff662:	4630      	mov	r0, r6
 23ff664:	4639      	mov	r1, r7
 23ff666:	f7fb f9c1 	bl	23fa9ec <__adddf3>
 23ff66a:	4632      	mov	r2, r6
 23ff66c:	463b      	mov	r3, r7
 23ff66e:	e9cd 0100 	strd	r0, r1, [sp]
 23ff672:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff676:	f7fb f9b7 	bl	23fa9e8 <__aeabi_dsub>
 23ff67a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ff67e:	4602      	mov	r2, r0
 23ff680:	ea41 0304 	orr.w	r3, r1, r4
 23ff684:	ec43 2b10 	vmov	d0, r2, r3
 23ff688:	b003      	add	sp, #12
 23ff68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff68c:	000fffff 	.word	0x000fffff
 23ff690:	023ffe48 	.word	0x023ffe48
 23ff694:	fffe0000 	.word	0xfffe0000

023ff698 <scalbn>:
 23ff698:	b538      	push	{r3, r4, r5, lr}
 23ff69a:	ec53 2b10 	vmov	r2, r3, d0
 23ff69e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23ff6a2:	469c      	mov	ip, r3
 23ff6a4:	4604      	mov	r4, r0
 23ff6a6:	bb89      	cbnz	r1, 23ff70c <scalbn+0x74>
 23ff6a8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23ff6ac:	ee10 1a10 	vmov	r1, s0
 23ff6b0:	ea5c 0101 	orrs.w	r1, ip, r1
 23ff6b4:	d029      	beq.n	23ff70a <scalbn+0x72>
 23ff6b6:	4d3e      	ldr	r5, [pc, #248]	; (23ff7b0 <scalbn+0x118>)
 23ff6b8:	4619      	mov	r1, r3
 23ff6ba:	2200      	movs	r2, #0
 23ff6bc:	4b3d      	ldr	r3, [pc, #244]	; (23ff7b4 <scalbn+0x11c>)
 23ff6be:	ee10 0a10 	vmov	r0, s0
 23ff6c2:	f7fb fb49 	bl	23fad58 <__aeabi_dmul>
 23ff6c6:	42ac      	cmp	r4, r5
 23ff6c8:	4602      	mov	r2, r0
 23ff6ca:	460b      	mov	r3, r1
 23ff6cc:	db16      	blt.n	23ff6fc <scalbn+0x64>
 23ff6ce:	468c      	mov	ip, r1
 23ff6d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23ff6d4:	3936      	subs	r1, #54	; 0x36
 23ff6d6:	4421      	add	r1, r4
 23ff6d8:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23ff6dc:	4281      	cmp	r1, r0
 23ff6de:	dc21      	bgt.n	23ff724 <scalbn+0x8c>
 23ff6e0:	2900      	cmp	r1, #0
 23ff6e2:	dc47      	bgt.n	23ff774 <scalbn+0xdc>
 23ff6e4:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23ff6e8:	da34      	bge.n	23ff754 <scalbn+0xbc>
 23ff6ea:	f24c 3150 	movw	r1, #50000	; 0xc350
 23ff6ee:	428c      	cmp	r4, r1
 23ff6f0:	dc18      	bgt.n	23ff724 <scalbn+0x8c>
 23ff6f2:	2b00      	cmp	r3, #0
 23ff6f4:	a126      	add	r1, pc, #152	; (adr r1, 23ff790 <scalbn+0xf8>)
 23ff6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff6fa:	db43      	blt.n	23ff784 <scalbn+0xec>
 23ff6fc:	a324      	add	r3, pc, #144	; (adr r3, 23ff790 <scalbn+0xf8>)
 23ff6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff702:	f7fb fb29 	bl	23fad58 <__aeabi_dmul>
 23ff706:	ec41 0b10 	vmov	d0, r0, r1
 23ff70a:	bd38      	pop	{r3, r4, r5, pc}
 23ff70c:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23ff710:	4571      	cmp	r1, lr
 23ff712:	d1e0      	bne.n	23ff6d6 <scalbn+0x3e>
 23ff714:	ee10 0a10 	vmov	r0, s0
 23ff718:	4619      	mov	r1, r3
 23ff71a:	f7fb f967 	bl	23fa9ec <__adddf3>
 23ff71e:	ec41 0b10 	vmov	d0, r0, r1
 23ff722:	bd38      	pop	{r3, r4, r5, pc}
 23ff724:	2b00      	cmp	r3, #0
 23ff726:	a11c      	add	r1, pc, #112	; (adr r1, 23ff798 <scalbn+0x100>)
 23ff728:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff72c:	db07      	blt.n	23ff73e <scalbn+0xa6>
 23ff72e:	a31a      	add	r3, pc, #104	; (adr r3, 23ff798 <scalbn+0x100>)
 23ff730:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff734:	f7fb fb10 	bl	23fad58 <__aeabi_dmul>
 23ff738:	ec41 0b10 	vmov	d0, r0, r1
 23ff73c:	bd38      	pop	{r3, r4, r5, pc}
 23ff73e:	a118      	add	r1, pc, #96	; (adr r1, 23ff7a0 <scalbn+0x108>)
 23ff740:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff744:	a314      	add	r3, pc, #80	; (adr r3, 23ff798 <scalbn+0x100>)
 23ff746:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff74a:	f7fb fb05 	bl	23fad58 <__aeabi_dmul>
 23ff74e:	ec41 0b10 	vmov	d0, r0, r1
 23ff752:	e7f3      	b.n	23ff73c <scalbn+0xa4>
 23ff754:	4818      	ldr	r0, [pc, #96]	; (23ff7b8 <scalbn+0x120>)
 23ff756:	3136      	adds	r1, #54	; 0x36
 23ff758:	4614      	mov	r4, r2
 23ff75a:	4b18      	ldr	r3, [pc, #96]	; (23ff7bc <scalbn+0x124>)
 23ff75c:	ea0c 0000 	and.w	r0, ip, r0
 23ff760:	2200      	movs	r2, #0
 23ff762:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23ff766:	4620      	mov	r0, r4
 23ff768:	4629      	mov	r1, r5
 23ff76a:	f7fb faf5 	bl	23fad58 <__aeabi_dmul>
 23ff76e:	ec41 0b10 	vmov	d0, r0, r1
 23ff772:	bd38      	pop	{r3, r4, r5, pc}
 23ff774:	4810      	ldr	r0, [pc, #64]	; (23ff7b8 <scalbn+0x120>)
 23ff776:	ea0c 0000 	and.w	r0, ip, r0
 23ff77a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23ff77e:	ec43 2b10 	vmov	d0, r2, r3
 23ff782:	bd38      	pop	{r3, r4, r5, pc}
 23ff784:	a108      	add	r1, pc, #32	; (adr r1, 23ff7a8 <scalbn+0x110>)
 23ff786:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff78a:	e7b7      	b.n	23ff6fc <scalbn+0x64>
 23ff78c:	f3af 8000 	nop.w
 23ff790:	c2f8f359 	.word	0xc2f8f359
 23ff794:	01a56e1f 	.word	0x01a56e1f
 23ff798:	8800759c 	.word	0x8800759c
 23ff79c:	7e37e43c 	.word	0x7e37e43c
 23ff7a0:	8800759c 	.word	0x8800759c
 23ff7a4:	fe37e43c 	.word	0xfe37e43c
 23ff7a8:	c2f8f359 	.word	0xc2f8f359
 23ff7ac:	81a56e1f 	.word	0x81a56e1f
 23ff7b0:	ffff3cb0 	.word	0xffff3cb0
 23ff7b4:	43500000 	.word	0x43500000
 23ff7b8:	800fffff 	.word	0x800fffff
 23ff7bc:	3c900000 	.word	0x3c900000

023ff7c0 <atexit>:
 23ff7c0:	2300      	movs	r3, #0
 23ff7c2:	4601      	mov	r1, r0
 23ff7c4:	461a      	mov	r2, r3
 23ff7c6:	4618      	mov	r0, r3
 23ff7c8:	f000 b93a 	b.w	23ffa40 <__register_exitproc>

023ff7cc <isprint>:
 23ff7cc:	4b02      	ldr	r3, [pc, #8]	; (23ff7d8 <isprint+0xc>)
 23ff7ce:	4418      	add	r0, r3
 23ff7d0:	7840      	ldrb	r0, [r0, #1]
 23ff7d2:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff7d6:	4770      	bx	lr
 23ff7d8:	023ffec8 	.word	0x023ffec8

023ff7dc <memcpy>:
 23ff7dc:	440a      	add	r2, r1
 23ff7de:	1e43      	subs	r3, r0, #1
 23ff7e0:	4291      	cmp	r1, r2
 23ff7e2:	d100      	bne.n	23ff7e6 <memcpy+0xa>
 23ff7e4:	4770      	bx	lr
 23ff7e6:	b510      	push	{r4, lr}
 23ff7e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff7ec:	4291      	cmp	r1, r2
 23ff7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff7f2:	d1f9      	bne.n	23ff7e8 <memcpy+0xc>
 23ff7f4:	bd10      	pop	{r4, pc}

023ff7f6 <memmove>:
 23ff7f6:	4288      	cmp	r0, r1
 23ff7f8:	b510      	push	{r4, lr}
 23ff7fa:	eb01 0402 	add.w	r4, r1, r2
 23ff7fe:	d902      	bls.n	23ff806 <memmove+0x10>
 23ff800:	4284      	cmp	r4, r0
 23ff802:	4623      	mov	r3, r4
 23ff804:	d807      	bhi.n	23ff816 <memmove+0x20>
 23ff806:	1e43      	subs	r3, r0, #1
 23ff808:	42a1      	cmp	r1, r4
 23ff80a:	d008      	beq.n	23ff81e <memmove+0x28>
 23ff80c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff810:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff814:	e7f8      	b.n	23ff808 <memmove+0x12>
 23ff816:	4402      	add	r2, r0
 23ff818:	4601      	mov	r1, r0
 23ff81a:	428a      	cmp	r2, r1
 23ff81c:	d100      	bne.n	23ff820 <memmove+0x2a>
 23ff81e:	bd10      	pop	{r4, pc}
 23ff820:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff824:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff828:	e7f7      	b.n	23ff81a <memmove+0x24>

023ff82a <memset>:
 23ff82a:	4402      	add	r2, r0
 23ff82c:	4603      	mov	r3, r0
 23ff82e:	4293      	cmp	r3, r2
 23ff830:	d100      	bne.n	23ff834 <memset+0xa>
 23ff832:	4770      	bx	lr
 23ff834:	f803 1b01 	strb.w	r1, [r3], #1
 23ff838:	e7f9      	b.n	23ff82e <memset+0x4>
	...

023ff83c <srand>:
 23ff83c:	b538      	push	{r3, r4, r5, lr}
 23ff83e:	4b10      	ldr	r3, [pc, #64]	; (23ff880 <srand+0x44>)
 23ff840:	4604      	mov	r4, r0
 23ff842:	681d      	ldr	r5, [r3, #0]
 23ff844:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff846:	b9b3      	cbnz	r3, 23ff876 <srand+0x3a>
 23ff848:	2018      	movs	r0, #24
 23ff84a:	f7fc fc2b 	bl	23fc0a4 <malloc>
 23ff84e:	4602      	mov	r2, r0
 23ff850:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff852:	b920      	cbnz	r0, 23ff85e <srand+0x22>
 23ff854:	4b0b      	ldr	r3, [pc, #44]	; (23ff884 <srand+0x48>)
 23ff856:	2142      	movs	r1, #66	; 0x42
 23ff858:	480b      	ldr	r0, [pc, #44]	; (23ff888 <srand+0x4c>)
 23ff85a:	f7fc fc69 	bl	23fc130 <__assert_func>
 23ff85e:	490b      	ldr	r1, [pc, #44]	; (23ff88c <srand+0x50>)
 23ff860:	4b0b      	ldr	r3, [pc, #44]	; (23ff890 <srand+0x54>)
 23ff862:	e9c0 1300 	strd	r1, r3, [r0]
 23ff866:	4b0b      	ldr	r3, [pc, #44]	; (23ff894 <srand+0x58>)
 23ff868:	2100      	movs	r1, #0
 23ff86a:	6083      	str	r3, [r0, #8]
 23ff86c:	230b      	movs	r3, #11
 23ff86e:	8183      	strh	r3, [r0, #12]
 23ff870:	2001      	movs	r0, #1
 23ff872:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff876:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff878:	2200      	movs	r2, #0
 23ff87a:	611c      	str	r4, [r3, #16]
 23ff87c:	615a      	str	r2, [r3, #20]
 23ff87e:	bd38      	pop	{r3, r4, r5, pc}
 23ff880:	1007adbc 	.word	0x1007adbc
 23ff884:	023ffe58 	.word	0x023ffe58
 23ff888:	023ffe6f 	.word	0x023ffe6f
 23ff88c:	abcd330e 	.word	0xabcd330e
 23ff890:	e66d1234 	.word	0xe66d1234
 23ff894:	0005deec 	.word	0x0005deec

023ff898 <strchr>:
 23ff898:	b2c9      	uxtb	r1, r1
 23ff89a:	4603      	mov	r3, r0
 23ff89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff8a0:	b11a      	cbz	r2, 23ff8aa <strchr+0x12>
 23ff8a2:	428a      	cmp	r2, r1
 23ff8a4:	d1f9      	bne.n	23ff89a <strchr+0x2>
 23ff8a6:	4618      	mov	r0, r3
 23ff8a8:	4770      	bx	lr
 23ff8aa:	2900      	cmp	r1, #0
 23ff8ac:	bf18      	it	ne
 23ff8ae:	2300      	movne	r3, #0
 23ff8b0:	e7f9      	b.n	23ff8a6 <strchr+0xe>

023ff8b2 <strchrnul>:
 23ff8b2:	b510      	push	{r4, lr}
 23ff8b4:	4604      	mov	r4, r0
 23ff8b6:	f7ff ffef 	bl	23ff898 <strchr>
 23ff8ba:	b918      	cbnz	r0, 23ff8c4 <strchrnul+0x12>
 23ff8bc:	4620      	mov	r0, r4
 23ff8be:	f7fb fd55 	bl	23fb36c <strlen>
 23ff8c2:	4420      	add	r0, r4
 23ff8c4:	bd10      	pop	{r4, pc}

023ff8c6 <strcpy>:
 23ff8c6:	4603      	mov	r3, r0
 23ff8c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff8cc:	f803 2b01 	strb.w	r2, [r3], #1
 23ff8d0:	2a00      	cmp	r2, #0
 23ff8d2:	d1f9      	bne.n	23ff8c8 <strcpy+0x2>
 23ff8d4:	4770      	bx	lr

023ff8d6 <strncmp>:
 23ff8d6:	b510      	push	{r4, lr}
 23ff8d8:	b17a      	cbz	r2, 23ff8fa <strncmp+0x24>
 23ff8da:	4603      	mov	r3, r0
 23ff8dc:	3901      	subs	r1, #1
 23ff8de:	1884      	adds	r4, r0, r2
 23ff8e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff8e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff8e8:	4290      	cmp	r0, r2
 23ff8ea:	d101      	bne.n	23ff8f0 <strncmp+0x1a>
 23ff8ec:	42a3      	cmp	r3, r4
 23ff8ee:	d101      	bne.n	23ff8f4 <strncmp+0x1e>
 23ff8f0:	1a80      	subs	r0, r0, r2
 23ff8f2:	bd10      	pop	{r4, pc}
 23ff8f4:	2800      	cmp	r0, #0
 23ff8f6:	d1f3      	bne.n	23ff8e0 <strncmp+0xa>
 23ff8f8:	e7fa      	b.n	23ff8f0 <strncmp+0x1a>
 23ff8fa:	4610      	mov	r0, r2
 23ff8fc:	e7f9      	b.n	23ff8f2 <strncmp+0x1c>

023ff8fe <strrchr>:
 23ff8fe:	b538      	push	{r3, r4, r5, lr}
 23ff900:	4603      	mov	r3, r0
 23ff902:	460c      	mov	r4, r1
 23ff904:	b969      	cbnz	r1, 23ff922 <strrchr+0x24>
 23ff906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff90a:	f7ff bfc5 	b.w	23ff898 <strchr>
 23ff90e:	1c43      	adds	r3, r0, #1
 23ff910:	4605      	mov	r5, r0
 23ff912:	4621      	mov	r1, r4
 23ff914:	4618      	mov	r0, r3
 23ff916:	f7ff ffbf 	bl	23ff898 <strchr>
 23ff91a:	2800      	cmp	r0, #0
 23ff91c:	d1f7      	bne.n	23ff90e <strrchr+0x10>
 23ff91e:	4628      	mov	r0, r5
 23ff920:	bd38      	pop	{r3, r4, r5, pc}
 23ff922:	2500      	movs	r5, #0
 23ff924:	e7f5      	b.n	23ff912 <strrchr+0x14>
	...

023ff928 <_strtol_l.constprop.0>:
 23ff928:	2b01      	cmp	r3, #1
 23ff92a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff92e:	d001      	beq.n	23ff934 <_strtol_l.constprop.0+0xc>
 23ff930:	2b24      	cmp	r3, #36	; 0x24
 23ff932:	d906      	bls.n	23ff942 <_strtol_l.constprop.0+0x1a>
 23ff934:	f7fc fbee 	bl	23fc114 <__errno>
 23ff938:	2316      	movs	r3, #22
 23ff93a:	6003      	str	r3, [r0, #0]
 23ff93c:	2000      	movs	r0, #0
 23ff93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff942:	460d      	mov	r5, r1
 23ff944:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ffa28 <_strtol_l.constprop.0+0x100>
 23ff948:	462e      	mov	r6, r5
 23ff94a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff94e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff952:	f017 0708 	ands.w	r7, r7, #8
 23ff956:	d1f7      	bne.n	23ff948 <_strtol_l.constprop.0+0x20>
 23ff958:	2c2d      	cmp	r4, #45	; 0x2d
 23ff95a:	d132      	bne.n	23ff9c2 <_strtol_l.constprop.0+0x9a>
 23ff95c:	782c      	ldrb	r4, [r5, #0]
 23ff95e:	2701      	movs	r7, #1
 23ff960:	1cb5      	adds	r5, r6, #2
 23ff962:	2b00      	cmp	r3, #0
 23ff964:	d05b      	beq.n	23ffa1e <_strtol_l.constprop.0+0xf6>
 23ff966:	2b10      	cmp	r3, #16
 23ff968:	d109      	bne.n	23ff97e <_strtol_l.constprop.0+0x56>
 23ff96a:	2c30      	cmp	r4, #48	; 0x30
 23ff96c:	d107      	bne.n	23ff97e <_strtol_l.constprop.0+0x56>
 23ff96e:	782c      	ldrb	r4, [r5, #0]
 23ff970:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff974:	2c58      	cmp	r4, #88	; 0x58
 23ff976:	d14d      	bne.n	23ffa14 <_strtol_l.constprop.0+0xec>
 23ff978:	786c      	ldrb	r4, [r5, #1]
 23ff97a:	2310      	movs	r3, #16
 23ff97c:	3502      	adds	r5, #2
 23ff97e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff982:	f04f 0c00 	mov.w	ip, #0
 23ff986:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff98a:	4666      	mov	r6, ip
 23ff98c:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff990:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff994:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff998:	f1be 0f09 	cmp.w	lr, #9
 23ff99c:	d816      	bhi.n	23ff9cc <_strtol_l.constprop.0+0xa4>
 23ff99e:	4674      	mov	r4, lr
 23ff9a0:	42a3      	cmp	r3, r4
 23ff9a2:	dd24      	ble.n	23ff9ee <_strtol_l.constprop.0+0xc6>
 23ff9a4:	f1bc 0f00 	cmp.w	ip, #0
 23ff9a8:	db1e      	blt.n	23ff9e8 <_strtol_l.constprop.0+0xc0>
 23ff9aa:	45b1      	cmp	r9, r6
 23ff9ac:	d31c      	bcc.n	23ff9e8 <_strtol_l.constprop.0+0xc0>
 23ff9ae:	d101      	bne.n	23ff9b4 <_strtol_l.constprop.0+0x8c>
 23ff9b0:	45a2      	cmp	sl, r4
 23ff9b2:	db19      	blt.n	23ff9e8 <_strtol_l.constprop.0+0xc0>
 23ff9b4:	fb06 4603 	mla	r6, r6, r3, r4
 23ff9b8:	f04f 0c01 	mov.w	ip, #1
 23ff9bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff9c0:	e7e8      	b.n	23ff994 <_strtol_l.constprop.0+0x6c>
 23ff9c2:	2c2b      	cmp	r4, #43	; 0x2b
 23ff9c4:	bf04      	itt	eq
 23ff9c6:	782c      	ldrbeq	r4, [r5, #0]
 23ff9c8:	1cb5      	addeq	r5, r6, #2
 23ff9ca:	e7ca      	b.n	23ff962 <_strtol_l.constprop.0+0x3a>
 23ff9cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff9d0:	f1be 0f19 	cmp.w	lr, #25
 23ff9d4:	d801      	bhi.n	23ff9da <_strtol_l.constprop.0+0xb2>
 23ff9d6:	3c37      	subs	r4, #55	; 0x37
 23ff9d8:	e7e2      	b.n	23ff9a0 <_strtol_l.constprop.0+0x78>
 23ff9da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff9de:	f1be 0f19 	cmp.w	lr, #25
 23ff9e2:	d804      	bhi.n	23ff9ee <_strtol_l.constprop.0+0xc6>
 23ff9e4:	3c57      	subs	r4, #87	; 0x57
 23ff9e6:	e7db      	b.n	23ff9a0 <_strtol_l.constprop.0+0x78>
 23ff9e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff9ec:	e7e6      	b.n	23ff9bc <_strtol_l.constprop.0+0x94>
 23ff9ee:	f1bc 0f00 	cmp.w	ip, #0
 23ff9f2:	da05      	bge.n	23ffa00 <_strtol_l.constprop.0+0xd8>
 23ff9f4:	2322      	movs	r3, #34	; 0x22
 23ff9f6:	4646      	mov	r6, r8
 23ff9f8:	6003      	str	r3, [r0, #0]
 23ff9fa:	b942      	cbnz	r2, 23ffa0e <_strtol_l.constprop.0+0xe6>
 23ff9fc:	4630      	mov	r0, r6
 23ff9fe:	e79e      	b.n	23ff93e <_strtol_l.constprop.0+0x16>
 23ffa00:	b107      	cbz	r7, 23ffa04 <_strtol_l.constprop.0+0xdc>
 23ffa02:	4276      	negs	r6, r6
 23ffa04:	2a00      	cmp	r2, #0
 23ffa06:	d0f9      	beq.n	23ff9fc <_strtol_l.constprop.0+0xd4>
 23ffa08:	f1bc 0f00 	cmp.w	ip, #0
 23ffa0c:	d000      	beq.n	23ffa10 <_strtol_l.constprop.0+0xe8>
 23ffa0e:	1e69      	subs	r1, r5, #1
 23ffa10:	6011      	str	r1, [r2, #0]
 23ffa12:	e7f3      	b.n	23ff9fc <_strtol_l.constprop.0+0xd4>
 23ffa14:	2430      	movs	r4, #48	; 0x30
 23ffa16:	2b00      	cmp	r3, #0
 23ffa18:	d1b1      	bne.n	23ff97e <_strtol_l.constprop.0+0x56>
 23ffa1a:	2308      	movs	r3, #8
 23ffa1c:	e7af      	b.n	23ff97e <_strtol_l.constprop.0+0x56>
 23ffa1e:	2c30      	cmp	r4, #48	; 0x30
 23ffa20:	d0a5      	beq.n	23ff96e <_strtol_l.constprop.0+0x46>
 23ffa22:	230a      	movs	r3, #10
 23ffa24:	e7ab      	b.n	23ff97e <_strtol_l.constprop.0+0x56>
 23ffa26:	bf00      	nop
 23ffa28:	023ffec9 	.word	0x023ffec9

023ffa2c <strtol>:
 23ffa2c:	4613      	mov	r3, r2
 23ffa2e:	460a      	mov	r2, r1
 23ffa30:	4601      	mov	r1, r0
 23ffa32:	4802      	ldr	r0, [pc, #8]	; (23ffa3c <strtol+0x10>)
 23ffa34:	6800      	ldr	r0, [r0, #0]
 23ffa36:	f7ff bf77 	b.w	23ff928 <_strtol_l.constprop.0>
 23ffa3a:	bf00      	nop
 23ffa3c:	1007adbc 	.word	0x1007adbc

023ffa40 <__register_exitproc>:
 23ffa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffa44:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffb04 <__register_exitproc+0xc4>
 23ffa48:	4606      	mov	r6, r0
 23ffa4a:	461f      	mov	r7, r3
 23ffa4c:	460d      	mov	r5, r1
 23ffa4e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa52:	4691      	mov	r9, r2
 23ffa54:	f000 f858 	bl	23ffb08 <__retarget_lock_acquire_recursive>
 23ffa58:	4b26      	ldr	r3, [pc, #152]	; (23ffaf4 <__register_exitproc+0xb4>)
 23ffa5a:	681c      	ldr	r4, [r3, #0]
 23ffa5c:	b934      	cbnz	r4, 23ffa6c <__register_exitproc+0x2c>
 23ffa5e:	4c26      	ldr	r4, [pc, #152]	; (23ffaf8 <__register_exitproc+0xb8>)
 23ffa60:	601c      	str	r4, [r3, #0]
 23ffa62:	4b26      	ldr	r3, [pc, #152]	; (23ffafc <__register_exitproc+0xbc>)
 23ffa64:	b113      	cbz	r3, 23ffa6c <__register_exitproc+0x2c>
 23ffa66:	681b      	ldr	r3, [r3, #0]
 23ffa68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffa6c:	6863      	ldr	r3, [r4, #4]
 23ffa6e:	2b1f      	cmp	r3, #31
 23ffa70:	dd07      	ble.n	23ffa82 <__register_exitproc+0x42>
 23ffa72:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa76:	f000 f849 	bl	23ffb0c <__retarget_lock_release_recursive>
 23ffa7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffa7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffa82:	b35e      	cbz	r6, 23ffadc <__register_exitproc+0x9c>
 23ffa84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffa88:	b988      	cbnz	r0, 23ffaae <__register_exitproc+0x6e>
 23ffa8a:	4b1d      	ldr	r3, [pc, #116]	; (23ffb00 <__register_exitproc+0xc0>)
 23ffa8c:	b923      	cbnz	r3, 23ffa98 <__register_exitproc+0x58>
 23ffa8e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa92:	f000 f83a 	bl	23ffb0a <__retarget_lock_release>
 23ffa96:	e7f0      	b.n	23ffa7a <__register_exitproc+0x3a>
 23ffa98:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffa9c:	f7fc fb02 	bl	23fc0a4 <malloc>
 23ffaa0:	2800      	cmp	r0, #0
 23ffaa2:	d0f4      	beq.n	23ffa8e <__register_exitproc+0x4e>
 23ffaa4:	2300      	movs	r3, #0
 23ffaa6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffaaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffaae:	6863      	ldr	r3, [r4, #4]
 23ffab0:	2201      	movs	r2, #1
 23ffab2:	2e02      	cmp	r6, #2
 23ffab4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffab8:	fa02 f203 	lsl.w	r2, r2, r3
 23ffabc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffac0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffac4:	ea43 0302 	orr.w	r3, r3, r2
 23ffac8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffacc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffad0:	bf02      	ittt	eq
 23ffad2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffad6:	4313      	orreq	r3, r2
 23ffad8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffadc:	6863      	ldr	r3, [r4, #4]
 23ffade:	f8d8 0000 	ldr.w	r0, [r8]
 23ffae2:	1c5a      	adds	r2, r3, #1
 23ffae4:	3302      	adds	r3, #2
 23ffae6:	6062      	str	r2, [r4, #4]
 23ffae8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffaec:	f000 f80e 	bl	23ffb0c <__retarget_lock_release_recursive>
 23ffaf0:	2000      	movs	r0, #0
 23ffaf2:	e7c4      	b.n	23ffa7e <__register_exitproc+0x3e>
 23ffaf4:	1007afe0 	.word	0x1007afe0
 23ffaf8:	1007af54 	.word	0x1007af54
 23ffafc:	00000000 	.word	0x00000000
 23ffb00:	023fc0a5 	.word	0x023fc0a5
 23ffb04:	1007ae20 	.word	0x1007ae20

023ffb08 <__retarget_lock_acquire_recursive>:
 23ffb08:	4770      	bx	lr

023ffb0a <__retarget_lock_release>:
 23ffb0a:	4770      	bx	lr

023ffb0c <__retarget_lock_release_recursive>:
 23ffb0c:	4770      	bx	lr
	...

023ffb10 <dynalib_user>:
 23ffb10:	b37d 023f b3a5 023f b3a9 023f 0000 0000     }.?...?...?.....
 23ffb20:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffb30:	7574 6c61 0000 0000                         tual....

023ffb38 <_ZTVN5spark10LogHandlerE>:
	...
 23ffb48:	b3c5 023f b3ed 023f                         ..?...?.

023ffb50 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffb58:	b3f1 023f b425 023f d3cd 023f d575 023f     ..?.%.?...?.u.?.

023ffb68 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb70:	c257 023f c24d 023f c243 023f c239 023f     W.?.M.?.C.?.9.?.
 23ffb80:	c22d 023f c221 023f d761 023f d769 023f     -.?.!.?.a.?.i.?.
 23ffb90:	c215 023f c20d 023f c203 023f c1f9 023f     ..?...?...?...?.
 23ffba0:	d799 023f                                   ..?.

023ffba4 <_ZTV7TwoWire>:
	...
 23ffbac:	c275 023f c2bf 023f c297 023f c277 023f     u.?...?...?.w.?.
 23ffbbc:	c29f 023f c2a7 023f c2af 023f c2b7 023f     ..?...?...?...?.

023ffbcc <_ZTV9IPAddress>:
	...
 23ffbd4:	c319 023f c309 023f c30b 023f 6425 2500     ..?...?...?.%d.%
 23ffbe4:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 23ffbf4:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
 23ffc04:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 23ffc14:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
 23ffc24:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 23ffc34:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 23ffc44:	0a0d 6d00 6600 6c00 006e 6e66 7400 6300     ...m.f.ln.fn.t.c
 23ffc54:	646f 0065 6564 6174 6c69 0000               ode.detail..

023ffc60 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc68:	c7c5 023f c7eb 023f c7a9 023f c427 023f     ..?...?...?.'.?.

023ffc78 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc80:	cc79 023f cc91 023f d3cd 023f d575 023f     y.?...?...?.u.?.

023ffc90 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc98:	cca5 023f ccb9 023f d5ad 023f c7b1 023f     ..?...?...?...?.

023ffca8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcb0:	c7c3 023f c7f9 023f d331 023f c7b3 023f     ..?...?.1.?...?.

023ffcc0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcc8:	c7c1 023f c807 023f cbe1 023f c829 023f     ..?...?...?.).?.

023ffcd8 <_ZTVN5spark12NetworkClassE>:
	...
 23ffce0:	d721 023f d72b 023f d735 023f d73f 023f     !.?.+.?.5.?.?.?.
 23ffcf0:	d749 023f d755 023f d761 023f d769 023f     I.?.U.?.a.?.i.?.
 23ffd00:	d771 023f d77d 023f d785 023f d78f 023f     q.?.}.?...?...?.
 23ffd10:	d799 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffd20:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffd30 <_ZTV11USARTSerial>:
	...
 23ffd38:	daf5 023f db61 023f db39 023f d885 023f     ..?.a.?.9.?...?.
 23ffd48:	db09 023f db25 023f db17 023f db33 023f     ..?.%.?...?.3.?.
 23ffd58:	daf7 023f dafb 023f                         ..?...?.

023ffd60 <_ZTV9USBSerial>:
	...
 23ffd68:	dbb9 023f dc21 023f dbf7 023f d885 023f     ..?.!.?...?...?.
 23ffd78:	dbe9 023f dbbb 023f dbcb 023f dc1b 023f     ..?...?...?...?.
 23ffd88:	dbdb 023f dbb3 023f                         ..?...?.

023ffd90 <_ZTVN5spark9WiFiClassE>:
	...
 23ffd98:	dd1f 023f dd15 023f dd0b 023f dcc1 023f     ..?...?...?...?.
 23ffda8:	dcff 023f dcf3 023f d761 023f d769 023f     ..?...?.a.?.i.?.
 23ffdb8:	dce7 023f dcdf 023f dcd5 023f dccb 023f     ..?...?...?...?.
 23ffdc8:	d799 023f                                   ..?.

023ffdcc <_ZSt7nothrow>:
 23ffdcc:	0000 0000                                   ....

023ffdd0 <CSWTCH.8>:
 23ffdd0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
 23ffde0:	21d2 7f33 d97c c002                         .!3.|...

023ffde8 <CSWTCH.9>:
 23ffde8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
 23ffdf8:	2d18 5444 21fb c009 0000 0000 0000 0000     .-DT.!..........

023ffe08 <atanhi>:
 23ffe08:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 23ffe18:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

023ffe28 <atanlo>:
 23ffe28:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 23ffe38:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

023ffe48 <TWO52>:
 23ffe48:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
 23ffe58:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 23ffe68:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
 23ffe78:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
 23ffe88:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
 23ffe98:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
 23ffea8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
 23ffeb8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

023ffec8 <_ctype_>:
 23ffec8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffed8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffee8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffef8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff08:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff18:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff28:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff38:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fb575 	.word	0x023fb575
 23fffd0:	023fc1e9 	.word	0x023fc1e9
 23fffd4:	023fc261 	.word	0x023fc261
 23fffd8:	023fd3bd 	.word	0x023fd3bd
 23fffdc:	023fd871 	.word	0x023fd871
 23fffe0:	023fd919 	.word	0x023fd919
 23fffe4:	023fdabd 	.word	0x023fdabd
 23fffe8:	023fdae1 	.word	0x023fdae1
 23fffec:	023fdd29 	.word	0x023fdd29
