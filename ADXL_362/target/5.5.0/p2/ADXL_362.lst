
/Users/lingxiu/Documents/0-documents/2023-2024-MDes/TDF/tdf-fa23-rocketcrane/ADXL_362/target/5.5.0/p2/ADXL_362.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f9000  085f9000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f9018  085f9018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085f90a4  085f90a4  000090a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023f9a70  085f90b0  00009a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   00006578  023f9a78  085f90b8  00009a78  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  7 .data         0000007c  1007ada0  085ff630  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000001cc  1007ae1c  1007ae1c  0002ae1c  2**2
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff6ac  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000908  085ff6b0  085ff6b0  0001f6b0  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f6b0  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0015f4b7  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00016349  00000000  00000000  0017f4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00044e40  00000000  00000000  00195800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000031a0  00000000  00000000  001da640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c968  00000000  00000000  001dd7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00026a3f  00000000  00000000  001ea148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00045fe6  00000000  00000000  00210b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d7629  00000000  00000000  00256b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000094f0  00000000  00000000  0032e198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f9018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f9018:	4813      	ldr	r0, [pc, #76]	; (85f9068 <module_user_pre_init+0x50>)
 85f901a:	4914      	ldr	r1, [pc, #80]	; (85f906c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f901c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f901e:	4288      	cmp	r0, r1
 85f9020:	d005      	beq.n	85f902e <module_user_pre_init+0x16>
 85f9022:	4a13      	ldr	r2, [pc, #76]	; (85f9070 <module_user_pre_init+0x58>)
 85f9024:	4282      	cmp	r2, r0
 85f9026:	d002      	beq.n	85f902e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f9028:	4b12      	ldr	r3, [pc, #72]	; (85f9074 <module_user_pre_init+0x5c>)
 85f902a:	1a12      	subs	r2, r2, r0
 85f902c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f902e:	4812      	ldr	r0, [pc, #72]	; (85f9078 <module_user_pre_init+0x60>)
 85f9030:	4a12      	ldr	r2, [pc, #72]	; (85f907c <module_user_pre_init+0x64>)
 85f9032:	2100      	movs	r1, #0
 85f9034:	4b12      	ldr	r3, [pc, #72]	; (85f9080 <module_user_pre_init+0x68>)
 85f9036:	1a12      	subs	r2, r2, r0
 85f9038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f903a:	4812      	ldr	r0, [pc, #72]	; (85f9084 <module_user_pre_init+0x6c>)
 85f903c:	4912      	ldr	r1, [pc, #72]	; (85f9088 <module_user_pre_init+0x70>)
 85f903e:	4288      	cmp	r0, r1
 85f9040:	d005      	beq.n	85f904e <module_user_pre_init+0x36>
 85f9042:	4a12      	ldr	r2, [pc, #72]	; (85f908c <module_user_pre_init+0x74>)
 85f9044:	4282      	cmp	r2, r0
 85f9046:	d002      	beq.n	85f904e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f9048:	4b0a      	ldr	r3, [pc, #40]	; (85f9074 <module_user_pre_init+0x5c>)
 85f904a:	1a12      	subs	r2, r2, r0
 85f904c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f904e:	4810      	ldr	r0, [pc, #64]	; (85f9090 <module_user_pre_init+0x78>)
 85f9050:	4910      	ldr	r1, [pc, #64]	; (85f9094 <module_user_pre_init+0x7c>)
 85f9052:	4288      	cmp	r0, r1
 85f9054:	d005      	beq.n	85f9062 <module_user_pre_init+0x4a>
 85f9056:	4a10      	ldr	r2, [pc, #64]	; (85f9098 <module_user_pre_init+0x80>)
 85f9058:	4282      	cmp	r2, r0
 85f905a:	d002      	beq.n	85f9062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f905c:	4b05      	ldr	r3, [pc, #20]	; (85f9074 <module_user_pre_init+0x5c>)
 85f905e:	1a12      	subs	r2, r2, r0
 85f9060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f9062:	4801      	ldr	r0, [pc, #4]	; (85f9068 <module_user_pre_init+0x50>)
 85f9064:	bd08      	pop	{r3, pc}
 85f9066:	bf00      	nop
 85f9068:	1007ada0 	.word	0x1007ada0
 85f906c:	085ff630 	.word	0x085ff630
 85f9070:	1007ae1c 	.word	0x1007ae1c
 85f9074:	10110d2d 	.word	0x10110d2d
 85f9078:	1007ae1c 	.word	0x1007ae1c
 85f907c:	1007afe8 	.word	0x1007afe8
 85f9080:	10110ea1 	.word	0x10110ea1
 85f9084:	023f9a70 	.word	0x023f9a70
 85f9088:	085f90b0 	.word	0x085f90b0
 85f908c:	023f9a78 	.word	0x023f9a78
 85f9090:	023f9a78 	.word	0x023f9a78
 85f9094:	085f90b8 	.word	0x085f90b8
 85f9098:	023ffff0 	.word	0x023ffff0

085f909c <dynalib_preinit>:
 85f909c:	085f9019 00000000                       .._.....

Disassembly of section .psram_text:

023f9a78 <__aeabi_drsub>:
 23f9a78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f9a7c:	e002      	b.n	23f9a84 <__adddf3>
 23f9a7e:	bf00      	nop

023f9a80 <__aeabi_dsub>:
 23f9a80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f9a84 <__adddf3>:
 23f9a84:	b530      	push	{r4, r5, lr}
 23f9a86:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f9a8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f9a8e:	ea94 0f05 	teq	r4, r5
 23f9a92:	bf08      	it	eq
 23f9a94:	ea90 0f02 	teqeq	r0, r2
 23f9a98:	bf1f      	itttt	ne
 23f9a9a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f9a9e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f9aa2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f9aa6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f9aaa:	f000 80e2 	beq.w	23f9c72 <__adddf3+0x1ee>
 23f9aae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f9ab2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f9ab6:	bfb8      	it	lt
 23f9ab8:	426d      	neglt	r5, r5
 23f9aba:	dd0c      	ble.n	23f9ad6 <__adddf3+0x52>
 23f9abc:	442c      	add	r4, r5
 23f9abe:	ea80 0202 	eor.w	r2, r0, r2
 23f9ac2:	ea81 0303 	eor.w	r3, r1, r3
 23f9ac6:	ea82 0000 	eor.w	r0, r2, r0
 23f9aca:	ea83 0101 	eor.w	r1, r3, r1
 23f9ace:	ea80 0202 	eor.w	r2, r0, r2
 23f9ad2:	ea81 0303 	eor.w	r3, r1, r3
 23f9ad6:	2d36      	cmp	r5, #54	; 0x36
 23f9ad8:	bf88      	it	hi
 23f9ada:	bd30      	pophi	{r4, r5, pc}
 23f9adc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f9ae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f9ae4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f9ae8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f9aec:	d002      	beq.n	23f9af4 <__adddf3+0x70>
 23f9aee:	4240      	negs	r0, r0
 23f9af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f9af4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f9af8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f9afc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f9b00:	d002      	beq.n	23f9b08 <__adddf3+0x84>
 23f9b02:	4252      	negs	r2, r2
 23f9b04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f9b08:	ea94 0f05 	teq	r4, r5
 23f9b0c:	f000 80a7 	beq.w	23f9c5e <__adddf3+0x1da>
 23f9b10:	f1a4 0401 	sub.w	r4, r4, #1
 23f9b14:	f1d5 0e20 	rsbs	lr, r5, #32
 23f9b18:	db0d      	blt.n	23f9b36 <__adddf3+0xb2>
 23f9b1a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f9b1e:	fa22 f205 	lsr.w	r2, r2, r5
 23f9b22:	1880      	adds	r0, r0, r2
 23f9b24:	f141 0100 	adc.w	r1, r1, #0
 23f9b28:	fa03 f20e 	lsl.w	r2, r3, lr
 23f9b2c:	1880      	adds	r0, r0, r2
 23f9b2e:	fa43 f305 	asr.w	r3, r3, r5
 23f9b32:	4159      	adcs	r1, r3
 23f9b34:	e00e      	b.n	23f9b54 <__adddf3+0xd0>
 23f9b36:	f1a5 0520 	sub.w	r5, r5, #32
 23f9b3a:	f10e 0e20 	add.w	lr, lr, #32
 23f9b3e:	2a01      	cmp	r2, #1
 23f9b40:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f9b44:	bf28      	it	cs
 23f9b46:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f9b4a:	fa43 f305 	asr.w	r3, r3, r5
 23f9b4e:	18c0      	adds	r0, r0, r3
 23f9b50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f9b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9b58:	d507      	bpl.n	23f9b6a <__adddf3+0xe6>
 23f9b5a:	f04f 0e00 	mov.w	lr, #0
 23f9b5e:	f1dc 0c00 	rsbs	ip, ip, #0
 23f9b62:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f9b66:	eb6e 0101 	sbc.w	r1, lr, r1
 23f9b6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f9b6e:	d31b      	bcc.n	23f9ba8 <__adddf3+0x124>
 23f9b70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f9b74:	d30c      	bcc.n	23f9b90 <__adddf3+0x10c>
 23f9b76:	0849      	lsrs	r1, r1, #1
 23f9b78:	ea5f 0030 	movs.w	r0, r0, rrx
 23f9b7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f9b80:	f104 0401 	add.w	r4, r4, #1
 23f9b84:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f9b88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f9b8c:	f080 809a 	bcs.w	23f9cc4 <__adddf3+0x240>
 23f9b90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f9b94:	bf08      	it	eq
 23f9b96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f9b9a:	f150 0000 	adcs.w	r0, r0, #0
 23f9b9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f9ba2:	ea41 0105 	orr.w	r1, r1, r5
 23f9ba6:	bd30      	pop	{r4, r5, pc}
 23f9ba8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f9bac:	4140      	adcs	r0, r0
 23f9bae:	eb41 0101 	adc.w	r1, r1, r1
 23f9bb2:	3c01      	subs	r4, #1
 23f9bb4:	bf28      	it	cs
 23f9bb6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f9bba:	d2e9      	bcs.n	23f9b90 <__adddf3+0x10c>
 23f9bbc:	f091 0f00 	teq	r1, #0
 23f9bc0:	bf04      	itt	eq
 23f9bc2:	4601      	moveq	r1, r0
 23f9bc4:	2000      	moveq	r0, #0
 23f9bc6:	fab1 f381 	clz	r3, r1
 23f9bca:	bf08      	it	eq
 23f9bcc:	3320      	addeq	r3, #32
 23f9bce:	f1a3 030b 	sub.w	r3, r3, #11
 23f9bd2:	f1b3 0220 	subs.w	r2, r3, #32
 23f9bd6:	da0c      	bge.n	23f9bf2 <__adddf3+0x16e>
 23f9bd8:	320c      	adds	r2, #12
 23f9bda:	dd08      	ble.n	23f9bee <__adddf3+0x16a>
 23f9bdc:	f102 0c14 	add.w	ip, r2, #20
 23f9be0:	f1c2 020c 	rsb	r2, r2, #12
 23f9be4:	fa01 f00c 	lsl.w	r0, r1, ip
 23f9be8:	fa21 f102 	lsr.w	r1, r1, r2
 23f9bec:	e00c      	b.n	23f9c08 <__adddf3+0x184>
 23f9bee:	f102 0214 	add.w	r2, r2, #20
 23f9bf2:	bfd8      	it	le
 23f9bf4:	f1c2 0c20 	rsble	ip, r2, #32
 23f9bf8:	fa01 f102 	lsl.w	r1, r1, r2
 23f9bfc:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f9c00:	bfdc      	itt	le
 23f9c02:	ea41 010c 	orrle.w	r1, r1, ip
 23f9c06:	4090      	lslle	r0, r2
 23f9c08:	1ae4      	subs	r4, r4, r3
 23f9c0a:	bfa2      	ittt	ge
 23f9c0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f9c10:	4329      	orrge	r1, r5
 23f9c12:	bd30      	popge	{r4, r5, pc}
 23f9c14:	ea6f 0404 	mvn.w	r4, r4
 23f9c18:	3c1f      	subs	r4, #31
 23f9c1a:	da1c      	bge.n	23f9c56 <__adddf3+0x1d2>
 23f9c1c:	340c      	adds	r4, #12
 23f9c1e:	dc0e      	bgt.n	23f9c3e <__adddf3+0x1ba>
 23f9c20:	f104 0414 	add.w	r4, r4, #20
 23f9c24:	f1c4 0220 	rsb	r2, r4, #32
 23f9c28:	fa20 f004 	lsr.w	r0, r0, r4
 23f9c2c:	fa01 f302 	lsl.w	r3, r1, r2
 23f9c30:	ea40 0003 	orr.w	r0, r0, r3
 23f9c34:	fa21 f304 	lsr.w	r3, r1, r4
 23f9c38:	ea45 0103 	orr.w	r1, r5, r3
 23f9c3c:	bd30      	pop	{r4, r5, pc}
 23f9c3e:	f1c4 040c 	rsb	r4, r4, #12
 23f9c42:	f1c4 0220 	rsb	r2, r4, #32
 23f9c46:	fa20 f002 	lsr.w	r0, r0, r2
 23f9c4a:	fa01 f304 	lsl.w	r3, r1, r4
 23f9c4e:	ea40 0003 	orr.w	r0, r0, r3
 23f9c52:	4629      	mov	r1, r5
 23f9c54:	bd30      	pop	{r4, r5, pc}
 23f9c56:	fa21 f004 	lsr.w	r0, r1, r4
 23f9c5a:	4629      	mov	r1, r5
 23f9c5c:	bd30      	pop	{r4, r5, pc}
 23f9c5e:	f094 0f00 	teq	r4, #0
 23f9c62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f9c66:	bf06      	itte	eq
 23f9c68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f9c6c:	3401      	addeq	r4, #1
 23f9c6e:	3d01      	subne	r5, #1
 23f9c70:	e74e      	b.n	23f9b10 <__adddf3+0x8c>
 23f9c72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f9c76:	bf18      	it	ne
 23f9c78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f9c7c:	d029      	beq.n	23f9cd2 <__adddf3+0x24e>
 23f9c7e:	ea94 0f05 	teq	r4, r5
 23f9c82:	bf08      	it	eq
 23f9c84:	ea90 0f02 	teqeq	r0, r2
 23f9c88:	d005      	beq.n	23f9c96 <__adddf3+0x212>
 23f9c8a:	ea54 0c00 	orrs.w	ip, r4, r0
 23f9c8e:	bf04      	itt	eq
 23f9c90:	4619      	moveq	r1, r3
 23f9c92:	4610      	moveq	r0, r2
 23f9c94:	bd30      	pop	{r4, r5, pc}
 23f9c96:	ea91 0f03 	teq	r1, r3
 23f9c9a:	bf1e      	ittt	ne
 23f9c9c:	2100      	movne	r1, #0
 23f9c9e:	2000      	movne	r0, #0
 23f9ca0:	bd30      	popne	{r4, r5, pc}
 23f9ca2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f9ca6:	d105      	bne.n	23f9cb4 <__adddf3+0x230>
 23f9ca8:	0040      	lsls	r0, r0, #1
 23f9caa:	4149      	adcs	r1, r1
 23f9cac:	bf28      	it	cs
 23f9cae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f9cb2:	bd30      	pop	{r4, r5, pc}
 23f9cb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f9cb8:	bf3c      	itt	cc
 23f9cba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f9cbe:	bd30      	popcc	{r4, r5, pc}
 23f9cc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9cc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f9cc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f9ccc:	f04f 0000 	mov.w	r0, #0
 23f9cd0:	bd30      	pop	{r4, r5, pc}
 23f9cd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f9cd6:	bf1a      	itte	ne
 23f9cd8:	4619      	movne	r1, r3
 23f9cda:	4610      	movne	r0, r2
 23f9cdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f9ce0:	bf1c      	itt	ne
 23f9ce2:	460b      	movne	r3, r1
 23f9ce4:	4602      	movne	r2, r0
 23f9ce6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f9cea:	bf06      	itte	eq
 23f9cec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f9cf0:	ea91 0f03 	teqeq	r1, r3
 23f9cf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f9cf8:	bd30      	pop	{r4, r5, pc}
 23f9cfa:	bf00      	nop

023f9cfc <__aeabi_ui2d>:
 23f9cfc:	f090 0f00 	teq	r0, #0
 23f9d00:	bf04      	itt	eq
 23f9d02:	2100      	moveq	r1, #0
 23f9d04:	4770      	bxeq	lr
 23f9d06:	b530      	push	{r4, r5, lr}
 23f9d08:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f9d0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f9d10:	f04f 0500 	mov.w	r5, #0
 23f9d14:	f04f 0100 	mov.w	r1, #0
 23f9d18:	e750      	b.n	23f9bbc <__adddf3+0x138>
 23f9d1a:	bf00      	nop

023f9d1c <__aeabi_i2d>:
 23f9d1c:	f090 0f00 	teq	r0, #0
 23f9d20:	bf04      	itt	eq
 23f9d22:	2100      	moveq	r1, #0
 23f9d24:	4770      	bxeq	lr
 23f9d26:	b530      	push	{r4, r5, lr}
 23f9d28:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f9d2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f9d30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f9d34:	bf48      	it	mi
 23f9d36:	4240      	negmi	r0, r0
 23f9d38:	f04f 0100 	mov.w	r1, #0
 23f9d3c:	e73e      	b.n	23f9bbc <__adddf3+0x138>
 23f9d3e:	bf00      	nop

023f9d40 <__aeabi_f2d>:
 23f9d40:	0042      	lsls	r2, r0, #1
 23f9d42:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f9d46:	ea4f 0131 	mov.w	r1, r1, rrx
 23f9d4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f9d4e:	bf1f      	itttt	ne
 23f9d50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f9d54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f9d58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f9d5c:	4770      	bxne	lr
 23f9d5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f9d62:	bf08      	it	eq
 23f9d64:	4770      	bxeq	lr
 23f9d66:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f9d6a:	bf04      	itt	eq
 23f9d6c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f9d70:	4770      	bxeq	lr
 23f9d72:	b530      	push	{r4, r5, lr}
 23f9d74:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f9d78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9d7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f9d80:	e71c      	b.n	23f9bbc <__adddf3+0x138>
 23f9d82:	bf00      	nop

023f9d84 <__aeabi_ul2d>:
 23f9d84:	ea50 0201 	orrs.w	r2, r0, r1
 23f9d88:	bf08      	it	eq
 23f9d8a:	4770      	bxeq	lr
 23f9d8c:	b530      	push	{r4, r5, lr}
 23f9d8e:	f04f 0500 	mov.w	r5, #0
 23f9d92:	e00a      	b.n	23f9daa <__aeabi_l2d+0x16>

023f9d94 <__aeabi_l2d>:
 23f9d94:	ea50 0201 	orrs.w	r2, r0, r1
 23f9d98:	bf08      	it	eq
 23f9d9a:	4770      	bxeq	lr
 23f9d9c:	b530      	push	{r4, r5, lr}
 23f9d9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f9da2:	d502      	bpl.n	23f9daa <__aeabi_l2d+0x16>
 23f9da4:	4240      	negs	r0, r0
 23f9da6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f9daa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f9dae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f9db2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f9db6:	f43f aed8 	beq.w	23f9b6a <__adddf3+0xe6>
 23f9dba:	f04f 0203 	mov.w	r2, #3
 23f9dbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f9dc2:	bf18      	it	ne
 23f9dc4:	3203      	addne	r2, #3
 23f9dc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f9dca:	bf18      	it	ne
 23f9dcc:	3203      	addne	r2, #3
 23f9dce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f9dd2:	f1c2 0320 	rsb	r3, r2, #32
 23f9dd6:	fa00 fc03 	lsl.w	ip, r0, r3
 23f9dda:	fa20 f002 	lsr.w	r0, r0, r2
 23f9dde:	fa01 fe03 	lsl.w	lr, r1, r3
 23f9de2:	ea40 000e 	orr.w	r0, r0, lr
 23f9de6:	fa21 f102 	lsr.w	r1, r1, r2
 23f9dea:	4414      	add	r4, r2
 23f9dec:	e6bd      	b.n	23f9b6a <__adddf3+0xe6>
 23f9dee:	bf00      	nop

023f9df0 <__aeabi_dmul>:
 23f9df0:	b570      	push	{r4, r5, r6, lr}
 23f9df2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f9df6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f9dfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f9dfe:	bf1d      	ittte	ne
 23f9e00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f9e04:	ea94 0f0c 	teqne	r4, ip
 23f9e08:	ea95 0f0c 	teqne	r5, ip
 23f9e0c:	f000 f8de 	bleq	23f9fcc <__aeabi_dmul+0x1dc>
 23f9e10:	442c      	add	r4, r5
 23f9e12:	ea81 0603 	eor.w	r6, r1, r3
 23f9e16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f9e1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f9e1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f9e22:	bf18      	it	ne
 23f9e24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f9e28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f9e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f9e30:	d038      	beq.n	23f9ea4 <__aeabi_dmul+0xb4>
 23f9e32:	fba0 ce02 	umull	ip, lr, r0, r2
 23f9e36:	f04f 0500 	mov.w	r5, #0
 23f9e3a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f9e3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f9e42:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f9e46:	f04f 0600 	mov.w	r6, #0
 23f9e4a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f9e4e:	f09c 0f00 	teq	ip, #0
 23f9e52:	bf18      	it	ne
 23f9e54:	f04e 0e01 	orrne.w	lr, lr, #1
 23f9e58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f9e5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f9e60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f9e64:	d204      	bcs.n	23f9e70 <__aeabi_dmul+0x80>
 23f9e66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f9e6a:	416d      	adcs	r5, r5
 23f9e6c:	eb46 0606 	adc.w	r6, r6, r6
 23f9e70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f9e74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f9e78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f9e7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f9e80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f9e84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f9e88:	bf88      	it	hi
 23f9e8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f9e8e:	d81e      	bhi.n	23f9ece <__aeabi_dmul+0xde>
 23f9e90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f9e94:	bf08      	it	eq
 23f9e96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f9e9a:	f150 0000 	adcs.w	r0, r0, #0
 23f9e9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f9ea2:	bd70      	pop	{r4, r5, r6, pc}
 23f9ea4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f9ea8:	ea46 0101 	orr.w	r1, r6, r1
 23f9eac:	ea40 0002 	orr.w	r0, r0, r2
 23f9eb0:	ea81 0103 	eor.w	r1, r1, r3
 23f9eb4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f9eb8:	bfc2      	ittt	gt
 23f9eba:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f9ebe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f9ec2:	bd70      	popgt	{r4, r5, r6, pc}
 23f9ec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f9ec8:	f04f 0e00 	mov.w	lr, #0
 23f9ecc:	3c01      	subs	r4, #1
 23f9ece:	f300 80ab 	bgt.w	23fa028 <__aeabi_dmul+0x238>
 23f9ed2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f9ed6:	bfde      	ittt	le
 23f9ed8:	2000      	movle	r0, #0
 23f9eda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f9ede:	bd70      	pople	{r4, r5, r6, pc}
 23f9ee0:	f1c4 0400 	rsb	r4, r4, #0
 23f9ee4:	3c20      	subs	r4, #32
 23f9ee6:	da35      	bge.n	23f9f54 <__aeabi_dmul+0x164>
 23f9ee8:	340c      	adds	r4, #12
 23f9eea:	dc1b      	bgt.n	23f9f24 <__aeabi_dmul+0x134>
 23f9eec:	f104 0414 	add.w	r4, r4, #20
 23f9ef0:	f1c4 0520 	rsb	r5, r4, #32
 23f9ef4:	fa00 f305 	lsl.w	r3, r0, r5
 23f9ef8:	fa20 f004 	lsr.w	r0, r0, r4
 23f9efc:	fa01 f205 	lsl.w	r2, r1, r5
 23f9f00:	ea40 0002 	orr.w	r0, r0, r2
 23f9f04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f9f08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f9f0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f9f10:	fa21 f604 	lsr.w	r6, r1, r4
 23f9f14:	eb42 0106 	adc.w	r1, r2, r6
 23f9f18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f9f1c:	bf08      	it	eq
 23f9f1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f9f22:	bd70      	pop	{r4, r5, r6, pc}
 23f9f24:	f1c4 040c 	rsb	r4, r4, #12
 23f9f28:	f1c4 0520 	rsb	r5, r4, #32
 23f9f2c:	fa00 f304 	lsl.w	r3, r0, r4
 23f9f30:	fa20 f005 	lsr.w	r0, r0, r5
 23f9f34:	fa01 f204 	lsl.w	r2, r1, r4
 23f9f38:	ea40 0002 	orr.w	r0, r0, r2
 23f9f3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f9f40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f9f44:	f141 0100 	adc.w	r1, r1, #0
 23f9f48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f9f4c:	bf08      	it	eq
 23f9f4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f9f52:	bd70      	pop	{r4, r5, r6, pc}
 23f9f54:	f1c4 0520 	rsb	r5, r4, #32
 23f9f58:	fa00 f205 	lsl.w	r2, r0, r5
 23f9f5c:	ea4e 0e02 	orr.w	lr, lr, r2
 23f9f60:	fa20 f304 	lsr.w	r3, r0, r4
 23f9f64:	fa01 f205 	lsl.w	r2, r1, r5
 23f9f68:	ea43 0302 	orr.w	r3, r3, r2
 23f9f6c:	fa21 f004 	lsr.w	r0, r1, r4
 23f9f70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f9f74:	fa21 f204 	lsr.w	r2, r1, r4
 23f9f78:	ea20 0002 	bic.w	r0, r0, r2
 23f9f7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f9f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f9f84:	bf08      	it	eq
 23f9f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f9f8a:	bd70      	pop	{r4, r5, r6, pc}
 23f9f8c:	f094 0f00 	teq	r4, #0
 23f9f90:	d10f      	bne.n	23f9fb2 <__aeabi_dmul+0x1c2>
 23f9f92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f9f96:	0040      	lsls	r0, r0, #1
 23f9f98:	eb41 0101 	adc.w	r1, r1, r1
 23f9f9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f9fa0:	bf08      	it	eq
 23f9fa2:	3c01      	subeq	r4, #1
 23f9fa4:	d0f7      	beq.n	23f9f96 <__aeabi_dmul+0x1a6>
 23f9fa6:	ea41 0106 	orr.w	r1, r1, r6
 23f9faa:	f095 0f00 	teq	r5, #0
 23f9fae:	bf18      	it	ne
 23f9fb0:	4770      	bxne	lr
 23f9fb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f9fb6:	0052      	lsls	r2, r2, #1
 23f9fb8:	eb43 0303 	adc.w	r3, r3, r3
 23f9fbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f9fc0:	bf08      	it	eq
 23f9fc2:	3d01      	subeq	r5, #1
 23f9fc4:	d0f7      	beq.n	23f9fb6 <__aeabi_dmul+0x1c6>
 23f9fc6:	ea43 0306 	orr.w	r3, r3, r6
 23f9fca:	4770      	bx	lr
 23f9fcc:	ea94 0f0c 	teq	r4, ip
 23f9fd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f9fd4:	bf18      	it	ne
 23f9fd6:	ea95 0f0c 	teqne	r5, ip
 23f9fda:	d00c      	beq.n	23f9ff6 <__aeabi_dmul+0x206>
 23f9fdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f9fe0:	bf18      	it	ne
 23f9fe2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f9fe6:	d1d1      	bne.n	23f9f8c <__aeabi_dmul+0x19c>
 23f9fe8:	ea81 0103 	eor.w	r1, r1, r3
 23f9fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f9ff0:	f04f 0000 	mov.w	r0, #0
 23f9ff4:	bd70      	pop	{r4, r5, r6, pc}
 23f9ff6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f9ffa:	bf06      	itte	eq
 23f9ffc:	4610      	moveq	r0, r2
 23f9ffe:	4619      	moveq	r1, r3
 23fa000:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fa004:	d019      	beq.n	23fa03a <__aeabi_dmul+0x24a>
 23fa006:	ea94 0f0c 	teq	r4, ip
 23fa00a:	d102      	bne.n	23fa012 <__aeabi_dmul+0x222>
 23fa00c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fa010:	d113      	bne.n	23fa03a <__aeabi_dmul+0x24a>
 23fa012:	ea95 0f0c 	teq	r5, ip
 23fa016:	d105      	bne.n	23fa024 <__aeabi_dmul+0x234>
 23fa018:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fa01c:	bf1c      	itt	ne
 23fa01e:	4610      	movne	r0, r2
 23fa020:	4619      	movne	r1, r3
 23fa022:	d10a      	bne.n	23fa03a <__aeabi_dmul+0x24a>
 23fa024:	ea81 0103 	eor.w	r1, r1, r3
 23fa028:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa02c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fa030:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fa034:	f04f 0000 	mov.w	r0, #0
 23fa038:	bd70      	pop	{r4, r5, r6, pc}
 23fa03a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fa03e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fa042:	bd70      	pop	{r4, r5, r6, pc}

023fa044 <__aeabi_ddiv>:
 23fa044:	b570      	push	{r4, r5, r6, lr}
 23fa046:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fa04a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fa04e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fa052:	bf1d      	ittte	ne
 23fa054:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fa058:	ea94 0f0c 	teqne	r4, ip
 23fa05c:	ea95 0f0c 	teqne	r5, ip
 23fa060:	f000 f8a7 	bleq	23fa1b2 <__aeabi_ddiv+0x16e>
 23fa064:	eba4 0405 	sub.w	r4, r4, r5
 23fa068:	ea81 0e03 	eor.w	lr, r1, r3
 23fa06c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fa070:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa074:	f000 8088 	beq.w	23fa188 <__aeabi_ddiv+0x144>
 23fa078:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa07c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fa080:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fa084:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fa088:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fa08c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fa090:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fa094:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fa098:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fa09c:	429d      	cmp	r5, r3
 23fa09e:	bf08      	it	eq
 23fa0a0:	4296      	cmpeq	r6, r2
 23fa0a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fa0a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fa0aa:	d202      	bcs.n	23fa0b2 <__aeabi_ddiv+0x6e>
 23fa0ac:	085b      	lsrs	r3, r3, #1
 23fa0ae:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa0b2:	1ab6      	subs	r6, r6, r2
 23fa0b4:	eb65 0503 	sbc.w	r5, r5, r3
 23fa0b8:	085b      	lsrs	r3, r3, #1
 23fa0ba:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa0be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fa0c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fa0c6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa0ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa0ce:	bf22      	ittt	cs
 23fa0d0:	1ab6      	subcs	r6, r6, r2
 23fa0d2:	4675      	movcs	r5, lr
 23fa0d4:	ea40 000c 	orrcs.w	r0, r0, ip
 23fa0d8:	085b      	lsrs	r3, r3, #1
 23fa0da:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa0de:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa0e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa0e6:	bf22      	ittt	cs
 23fa0e8:	1ab6      	subcs	r6, r6, r2
 23fa0ea:	4675      	movcs	r5, lr
 23fa0ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fa0f0:	085b      	lsrs	r3, r3, #1
 23fa0f2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa0f6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa0fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa0fe:	bf22      	ittt	cs
 23fa100:	1ab6      	subcs	r6, r6, r2
 23fa102:	4675      	movcs	r5, lr
 23fa104:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fa108:	085b      	lsrs	r3, r3, #1
 23fa10a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa10e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa112:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa116:	bf22      	ittt	cs
 23fa118:	1ab6      	subcs	r6, r6, r2
 23fa11a:	4675      	movcs	r5, lr
 23fa11c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fa120:	ea55 0e06 	orrs.w	lr, r5, r6
 23fa124:	d018      	beq.n	23fa158 <__aeabi_ddiv+0x114>
 23fa126:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fa12a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fa12e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fa132:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fa136:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fa13a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fa13e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fa142:	d1c0      	bne.n	23fa0c6 <__aeabi_ddiv+0x82>
 23fa144:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fa148:	d10b      	bne.n	23fa162 <__aeabi_ddiv+0x11e>
 23fa14a:	ea41 0100 	orr.w	r1, r1, r0
 23fa14e:	f04f 0000 	mov.w	r0, #0
 23fa152:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fa156:	e7b6      	b.n	23fa0c6 <__aeabi_ddiv+0x82>
 23fa158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fa15c:	bf04      	itt	eq
 23fa15e:	4301      	orreq	r1, r0
 23fa160:	2000      	moveq	r0, #0
 23fa162:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fa166:	bf88      	it	hi
 23fa168:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fa16c:	f63f aeaf 	bhi.w	23f9ece <__aeabi_dmul+0xde>
 23fa170:	ebb5 0c03 	subs.w	ip, r5, r3
 23fa174:	bf04      	itt	eq
 23fa176:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fa17a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fa17e:	f150 0000 	adcs.w	r0, r0, #0
 23fa182:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa186:	bd70      	pop	{r4, r5, r6, pc}
 23fa188:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fa18c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fa190:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fa194:	bfc2      	ittt	gt
 23fa196:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fa19a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fa19e:	bd70      	popgt	{r4, r5, r6, pc}
 23fa1a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fa1a4:	f04f 0e00 	mov.w	lr, #0
 23fa1a8:	3c01      	subs	r4, #1
 23fa1aa:	e690      	b.n	23f9ece <__aeabi_dmul+0xde>
 23fa1ac:	ea45 0e06 	orr.w	lr, r5, r6
 23fa1b0:	e68d      	b.n	23f9ece <__aeabi_dmul+0xde>
 23fa1b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fa1b6:	ea94 0f0c 	teq	r4, ip
 23fa1ba:	bf08      	it	eq
 23fa1bc:	ea95 0f0c 	teqeq	r5, ip
 23fa1c0:	f43f af3b 	beq.w	23fa03a <__aeabi_dmul+0x24a>
 23fa1c4:	ea94 0f0c 	teq	r4, ip
 23fa1c8:	d10a      	bne.n	23fa1e0 <__aeabi_ddiv+0x19c>
 23fa1ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fa1ce:	f47f af34 	bne.w	23fa03a <__aeabi_dmul+0x24a>
 23fa1d2:	ea95 0f0c 	teq	r5, ip
 23fa1d6:	f47f af25 	bne.w	23fa024 <__aeabi_dmul+0x234>
 23fa1da:	4610      	mov	r0, r2
 23fa1dc:	4619      	mov	r1, r3
 23fa1de:	e72c      	b.n	23fa03a <__aeabi_dmul+0x24a>
 23fa1e0:	ea95 0f0c 	teq	r5, ip
 23fa1e4:	d106      	bne.n	23fa1f4 <__aeabi_ddiv+0x1b0>
 23fa1e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fa1ea:	f43f aefd 	beq.w	23f9fe8 <__aeabi_dmul+0x1f8>
 23fa1ee:	4610      	mov	r0, r2
 23fa1f0:	4619      	mov	r1, r3
 23fa1f2:	e722      	b.n	23fa03a <__aeabi_dmul+0x24a>
 23fa1f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fa1f8:	bf18      	it	ne
 23fa1fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fa1fe:	f47f aec5 	bne.w	23f9f8c <__aeabi_dmul+0x19c>
 23fa202:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fa206:	f47f af0d 	bne.w	23fa024 <__aeabi_dmul+0x234>
 23fa20a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fa20e:	f47f aeeb 	bne.w	23f9fe8 <__aeabi_dmul+0x1f8>
 23fa212:	e712      	b.n	23fa03a <__aeabi_dmul+0x24a>

023fa214 <__gedf2>:
 23fa214:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fa218:	e006      	b.n	23fa228 <__cmpdf2+0x4>
 23fa21a:	bf00      	nop

023fa21c <__ledf2>:
 23fa21c:	f04f 0c01 	mov.w	ip, #1
 23fa220:	e002      	b.n	23fa228 <__cmpdf2+0x4>
 23fa222:	bf00      	nop

023fa224 <__cmpdf2>:
 23fa224:	f04f 0c01 	mov.w	ip, #1
 23fa228:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fa22c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fa230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa234:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fa238:	bf18      	it	ne
 23fa23a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fa23e:	d01b      	beq.n	23fa278 <__cmpdf2+0x54>
 23fa240:	b001      	add	sp, #4
 23fa242:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fa246:	bf0c      	ite	eq
 23fa248:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fa24c:	ea91 0f03 	teqne	r1, r3
 23fa250:	bf02      	ittt	eq
 23fa252:	ea90 0f02 	teqeq	r0, r2
 23fa256:	2000      	moveq	r0, #0
 23fa258:	4770      	bxeq	lr
 23fa25a:	f110 0f00 	cmn.w	r0, #0
 23fa25e:	ea91 0f03 	teq	r1, r3
 23fa262:	bf58      	it	pl
 23fa264:	4299      	cmppl	r1, r3
 23fa266:	bf08      	it	eq
 23fa268:	4290      	cmpeq	r0, r2
 23fa26a:	bf2c      	ite	cs
 23fa26c:	17d8      	asrcs	r0, r3, #31
 23fa26e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fa272:	f040 0001 	orr.w	r0, r0, #1
 23fa276:	4770      	bx	lr
 23fa278:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fa27c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa280:	d102      	bne.n	23fa288 <__cmpdf2+0x64>
 23fa282:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fa286:	d107      	bne.n	23fa298 <__cmpdf2+0x74>
 23fa288:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fa28c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa290:	d1d6      	bne.n	23fa240 <__cmpdf2+0x1c>
 23fa292:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fa296:	d0d3      	beq.n	23fa240 <__cmpdf2+0x1c>
 23fa298:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fa29c:	4770      	bx	lr
 23fa29e:	bf00      	nop

023fa2a0 <__aeabi_cdrcmple>:
 23fa2a0:	4684      	mov	ip, r0
 23fa2a2:	4610      	mov	r0, r2
 23fa2a4:	4662      	mov	r2, ip
 23fa2a6:	468c      	mov	ip, r1
 23fa2a8:	4619      	mov	r1, r3
 23fa2aa:	4663      	mov	r3, ip
 23fa2ac:	e000      	b.n	23fa2b0 <__aeabi_cdcmpeq>
 23fa2ae:	bf00      	nop

023fa2b0 <__aeabi_cdcmpeq>:
 23fa2b0:	b501      	push	{r0, lr}
 23fa2b2:	f7ff ffb7 	bl	23fa224 <__cmpdf2>
 23fa2b6:	2800      	cmp	r0, #0
 23fa2b8:	bf48      	it	mi
 23fa2ba:	f110 0f00 	cmnmi.w	r0, #0
 23fa2be:	bd01      	pop	{r0, pc}

023fa2c0 <__aeabi_dcmpeq>:
 23fa2c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa2c4:	f7ff fff4 	bl	23fa2b0 <__aeabi_cdcmpeq>
 23fa2c8:	bf0c      	ite	eq
 23fa2ca:	2001      	moveq	r0, #1
 23fa2cc:	2000      	movne	r0, #0
 23fa2ce:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa2d2:	bf00      	nop

023fa2d4 <__aeabi_dcmplt>:
 23fa2d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa2d8:	f7ff ffea 	bl	23fa2b0 <__aeabi_cdcmpeq>
 23fa2dc:	bf34      	ite	cc
 23fa2de:	2001      	movcc	r0, #1
 23fa2e0:	2000      	movcs	r0, #0
 23fa2e2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa2e6:	bf00      	nop

023fa2e8 <__aeabi_dcmple>:
 23fa2e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa2ec:	f7ff ffe0 	bl	23fa2b0 <__aeabi_cdcmpeq>
 23fa2f0:	bf94      	ite	ls
 23fa2f2:	2001      	movls	r0, #1
 23fa2f4:	2000      	movhi	r0, #0
 23fa2f6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa2fa:	bf00      	nop

023fa2fc <__aeabi_dcmpge>:
 23fa2fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa300:	f7ff ffce 	bl	23fa2a0 <__aeabi_cdrcmple>
 23fa304:	bf94      	ite	ls
 23fa306:	2001      	movls	r0, #1
 23fa308:	2000      	movhi	r0, #0
 23fa30a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa30e:	bf00      	nop

023fa310 <__aeabi_dcmpgt>:
 23fa310:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa314:	f7ff ffc4 	bl	23fa2a0 <__aeabi_cdrcmple>
 23fa318:	bf34      	ite	cc
 23fa31a:	2001      	movcc	r0, #1
 23fa31c:	2000      	movcs	r0, #0
 23fa31e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa322:	bf00      	nop

023fa324 <__aeabi_dcmpun>:
 23fa324:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fa328:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa32c:	d102      	bne.n	23fa334 <__aeabi_dcmpun+0x10>
 23fa32e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fa332:	d10a      	bne.n	23fa34a <__aeabi_dcmpun+0x26>
 23fa334:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fa338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa33c:	d102      	bne.n	23fa344 <__aeabi_dcmpun+0x20>
 23fa33e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fa342:	d102      	bne.n	23fa34a <__aeabi_dcmpun+0x26>
 23fa344:	f04f 0000 	mov.w	r0, #0
 23fa348:	4770      	bx	lr
 23fa34a:	f04f 0001 	mov.w	r0, #1
 23fa34e:	4770      	bx	lr

023fa350 <__aeabi_d2uiz>:
 23fa350:	004a      	lsls	r2, r1, #1
 23fa352:	d211      	bcs.n	23fa378 <__aeabi_d2uiz+0x28>
 23fa354:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fa358:	d211      	bcs.n	23fa37e <__aeabi_d2uiz+0x2e>
 23fa35a:	d50d      	bpl.n	23fa378 <__aeabi_d2uiz+0x28>
 23fa35c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fa360:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fa364:	d40e      	bmi.n	23fa384 <__aeabi_d2uiz+0x34>
 23fa366:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fa36a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fa36e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fa372:	fa23 f002 	lsr.w	r0, r3, r2
 23fa376:	4770      	bx	lr
 23fa378:	f04f 0000 	mov.w	r0, #0
 23fa37c:	4770      	bx	lr
 23fa37e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fa382:	d102      	bne.n	23fa38a <__aeabi_d2uiz+0x3a>
 23fa384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fa388:	4770      	bx	lr
 23fa38a:	f04f 0000 	mov.w	r0, #0
 23fa38e:	4770      	bx	lr

023fa390 <__aeabi_d2f>:
 23fa390:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fa394:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fa398:	bf24      	itt	cs
 23fa39a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fa39e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fa3a2:	d90d      	bls.n	23fa3c0 <__aeabi_d2f+0x30>
 23fa3a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fa3a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fa3ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fa3b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fa3b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fa3b8:	bf08      	it	eq
 23fa3ba:	f020 0001 	biceq.w	r0, r0, #1
 23fa3be:	4770      	bx	lr
 23fa3c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fa3c4:	d121      	bne.n	23fa40a <__aeabi_d2f+0x7a>
 23fa3c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fa3ca:	bfbc      	itt	lt
 23fa3cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fa3d0:	4770      	bxlt	lr
 23fa3d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fa3d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fa3da:	f1c2 0218 	rsb	r2, r2, #24
 23fa3de:	f1c2 0c20 	rsb	ip, r2, #32
 23fa3e2:	fa10 f30c 	lsls.w	r3, r0, ip
 23fa3e6:	fa20 f002 	lsr.w	r0, r0, r2
 23fa3ea:	bf18      	it	ne
 23fa3ec:	f040 0001 	orrne.w	r0, r0, #1
 23fa3f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fa3f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fa3f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fa3fc:	ea40 000c 	orr.w	r0, r0, ip
 23fa400:	fa23 f302 	lsr.w	r3, r3, r2
 23fa404:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fa408:	e7cc      	b.n	23fa3a4 <__aeabi_d2f+0x14>
 23fa40a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fa40e:	d107      	bne.n	23fa420 <__aeabi_d2f+0x90>
 23fa410:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fa414:	bf1e      	ittt	ne
 23fa416:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fa41a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fa41e:	4770      	bxne	lr
 23fa420:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fa424:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fa428:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fa42c:	4770      	bx	lr
 23fa42e:	bf00      	nop

023fa430 <__aeabi_uldivmod>:
 23fa430:	b953      	cbnz	r3, 23fa448 <__aeabi_uldivmod+0x18>
 23fa432:	b94a      	cbnz	r2, 23fa448 <__aeabi_uldivmod+0x18>
 23fa434:	2900      	cmp	r1, #0
 23fa436:	bf08      	it	eq
 23fa438:	2800      	cmpeq	r0, #0
 23fa43a:	bf1c      	itt	ne
 23fa43c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23fa440:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fa444:	f000 b9a0 	b.w	23fa788 <__aeabi_idiv0>
 23fa448:	f1ad 0c08 	sub.w	ip, sp, #8
 23fa44c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23fa450:	f000 f824 	bl	23fa49c <__udivmoddi4>
 23fa454:	f8dd e004 	ldr.w	lr, [sp, #4]
 23fa458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23fa45c:	b004      	add	sp, #16
 23fa45e:	4770      	bx	lr

023fa460 <__aeabi_d2ulz>:
 23fa460:	b5d0      	push	{r4, r6, r7, lr}
 23fa462:	2200      	movs	r2, #0
 23fa464:	4b0b      	ldr	r3, [pc, #44]	; (23fa494 <__aeabi_d2ulz+0x34>)
 23fa466:	4606      	mov	r6, r0
 23fa468:	460f      	mov	r7, r1
 23fa46a:	f7ff fcc1 	bl	23f9df0 <__aeabi_dmul>
 23fa46e:	f7ff ff6f 	bl	23fa350 <__aeabi_d2uiz>
 23fa472:	4604      	mov	r4, r0
 23fa474:	f7ff fc42 	bl	23f9cfc <__aeabi_ui2d>
 23fa478:	2200      	movs	r2, #0
 23fa47a:	4b07      	ldr	r3, [pc, #28]	; (23fa498 <__aeabi_d2ulz+0x38>)
 23fa47c:	f7ff fcb8 	bl	23f9df0 <__aeabi_dmul>
 23fa480:	4602      	mov	r2, r0
 23fa482:	460b      	mov	r3, r1
 23fa484:	4630      	mov	r0, r6
 23fa486:	4639      	mov	r1, r7
 23fa488:	f7ff fafa 	bl	23f9a80 <__aeabi_dsub>
 23fa48c:	f7ff ff60 	bl	23fa350 <__aeabi_d2uiz>
 23fa490:	4621      	mov	r1, r4
 23fa492:	bdd0      	pop	{r4, r6, r7, pc}
 23fa494:	3df00000 	.word	0x3df00000
 23fa498:	41f00000 	.word	0x41f00000

023fa49c <__udivmoddi4>:
 23fa49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa4a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fa4a2:	4604      	mov	r4, r0
 23fa4a4:	460f      	mov	r7, r1
 23fa4a6:	2b00      	cmp	r3, #0
 23fa4a8:	d148      	bne.n	23fa53c <__udivmoddi4+0xa0>
 23fa4aa:	428a      	cmp	r2, r1
 23fa4ac:	4694      	mov	ip, r2
 23fa4ae:	d961      	bls.n	23fa574 <__udivmoddi4+0xd8>
 23fa4b0:	fab2 f382 	clz	r3, r2
 23fa4b4:	b143      	cbz	r3, 23fa4c8 <__udivmoddi4+0x2c>
 23fa4b6:	f1c3 0120 	rsb	r1, r3, #32
 23fa4ba:	409f      	lsls	r7, r3
 23fa4bc:	fa02 fc03 	lsl.w	ip, r2, r3
 23fa4c0:	409c      	lsls	r4, r3
 23fa4c2:	fa20 f101 	lsr.w	r1, r0, r1
 23fa4c6:	430f      	orrs	r7, r1
 23fa4c8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23fa4cc:	fa1f fe8c 	uxth.w	lr, ip
 23fa4d0:	0c22      	lsrs	r2, r4, #16
 23fa4d2:	fbb7 f6f1 	udiv	r6, r7, r1
 23fa4d6:	fb01 7716 	mls	r7, r1, r6, r7
 23fa4da:	fb06 f00e 	mul.w	r0, r6, lr
 23fa4de:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23fa4e2:	4290      	cmp	r0, r2
 23fa4e4:	d908      	bls.n	23fa4f8 <__udivmoddi4+0x5c>
 23fa4e6:	eb1c 0202 	adds.w	r2, ip, r2
 23fa4ea:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23fa4ee:	d202      	bcs.n	23fa4f6 <__udivmoddi4+0x5a>
 23fa4f0:	4290      	cmp	r0, r2
 23fa4f2:	f200 8137 	bhi.w	23fa764 <__udivmoddi4+0x2c8>
 23fa4f6:	463e      	mov	r6, r7
 23fa4f8:	1a12      	subs	r2, r2, r0
 23fa4fa:	b2a4      	uxth	r4, r4
 23fa4fc:	fbb2 f0f1 	udiv	r0, r2, r1
 23fa500:	fb01 2210 	mls	r2, r1, r0, r2
 23fa504:	fb00 fe0e 	mul.w	lr, r0, lr
 23fa508:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23fa50c:	45a6      	cmp	lr, r4
 23fa50e:	d908      	bls.n	23fa522 <__udivmoddi4+0x86>
 23fa510:	eb1c 0404 	adds.w	r4, ip, r4
 23fa514:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23fa518:	d202      	bcs.n	23fa520 <__udivmoddi4+0x84>
 23fa51a:	45a6      	cmp	lr, r4
 23fa51c:	f200 811c 	bhi.w	23fa758 <__udivmoddi4+0x2bc>
 23fa520:	4610      	mov	r0, r2
 23fa522:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23fa526:	eba4 040e 	sub.w	r4, r4, lr
 23fa52a:	2600      	movs	r6, #0
 23fa52c:	b11d      	cbz	r5, 23fa536 <__udivmoddi4+0x9a>
 23fa52e:	40dc      	lsrs	r4, r3
 23fa530:	2300      	movs	r3, #0
 23fa532:	e9c5 4300 	strd	r4, r3, [r5]
 23fa536:	4631      	mov	r1, r6
 23fa538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa53c:	428b      	cmp	r3, r1
 23fa53e:	d909      	bls.n	23fa554 <__udivmoddi4+0xb8>
 23fa540:	2d00      	cmp	r5, #0
 23fa542:	f000 80fd 	beq.w	23fa740 <__udivmoddi4+0x2a4>
 23fa546:	2600      	movs	r6, #0
 23fa548:	e9c5 0100 	strd	r0, r1, [r5]
 23fa54c:	4630      	mov	r0, r6
 23fa54e:	4631      	mov	r1, r6
 23fa550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa554:	fab3 f683 	clz	r6, r3
 23fa558:	2e00      	cmp	r6, #0
 23fa55a:	d14b      	bne.n	23fa5f4 <__udivmoddi4+0x158>
 23fa55c:	428b      	cmp	r3, r1
 23fa55e:	f0c0 80f2 	bcc.w	23fa746 <__udivmoddi4+0x2aa>
 23fa562:	4282      	cmp	r2, r0
 23fa564:	f240 80ef 	bls.w	23fa746 <__udivmoddi4+0x2aa>
 23fa568:	4630      	mov	r0, r6
 23fa56a:	2d00      	cmp	r5, #0
 23fa56c:	d0e3      	beq.n	23fa536 <__udivmoddi4+0x9a>
 23fa56e:	e9c5 4700 	strd	r4, r7, [r5]
 23fa572:	e7e0      	b.n	23fa536 <__udivmoddi4+0x9a>
 23fa574:	b902      	cbnz	r2, 23fa578 <__udivmoddi4+0xdc>
 23fa576:	deff      	udf	#255	; 0xff
 23fa578:	fab2 f382 	clz	r3, r2
 23fa57c:	2b00      	cmp	r3, #0
 23fa57e:	f040 809d 	bne.w	23fa6bc <__udivmoddi4+0x220>
 23fa582:	1a89      	subs	r1, r1, r2
 23fa584:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23fa588:	b297      	uxth	r7, r2
 23fa58a:	2601      	movs	r6, #1
 23fa58c:	0c20      	lsrs	r0, r4, #16
 23fa58e:	fbb1 f2fe 	udiv	r2, r1, lr
 23fa592:	fb0e 1112 	mls	r1, lr, r2, r1
 23fa596:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fa59a:	fb07 f002 	mul.w	r0, r7, r2
 23fa59e:	4288      	cmp	r0, r1
 23fa5a0:	d90f      	bls.n	23fa5c2 <__udivmoddi4+0x126>
 23fa5a2:	eb1c 0101 	adds.w	r1, ip, r1
 23fa5a6:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23fa5aa:	bf2c      	ite	cs
 23fa5ac:	f04f 0901 	movcs.w	r9, #1
 23fa5b0:	f04f 0900 	movcc.w	r9, #0
 23fa5b4:	4288      	cmp	r0, r1
 23fa5b6:	d903      	bls.n	23fa5c0 <__udivmoddi4+0x124>
 23fa5b8:	f1b9 0f00 	cmp.w	r9, #0
 23fa5bc:	f000 80cf 	beq.w	23fa75e <__udivmoddi4+0x2c2>
 23fa5c0:	4642      	mov	r2, r8
 23fa5c2:	1a09      	subs	r1, r1, r0
 23fa5c4:	b2a4      	uxth	r4, r4
 23fa5c6:	fbb1 f0fe 	udiv	r0, r1, lr
 23fa5ca:	fb0e 1110 	mls	r1, lr, r0, r1
 23fa5ce:	fb00 f707 	mul.w	r7, r0, r7
 23fa5d2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23fa5d6:	42a7      	cmp	r7, r4
 23fa5d8:	d908      	bls.n	23fa5ec <__udivmoddi4+0x150>
 23fa5da:	eb1c 0404 	adds.w	r4, ip, r4
 23fa5de:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23fa5e2:	d202      	bcs.n	23fa5ea <__udivmoddi4+0x14e>
 23fa5e4:	42a7      	cmp	r7, r4
 23fa5e6:	f200 80b4 	bhi.w	23fa752 <__udivmoddi4+0x2b6>
 23fa5ea:	4608      	mov	r0, r1
 23fa5ec:	1be4      	subs	r4, r4, r7
 23fa5ee:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23fa5f2:	e79b      	b.n	23fa52c <__udivmoddi4+0x90>
 23fa5f4:	f1c6 0720 	rsb	r7, r6, #32
 23fa5f8:	40b3      	lsls	r3, r6
 23fa5fa:	fa01 f406 	lsl.w	r4, r1, r6
 23fa5fe:	fa22 fc07 	lsr.w	ip, r2, r7
 23fa602:	40f9      	lsrs	r1, r7
 23fa604:	40b2      	lsls	r2, r6
 23fa606:	ea4c 0c03 	orr.w	ip, ip, r3
 23fa60a:	fa20 f307 	lsr.w	r3, r0, r7
 23fa60e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23fa612:	431c      	orrs	r4, r3
 23fa614:	fa1f fe8c 	uxth.w	lr, ip
 23fa618:	fa00 f306 	lsl.w	r3, r0, r6
 23fa61c:	0c20      	lsrs	r0, r4, #16
 23fa61e:	fbb1 f8f9 	udiv	r8, r1, r9
 23fa622:	fb09 1118 	mls	r1, r9, r8, r1
 23fa626:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fa62a:	fb08 f00e 	mul.w	r0, r8, lr
 23fa62e:	4288      	cmp	r0, r1
 23fa630:	d90f      	bls.n	23fa652 <__udivmoddi4+0x1b6>
 23fa632:	eb1c 0101 	adds.w	r1, ip, r1
 23fa636:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23fa63a:	bf2c      	ite	cs
 23fa63c:	f04f 0b01 	movcs.w	fp, #1
 23fa640:	f04f 0b00 	movcc.w	fp, #0
 23fa644:	4288      	cmp	r0, r1
 23fa646:	d903      	bls.n	23fa650 <__udivmoddi4+0x1b4>
 23fa648:	f1bb 0f00 	cmp.w	fp, #0
 23fa64c:	f000 808d 	beq.w	23fa76a <__udivmoddi4+0x2ce>
 23fa650:	46d0      	mov	r8, sl
 23fa652:	1a09      	subs	r1, r1, r0
 23fa654:	b2a4      	uxth	r4, r4
 23fa656:	fbb1 f0f9 	udiv	r0, r1, r9
 23fa65a:	fb09 1110 	mls	r1, r9, r0, r1
 23fa65e:	fb00 fe0e 	mul.w	lr, r0, lr
 23fa662:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23fa666:	458e      	cmp	lr, r1
 23fa668:	d907      	bls.n	23fa67a <__udivmoddi4+0x1de>
 23fa66a:	eb1c 0101 	adds.w	r1, ip, r1
 23fa66e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23fa672:	d201      	bcs.n	23fa678 <__udivmoddi4+0x1dc>
 23fa674:	458e      	cmp	lr, r1
 23fa676:	d87f      	bhi.n	23fa778 <__udivmoddi4+0x2dc>
 23fa678:	4620      	mov	r0, r4
 23fa67a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23fa67e:	eba1 010e 	sub.w	r1, r1, lr
 23fa682:	fba0 9802 	umull	r9, r8, r0, r2
 23fa686:	4541      	cmp	r1, r8
 23fa688:	464c      	mov	r4, r9
 23fa68a:	46c6      	mov	lr, r8
 23fa68c:	d302      	bcc.n	23fa694 <__udivmoddi4+0x1f8>
 23fa68e:	d106      	bne.n	23fa69e <__udivmoddi4+0x202>
 23fa690:	454b      	cmp	r3, r9
 23fa692:	d204      	bcs.n	23fa69e <__udivmoddi4+0x202>
 23fa694:	3801      	subs	r0, #1
 23fa696:	ebb9 0402 	subs.w	r4, r9, r2
 23fa69a:	eb68 0e0c 	sbc.w	lr, r8, ip
 23fa69e:	2d00      	cmp	r5, #0
 23fa6a0:	d070      	beq.n	23fa784 <__udivmoddi4+0x2e8>
 23fa6a2:	1b1a      	subs	r2, r3, r4
 23fa6a4:	eb61 010e 	sbc.w	r1, r1, lr
 23fa6a8:	fa22 f306 	lsr.w	r3, r2, r6
 23fa6ac:	fa01 f707 	lsl.w	r7, r1, r7
 23fa6b0:	40f1      	lsrs	r1, r6
 23fa6b2:	2600      	movs	r6, #0
 23fa6b4:	431f      	orrs	r7, r3
 23fa6b6:	e9c5 7100 	strd	r7, r1, [r5]
 23fa6ba:	e73c      	b.n	23fa536 <__udivmoddi4+0x9a>
 23fa6bc:	fa02 fc03 	lsl.w	ip, r2, r3
 23fa6c0:	f1c3 0020 	rsb	r0, r3, #32
 23fa6c4:	fa01 f203 	lsl.w	r2, r1, r3
 23fa6c8:	fa21 f600 	lsr.w	r6, r1, r0
 23fa6cc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23fa6d0:	fa24 f100 	lsr.w	r1, r4, r0
 23fa6d4:	fa1f f78c 	uxth.w	r7, ip
 23fa6d8:	409c      	lsls	r4, r3
 23fa6da:	4311      	orrs	r1, r2
 23fa6dc:	fbb6 f0fe 	udiv	r0, r6, lr
 23fa6e0:	0c0a      	lsrs	r2, r1, #16
 23fa6e2:	fb0e 6610 	mls	r6, lr, r0, r6
 23fa6e6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23fa6ea:	fb00 f607 	mul.w	r6, r0, r7
 23fa6ee:	4296      	cmp	r6, r2
 23fa6f0:	d90e      	bls.n	23fa710 <__udivmoddi4+0x274>
 23fa6f2:	eb1c 0202 	adds.w	r2, ip, r2
 23fa6f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23fa6fa:	bf2c      	ite	cs
 23fa6fc:	f04f 0901 	movcs.w	r9, #1
 23fa700:	f04f 0900 	movcc.w	r9, #0
 23fa704:	4296      	cmp	r6, r2
 23fa706:	d902      	bls.n	23fa70e <__udivmoddi4+0x272>
 23fa708:	f1b9 0f00 	cmp.w	r9, #0
 23fa70c:	d031      	beq.n	23fa772 <__udivmoddi4+0x2d6>
 23fa70e:	4640      	mov	r0, r8
 23fa710:	1b92      	subs	r2, r2, r6
 23fa712:	b289      	uxth	r1, r1
 23fa714:	fbb2 f6fe 	udiv	r6, r2, lr
 23fa718:	fb0e 2216 	mls	r2, lr, r6, r2
 23fa71c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fa720:	fb06 f207 	mul.w	r2, r6, r7
 23fa724:	428a      	cmp	r2, r1
 23fa726:	d907      	bls.n	23fa738 <__udivmoddi4+0x29c>
 23fa728:	eb1c 0101 	adds.w	r1, ip, r1
 23fa72c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23fa730:	d201      	bcs.n	23fa736 <__udivmoddi4+0x29a>
 23fa732:	428a      	cmp	r2, r1
 23fa734:	d823      	bhi.n	23fa77e <__udivmoddi4+0x2e2>
 23fa736:	4646      	mov	r6, r8
 23fa738:	1a89      	subs	r1, r1, r2
 23fa73a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23fa73e:	e725      	b.n	23fa58c <__udivmoddi4+0xf0>
 23fa740:	462e      	mov	r6, r5
 23fa742:	4628      	mov	r0, r5
 23fa744:	e6f7      	b.n	23fa536 <__udivmoddi4+0x9a>
 23fa746:	1a84      	subs	r4, r0, r2
 23fa748:	eb61 0303 	sbc.w	r3, r1, r3
 23fa74c:	2001      	movs	r0, #1
 23fa74e:	461f      	mov	r7, r3
 23fa750:	e70b      	b.n	23fa56a <__udivmoddi4+0xce>
 23fa752:	4464      	add	r4, ip
 23fa754:	3802      	subs	r0, #2
 23fa756:	e749      	b.n	23fa5ec <__udivmoddi4+0x150>
 23fa758:	4464      	add	r4, ip
 23fa75a:	3802      	subs	r0, #2
 23fa75c:	e6e1      	b.n	23fa522 <__udivmoddi4+0x86>
 23fa75e:	3a02      	subs	r2, #2
 23fa760:	4461      	add	r1, ip
 23fa762:	e72e      	b.n	23fa5c2 <__udivmoddi4+0x126>
 23fa764:	3e02      	subs	r6, #2
 23fa766:	4462      	add	r2, ip
 23fa768:	e6c6      	b.n	23fa4f8 <__udivmoddi4+0x5c>
 23fa76a:	f1a8 0802 	sub.w	r8, r8, #2
 23fa76e:	4461      	add	r1, ip
 23fa770:	e76f      	b.n	23fa652 <__udivmoddi4+0x1b6>
 23fa772:	3802      	subs	r0, #2
 23fa774:	4462      	add	r2, ip
 23fa776:	e7cb      	b.n	23fa710 <__udivmoddi4+0x274>
 23fa778:	3802      	subs	r0, #2
 23fa77a:	4461      	add	r1, ip
 23fa77c:	e77d      	b.n	23fa67a <__udivmoddi4+0x1de>
 23fa77e:	3e02      	subs	r6, #2
 23fa780:	4461      	add	r1, ip
 23fa782:	e7d9      	b.n	23fa738 <__udivmoddi4+0x29c>
 23fa784:	462e      	mov	r6, r5
 23fa786:	e6d6      	b.n	23fa536 <__udivmoddi4+0x9a>

023fa788 <__aeabi_idiv0>:
 23fa788:	4770      	bx	lr
 23fa78a:	bf00      	nop

023fa78c <strcmp>:
 23fa78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fa790:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fa794:	2a01      	cmp	r2, #1
 23fa796:	bf28      	it	cs
 23fa798:	429a      	cmpcs	r2, r3
 23fa79a:	d0f7      	beq.n	23fa78c <strcmp>
 23fa79c:	1ad0      	subs	r0, r2, r3
 23fa79e:	4770      	bx	lr

023fa7a0 <strlen>:
 23fa7a0:	4603      	mov	r3, r0
 23fa7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa7a6:	2a00      	cmp	r2, #0
 23fa7a8:	d1fb      	bne.n	23fa7a2 <strlen+0x2>
 23fa7aa:	1a18      	subs	r0, r3, r0
 23fa7ac:	3801      	subs	r0, #1
 23fa7ae:	4770      	bx	lr

023fa7b0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fa7b0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fa7b2:	f003 fad5 	bl	23fdd60 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa7b6:	2500      	movs	r5, #0
 23fa7b8:	4e05      	ldr	r6, [pc, #20]	; (23fa7d0 <module_user_init+0x20>)
 23fa7ba:	4c06      	ldr	r4, [pc, #24]	; (23fa7d4 <module_user_init+0x24>)
 23fa7bc:	1ba4      	subs	r4, r4, r6
 23fa7be:	08a4      	lsrs	r4, r4, #2
 23fa7c0:	42ac      	cmp	r4, r5
 23fa7c2:	d100      	bne.n	23fa7c6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fa7c4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fa7c6:	f856 3b04 	ldr.w	r3, [r6], #4
 23fa7ca:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa7cc:	3501      	adds	r5, #1
 23fa7ce:	e7f7      	b.n	23fa7c0 <module_user_init+0x10>
 23fa7d0:	023fffcc 	.word	0x023fffcc
 23fa7d4:	023ffff0 	.word	0x023ffff0

023fa7d8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fa7d8:	f000 b860 	b.w	23fa89c <setup>

023fa7dc <module_user_loop>:
}

void module_user_loop() {
 23fa7dc:	b508      	push	{r3, lr}
    loop();
 23fa7de:	f000 f8cd 	bl	23fa97c <loop>
    _post_loop();
}
 23fa7e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fa7e6:	f003 ba73 	b.w	23fdcd0 <_post_loop>

023fa7ea <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fa7ea:	f000 bff1 	b.w	23fb7d0 <malloc>

023fa7ee <_Znaj>:
 23fa7ee:	f000 bfef 	b.w	23fb7d0 <malloc>

023fa7f2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fa7f2:	f000 bffb 	b.w	23fb7ec <free>
	...

023fa7f8 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa7f8:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fa7fa:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa7fc:	4a02      	ldr	r2, [pc, #8]	; (23fa808 <__cxa_pure_virtual+0x10>)
 23fa7fe:	4903      	ldr	r1, [pc, #12]	; (23fa80c <__cxa_pure_virtual+0x14>)
 23fa800:	f000 fe7a 	bl	23fb4f8 <panic_>
  while (1);
 23fa804:	e7fe      	b.n	23fa804 <__cxa_pure_virtual+0xc>
 23fa806:	bf00      	nop
 23fa808:	023fb061 	.word	0x023fb061
 23fa80c:	023ffa9c 	.word	0x023ffa9c

023fa810 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fa810:	7800      	ldrb	r0, [r0, #0]
 23fa812:	fab0 f080 	clz	r0, r0
 23fa816:	0940      	lsrs	r0, r0, #5
 23fa818:	4770      	bx	lr

023fa81a <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fa81a:	2301      	movs	r3, #1
 23fa81c:	7003      	strb	r3, [r0, #0]
 23fa81e:	4770      	bx	lr

023fa820 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fa820:	4770      	bx	lr
	...

023fa824 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fa824:	b510      	push	{r4, lr}
 23fa826:	4604      	mov	r4, r0
 23fa828:	4b09      	ldr	r3, [pc, #36]	; (23fa850 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fa82a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fa82c:	f001 ffba 	bl	23fc7a4 <_ZN5spark10LogManager8instanceEv>
 23fa830:	4621      	mov	r1, r4
 23fa832:	f002 f9f1 	bl	23fcc18 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fa836:	f003 f96f 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fa83a:	f003 f95f 	bl	23fdafc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fa83e:	4620      	mov	r0, r4
 23fa840:	4b04      	ldr	r3, [pc, #16]	; (23fa854 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fa842:	f840 3b04 	str.w	r3, [r0], #4
 23fa846:	f002 f883 	bl	23fc950 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fa84a:	4620      	mov	r0, r4
 23fa84c:	bd10      	pop	{r4, pc}
 23fa84e:	bf00      	nop
 23fa850:	023ffb40 	.word	0x023ffb40
 23fa854:	023ffb28 	.word	0x023ffb28

023fa858 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fa858:	b510      	push	{r4, lr}
 23fa85a:	4604      	mov	r4, r0
    }
 23fa85c:	f7ff ffe2 	bl	23fa824 <_ZN5spark16SerialLogHandlerD1Ev>
 23fa860:	4620      	mov	r0, r4
 23fa862:	2124      	movs	r1, #36	; 0x24
 23fa864:	f7ff ffc5 	bl	23fa7f2 <_ZdlPvj>
 23fa868:	4620      	mov	r0, r4
 23fa86a:	bd10      	pop	{r4, pc}

023fa86c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fa86c:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fa86e:	f04f 0c20 	mov.w	ip, #32
 23fa872:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fa874:	b500      	push	{lr}
 23fa876:	b08c      	sub	sp, #48	; 0x30
 23fa878:	aa0d      	add	r2, sp, #52	; 0x34
 23fa87a:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fa87e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fa882:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fa886:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fa888:	6801      	ldr	r1, [r0, #0]
 23fa88a:	aa04      	add	r2, sp, #16
 23fa88c:	201e      	movs	r0, #30
 23fa88e:	f000 fe41 	bl	23fb514 <log_message_v>
}
 23fa892:	b00c      	add	sp, #48	; 0x30
 23fa894:	f85d eb04 	ldr.w	lr, [sp], #4
 23fa898:	b003      	add	sp, #12
 23fa89a:	4770      	bx	lr

023fa89c <setup>:
#include "ADXL362.h"
ADXL362 adxl362;

static int deviceID = 0; //used to differentiate between multiple devices

void setup() {
 23fa89c:	b538      	push	{r3, r4, r5, lr}
  //DEBUGGING
  Serial.begin(9600);
 23fa89e:	f003 f93b 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fa8a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa8a6:	f003 f925 	bl	23fdaf4 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fa8aa:	2000      	movs	r0, #0
 23fa8ac:	f000 fbf4 	bl	23fb098 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fa8b0:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23fa8b4:	4604      	mov	r4, r0
 23fa8b6:	2000      	movs	r0, #0
 23fa8b8:	f000 fbee 	bl	23fb098 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fa8bc:	1b00      	subs	r0, r0, r4
 23fa8be:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fa8c2:	42a8      	cmp	r0, r5
 23fa8c4:	f171 0300 	sbcs.w	r3, r1, #0
 23fa8c8:	d207      	bcs.n	23fa8da <setup+0x3e>
  waitFor(Serial.isConnected, 15000);
 23fa8ca:	f003 f925 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fa8ce:	f003 f918 	bl	23fdb02 <_ZN9USBSerial11isConnectedEv>
 23fa8d2:	b910      	cbnz	r0, 23fa8da <setup+0x3e>
            spark_process();
 23fa8d4:	f000 fe9c 	bl	23fb610 <spark_process>
        while (_while() && !_condition()) {
 23fa8d8:	e7ed      	b.n	23fa8b6 <setup+0x1a>
 23fa8da:	f003 f91d 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fa8de:	f003 f910 	bl	23fdb02 <_ZN9USBSerial11isConnectedEv>
  Log.info("Serial connected or timed out!");
 23fa8e2:	4908      	ldr	r1, [pc, #32]	; (23fa904 <setup+0x68>)
 23fa8e4:	4808      	ldr	r0, [pc, #32]	; (23fa908 <setup+0x6c>)
 23fa8e6:	f7ff ffc1 	bl	23fa86c <_ZNK5spark6Logger4infoEPKcz>

  adxl362.begin();
 23fa8ea:	4808      	ldr	r0, [pc, #32]	; (23fa90c <setup+0x70>)
 23fa8ec:	f000 fb52 	bl	23faf94 <_ZN7ADXL3625beginEv>
  adxl362.beginMeasure(); //NECESSARY - starts measurement
 23fa8f0:	4806      	ldr	r0, [pc, #24]	; (23fa90c <setup+0x70>)
 23fa8f2:	f000 fadb 	bl	23faeac <_ZN7ADXL36212beginMeasureEv>

  adxl362.setRange(XL362_FILTER_FLAG_8G); //sets range to 8G - other options are 2G and 4G
}
 23fa8f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  adxl362.setRange(XL362_FILTER_FLAG_8G); //sets range to 8G - other options are 2G and 4G
 23fa8fa:	2180      	movs	r1, #128	; 0x80
 23fa8fc:	4803      	ldr	r0, [pc, #12]	; (23fa90c <setup+0x70>)
 23fa8fe:	f000 bae7 	b.w	23faed0 <_ZN7ADXL3628setRangeEh>
 23fa902:	bf00      	nop
 23fa904:	023ffab1 	.word	0x023ffab1
 23fa908:	1007ae70 	.word	0x1007ae70
 23fa90c:	1007ae24 	.word	0x1007ae24

023fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa910:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa912:	2614      	movs	r6, #20
 23fa914:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa918:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa91a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa91e:	42ae      	cmp	r6, r5
 23fa920:	d004      	beq.n	23fa92c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fa922:	4628      	mov	r0, r5
 23fa924:	f002 ff12 	bl	23fd74c <_ZN6StringD1Ev>
 23fa928:	3514      	adds	r5, #20
 23fa92a:	e7f8      	b.n	23fa91e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fa92c:	6820      	ldr	r0, [r4, #0]
 23fa92e:	f000 ff5d 	bl	23fb7ec <free>
    AllocatorT::free(data_);
}
 23fa932:	4620      	mov	r0, r4
 23fa934:	bd70      	pop	{r4, r5, r6, pc}

023fa936 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
 23fa936:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fa938:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
 23fa93a:	2000      	movs	r0, #0
 23fa93c:	f000 fe30 	bl	23fb5a0 <application_thread_current>
 23fa940:	1c65      	adds	r5, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23fa942:	b128      	cbz	r0, 23fa950 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x1a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 23fa944:	782b      	ldrb	r3, [r5, #0]
 23fa946:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23fa948:	b913      	cbnz	r3, 23fa950 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x1a>
        spark_process();
 23fa94a:	f000 fe61 	bl	23fb610 <spark_process>
    }
 23fa94e:	e7f9      	b.n	23fa944 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xe>
 23fa950:	e8d5 3f8f 	ldab	r3, [r5]
 23fa954:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23fa956:	b90b      	cbnz	r3, 23fa95c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x26>
        return std::move(defaultValue);
 23fa958:	2000      	movs	r0, #0
        return this->p_->result();
    }
 23fa95a:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
 23fa95c:	2000      	movs	r0, #0
 23fa95e:	f000 fe1f 	bl	23fb5a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fa962:	b128      	cbz	r0, 23fa970 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x3a>
 23fa964:	782b      	ldrb	r3, [r5, #0]
 23fa966:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23fa968:	b913      	cbnz	r3, 23fa970 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x3a>
        spark_process();
 23fa96a:	f000 fe51 	bl	23fb610 <spark_process>
    }
 23fa96e:	e7f9      	b.n	23fa964 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2e>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fa970:	7823      	ldrb	r3, [r4, #0]
 23fa972:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23fa974:	2b01      	cmp	r3, #1
 23fa976:	d1ef      	bne.n	23fa958 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
            return result_;
 23fa978:	7b20      	ldrb	r0, [r4, #12]
 23fa97a:	e7ee      	b.n	23fa95a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>

023fa97c <loop>:


void loop() {
 23fa97c:	b530      	push	{r4, r5, lr}
 23fa97e:	b0af      	sub	sp, #188	; 0xbc

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fa980:	f000 fb7c 	bl	23fb07c <HAL_Timer_Get_Milli_Seconds>
 23fa984:	4604      	mov	r4, r0
  float r, p, t;

  static unsigned long lastTime = 0; // initialize to starting time
  unsigned long currentTime = millis(); // get time since start of program

  adxl362.readXYZmg(x, y, z); //burst read of axes - REQUIRED to guarantee all measurements correspond to same sample time 
 23fa986:	ab06      	add	r3, sp, #24
 23fa988:	485c      	ldr	r0, [pc, #368]	; (23faafc <loop+0x180>)
 23fa98a:	aa05      	add	r2, sp, #20
 23fa98c:	a904      	add	r1, sp, #16
 23fa98e:	f000 fabb 	bl	23faf08 <_ZN7ADXL3629readXYZmgERiS0_S0_>
  adxl362.XYZmgtoRPT(x, y, z, r, p, t); //converts raw data to roll, pitch, tilt
 23fa992:	ab09      	add	r3, sp, #36	; 0x24
 23fa994:	9302      	str	r3, [sp, #8]
 23fa996:	ab08      	add	r3, sp, #32
 23fa998:	9301      	str	r3, [sp, #4]
 23fa99a:	ab07      	add	r3, sp, #28
 23fa99c:	9300      	str	r3, [sp, #0]
 23fa99e:	9904      	ldr	r1, [sp, #16]
 23fa9a0:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 23fa9a4:	4855      	ldr	r0, [pc, #340]	; (23faafc <loop+0x180>)
 23fa9a6:	f000 f983 	bl	23facb0 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>

  if (currentTime - lastTime >= 1000) { // execute the following block of code every second, because, to quote the Particle docs:
 23fa9aa:	4a55      	ldr	r2, [pc, #340]	; (23fab00 <loop+0x184>)
 23fa9ac:	6813      	ldr	r3, [r2, #0]
 23fa9ae:	1ae3      	subs	r3, r4, r3
 23fa9b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 23fa9b4:	f0c0 80a0 	bcc.w	23faaf8 <loop+0x17c>
  //Currently, a device can publish at rate of about 1 event/sec, with bursts of up to 4 allowed in 1 second. Back to back burst of 4 messages will take 4 seconds to recover.
  //Each publish uses one Data Operation from your monthly or yearly quota. (This means we'll run out of data operations in 100,000/60/60 = 27 minutes!)
    lastTime = currentTime; // update lastTime to current time
 23fa9b8:	6014      	str	r4, [r2, #0]

    String message = String(deviceID) + ", " + String(x) + ", " + String(y) + ", " + String(z) + ", " + String(r) + ", " + String(p) + ", " + String(t);
 23fa9ba:	2100      	movs	r1, #0
 23fa9bc:	220a      	movs	r2, #10
 23fa9be:	a80e      	add	r0, sp, #56	; 0x38
 23fa9c0:	f002 ff64 	bl	23fd88c <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 23fa9c4:	a90e      	add	r1, sp, #56	; 0x38
 23fa9c6:	a812      	add	r0, sp, #72	; 0x48
 23fa9c8:	f002 ff43 	bl	23fd852 <_ZN6StringC1ERKS_>
 23fa9cc:	494d      	ldr	r1, [pc, #308]	; (23fab04 <loop+0x188>)
 23fa9ce:	a812      	add	r0, sp, #72	; 0x48
 23fa9d0:	f002 ffac 	bl	23fd92c <_ZplRK15StringSumHelperPKc>
 23fa9d4:	4604      	mov	r4, r0
 23fa9d6:	220a      	movs	r2, #10
 23fa9d8:	9904      	ldr	r1, [sp, #16]
 23fa9da:	a816      	add	r0, sp, #88	; 0x58
 23fa9dc:	f002 ff56 	bl	23fd88c <_ZN6StringC1Eih>
 23fa9e0:	4620      	mov	r0, r4
 23fa9e2:	a916      	add	r1, sp, #88	; 0x58
 23fa9e4:	f002 ff96 	bl	23fd914 <_ZplRK15StringSumHelperRK6String>
 23fa9e8:	4946      	ldr	r1, [pc, #280]	; (23fab04 <loop+0x188>)
 23fa9ea:	f002 ff9f 	bl	23fd92c <_ZplRK15StringSumHelperPKc>
 23fa9ee:	4604      	mov	r4, r0
 23fa9f0:	220a      	movs	r2, #10
 23fa9f2:	9905      	ldr	r1, [sp, #20]
 23fa9f4:	a81a      	add	r0, sp, #104	; 0x68
 23fa9f6:	f002 ff49 	bl	23fd88c <_ZN6StringC1Eih>
 23fa9fa:	4620      	mov	r0, r4
 23fa9fc:	a91a      	add	r1, sp, #104	; 0x68
 23fa9fe:	f002 ff89 	bl	23fd914 <_ZplRK15StringSumHelperRK6String>
 23faa02:	4940      	ldr	r1, [pc, #256]	; (23fab04 <loop+0x188>)
 23faa04:	f002 ff92 	bl	23fd92c <_ZplRK15StringSumHelperPKc>
 23faa08:	4604      	mov	r4, r0
 23faa0a:	220a      	movs	r2, #10
 23faa0c:	9906      	ldr	r1, [sp, #24]
 23faa0e:	a81e      	add	r0, sp, #120	; 0x78
 23faa10:	f002 ff3c 	bl	23fd88c <_ZN6StringC1Eih>
 23faa14:	4620      	mov	r0, r4
 23faa16:	a91e      	add	r1, sp, #120	; 0x78
 23faa18:	f002 ff7c 	bl	23fd914 <_ZplRK15StringSumHelperRK6String>
 23faa1c:	4939      	ldr	r1, [pc, #228]	; (23fab04 <loop+0x188>)
 23faa1e:	f002 ff85 	bl	23fd92c <_ZplRK15StringSumHelperPKc>
 23faa22:	4604      	mov	r4, r0
 23faa24:	ed9d 0a07 	vldr	s0, [sp, #28]
 23faa28:	2106      	movs	r1, #6
 23faa2a:	a822      	add	r0, sp, #136	; 0x88
 23faa2c:	f002 ff41 	bl	23fd8b2 <_ZN6StringC1Efi>
 23faa30:	4620      	mov	r0, r4
 23faa32:	a922      	add	r1, sp, #136	; 0x88
 23faa34:	f002 ff6e 	bl	23fd914 <_ZplRK15StringSumHelperRK6String>
 23faa38:	4932      	ldr	r1, [pc, #200]	; (23fab04 <loop+0x188>)
 23faa3a:	f002 ff77 	bl	23fd92c <_ZplRK15StringSumHelperPKc>
 23faa3e:	4604      	mov	r4, r0
 23faa40:	ed9d 0a08 	vldr	s0, [sp, #32]
 23faa44:	2106      	movs	r1, #6
 23faa46:	a826      	add	r0, sp, #152	; 0x98
 23faa48:	f002 ff33 	bl	23fd8b2 <_ZN6StringC1Efi>
 23faa4c:	4620      	mov	r0, r4
 23faa4e:	a926      	add	r1, sp, #152	; 0x98
 23faa50:	f002 ff60 	bl	23fd914 <_ZplRK15StringSumHelperRK6String>
 23faa54:	492b      	ldr	r1, [pc, #172]	; (23fab04 <loop+0x188>)
 23faa56:	f002 ff69 	bl	23fd92c <_ZplRK15StringSumHelperPKc>
 23faa5a:	4604      	mov	r4, r0
 23faa5c:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 23faa60:	2106      	movs	r1, #6
 23faa62:	a82a      	add	r0, sp, #168	; 0xa8
 23faa64:	f002 ff25 	bl	23fd8b2 <_ZN6StringC1Efi>
 23faa68:	4620      	mov	r0, r4
 23faa6a:	a92a      	add	r1, sp, #168	; 0xa8
 23faa6c:	f002 ff52 	bl	23fd914 <_ZplRK15StringSumHelperRK6String>
 23faa70:	4601      	mov	r1, r0
 23faa72:	a80a      	add	r0, sp, #40	; 0x28
 23faa74:	f002 feed 	bl	23fd852 <_ZN6StringC1ERKS_>
 23faa78:	a82a      	add	r0, sp, #168	; 0xa8
 23faa7a:	f002 fe67 	bl	23fd74c <_ZN6StringD1Ev>
 23faa7e:	a826      	add	r0, sp, #152	; 0x98
 23faa80:	f002 fe64 	bl	23fd74c <_ZN6StringD1Ev>
 23faa84:	a822      	add	r0, sp, #136	; 0x88
 23faa86:	f002 fe61 	bl	23fd74c <_ZN6StringD1Ev>
 23faa8a:	a81e      	add	r0, sp, #120	; 0x78
 23faa8c:	f002 fe5e 	bl	23fd74c <_ZN6StringD1Ev>
 23faa90:	a81a      	add	r0, sp, #104	; 0x68
 23faa92:	f002 fe5b 	bl	23fd74c <_ZN6StringD1Ev>
 23faa96:	a816      	add	r0, sp, #88	; 0x58
 23faa98:	f002 fe58 	bl	23fd74c <_ZN6StringD1Ev>
class StringSumHelper : public String
 23faa9c:	a812      	add	r0, sp, #72	; 0x48
 23faa9e:	f002 fe55 	bl	23fd74c <_ZN6StringD1Ev>
 23faaa2:	a80e      	add	r0, sp, #56	; 0x38
 23faaa4:	f002 fe52 	bl	23fd74c <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23faaa8:	4b17      	ldr	r3, [pc, #92]	; (23fab08 <loop+0x18c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23faaaa:	2200      	movs	r2, #0
 23faaac:	781b      	ldrb	r3, [r3, #0]
 23faaae:	990a      	ldr	r1, [sp, #40]	; 0x28
 23faab0:	f88d 3000 	strb.w	r3, [sp]
 23faab4:	a82a      	add	r0, sp, #168	; 0xa8
 23faab6:	233c      	movs	r3, #60	; 0x3c
 23faab8:	f001 f8aa 	bl	23fbc10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
 23faabc:	a82a      	add	r0, sp, #168	; 0xa8
 23faabe:	f7ff ff3a 	bl	23fa936 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
	if (_M_pi != nullptr)
 23faac2:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 23faac4:	4605      	mov	r5, r0
 23faac6:	b17c      	cbz	r4, 23faae8 <loop+0x16c>
      if (--_M_use_count == 0)
 23faac8:	6863      	ldr	r3, [r4, #4]
 23faaca:	3b01      	subs	r3, #1
 23faacc:	6063      	str	r3, [r4, #4]
 23faace:	b95b      	cbnz	r3, 23faae8 <loop+0x16c>
          _M_dispose();
 23faad0:	6823      	ldr	r3, [r4, #0]
 23faad2:	4620      	mov	r0, r4
 23faad4:	689b      	ldr	r3, [r3, #8]
 23faad6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23faad8:	68a3      	ldr	r3, [r4, #8]
 23faada:	3b01      	subs	r3, #1
 23faadc:	60a3      	str	r3, [r4, #8]
 23faade:	b91b      	cbnz	r3, 23faae8 <loop+0x16c>
            _M_destroy();
 23faae0:	6823      	ldr	r3, [r4, #0]
 23faae2:	4620      	mov	r0, r4
 23faae4:	68db      	ldr	r3, [r3, #12]
 23faae6:	4798      	blx	r3

    if(!Particle.publish(message)) {
 23faae8:	b91d      	cbnz	r5, 23faaf2 <loop+0x176>
      Log.info("Publish failed! You might not be connected to WiFi or the Particle Cloud.");
 23faaea:	4908      	ldr	r1, [pc, #32]	; (23fab0c <loop+0x190>)
 23faaec:	4808      	ldr	r0, [pc, #32]	; (23fab10 <loop+0x194>)
 23faaee:	f7ff febd 	bl	23fa86c <_ZNK5spark6Logger4infoEPKcz>
    String message = String(deviceID) + ", " + String(x) + ", " + String(y) + ", " + String(z) + ", " + String(r) + ", " + String(p) + ", " + String(t);
 23faaf2:	a80a      	add	r0, sp, #40	; 0x28
 23faaf4:	f002 fe2a 	bl	23fd74c <_ZN6StringD1Ev>

  //Log.info("x: %d, y: %d, z: %d, r: %f, p: %f, t: %f", x, y, z, r, p, t);
  //Serial.printlnf("%d, %d, %d, %f, %f, %f", x, y, z, r, p, t); //DEBUGGING - Use Arduino Serial Plotter
  //Serial.printlnf("%f, %f, %f", r, p, t); //DEBUGGING - Use Arduino Serial Plotter
  //delay(1); //for DEBUGGING
 23faaf8:	b02f      	add	sp, #188	; 0xbc
 23faafa:	bd30      	pop	{r4, r5, pc}
 23faafc:	1007ae24 	.word	0x1007ae24
 23fab00:	1007ae20 	.word	0x1007ae20
 23fab04:	023ffad0 	.word	0x023ffad0
 23fab08:	1007ae1c 	.word	0x1007ae1c
 23fab0c:	023ffad3 	.word	0x023ffad3
 23fab10:	1007ae70 	.word	0x1007ae70

023fab14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fab14:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fab16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fab18:	4604      	mov	r4, r0
 23fab1a:	460d      	mov	r5, r1
 23fab1c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fab1e:	d916      	bls.n	23fab4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fab20:	4290      	cmp	r0, r2
 23fab22:	d215      	bcs.n	23fab50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fab24:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fab28:	1a75      	subs	r5, r6, r1
 23fab2a:	f1a1 0714 	sub.w	r7, r1, #20
 23fab2e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fab30:	42b7      	cmp	r7, r6
 23fab32:	d01c      	beq.n	23fab6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fab34:	b12c      	cbz	r4, 23fab42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fab36:	4631      	mov	r1, r6
 23fab38:	4620      	mov	r0, r4
 23fab3a:	f002 fe70 	bl	23fd81e <_ZN6StringC1EOS_>
 23fab3e:	7c33      	ldrb	r3, [r6, #16]
 23fab40:	7423      	strb	r3, [r4, #16]
 23fab42:	4630      	mov	r0, r6
 23fab44:	f002 fe02 	bl	23fd74c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fab48:	3e14      	subs	r6, #20
 23fab4a:	3c14      	subs	r4, #20
 23fab4c:	e7f0      	b.n	23fab30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fab4e:	d00e      	beq.n	23fab6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fab50:	42b5      	cmp	r5, r6
 23fab52:	d00c      	beq.n	23fab6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fab54:	b12c      	cbz	r4, 23fab62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fab56:	4629      	mov	r1, r5
 23fab58:	4620      	mov	r0, r4
 23fab5a:	f002 fe60 	bl	23fd81e <_ZN6StringC1EOS_>
 23fab5e:	7c2b      	ldrb	r3, [r5, #16]
 23fab60:	7423      	strb	r3, [r4, #16]
 23fab62:	4628      	mov	r0, r5
 23fab64:	f002 fdf2 	bl	23fd74c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fab68:	3514      	adds	r5, #20
 23fab6a:	3414      	adds	r4, #20
 23fab6c:	e7f0      	b.n	23fab50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fab70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fab70:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fab76:	e9c0 3300 	strd	r3, r3, [r0]
 23fab7a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fab7c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fab7e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fab80:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fab82:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fab84:	dd24      	ble.n	23fabd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fab86:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fab8a:	fb08 f007 	mul.w	r0, r8, r7
 23fab8e:	f000 fe1f 	bl	23fb7d0 <malloc>
            if (!d) {
 23fab92:	4605      	mov	r5, r0
 23fab94:	b1e0      	cbz	r0, 23fabd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fab96:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fab9a:	fb08 1202 	mla	r2, r8, r2, r1
 23fab9e:	f7ff ffb9 	bl	23fab14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23faba2:	6820      	ldr	r0, [r4, #0]
 23faba4:	f000 fe22 	bl	23fb7ec <free>
        data_ = d;
 23faba8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fabaa:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fabac:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fabb0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fabb4:	45b8      	cmp	r8, r7
 23fabb6:	d009      	beq.n	23fabcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fabb8:	4639      	mov	r1, r7
 23fabba:	4628      	mov	r0, r5
 23fabbc:	f002 fe49 	bl	23fd852 <_ZN6StringC1ERKS_>
 23fabc0:	7c3b      	ldrb	r3, [r7, #16]
 23fabc2:	3514      	adds	r5, #20
 23fabc4:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fabc8:	3714      	adds	r7, #20
 23fabca:	e7f3      	b.n	23fabb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fabcc:	6873      	ldr	r3, [r6, #4]
 23fabce:	6063      	str	r3, [r4, #4]
}
 23fabd0:	4620      	mov	r0, r4
 23fabd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fabd8 <_GLOBAL__sub_I_logHandler>:
        val_(val) {
 23fabd8:	2300      	movs	r3, #0
 23fabda:	b570      	push	{r4, r5, r6, lr}
 23fabdc:	4a20      	ldr	r2, [pc, #128]	; (23fac60 <_GLOBAL__sub_I_logHandler+0x88>)
 23fabde:	b08c      	sub	sp, #48	; 0x30
 23fabe0:	7013      	strb	r3, [r2, #0]
        capacity_(0) {
 23fabe2:	e9cd 3300 	strd	r3, r3, [sp]
 23fabe6:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fabe8:	f002 ff96 	bl	23fdb18 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fabec:	4c1d      	ldr	r4, [pc, #116]	; (23fac64 <_GLOBAL__sub_I_logHandler+0x8c>)
 23fabee:	4605      	mov	r5, r0
 23fabf0:	4626      	mov	r6, r4
 23fabf2:	4669      	mov	r1, sp
 23fabf4:	a803      	add	r0, sp, #12
 23fabf6:	f7ff ffbb 	bl	23fab70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fabfa:	a903      	add	r1, sp, #12
 23fabfc:	a806      	add	r0, sp, #24
 23fabfe:	f7ff ffb7 	bl	23fab70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fac02:	4b19      	ldr	r3, [pc, #100]	; (23fac68 <_GLOBAL__sub_I_logHandler+0x90>)
 23fac04:	a906      	add	r1, sp, #24
 23fac06:	f846 3b04 	str.w	r3, [r6], #4
 23fac0a:	a809      	add	r0, sp, #36	; 0x24
 23fac0c:	f7ff ffb0 	bl	23fab70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fac10:	aa09      	add	r2, sp, #36	; 0x24
 23fac12:	211e      	movs	r1, #30
 23fac14:	4630      	mov	r0, r6
 23fac16:	f002 f8e1 	bl	23fcddc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fac1a:	a809      	add	r0, sp, #36	; 0x24
 23fac1c:	f7ff fe78 	bl	23fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fac20:	a806      	add	r0, sp, #24
 23fac22:	f7ff fe75 	bl	23fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fac26:	4b11      	ldr	r3, [pc, #68]	; (23fac6c <_GLOBAL__sub_I_logHandler+0x94>)
 23fac28:	a803      	add	r0, sp, #12
 23fac2a:	6023      	str	r3, [r4, #0]
 23fac2c:	6225      	str	r5, [r4, #32]
 23fac2e:	f7ff fe6f 	bl	23fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fac32:	4b0f      	ldr	r3, [pc, #60]	; (23fac70 <_GLOBAL__sub_I_logHandler+0x98>)
 23fac34:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fac36:	f002 ff6f 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fac3a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fac3e:	f002 ff59 	bl	23fdaf4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fac42:	f001 fdaf 	bl	23fc7a4 <_ZN5spark10LogManager8instanceEv>
 23fac46:	4621      	mov	r1, r4
 23fac48:	f001 ffa0 	bl	23fcb8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 23fac4c:	4668      	mov	r0, sp
 23fac4e:	f7ff fe5f 	bl	23fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
ADXL362 adxl362;
 23fac52:	2112      	movs	r1, #18
 23fac54:	4807      	ldr	r0, [pc, #28]	; (23fac74 <_GLOBAL__sub_I_logHandler+0x9c>)
 23fac56:	b00c      	add	sp, #48	; 0x30
 23fac58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ADXL362 adxl362;
 23fac5c:	f000 b80c 	b.w	23fac78 <_ZN7ADXL362C1Ei>
 23fac60:	1007ae1c 	.word	0x1007ae1c
 23fac64:	1007ae28 	.word	0x1007ae28
 23fac68:	023ffb28 	.word	0x023ffb28
 23fac6c:	023ffc80 	.word	0x023ffc80
 23fac70:	023ffb40 	.word	0x023ffb40
 23fac74:	1007ae24 	.word	0x1007ae24

023fac78 <_ZN7ADXL362C1Ei>:
#define XL362_FILTER_CTL    0x2C
#define XL362_POWER_CTL     0x2D
#define XL362_SELF_TEST     0x2E


ADXL362::ADXL362(int slaveSelectPin) : slaveSelectPin(uint16_t(slaveSelectPin)) {}
 23fac78:	8041      	strh	r1, [r0, #2]
 23fac7a:	4770      	bx	lr

023fac7c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 23fac7c:	b510      	push	{r4, lr}
 23fac7e:	ed2d 8b02 	vpush	{d8}
 23fac82:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23fac86:	f7ff f849 	bl	23f9d1c <__aeabi_i2d>
 23fac8a:	ec41 0b18 	vmov	d8, r0, r1
 23fac8e:	4620      	mov	r0, r4
 23fac90:	f7ff f856 	bl	23f9d40 <__aeabi_f2d>
 23fac94:	eeb0 1a48 	vmov.f32	s2, s16
 23fac98:	eef0 1a68 	vmov.f32	s3, s17
    }
 23fac9c:	ecbd 8b02 	vpop	{d8}
 23faca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
 23faca4:	ec41 0b10 	vmov	d0, r0, r1
 23faca8:	f003 b9fe 	b.w	23fe0a8 <pow>
 23facac:	0000      	movs	r0, r0
	...

023facb0 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>:
  output.println("\tz = "); output.print(Z);
#endif
}

void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23facb0:	ee07 1a90 	vmov	s15, r1
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23facb4:	b530      	push	{r4, r5, lr}
 23facb6:	ed2d 8b04 	vpush	{d8-d9}
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23facba:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 23facbe:	ee07 2a90 	vmov	s15, r2
 23facc2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23facc6:	ee08 3a10 	vmov	s16, r3
 23facca:	b083      	sub	sp, #12
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23faccc:	2002      	movs	r0, #2
 23facce:	eeb0 0a68 	vmov.f32	s0, s17
 23facd2:	f7ff ffd3 	bl	23fac7c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23facd6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23facda:	ec55 4b10 	vmov	r4, r5, d0
 23facde:	2002      	movs	r0, #2
 23face0:	eeb0 0a48 	vmov.f32	s0, s16
 23face4:	f7ff ffca 	bl	23fac7c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23face8:	4620      	mov	r0, r4
 23facea:	ec53 2b10 	vmov	r2, r3, d0
 23facee:	4629      	mov	r1, r5
 23facf0:	f7fe fec8 	bl	23f9a84 <__adddf3>
 23facf4:	ec41 0b10 	vmov	d0, r0, r1
 23facf8:	f003 faa8 	bl	23fe24c <sqrt>
      return atan2(__type(__y), __type(__x));
 23facfc:	ee19 0a10 	vmov	r0, s18
 23fad00:	ed8d 0b00 	vstr	d0, [sp]
 23fad04:	f7ff f81c 	bl	23f9d40 <__aeabi_f2d>
 23fad08:	ed9d 1b00 	vldr	d1, [sp]
 23fad0c:	ec41 0b10 	vmov	d0, r0, r1
 23fad10:	f003 f9c8 	bl	23fe0a4 <atan2>
 23fad14:	ec51 0b10 	vmov	r0, r1, d0
 23fad18:	f7ff fb3a 	bl	23fa390 <__aeabi_d2f>
  Rho *= 180/M_PI;
 23fad1c:	f7ff f810 	bl	23f9d40 <__aeabi_f2d>
 23fad20:	a337      	add	r3, pc, #220	; (adr r3, 23fae00 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad26:	f7ff f863 	bl	23f9df0 <__aeabi_dmul>
 23fad2a:	f7ff fb31 	bl	23fa390 <__aeabi_d2f>
 23fad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23fad30:	eeb0 0a49 	vmov.f32	s0, s18
  Rho *= 180/M_PI;
 23fad34:	6018      	str	r0, [r3, #0]
  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23fad36:	2002      	movs	r0, #2
 23fad38:	f7ff ffa0 	bl	23fac7c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fad3c:	2002      	movs	r0, #2
 23fad3e:	ec55 4b10 	vmov	r4, r5, d0
 23fad42:	eeb0 0a48 	vmov.f32	s0, s16
 23fad46:	f7ff ff99 	bl	23fac7c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fad4a:	4620      	mov	r0, r4
 23fad4c:	ec53 2b10 	vmov	r2, r3, d0
 23fad50:	4629      	mov	r1, r5
 23fad52:	f7fe fe97 	bl	23f9a84 <__adddf3>
 23fad56:	ec41 0b10 	vmov	d0, r0, r1
 23fad5a:	f003 fa77 	bl	23fe24c <sqrt>
 23fad5e:	ee18 0a90 	vmov	r0, s17
 23fad62:	ed8d 0b00 	vstr	d0, [sp]
 23fad66:	f7fe ffeb 	bl	23f9d40 <__aeabi_f2d>
 23fad6a:	ed9d 1b00 	vldr	d1, [sp]
 23fad6e:	ec41 0b10 	vmov	d0, r0, r1
 23fad72:	f003 f997 	bl	23fe0a4 <atan2>
 23fad76:	ec51 0b10 	vmov	r0, r1, d0
 23fad7a:	f7ff fb09 	bl	23fa390 <__aeabi_d2f>
  Phi *= 180/M_PI;
 23fad7e:	f7fe ffdf 	bl	23f9d40 <__aeabi_f2d>
 23fad82:	a31f      	add	r3, pc, #124	; (adr r3, 23fae00 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad88:	f7ff f832 	bl	23f9df0 <__aeabi_dmul>
 23fad8c:	f7ff fb00 	bl	23fa390 <__aeabi_d2f>
 23fad90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23fad92:	eeb0 0a49 	vmov.f32	s0, s18
  Phi *= 180/M_PI;
 23fad96:	6018      	str	r0, [r3, #0]
  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23fad98:	2002      	movs	r0, #2
 23fad9a:	f7ff ff6f 	bl	23fac7c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fad9e:	2002      	movs	r0, #2
 23fada0:	ec55 4b10 	vmov	r4, r5, d0
 23fada4:	eeb0 0a68 	vmov.f32	s0, s17
 23fada8:	f7ff ff68 	bl	23fac7c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fadac:	4620      	mov	r0, r4
 23fadae:	ec53 2b10 	vmov	r2, r3, d0
 23fadb2:	4629      	mov	r1, r5
 23fadb4:	f7fe fe66 	bl	23f9a84 <__adddf3>
 23fadb8:	ec41 0b10 	vmov	d0, r0, r1
 23fadbc:	f003 fa46 	bl	23fe24c <sqrt>
 23fadc0:	ee18 0a10 	vmov	r0, s16
 23fadc4:	ed8d 0b00 	vstr	d0, [sp]
 23fadc8:	f7fe ffba 	bl	23f9d40 <__aeabi_f2d>
 23fadcc:	ed9d 0b00 	vldr	d0, [sp]
 23fadd0:	ec41 0b11 	vmov	d1, r0, r1
 23fadd4:	f003 f966 	bl	23fe0a4 <atan2>
 23fadd8:	ec51 0b10 	vmov	r0, r1, d0
 23faddc:	f7ff fad8 	bl	23fa390 <__aeabi_d2f>
  Theta *= 180/M_PI;
 23fade0:	f7fe ffae 	bl	23f9d40 <__aeabi_f2d>
 23fade4:	a306      	add	r3, pc, #24	; (adr r3, 23fae00 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fadea:	f7ff f801 	bl	23f9df0 <__aeabi_dmul>
 23fadee:	f7ff facf 	bl	23fa390 <__aeabi_d2f>
 23fadf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fadf4:	6018      	str	r0, [r3, #0]
}
 23fadf6:	b003      	add	sp, #12
 23fadf8:	ecbd 8b04 	vpop	{d8-d9}
 23fadfc:	bd30      	pop	{r4, r5, pc}
 23fadfe:	bf00      	nop
 23fae00:	1a63c1f8 	.word	0x1a63c1f8
 23fae04:	404ca5dc 	.word	0x404ca5dc

023fae08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fae08:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fae0a:	4c0a      	ldr	r4, [pc, #40]	; (23fae34 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fae0c:	e8d4 1f8f 	ldab	r1, [r4]
 23fae10:	f011 0101 	ands.w	r1, r1, #1
 23fae14:	d10b      	bne.n	23fae2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fae16:	4620      	mov	r0, r4
 23fae18:	9101      	str	r1, [sp, #4]
 23fae1a:	f7ff fcf9 	bl	23fa810 <__cxa_guard_acquire>
 23fae1e:	9901      	ldr	r1, [sp, #4]
 23fae20:	b128      	cbz	r0, 23fae2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fae22:	4805      	ldr	r0, [pc, #20]	; (23fae38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fae24:	f002 fbfa 	bl	23fd61c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fae28:	4620      	mov	r0, r4
 23fae2a:	f7ff fcf6 	bl	23fa81a <__cxa_guard_release>
        return instance;
    }
 23fae2e:	4802      	ldr	r0, [pc, #8]	; (23fae38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fae30:	b002      	add	sp, #8
 23fae32:	bd10      	pop	{r4, pc}
 23fae34:	1007ae4c 	.word	0x1007ae4c
 23fae38:	1007ae50 	.word	0x1007ae50

023fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 23fae3c:	b507      	push	{r0, r1, r2, lr}
 23fae3e:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
 23fae40:	f7ff ffe2 	bl	23fae08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fae44:	9901      	ldr	r1, [sp, #4]
    }
 23fae46:	b003      	add	sp, #12
 23fae48:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
 23fae4c:	f002 bc18 	b.w	23fd680 <_ZN8SPIClass8transferEh>

023fae50 <_ZN7ADXL36219SPIwriteOneRegisterEhh>:
  digitalWrite(slaveSelectPin, HIGH);

  return regValue;
}

void ADXL362::SPIwriteOneRegister(uint8_t regAddress, uint8_t regValue){
 23fae50:	b570      	push	{r4, r5, r6, lr}
 23fae52:	460e      	mov	r6, r1
 23fae54:	4615      	mov	r5, r2
 23fae56:	4604      	mov	r4, r0

  digitalWrite(slaveSelectPin, LOW);
 23fae58:	2100      	movs	r1, #0
 23fae5a:	8840      	ldrh	r0, [r0, #2]
 23fae5c:	f003 f801 	bl	23fde62 <digitalWrite>
  SPI.transfer(0x0A);  // write instruction
 23fae60:	200a      	movs	r0, #10
 23fae62:	f7ff ffeb 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fae66:	4630      	mov	r0, r6
 23fae68:	f7ff ffe8 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regValue);
 23fae6c:	4628      	mov	r0, r5
 23fae6e:	f7ff ffe5 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  digitalWrite(slaveSelectPin, HIGH);
 23fae72:	8860      	ldrh	r0, [r4, #2]
 23fae74:	2101      	movs	r1, #1
}
 23fae76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(slaveSelectPin, HIGH);
 23fae7a:	f002 bff2 	b.w	23fde62 <digitalWrite>

023fae7e <_ZN7ADXL36218SPIreadOneRegisterEh>:
uint8_t ADXL362::SPIreadOneRegister(uint8_t regAddress){
 23fae7e:	b538      	push	{r3, r4, r5, lr}
 23fae80:	460d      	mov	r5, r1
 23fae82:	4604      	mov	r4, r0
  digitalWrite(slaveSelectPin, LOW);
 23fae84:	2100      	movs	r1, #0
 23fae86:	8840      	ldrh	r0, [r0, #2]
 23fae88:	f002 ffeb 	bl	23fde62 <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fae8c:	200b      	movs	r0, #11
 23fae8e:	f7ff ffd5 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fae92:	4628      	mov	r0, r5
 23fae94:	f7ff ffd2 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  regValue = SPI.transfer(0x00);
 23fae98:	2000      	movs	r0, #0
 23fae9a:	f7ff ffcf 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fae9e:	4605      	mov	r5, r0
  digitalWrite(slaveSelectPin, HIGH);
 23faea0:	2101      	movs	r1, #1
 23faea2:	8860      	ldrh	r0, [r4, #2]
 23faea4:	f002 ffdd 	bl	23fde62 <digitalWrite>
}
 23faea8:	4628      	mov	r0, r5
 23faeaa:	bd38      	pop	{r3, r4, r5, pc}

023faeac <_ZN7ADXL36212beginMeasureEv>:
void ADXL362::beginMeasure() {
 23faeac:	b510      	push	{r4, lr}
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23faeae:	212d      	movs	r1, #45	; 0x2d
void ADXL362::beginMeasure() {
 23faeb0:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23faeb2:	f7ff ffe4 	bl	23fae7e <_ZN7ADXL36218SPIreadOneRegisterEh>
  temp = (temp & 0b11111100) | XL362_POWER_FLAG_MEASURE_RUNING;     // turn on measurement bit in Reg XL362_POWER_CTL
 23faeb6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  SPIwriteOneRegister(XL362_POWER_CTL, temp); // Write to XL362_POWER_CTL, Measurement Mode
 23faeba:	f040 0202 	orr.w	r2, r0, #2
 23faebe:	212d      	movs	r1, #45	; 0x2d
 23faec0:	4620      	mov	r0, r4
 23faec2:	f7ff ffc5 	bl	23fae50 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23faec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23faeca:	200a      	movs	r0, #10
 23faecc:	f000 bcfe 	b.w	23fb8cc <delay>

023faed0 <_ZN7ADXL3628setRangeEh>:
void ADXL362::setRange(uint8_t Range){
 23faed0:	b538      	push	{r3, r4, r5, lr}
 23faed2:	460d      	mov	r5, r1
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23faed4:	212c      	movs	r1, #44	; 0x2c
void ADXL362::setRange(uint8_t Range){
 23faed6:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23faed8:	f7ff ffd1 	bl	23fae7e <_ZN7ADXL36218SPIreadOneRegisterEh>
  switch ( Range ) { // Range affects converting LSB to mg
 23faedc:	2d40      	cmp	r5, #64	; 0x40
 23faede:	d00f      	beq.n	23faf00 <_ZN7ADXL3628setRangeEh+0x30>
 23faee0:	2d80      	cmp	r5, #128	; 0x80
 23faee2:	d00f      	beq.n	23faf04 <_ZN7ADXL3628setRangeEh+0x34>
    mgperLSB = 1;
 23faee4:	2301      	movs	r3, #1
  temp = (temp & 0b00111111) | Range;
 23faee6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    mgperLSB = 4;
 23faeea:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_FILTER_CTL, temp); // Write to XL362_FILTER_CTL
 23faeec:	4620      	mov	r0, r4
 23faeee:	432a      	orrs	r2, r5
 23faef0:	212c      	movs	r1, #44	; 0x2c
 23faef2:	f7ff ffad 	bl	23fae50 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23faef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
 23faefa:	200a      	movs	r0, #10
 23faefc:	f000 bce6 	b.w	23fb8cc <delay>
    mgperLSB = 2;
 23faf00:	2302      	movs	r3, #2
 23faf02:	e7f0      	b.n	23faee6 <_ZN7ADXL3628setRangeEh+0x16>
    mgperLSB = 4;
 23faf04:	2304      	movs	r3, #4
 23faf06:	e7ee      	b.n	23faee6 <_ZN7ADXL3628setRangeEh+0x16>

023faf08 <_ZN7ADXL3629readXYZmgERiS0_S0_>:
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23faf08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faf0c:	4604      	mov	r4, r0
 23faf0e:	468b      	mov	fp, r1
  digitalWrite(slaveSelectPin, LOW);
 23faf10:	8840      	ldrh	r0, [r0, #2]
 23faf12:	2100      	movs	r1, #0
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23faf14:	4691      	mov	r9, r2
 23faf16:	4698      	mov	r8, r3
  digitalWrite(slaveSelectPin, LOW);
 23faf18:	f002 ffa3 	bl	23fde62 <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23faf1c:	200b      	movs	r0, #11
 23faf1e:	f7ff ff8d 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(XL362_XDATA_L);  // Start at XData Reg
 23faf22:	200e      	movs	r0, #14
 23faf24:	f7ff ff8a 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  short XData = SPI.transfer(0x00);
 23faf28:	2000      	movs	r0, #0
 23faf2a:	f7ff ff87 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23faf2e:	4607      	mov	r7, r0
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23faf30:	2000      	movs	r0, #0
 23faf32:	f7ff ff83 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23faf36:	9001      	str	r0, [sp, #4]
  short YData = SPI.transfer(0x00);
 23faf38:	2000      	movs	r0, #0
 23faf3a:	f7ff ff7f 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23faf3e:	4606      	mov	r6, r0
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23faf40:	2000      	movs	r0, #0
 23faf42:	f7ff ff7b 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23faf46:	9000      	str	r0, [sp, #0]
  short ZData = SPI.transfer(0x00);
 23faf48:	2000      	movs	r0, #0
 23faf4a:	f7ff ff77 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23faf4e:	4605      	mov	r5, r0
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23faf50:	2000      	movs	r0, #0
 23faf52:	f7ff ff73 	bl	23fae3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23faf56:	4682      	mov	sl, r0
  digitalWrite(slaveSelectPin, HIGH);
 23faf58:	2101      	movs	r1, #1
 23faf5a:	8860      	ldrh	r0, [r4, #2]
 23faf5c:	f002 ff81 	bl	23fde62 <digitalWrite>
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23faf60:	9a01      	ldr	r2, [sp, #4]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23faf62:	9b00      	ldr	r3, [sp, #0]
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23faf64:	eb07 2702 	add.w	r7, r7, r2, lsl #8
  X = (int)XData * mgperLSB;
 23faf68:	7822      	ldrb	r2, [r4, #0]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23faf6a:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  X = (int)XData * mgperLSB;
 23faf6e:	fb12 f707 	smulbb	r7, r2, r7
 23faf72:	f8cb 7000 	str.w	r7, [fp]
  Y = (int)YData * mgperLSB;
 23faf76:	7823      	ldrb	r3, [r4, #0]
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23faf78:	eb05 250a 	add.w	r5, r5, sl, lsl #8
  Y = (int)YData * mgperLSB;
 23faf7c:	fb13 f606 	smulbb	r6, r3, r6
 23faf80:	f8c9 6000 	str.w	r6, [r9]
  Z = (int)ZData * mgperLSB;
 23faf84:	7822      	ldrb	r2, [r4, #0]
 23faf86:	fb12 f505 	smulbb	r5, r2, r5
 23faf8a:	f8c8 5000 	str.w	r5, [r8]
}
 23faf8e:	b003      	add	sp, #12
 23faf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023faf94 <_ZN7ADXL3625beginEv>:
void ADXL362::begin() {
 23faf94:	b510      	push	{r4, lr}
  pinMode(slaveSelectPin, OUTPUT);
 23faf96:	2101      	movs	r1, #1
void ADXL362::begin() {
 23faf98:	4604      	mov	r4, r0
  pinMode(slaveSelectPin, OUTPUT);
 23faf9a:	8840      	ldrh	r0, [r0, #2]
 23faf9c:	f002 ff50 	bl	23fde40 <pinMode>
        instance().begin();
 23fafa0:	f7ff ff32 	bl	23fae08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fafa4:	f002 fb44 	bl	23fd630 <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
 23fafa8:	f7ff ff2e 	bl	23fae08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fafac:	2100      	movs	r1, #0
 23fafae:	f002 fb53 	bl	23fd658 <_ZN8SPIClass11setDataModeEh>
  delay(500);
 23fafb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fafb6:	f000 fc89 	bl	23fb8cc <delay>
  mgperLSB = 1;
 23fafba:	2301      	movs	r3, #1
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fafbc:	4620      	mov	r0, r4
  mgperLSB = 1;
 23fafbe:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fafc0:	2252      	movs	r2, #82	; 0x52
 23fafc2:	211f      	movs	r1, #31
 23fafc4:	f7ff ff44 	bl	23fae50 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
 }
 23fafc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23fafcc:	200a      	movs	r0, #10
 23fafce:	f000 bc7d 	b.w	23fb8cc <delay>
	...

023fafd4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fafd4:	b509      	push	{r0, r3, lr}
 23fafd6:	4804      	ldr	r0, [pc, #16]	; (23fafe8 <os_mutex_recursive_create+0x14>)
 23fafd8:	6800      	ldr	r0, [r0, #0]
 23fafda:	4b04      	ldr	r3, [pc, #16]	; (23fafec <os_mutex_recursive_create+0x18>)
 23fafdc:	4403      	add	r3, r0
 23fafde:	681b      	ldr	r3, [r3, #0]
 23fafe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fafe2:	9302      	str	r3, [sp, #8]
 23fafe4:	bd09      	pop	{r0, r3, pc}
 23fafe6:	0000      	.short	0x0000
 23fafe8:	1007ada0 	.word	0x1007ada0
 23fafec:	00000030 	.word	0x00000030

023faff0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23faff0:	b509      	push	{r0, r3, lr}
 23faff2:	4804      	ldr	r0, [pc, #16]	; (23fb004 <os_mutex_recursive_destroy+0x14>)
 23faff4:	6800      	ldr	r0, [r0, #0]
 23faff6:	4b04      	ldr	r3, [pc, #16]	; (23fb008 <os_mutex_recursive_destroy+0x18>)
 23faff8:	4403      	add	r3, r0
 23faffa:	681b      	ldr	r3, [r3, #0]
 23faffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23faffe:	9302      	str	r3, [sp, #8]
 23fb000:	bd09      	pop	{r0, r3, pc}
 23fb002:	0000      	.short	0x0000
 23fb004:	1007ada0 	.word	0x1007ada0
 23fb008:	00000030 	.word	0x00000030

023fb00c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fb00c:	b509      	push	{r0, r3, lr}
 23fb00e:	4804      	ldr	r0, [pc, #16]	; (23fb020 <os_mutex_recursive_lock+0x14>)
 23fb010:	6800      	ldr	r0, [r0, #0]
 23fb012:	4b04      	ldr	r3, [pc, #16]	; (23fb024 <os_mutex_recursive_lock+0x18>)
 23fb014:	4403      	add	r3, r0
 23fb016:	681b      	ldr	r3, [r3, #0]
 23fb018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb01a:	9302      	str	r3, [sp, #8]
 23fb01c:	bd09      	pop	{r0, r3, pc}
 23fb01e:	0000      	.short	0x0000
 23fb020:	1007ada0 	.word	0x1007ada0
 23fb024:	00000030 	.word	0x00000030

023fb028 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fb028:	b509      	push	{r0, r3, lr}
 23fb02a:	4804      	ldr	r0, [pc, #16]	; (23fb03c <os_mutex_recursive_unlock+0x14>)
 23fb02c:	6800      	ldr	r0, [r0, #0]
 23fb02e:	4b04      	ldr	r3, [pc, #16]	; (23fb040 <os_mutex_recursive_unlock+0x18>)
 23fb030:	4403      	add	r3, r0
 23fb032:	681b      	ldr	r3, [r3, #0]
 23fb034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb036:	9302      	str	r3, [sp, #8]
 23fb038:	bd09      	pop	{r0, r3, pc}
 23fb03a:	0000      	.short	0x0000
 23fb03c:	1007ada0 	.word	0x1007ada0
 23fb040:	00000030 	.word	0x00000030

023fb044 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fb044:	b509      	push	{r0, r3, lr}
 23fb046:	4804      	ldr	r0, [pc, #16]	; (23fb058 <HAL_RNG_GetRandomNumber+0x14>)
 23fb048:	6800      	ldr	r0, [r0, #0]
 23fb04a:	4b04      	ldr	r3, [pc, #16]	; (23fb05c <HAL_RNG_GetRandomNumber+0x18>)
 23fb04c:	4403      	add	r3, r0
 23fb04e:	681b      	ldr	r3, [r3, #0]
 23fb050:	685b      	ldr	r3, [r3, #4]
 23fb052:	9302      	str	r3, [sp, #8]
 23fb054:	bd09      	pop	{r0, r3, pc}
 23fb056:	0000      	.short	0x0000
 23fb058:	1007ada0 	.word	0x1007ada0
 23fb05c:	00000000 	.word	0x00000000

023fb060 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fb060:	b509      	push	{r0, r3, lr}
 23fb062:	4804      	ldr	r0, [pc, #16]	; (23fb074 <HAL_Delay_Microseconds+0x14>)
 23fb064:	6800      	ldr	r0, [r0, #0]
 23fb066:	4b04      	ldr	r3, [pc, #16]	; (23fb078 <HAL_Delay_Microseconds+0x18>)
 23fb068:	4403      	add	r3, r0
 23fb06a:	681b      	ldr	r3, [r3, #0]
 23fb06c:	68db      	ldr	r3, [r3, #12]
 23fb06e:	9302      	str	r3, [sp, #8]
 23fb070:	bd09      	pop	{r0, r3, pc}
 23fb072:	0000      	.short	0x0000
 23fb074:	1007ada0 	.word	0x1007ada0
 23fb078:	00000000 	.word	0x00000000

023fb07c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fb07c:	b509      	push	{r0, r3, lr}
 23fb07e:	4804      	ldr	r0, [pc, #16]	; (23fb090 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fb080:	6800      	ldr	r0, [r0, #0]
 23fb082:	4b04      	ldr	r3, [pc, #16]	; (23fb094 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fb084:	4403      	add	r3, r0
 23fb086:	681b      	ldr	r3, [r3, #0]
 23fb088:	695b      	ldr	r3, [r3, #20]
 23fb08a:	9302      	str	r3, [sp, #8]
 23fb08c:	bd09      	pop	{r0, r3, pc}
 23fb08e:	0000      	.short	0x0000
 23fb090:	1007ada0 	.word	0x1007ada0
 23fb094:	00000000 	.word	0x00000000

023fb098 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fb098:	b509      	push	{r0, r3, lr}
 23fb09a:	4804      	ldr	r0, [pc, #16]	; (23fb0ac <hal_timer_millis+0x14>)
 23fb09c:	6800      	ldr	r0, [r0, #0]
 23fb09e:	4b04      	ldr	r3, [pc, #16]	; (23fb0b0 <hal_timer_millis+0x18>)
 23fb0a0:	4403      	add	r3, r0
 23fb0a2:	681b      	ldr	r3, [r3, #0]
 23fb0a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fb0a6:	9302      	str	r3, [sp, #8]
 23fb0a8:	bd09      	pop	{r0, r3, pc}
 23fb0aa:	0000      	.short	0x0000
 23fb0ac:	1007ada0 	.word	0x1007ada0
 23fb0b0:	00000000 	.word	0x00000000

023fb0b4 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fb0b4:	b509      	push	{r0, r3, lr}
 23fb0b6:	4804      	ldr	r0, [pc, #16]	; (23fb0c8 <hal_gpio_mode+0x14>)
 23fb0b8:	6800      	ldr	r0, [r0, #0]
 23fb0ba:	4b04      	ldr	r3, [pc, #16]	; (23fb0cc <hal_gpio_mode+0x18>)
 23fb0bc:	4403      	add	r3, r0
 23fb0be:	681b      	ldr	r3, [r3, #0]
 23fb0c0:	689b      	ldr	r3, [r3, #8]
 23fb0c2:	9302      	str	r3, [sp, #8]
 23fb0c4:	bd09      	pop	{r0, r3, pc}
 23fb0c6:	0000      	.short	0x0000
 23fb0c8:	1007ada0 	.word	0x1007ada0
 23fb0cc:	00000014 	.word	0x00000014

023fb0d0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fb0d0:	b509      	push	{r0, r3, lr}
 23fb0d2:	4804      	ldr	r0, [pc, #16]	; (23fb0e4 <hal_gpio_get_mode+0x14>)
 23fb0d4:	6800      	ldr	r0, [r0, #0]
 23fb0d6:	4b04      	ldr	r3, [pc, #16]	; (23fb0e8 <hal_gpio_get_mode+0x18>)
 23fb0d8:	4403      	add	r3, r0
 23fb0da:	681b      	ldr	r3, [r3, #0]
 23fb0dc:	68db      	ldr	r3, [r3, #12]
 23fb0de:	9302      	str	r3, [sp, #8]
 23fb0e0:	bd09      	pop	{r0, r3, pc}
 23fb0e2:	0000      	.short	0x0000
 23fb0e4:	1007ada0 	.word	0x1007ada0
 23fb0e8:	00000014 	.word	0x00000014

023fb0ec <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fb0ec:	b509      	push	{r0, r3, lr}
 23fb0ee:	4804      	ldr	r0, [pc, #16]	; (23fb100 <hal_gpio_write+0x14>)
 23fb0f0:	6800      	ldr	r0, [r0, #0]
 23fb0f2:	4b04      	ldr	r3, [pc, #16]	; (23fb104 <hal_gpio_write+0x18>)
 23fb0f4:	4403      	add	r3, r0
 23fb0f6:	681b      	ldr	r3, [r3, #0]
 23fb0f8:	691b      	ldr	r3, [r3, #16]
 23fb0fa:	9302      	str	r3, [sp, #8]
 23fb0fc:	bd09      	pop	{r0, r3, pc}
 23fb0fe:	0000      	.short	0x0000
 23fb100:	1007ada0 	.word	0x1007ada0
 23fb104:	00000014 	.word	0x00000014

023fb108 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fb108:	b509      	push	{r0, r3, lr}
 23fb10a:	4804      	ldr	r0, [pc, #16]	; (23fb11c <hal_i2c_write+0x14>)
 23fb10c:	6800      	ldr	r0, [r0, #0]
 23fb10e:	4b04      	ldr	r3, [pc, #16]	; (23fb120 <hal_i2c_write+0x18>)
 23fb110:	4403      	add	r3, r0
 23fb112:	681b      	ldr	r3, [r3, #0]
 23fb114:	6a1b      	ldr	r3, [r3, #32]
 23fb116:	9302      	str	r3, [sp, #8]
 23fb118:	bd09      	pop	{r0, r3, pc}
 23fb11a:	0000      	.short	0x0000
 23fb11c:	1007ada0 	.word	0x1007ada0
 23fb120:	00000010 	.word	0x00000010

023fb124 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fb124:	b509      	push	{r0, r3, lr}
 23fb126:	4804      	ldr	r0, [pc, #16]	; (23fb138 <hal_i2c_available+0x14>)
 23fb128:	6800      	ldr	r0, [r0, #0]
 23fb12a:	4b04      	ldr	r3, [pc, #16]	; (23fb13c <hal_i2c_available+0x18>)
 23fb12c:	4403      	add	r3, r0
 23fb12e:	681b      	ldr	r3, [r3, #0]
 23fb130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb132:	9302      	str	r3, [sp, #8]
 23fb134:	bd09      	pop	{r0, r3, pc}
 23fb136:	0000      	.short	0x0000
 23fb138:	1007ada0 	.word	0x1007ada0
 23fb13c:	00000010 	.word	0x00000010

023fb140 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fb140:	b509      	push	{r0, r3, lr}
 23fb142:	4804      	ldr	r0, [pc, #16]	; (23fb154 <hal_i2c_read+0x14>)
 23fb144:	6800      	ldr	r0, [r0, #0]
 23fb146:	4b04      	ldr	r3, [pc, #16]	; (23fb158 <hal_i2c_read+0x18>)
 23fb148:	4403      	add	r3, r0
 23fb14a:	681b      	ldr	r3, [r3, #0]
 23fb14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb14e:	9302      	str	r3, [sp, #8]
 23fb150:	bd09      	pop	{r0, r3, pc}
 23fb152:	0000      	.short	0x0000
 23fb154:	1007ada0 	.word	0x1007ada0
 23fb158:	00000010 	.word	0x00000010

023fb15c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fb15c:	b509      	push	{r0, r3, lr}
 23fb15e:	4804      	ldr	r0, [pc, #16]	; (23fb170 <hal_i2c_peek+0x14>)
 23fb160:	6800      	ldr	r0, [r0, #0]
 23fb162:	4b04      	ldr	r3, [pc, #16]	; (23fb174 <hal_i2c_peek+0x18>)
 23fb164:	4403      	add	r3, r0
 23fb166:	681b      	ldr	r3, [r3, #0]
 23fb168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb16a:	9302      	str	r3, [sp, #8]
 23fb16c:	bd09      	pop	{r0, r3, pc}
 23fb16e:	0000      	.short	0x0000
 23fb170:	1007ada0 	.word	0x1007ada0
 23fb174:	00000010 	.word	0x00000010

023fb178 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fb178:	b509      	push	{r0, r3, lr}
 23fb17a:	4804      	ldr	r0, [pc, #16]	; (23fb18c <hal_i2c_flush+0x14>)
 23fb17c:	6800      	ldr	r0, [r0, #0]
 23fb17e:	4b04      	ldr	r3, [pc, #16]	; (23fb190 <hal_i2c_flush+0x18>)
 23fb180:	4403      	add	r3, r0
 23fb182:	681b      	ldr	r3, [r3, #0]
 23fb184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb186:	9302      	str	r3, [sp, #8]
 23fb188:	bd09      	pop	{r0, r3, pc}
 23fb18a:	0000      	.short	0x0000
 23fb18c:	1007ada0 	.word	0x1007ada0
 23fb190:	00000010 	.word	0x00000010

023fb194 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fb194:	b509      	push	{r0, r3, lr}
 23fb196:	4804      	ldr	r0, [pc, #16]	; (23fb1a8 <hal_i2c_is_enabled+0x14>)
 23fb198:	6800      	ldr	r0, [r0, #0]
 23fb19a:	4b04      	ldr	r3, [pc, #16]	; (23fb1ac <hal_i2c_is_enabled+0x18>)
 23fb19c:	4403      	add	r3, r0
 23fb19e:	681b      	ldr	r3, [r3, #0]
 23fb1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb1a2:	9302      	str	r3, [sp, #8]
 23fb1a4:	bd09      	pop	{r0, r3, pc}
 23fb1a6:	0000      	.short	0x0000
 23fb1a8:	1007ada0 	.word	0x1007ada0
 23fb1ac:	00000010 	.word	0x00000010

023fb1b0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fb1b0:	b509      	push	{r0, r3, lr}
 23fb1b2:	4804      	ldr	r0, [pc, #16]	; (23fb1c4 <hal_i2c_init+0x14>)
 23fb1b4:	6800      	ldr	r0, [r0, #0]
 23fb1b6:	4b04      	ldr	r3, [pc, #16]	; (23fb1c8 <hal_i2c_init+0x18>)
 23fb1b8:	4403      	add	r3, r0
 23fb1ba:	681b      	ldr	r3, [r3, #0]
 23fb1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb1be:	9302      	str	r3, [sp, #8]
 23fb1c0:	bd09      	pop	{r0, r3, pc}
 23fb1c2:	0000      	.short	0x0000
 23fb1c4:	1007ada0 	.word	0x1007ada0
 23fb1c8:	00000010 	.word	0x00000010

023fb1cc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fb1cc:	b509      	push	{r0, r3, lr}
 23fb1ce:	4804      	ldr	r0, [pc, #16]	; (23fb1e0 <inet_inet_ntop+0x14>)
 23fb1d0:	6800      	ldr	r0, [r0, #0]
 23fb1d2:	4b04      	ldr	r3, [pc, #16]	; (23fb1e4 <inet_inet_ntop+0x18>)
 23fb1d4:	4403      	add	r3, r0
 23fb1d6:	681b      	ldr	r3, [r3, #0]
 23fb1d8:	695b      	ldr	r3, [r3, #20]
 23fb1da:	9302      	str	r3, [sp, #8]
 23fb1dc:	bd09      	pop	{r0, r3, pc}
 23fb1de:	0000      	.short	0x0000
 23fb1e0:	1007ada0 	.word	0x1007ada0
 23fb1e4:	0000004c 	.word	0x0000004c

023fb1e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fb1e8:	b509      	push	{r0, r3, lr}
 23fb1ea:	4804      	ldr	r0, [pc, #16]	; (23fb1fc <netdb_freeaddrinfo+0x14>)
 23fb1ec:	6800      	ldr	r0, [r0, #0]
 23fb1ee:	4b04      	ldr	r3, [pc, #16]	; (23fb200 <netdb_freeaddrinfo+0x18>)
 23fb1f0:	4403      	add	r3, r0
 23fb1f2:	681b      	ldr	r3, [r3, #0]
 23fb1f4:	689b      	ldr	r3, [r3, #8]
 23fb1f6:	9302      	str	r3, [sp, #8]
 23fb1f8:	bd09      	pop	{r0, r3, pc}
 23fb1fa:	0000      	.short	0x0000
 23fb1fc:	1007ada0 	.word	0x1007ada0
 23fb200:	00000050 	.word	0x00000050

023fb204 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fb204:	b509      	push	{r0, r3, lr}
 23fb206:	4804      	ldr	r0, [pc, #16]	; (23fb218 <netdb_getaddrinfo+0x14>)
 23fb208:	6800      	ldr	r0, [r0, #0]
 23fb20a:	4b04      	ldr	r3, [pc, #16]	; (23fb21c <netdb_getaddrinfo+0x18>)
 23fb20c:	4403      	add	r3, r0
 23fb20e:	681b      	ldr	r3, [r3, #0]
 23fb210:	68db      	ldr	r3, [r3, #12]
 23fb212:	9302      	str	r3, [sp, #8]
 23fb214:	bd09      	pop	{r0, r3, pc}
 23fb216:	0000      	.short	0x0000
 23fb218:	1007ada0 	.word	0x1007ada0
 23fb21c:	00000050 	.word	0x00000050

023fb220 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fb220:	b509      	push	{r0, r3, lr}
 23fb222:	4804      	ldr	r0, [pc, #16]	; (23fb234 <hal_spi_begin+0x14>)
 23fb224:	6800      	ldr	r0, [r0, #0]
 23fb226:	4b04      	ldr	r3, [pc, #16]	; (23fb238 <hal_spi_begin+0x18>)
 23fb228:	4403      	add	r3, r0
 23fb22a:	681b      	ldr	r3, [r3, #0]
 23fb22c:	681b      	ldr	r3, [r3, #0]
 23fb22e:	9302      	str	r3, [sp, #8]
 23fb230:	bd09      	pop	{r0, r3, pc}
 23fb232:	0000      	.short	0x0000
 23fb234:	1007ada0 	.word	0x1007ada0
 23fb238:	00000018 	.word	0x00000018

023fb23c <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fb23c:	b509      	push	{r0, r3, lr}
 23fb23e:	4804      	ldr	r0, [pc, #16]	; (23fb250 <hal_spi_set_data_mode+0x14>)
 23fb240:	6800      	ldr	r0, [r0, #0]
 23fb242:	4b04      	ldr	r3, [pc, #16]	; (23fb254 <hal_spi_set_data_mode+0x18>)
 23fb244:	4403      	add	r3, r0
 23fb246:	681b      	ldr	r3, [r3, #0]
 23fb248:	68db      	ldr	r3, [r3, #12]
 23fb24a:	9302      	str	r3, [sp, #8]
 23fb24c:	bd09      	pop	{r0, r3, pc}
 23fb24e:	0000      	.short	0x0000
 23fb250:	1007ada0 	.word	0x1007ada0
 23fb254:	00000018 	.word	0x00000018

023fb258 <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fb258:	b509      	push	{r0, r3, lr}
 23fb25a:	4804      	ldr	r0, [pc, #16]	; (23fb26c <hal_spi_transfer+0x14>)
 23fb25c:	6800      	ldr	r0, [r0, #0]
 23fb25e:	4b04      	ldr	r3, [pc, #16]	; (23fb270 <hal_spi_transfer+0x18>)
 23fb260:	4403      	add	r3, r0
 23fb262:	681b      	ldr	r3, [r3, #0]
 23fb264:	695b      	ldr	r3, [r3, #20]
 23fb266:	9302      	str	r3, [sp, #8]
 23fb268:	bd09      	pop	{r0, r3, pc}
 23fb26a:	0000      	.short	0x0000
 23fb26c:	1007ada0 	.word	0x1007ada0
 23fb270:	00000018 	.word	0x00000018

023fb274 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fb274:	b509      	push	{r0, r3, lr}
 23fb276:	4804      	ldr	r0, [pc, #16]	; (23fb288 <hal_spi_init+0x14>)
 23fb278:	6800      	ldr	r0, [r0, #0]
 23fb27a:	4b04      	ldr	r3, [pc, #16]	; (23fb28c <hal_spi_init+0x18>)
 23fb27c:	4403      	add	r3, r0
 23fb27e:	681b      	ldr	r3, [r3, #0]
 23fb280:	69db      	ldr	r3, [r3, #28]
 23fb282:	9302      	str	r3, [sp, #8]
 23fb284:	bd09      	pop	{r0, r3, pc}
 23fb286:	0000      	.short	0x0000
 23fb288:	1007ada0 	.word	0x1007ada0
 23fb28c:	00000018 	.word	0x00000018

023fb290 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fb290:	b509      	push	{r0, r3, lr}
 23fb292:	4804      	ldr	r0, [pc, #16]	; (23fb2a4 <hal_spi_is_enabled+0x14>)
 23fb294:	6800      	ldr	r0, [r0, #0]
 23fb296:	4b04      	ldr	r3, [pc, #16]	; (23fb2a8 <hal_spi_is_enabled+0x18>)
 23fb298:	4403      	add	r3, r0
 23fb29a:	681b      	ldr	r3, [r3, #0]
 23fb29c:	6a1b      	ldr	r3, [r3, #32]
 23fb29e:	9302      	str	r3, [sp, #8]
 23fb2a0:	bd09      	pop	{r0, r3, pc}
 23fb2a2:	0000      	.short	0x0000
 23fb2a4:	1007ada0 	.word	0x1007ada0
 23fb2a8:	00000018 	.word	0x00000018

023fb2ac <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fb2ac:	b509      	push	{r0, r3, lr}
 23fb2ae:	4804      	ldr	r0, [pc, #16]	; (23fb2c0 <hal_spi_acquire+0x14>)
 23fb2b0:	6800      	ldr	r0, [r0, #0]
 23fb2b2:	4b04      	ldr	r3, [pc, #16]	; (23fb2c4 <hal_spi_acquire+0x18>)
 23fb2b4:	4403      	add	r3, r0
 23fb2b6:	681b      	ldr	r3, [r3, #0]
 23fb2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb2ba:	9302      	str	r3, [sp, #8]
 23fb2bc:	bd09      	pop	{r0, r3, pc}
 23fb2be:	0000      	.short	0x0000
 23fb2c0:	1007ada0 	.word	0x1007ada0
 23fb2c4:	00000018 	.word	0x00000018

023fb2c8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fb2c8:	b509      	push	{r0, r3, lr}
 23fb2ca:	4804      	ldr	r0, [pc, #16]	; (23fb2dc <hal_spi_release+0x14>)
 23fb2cc:	6800      	ldr	r0, [r0, #0]
 23fb2ce:	4b04      	ldr	r3, [pc, #16]	; (23fb2e0 <hal_spi_release+0x18>)
 23fb2d0:	4403      	add	r3, r0
 23fb2d2:	681b      	ldr	r3, [r3, #0]
 23fb2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb2d6:	9302      	str	r3, [sp, #8]
 23fb2d8:	bd09      	pop	{r0, r3, pc}
 23fb2da:	0000      	.short	0x0000
 23fb2dc:	1007ada0 	.word	0x1007ada0
 23fb2e0:	00000018 	.word	0x00000018

023fb2e4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fb2e4:	b509      	push	{r0, r3, lr}
 23fb2e6:	4804      	ldr	r0, [pc, #16]	; (23fb2f8 <hal_usart_end+0x14>)
 23fb2e8:	6800      	ldr	r0, [r0, #0]
 23fb2ea:	4b04      	ldr	r3, [pc, #16]	; (23fb2fc <hal_usart_end+0x18>)
 23fb2ec:	4403      	add	r3, r0
 23fb2ee:	681b      	ldr	r3, [r3, #0]
 23fb2f0:	689b      	ldr	r3, [r3, #8]
 23fb2f2:	9302      	str	r3, [sp, #8]
 23fb2f4:	bd09      	pop	{r0, r3, pc}
 23fb2f6:	0000      	.short	0x0000
 23fb2f8:	1007ada0 	.word	0x1007ada0
 23fb2fc:	00000024 	.word	0x00000024

023fb300 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fb300:	b509      	push	{r0, r3, lr}
 23fb302:	4804      	ldr	r0, [pc, #16]	; (23fb314 <hal_usart_write+0x14>)
 23fb304:	6800      	ldr	r0, [r0, #0]
 23fb306:	4b04      	ldr	r3, [pc, #16]	; (23fb318 <hal_usart_write+0x18>)
 23fb308:	4403      	add	r3, r0
 23fb30a:	681b      	ldr	r3, [r3, #0]
 23fb30c:	68db      	ldr	r3, [r3, #12]
 23fb30e:	9302      	str	r3, [sp, #8]
 23fb310:	bd09      	pop	{r0, r3, pc}
 23fb312:	0000      	.short	0x0000
 23fb314:	1007ada0 	.word	0x1007ada0
 23fb318:	00000024 	.word	0x00000024

023fb31c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fb31c:	b509      	push	{r0, r3, lr}
 23fb31e:	4804      	ldr	r0, [pc, #16]	; (23fb330 <hal_usart_available+0x14>)
 23fb320:	6800      	ldr	r0, [r0, #0]
 23fb322:	4b04      	ldr	r3, [pc, #16]	; (23fb334 <hal_usart_available+0x18>)
 23fb324:	4403      	add	r3, r0
 23fb326:	681b      	ldr	r3, [r3, #0]
 23fb328:	691b      	ldr	r3, [r3, #16]
 23fb32a:	9302      	str	r3, [sp, #8]
 23fb32c:	bd09      	pop	{r0, r3, pc}
 23fb32e:	0000      	.short	0x0000
 23fb330:	1007ada0 	.word	0x1007ada0
 23fb334:	00000024 	.word	0x00000024

023fb338 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fb338:	b509      	push	{r0, r3, lr}
 23fb33a:	4804      	ldr	r0, [pc, #16]	; (23fb34c <hal_usart_read+0x14>)
 23fb33c:	6800      	ldr	r0, [r0, #0]
 23fb33e:	4b04      	ldr	r3, [pc, #16]	; (23fb350 <hal_usart_read+0x18>)
 23fb340:	4403      	add	r3, r0
 23fb342:	681b      	ldr	r3, [r3, #0]
 23fb344:	695b      	ldr	r3, [r3, #20]
 23fb346:	9302      	str	r3, [sp, #8]
 23fb348:	bd09      	pop	{r0, r3, pc}
 23fb34a:	0000      	.short	0x0000
 23fb34c:	1007ada0 	.word	0x1007ada0
 23fb350:	00000024 	.word	0x00000024

023fb354 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fb354:	b509      	push	{r0, r3, lr}
 23fb356:	4804      	ldr	r0, [pc, #16]	; (23fb368 <hal_usart_peek+0x14>)
 23fb358:	6800      	ldr	r0, [r0, #0]
 23fb35a:	4b04      	ldr	r3, [pc, #16]	; (23fb36c <hal_usart_peek+0x18>)
 23fb35c:	4403      	add	r3, r0
 23fb35e:	681b      	ldr	r3, [r3, #0]
 23fb360:	699b      	ldr	r3, [r3, #24]
 23fb362:	9302      	str	r3, [sp, #8]
 23fb364:	bd09      	pop	{r0, r3, pc}
 23fb366:	0000      	.short	0x0000
 23fb368:	1007ada0 	.word	0x1007ada0
 23fb36c:	00000024 	.word	0x00000024

023fb370 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fb370:	b509      	push	{r0, r3, lr}
 23fb372:	4804      	ldr	r0, [pc, #16]	; (23fb384 <hal_usart_flush+0x14>)
 23fb374:	6800      	ldr	r0, [r0, #0]
 23fb376:	4b04      	ldr	r3, [pc, #16]	; (23fb388 <hal_usart_flush+0x18>)
 23fb378:	4403      	add	r3, r0
 23fb37a:	681b      	ldr	r3, [r3, #0]
 23fb37c:	69db      	ldr	r3, [r3, #28]
 23fb37e:	9302      	str	r3, [sp, #8]
 23fb380:	bd09      	pop	{r0, r3, pc}
 23fb382:	0000      	.short	0x0000
 23fb384:	1007ada0 	.word	0x1007ada0
 23fb388:	00000024 	.word	0x00000024

023fb38c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fb38c:	b509      	push	{r0, r3, lr}
 23fb38e:	4804      	ldr	r0, [pc, #16]	; (23fb3a0 <hal_usart_is_enabled+0x14>)
 23fb390:	6800      	ldr	r0, [r0, #0]
 23fb392:	4b04      	ldr	r3, [pc, #16]	; (23fb3a4 <hal_usart_is_enabled+0x18>)
 23fb394:	4403      	add	r3, r0
 23fb396:	681b      	ldr	r3, [r3, #0]
 23fb398:	6a1b      	ldr	r3, [r3, #32]
 23fb39a:	9302      	str	r3, [sp, #8]
 23fb39c:	bd09      	pop	{r0, r3, pc}
 23fb39e:	0000      	.short	0x0000
 23fb3a0:	1007ada0 	.word	0x1007ada0
 23fb3a4:	00000024 	.word	0x00000024

023fb3a8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fb3a8:	b509      	push	{r0, r3, lr}
 23fb3aa:	4804      	ldr	r0, [pc, #16]	; (23fb3bc <hal_usart_available_data_for_write+0x14>)
 23fb3ac:	6800      	ldr	r0, [r0, #0]
 23fb3ae:	4b04      	ldr	r3, [pc, #16]	; (23fb3c0 <hal_usart_available_data_for_write+0x18>)
 23fb3b0:	4403      	add	r3, r0
 23fb3b2:	681b      	ldr	r3, [r3, #0]
 23fb3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb3b6:	9302      	str	r3, [sp, #8]
 23fb3b8:	bd09      	pop	{r0, r3, pc}
 23fb3ba:	0000      	.short	0x0000
 23fb3bc:	1007ada0 	.word	0x1007ada0
 23fb3c0:	00000024 	.word	0x00000024

023fb3c4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fb3c4:	b509      	push	{r0, r3, lr}
 23fb3c6:	4804      	ldr	r0, [pc, #16]	; (23fb3d8 <hal_usart_begin_config+0x14>)
 23fb3c8:	6800      	ldr	r0, [r0, #0]
 23fb3ca:	4b04      	ldr	r3, [pc, #16]	; (23fb3dc <hal_usart_begin_config+0x18>)
 23fb3cc:	4403      	add	r3, r0
 23fb3ce:	681b      	ldr	r3, [r3, #0]
 23fb3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb3d2:	9302      	str	r3, [sp, #8]
 23fb3d4:	bd09      	pop	{r0, r3, pc}
 23fb3d6:	0000      	.short	0x0000
 23fb3d8:	1007ada0 	.word	0x1007ada0
 23fb3dc:	00000024 	.word	0x00000024

023fb3e0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fb3e0:	b509      	push	{r0, r3, lr}
 23fb3e2:	4804      	ldr	r0, [pc, #16]	; (23fb3f4 <hal_usart_init_ex+0x14>)
 23fb3e4:	6800      	ldr	r0, [r0, #0]
 23fb3e6:	4b04      	ldr	r3, [pc, #16]	; (23fb3f8 <hal_usart_init_ex+0x18>)
 23fb3e8:	4403      	add	r3, r0
 23fb3ea:	681b      	ldr	r3, [r3, #0]
 23fb3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb3ee:	9302      	str	r3, [sp, #8]
 23fb3f0:	bd09      	pop	{r0, r3, pc}
 23fb3f2:	0000      	.short	0x0000
 23fb3f4:	1007ada0 	.word	0x1007ada0
 23fb3f8:	00000024 	.word	0x00000024

023fb3fc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fb3fc:	b509      	push	{r0, r3, lr}
 23fb3fe:	4804      	ldr	r0, [pc, #16]	; (23fb410 <HAL_USB_USART_Init+0x14>)
 23fb400:	6800      	ldr	r0, [r0, #0]
 23fb402:	4b04      	ldr	r3, [pc, #16]	; (23fb414 <HAL_USB_USART_Init+0x18>)
 23fb404:	4403      	add	r3, r0
 23fb406:	681b      	ldr	r3, [r3, #0]
 23fb408:	681b      	ldr	r3, [r3, #0]
 23fb40a:	9302      	str	r3, [sp, #8]
 23fb40c:	bd09      	pop	{r0, r3, pc}
 23fb40e:	0000      	.short	0x0000
 23fb410:	1007ada0 	.word	0x1007ada0
 23fb414:	00000034 	.word	0x00000034

023fb418 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fb418:	b509      	push	{r0, r3, lr}
 23fb41a:	4804      	ldr	r0, [pc, #16]	; (23fb42c <HAL_USB_USART_Begin+0x14>)
 23fb41c:	6800      	ldr	r0, [r0, #0]
 23fb41e:	4b04      	ldr	r3, [pc, #16]	; (23fb430 <HAL_USB_USART_Begin+0x18>)
 23fb420:	4403      	add	r3, r0
 23fb422:	681b      	ldr	r3, [r3, #0]
 23fb424:	685b      	ldr	r3, [r3, #4]
 23fb426:	9302      	str	r3, [sp, #8]
 23fb428:	bd09      	pop	{r0, r3, pc}
 23fb42a:	0000      	.short	0x0000
 23fb42c:	1007ada0 	.word	0x1007ada0
 23fb430:	00000034 	.word	0x00000034

023fb434 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fb434:	b509      	push	{r0, r3, lr}
 23fb436:	4804      	ldr	r0, [pc, #16]	; (23fb448 <HAL_USB_USART_End+0x14>)
 23fb438:	6800      	ldr	r0, [r0, #0]
 23fb43a:	4b04      	ldr	r3, [pc, #16]	; (23fb44c <HAL_USB_USART_End+0x18>)
 23fb43c:	4403      	add	r3, r0
 23fb43e:	681b      	ldr	r3, [r3, #0]
 23fb440:	689b      	ldr	r3, [r3, #8]
 23fb442:	9302      	str	r3, [sp, #8]
 23fb444:	bd09      	pop	{r0, r3, pc}
 23fb446:	0000      	.short	0x0000
 23fb448:	1007ada0 	.word	0x1007ada0
 23fb44c:	00000034 	.word	0x00000034

023fb450 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fb450:	b509      	push	{r0, r3, lr}
 23fb452:	4804      	ldr	r0, [pc, #16]	; (23fb464 <HAL_USB_USART_Available_Data+0x14>)
 23fb454:	6800      	ldr	r0, [r0, #0]
 23fb456:	4b04      	ldr	r3, [pc, #16]	; (23fb468 <HAL_USB_USART_Available_Data+0x18>)
 23fb458:	4403      	add	r3, r0
 23fb45a:	681b      	ldr	r3, [r3, #0]
 23fb45c:	691b      	ldr	r3, [r3, #16]
 23fb45e:	9302      	str	r3, [sp, #8]
 23fb460:	bd09      	pop	{r0, r3, pc}
 23fb462:	0000      	.short	0x0000
 23fb464:	1007ada0 	.word	0x1007ada0
 23fb468:	00000034 	.word	0x00000034

023fb46c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fb46c:	b509      	push	{r0, r3, lr}
 23fb46e:	4804      	ldr	r0, [pc, #16]	; (23fb480 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fb470:	6800      	ldr	r0, [r0, #0]
 23fb472:	4b04      	ldr	r3, [pc, #16]	; (23fb484 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fb474:	4403      	add	r3, r0
 23fb476:	681b      	ldr	r3, [r3, #0]
 23fb478:	695b      	ldr	r3, [r3, #20]
 23fb47a:	9302      	str	r3, [sp, #8]
 23fb47c:	bd09      	pop	{r0, r3, pc}
 23fb47e:	0000      	.short	0x0000
 23fb480:	1007ada0 	.word	0x1007ada0
 23fb484:	00000034 	.word	0x00000034

023fb488 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb488:	b509      	push	{r0, r3, lr}
 23fb48a:	4804      	ldr	r0, [pc, #16]	; (23fb49c <HAL_USB_USART_Receive_Data+0x14>)
 23fb48c:	6800      	ldr	r0, [r0, #0]
 23fb48e:	4b04      	ldr	r3, [pc, #16]	; (23fb4a0 <HAL_USB_USART_Receive_Data+0x18>)
 23fb490:	4403      	add	r3, r0
 23fb492:	681b      	ldr	r3, [r3, #0]
 23fb494:	699b      	ldr	r3, [r3, #24]
 23fb496:	9302      	str	r3, [sp, #8]
 23fb498:	bd09      	pop	{r0, r3, pc}
 23fb49a:	0000      	.short	0x0000
 23fb49c:	1007ada0 	.word	0x1007ada0
 23fb4a0:	00000034 	.word	0x00000034

023fb4a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb4a4:	b509      	push	{r0, r3, lr}
 23fb4a6:	4804      	ldr	r0, [pc, #16]	; (23fb4b8 <HAL_USB_USART_Send_Data+0x14>)
 23fb4a8:	6800      	ldr	r0, [r0, #0]
 23fb4aa:	4b04      	ldr	r3, [pc, #16]	; (23fb4bc <HAL_USB_USART_Send_Data+0x18>)
 23fb4ac:	4403      	add	r3, r0
 23fb4ae:	681b      	ldr	r3, [r3, #0]
 23fb4b0:	69db      	ldr	r3, [r3, #28]
 23fb4b2:	9302      	str	r3, [sp, #8]
 23fb4b4:	bd09      	pop	{r0, r3, pc}
 23fb4b6:	0000      	.short	0x0000
 23fb4b8:	1007ada0 	.word	0x1007ada0
 23fb4bc:	00000034 	.word	0x00000034

023fb4c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fb4c0:	b509      	push	{r0, r3, lr}
 23fb4c2:	4804      	ldr	r0, [pc, #16]	; (23fb4d4 <HAL_USB_USART_Flush_Data+0x14>)
 23fb4c4:	6800      	ldr	r0, [r0, #0]
 23fb4c6:	4b04      	ldr	r3, [pc, #16]	; (23fb4d8 <HAL_USB_USART_Flush_Data+0x18>)
 23fb4c8:	4403      	add	r3, r0
 23fb4ca:	681b      	ldr	r3, [r3, #0]
 23fb4cc:	6a1b      	ldr	r3, [r3, #32]
 23fb4ce:	9302      	str	r3, [sp, #8]
 23fb4d0:	bd09      	pop	{r0, r3, pc}
 23fb4d2:	0000      	.short	0x0000
 23fb4d4:	1007ada0 	.word	0x1007ada0
 23fb4d8:	00000034 	.word	0x00000034

023fb4dc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fb4dc:	b509      	push	{r0, r3, lr}
 23fb4de:	4804      	ldr	r0, [pc, #16]	; (23fb4f0 <HAL_USB_USART_Is_Connected+0x14>)
 23fb4e0:	6800      	ldr	r0, [r0, #0]
 23fb4e2:	4b04      	ldr	r3, [pc, #16]	; (23fb4f4 <HAL_USB_USART_Is_Connected+0x18>)
 23fb4e4:	4403      	add	r3, r0
 23fb4e6:	681b      	ldr	r3, [r3, #0]
 23fb4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb4ea:	9302      	str	r3, [sp, #8]
 23fb4ec:	bd09      	pop	{r0, r3, pc}
 23fb4ee:	0000      	.short	0x0000
 23fb4f0:	1007ada0 	.word	0x1007ada0
 23fb4f4:	00000034 	.word	0x00000034

023fb4f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fb4f8:	b509      	push	{r0, r3, lr}
 23fb4fa:	4804      	ldr	r0, [pc, #16]	; (23fb50c <panic_+0x14>)
 23fb4fc:	6800      	ldr	r0, [r0, #0]
 23fb4fe:	4b04      	ldr	r3, [pc, #16]	; (23fb510 <panic_+0x18>)
 23fb500:	4403      	add	r3, r0
 23fb502:	681b      	ldr	r3, [r3, #0]
 23fb504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb506:	9302      	str	r3, [sp, #8]
 23fb508:	bd09      	pop	{r0, r3, pc}
 23fb50a:	0000      	.short	0x0000
 23fb50c:	1007ada0 	.word	0x1007ada0
 23fb510:	00000048 	.word	0x00000048

023fb514 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fb514:	b509      	push	{r0, r3, lr}
 23fb516:	4804      	ldr	r0, [pc, #16]	; (23fb528 <log_message_v+0x14>)
 23fb518:	6800      	ldr	r0, [r0, #0]
 23fb51a:	4b04      	ldr	r3, [pc, #16]	; (23fb52c <log_message_v+0x18>)
 23fb51c:	4403      	add	r3, r0
 23fb51e:	681b      	ldr	r3, [r3, #0]
 23fb520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb522:	9302      	str	r3, [sp, #8]
 23fb524:	bd09      	pop	{r0, r3, pc}
 23fb526:	0000      	.short	0x0000
 23fb528:	1007ada0 	.word	0x1007ada0
 23fb52c:	00000048 	.word	0x00000048

023fb530 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fb530:	b509      	push	{r0, r3, lr}
 23fb532:	4804      	ldr	r0, [pc, #16]	; (23fb544 <log_level_name+0x14>)
 23fb534:	6800      	ldr	r0, [r0, #0]
 23fb536:	4b04      	ldr	r3, [pc, #16]	; (23fb548 <log_level_name+0x18>)
 23fb538:	4403      	add	r3, r0
 23fb53a:	681b      	ldr	r3, [r3, #0]
 23fb53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fb53e:	9302      	str	r3, [sp, #8]
 23fb540:	bd09      	pop	{r0, r3, pc}
 23fb542:	0000      	.short	0x0000
 23fb544:	1007ada0 	.word	0x1007ada0
 23fb548:	00000048 	.word	0x00000048

023fb54c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fb54c:	b509      	push	{r0, r3, lr}
 23fb54e:	4804      	ldr	r0, [pc, #16]	; (23fb560 <log_set_callbacks+0x14>)
 23fb550:	6800      	ldr	r0, [r0, #0]
 23fb552:	4b04      	ldr	r3, [pc, #16]	; (23fb564 <log_set_callbacks+0x18>)
 23fb554:	4403      	add	r3, r0
 23fb556:	681b      	ldr	r3, [r3, #0]
 23fb558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fb55a:	9302      	str	r3, [sp, #8]
 23fb55c:	bd09      	pop	{r0, r3, pc}
 23fb55e:	0000      	.short	0x0000
 23fb560:	1007ada0 	.word	0x1007ada0
 23fb564:	00000048 	.word	0x00000048

023fb568 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fb568:	b509      	push	{r0, r3, lr}
 23fb56a:	4804      	ldr	r0, [pc, #16]	; (23fb57c <set_system_mode+0x14>)
 23fb56c:	6800      	ldr	r0, [r0, #0]
 23fb56e:	4b04      	ldr	r3, [pc, #16]	; (23fb580 <set_system_mode+0x18>)
 23fb570:	4403      	add	r3, r0
 23fb572:	681b      	ldr	r3, [r3, #0]
 23fb574:	685b      	ldr	r3, [r3, #4]
 23fb576:	9302      	str	r3, [sp, #8]
 23fb578:	bd09      	pop	{r0, r3, pc}
 23fb57a:	0000      	.short	0x0000
 23fb57c:	1007ada0 	.word	0x1007ada0
 23fb580:	00000008 	.word	0x00000008

023fb584 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fb584:	b509      	push	{r0, r3, lr}
 23fb586:	4804      	ldr	r0, [pc, #16]	; (23fb598 <system_delay_ms+0x14>)
 23fb588:	6800      	ldr	r0, [r0, #0]
 23fb58a:	4b04      	ldr	r3, [pc, #16]	; (23fb59c <system_delay_ms+0x18>)
 23fb58c:	4403      	add	r3, r0
 23fb58e:	681b      	ldr	r3, [r3, #0]
 23fb590:	695b      	ldr	r3, [r3, #20]
 23fb592:	9302      	str	r3, [sp, #8]
 23fb594:	bd09      	pop	{r0, r3, pc}
 23fb596:	0000      	.short	0x0000
 23fb598:	1007ada0 	.word	0x1007ada0
 23fb59c:	00000008 	.word	0x00000008

023fb5a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fb5a0:	b509      	push	{r0, r3, lr}
 23fb5a2:	4804      	ldr	r0, [pc, #16]	; (23fb5b4 <application_thread_current+0x14>)
 23fb5a4:	6800      	ldr	r0, [r0, #0]
 23fb5a6:	4b04      	ldr	r3, [pc, #16]	; (23fb5b8 <application_thread_current+0x18>)
 23fb5a8:	4403      	add	r3, r0
 23fb5aa:	681b      	ldr	r3, [r3, #0]
 23fb5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb5ae:	9302      	str	r3, [sp, #8]
 23fb5b0:	bd09      	pop	{r0, r3, pc}
 23fb5b2:	0000      	.short	0x0000
 23fb5b4:	1007ada0 	.word	0x1007ada0
 23fb5b8:	00000008 	.word	0x00000008

023fb5bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fb5bc:	b509      	push	{r0, r3, lr}
 23fb5be:	4804      	ldr	r0, [pc, #16]	; (23fb5d0 <application_thread_invoke+0x14>)
 23fb5c0:	6800      	ldr	r0, [r0, #0]
 23fb5c2:	4b04      	ldr	r3, [pc, #16]	; (23fb5d4 <application_thread_invoke+0x18>)
 23fb5c4:	4403      	add	r3, r0
 23fb5c6:	681b      	ldr	r3, [r3, #0]
 23fb5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb5ca:	9302      	str	r3, [sp, #8]
 23fb5cc:	bd09      	pop	{r0, r3, pc}
 23fb5ce:	0000      	.short	0x0000
 23fb5d0:	1007ada0 	.word	0x1007ada0
 23fb5d4:	00000008 	.word	0x00000008

023fb5d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fb5d8:	b509      	push	{r0, r3, lr}
 23fb5da:	4804      	ldr	r0, [pc, #16]	; (23fb5ec <system_ctrl_set_app_request_handler+0x14>)
 23fb5dc:	6800      	ldr	r0, [r0, #0]
 23fb5de:	4b04      	ldr	r3, [pc, #16]	; (23fb5f0 <system_ctrl_set_app_request_handler+0x18>)
 23fb5e0:	4403      	add	r3, r0
 23fb5e2:	681b      	ldr	r3, [r3, #0]
 23fb5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fb5e8:	9302      	str	r3, [sp, #8]
 23fb5ea:	bd09      	pop	{r0, r3, pc}
 23fb5ec:	1007ada0 	.word	0x1007ada0
 23fb5f0:	00000008 	.word	0x00000008

023fb5f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fb5f4:	b509      	push	{r0, r3, lr}
 23fb5f6:	4804      	ldr	r0, [pc, #16]	; (23fb608 <system_ctrl_set_result+0x14>)
 23fb5f8:	6800      	ldr	r0, [r0, #0]
 23fb5fa:	4b04      	ldr	r3, [pc, #16]	; (23fb60c <system_ctrl_set_result+0x18>)
 23fb5fc:	4403      	add	r3, r0
 23fb5fe:	681b      	ldr	r3, [r3, #0]
 23fb600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fb604:	9302      	str	r3, [sp, #8]
 23fb606:	bd09      	pop	{r0, r3, pc}
 23fb608:	1007ada0 	.word	0x1007ada0
 23fb60c:	00000008 	.word	0x00000008

023fb610 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fb610:	b509      	push	{r0, r3, lr}
 23fb612:	4804      	ldr	r0, [pc, #16]	; (23fb624 <spark_process+0x14>)
 23fb614:	6800      	ldr	r0, [r0, #0]
 23fb616:	4b04      	ldr	r3, [pc, #16]	; (23fb628 <spark_process+0x18>)
 23fb618:	4403      	add	r3, r0
 23fb61a:	681b      	ldr	r3, [r3, #0]
 23fb61c:	689b      	ldr	r3, [r3, #8]
 23fb61e:	9302      	str	r3, [sp, #8]
 23fb620:	bd09      	pop	{r0, r3, pc}
 23fb622:	0000      	.short	0x0000
 23fb624:	1007ada0 	.word	0x1007ada0
 23fb628:	0000002c 	.word	0x0000002c

023fb62c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fb62c:	b509      	push	{r0, r3, lr}
 23fb62e:	4804      	ldr	r0, [pc, #16]	; (23fb640 <spark_cloud_flag_connected+0x14>)
 23fb630:	6800      	ldr	r0, [r0, #0]
 23fb632:	4b04      	ldr	r3, [pc, #16]	; (23fb644 <spark_cloud_flag_connected+0x18>)
 23fb634:	4403      	add	r3, r0
 23fb636:	681b      	ldr	r3, [r3, #0]
 23fb638:	695b      	ldr	r3, [r3, #20]
 23fb63a:	9302      	str	r3, [sp, #8]
 23fb63c:	bd09      	pop	{r0, r3, pc}
 23fb63e:	0000      	.short	0x0000
 23fb640:	1007ada0 	.word	0x1007ada0
 23fb644:	0000002c 	.word	0x0000002c

023fb648 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fb648:	b509      	push	{r0, r3, lr}
 23fb64a:	4804      	ldr	r0, [pc, #16]	; (23fb65c <spark_send_event+0x14>)
 23fb64c:	6800      	ldr	r0, [r0, #0]
 23fb64e:	4b04      	ldr	r3, [pc, #16]	; (23fb660 <spark_send_event+0x18>)
 23fb650:	4403      	add	r3, r0
 23fb652:	681b      	ldr	r3, [r3, #0]
 23fb654:	6a1b      	ldr	r3, [r3, #32]
 23fb656:	9302      	str	r3, [sp, #8]
 23fb658:	bd09      	pop	{r0, r3, pc}
 23fb65a:	0000      	.short	0x0000
 23fb65c:	1007ada0 	.word	0x1007ada0
 23fb660:	0000002c 	.word	0x0000002c

023fb664 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fb664:	b509      	push	{r0, r3, lr}
 23fb666:	4804      	ldr	r0, [pc, #16]	; (23fb678 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fb668:	6800      	ldr	r0, [r0, #0]
 23fb66a:	4b04      	ldr	r3, [pc, #16]	; (23fb67c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fb66c:	4403      	add	r3, r0
 23fb66e:	681b      	ldr	r3, [r3, #0]
 23fb670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb672:	9302      	str	r3, [sp, #8]
 23fb674:	bd09      	pop	{r0, r3, pc}
 23fb676:	0000      	.short	0x0000
 23fb678:	1007ada0 	.word	0x1007ada0
 23fb67c:	0000002c 	.word	0x0000002c

023fb680 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb680:	b509      	push	{r0, r3, lr}
 23fb682:	4804      	ldr	r0, [pc, #16]	; (23fb694 <network_connect+0x14>)
 23fb684:	6800      	ldr	r0, [r0, #0]
 23fb686:	4b04      	ldr	r3, [pc, #16]	; (23fb698 <network_connect+0x18>)
 23fb688:	4403      	add	r3, r0
 23fb68a:	681b      	ldr	r3, [r3, #0]
 23fb68c:	685b      	ldr	r3, [r3, #4]
 23fb68e:	9302      	str	r3, [sp, #8]
 23fb690:	bd09      	pop	{r0, r3, pc}
 23fb692:	0000      	.short	0x0000
 23fb694:	1007ada0 	.word	0x1007ada0
 23fb698:	00000028 	.word	0x00000028

023fb69c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fb69c:	b509      	push	{r0, r3, lr}
 23fb69e:	4804      	ldr	r0, [pc, #16]	; (23fb6b0 <network_connecting+0x14>)
 23fb6a0:	6800      	ldr	r0, [r0, #0]
 23fb6a2:	4b04      	ldr	r3, [pc, #16]	; (23fb6b4 <network_connecting+0x18>)
 23fb6a4:	4403      	add	r3, r0
 23fb6a6:	681b      	ldr	r3, [r3, #0]
 23fb6a8:	689b      	ldr	r3, [r3, #8]
 23fb6aa:	9302      	str	r3, [sp, #8]
 23fb6ac:	bd09      	pop	{r0, r3, pc}
 23fb6ae:	0000      	.short	0x0000
 23fb6b0:	1007ada0 	.word	0x1007ada0
 23fb6b4:	00000028 	.word	0x00000028

023fb6b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fb6b8:	b509      	push	{r0, r3, lr}
 23fb6ba:	4804      	ldr	r0, [pc, #16]	; (23fb6cc <network_disconnect+0x14>)
 23fb6bc:	6800      	ldr	r0, [r0, #0]
 23fb6be:	4b04      	ldr	r3, [pc, #16]	; (23fb6d0 <network_disconnect+0x18>)
 23fb6c0:	4403      	add	r3, r0
 23fb6c2:	681b      	ldr	r3, [r3, #0]
 23fb6c4:	68db      	ldr	r3, [r3, #12]
 23fb6c6:	9302      	str	r3, [sp, #8]
 23fb6c8:	bd09      	pop	{r0, r3, pc}
 23fb6ca:	0000      	.short	0x0000
 23fb6cc:	1007ada0 	.word	0x1007ada0
 23fb6d0:	00000028 	.word	0x00000028

023fb6d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fb6d4:	b509      	push	{r0, r3, lr}
 23fb6d6:	4804      	ldr	r0, [pc, #16]	; (23fb6e8 <network_ready+0x14>)
 23fb6d8:	6800      	ldr	r0, [r0, #0]
 23fb6da:	4b04      	ldr	r3, [pc, #16]	; (23fb6ec <network_ready+0x18>)
 23fb6dc:	4403      	add	r3, r0
 23fb6de:	681b      	ldr	r3, [r3, #0]
 23fb6e0:	691b      	ldr	r3, [r3, #16]
 23fb6e2:	9302      	str	r3, [sp, #8]
 23fb6e4:	bd09      	pop	{r0, r3, pc}
 23fb6e6:	0000      	.short	0x0000
 23fb6e8:	1007ada0 	.word	0x1007ada0
 23fb6ec:	00000028 	.word	0x00000028

023fb6f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb6f0:	b509      	push	{r0, r3, lr}
 23fb6f2:	4804      	ldr	r0, [pc, #16]	; (23fb704 <network_on+0x14>)
 23fb6f4:	6800      	ldr	r0, [r0, #0]
 23fb6f6:	4b04      	ldr	r3, [pc, #16]	; (23fb708 <network_on+0x18>)
 23fb6f8:	4403      	add	r3, r0
 23fb6fa:	681b      	ldr	r3, [r3, #0]
 23fb6fc:	695b      	ldr	r3, [r3, #20]
 23fb6fe:	9302      	str	r3, [sp, #8]
 23fb700:	bd09      	pop	{r0, r3, pc}
 23fb702:	0000      	.short	0x0000
 23fb704:	1007ada0 	.word	0x1007ada0
 23fb708:	00000028 	.word	0x00000028

023fb70c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb70c:	b509      	push	{r0, r3, lr}
 23fb70e:	4804      	ldr	r0, [pc, #16]	; (23fb720 <network_off+0x14>)
 23fb710:	6800      	ldr	r0, [r0, #0]
 23fb712:	4b04      	ldr	r3, [pc, #16]	; (23fb724 <network_off+0x18>)
 23fb714:	4403      	add	r3, r0
 23fb716:	681b      	ldr	r3, [r3, #0]
 23fb718:	699b      	ldr	r3, [r3, #24]
 23fb71a:	9302      	str	r3, [sp, #8]
 23fb71c:	bd09      	pop	{r0, r3, pc}
 23fb71e:	0000      	.short	0x0000
 23fb720:	1007ada0 	.word	0x1007ada0
 23fb724:	00000028 	.word	0x00000028

023fb728 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fb728:	b509      	push	{r0, r3, lr}
 23fb72a:	4804      	ldr	r0, [pc, #16]	; (23fb73c <network_listen+0x14>)
 23fb72c:	6800      	ldr	r0, [r0, #0]
 23fb72e:	4b04      	ldr	r3, [pc, #16]	; (23fb740 <network_listen+0x18>)
 23fb730:	4403      	add	r3, r0
 23fb732:	681b      	ldr	r3, [r3, #0]
 23fb734:	69db      	ldr	r3, [r3, #28]
 23fb736:	9302      	str	r3, [sp, #8]
 23fb738:	bd09      	pop	{r0, r3, pc}
 23fb73a:	0000      	.short	0x0000
 23fb73c:	1007ada0 	.word	0x1007ada0
 23fb740:	00000028 	.word	0x00000028

023fb744 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fb744:	b509      	push	{r0, r3, lr}
 23fb746:	4804      	ldr	r0, [pc, #16]	; (23fb758 <network_listening+0x14>)
 23fb748:	6800      	ldr	r0, [r0, #0]
 23fb74a:	4b04      	ldr	r3, [pc, #16]	; (23fb75c <network_listening+0x18>)
 23fb74c:	4403      	add	r3, r0
 23fb74e:	681b      	ldr	r3, [r3, #0]
 23fb750:	6a1b      	ldr	r3, [r3, #32]
 23fb752:	9302      	str	r3, [sp, #8]
 23fb754:	bd09      	pop	{r0, r3, pc}
 23fb756:	0000      	.short	0x0000
 23fb758:	1007ada0 	.word	0x1007ada0
 23fb75c:	00000028 	.word	0x00000028

023fb760 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fb760:	b509      	push	{r0, r3, lr}
 23fb762:	4804      	ldr	r0, [pc, #16]	; (23fb774 <network_set_listen_timeout+0x14>)
 23fb764:	6800      	ldr	r0, [r0, #0]
 23fb766:	4b04      	ldr	r3, [pc, #16]	; (23fb778 <network_set_listen_timeout+0x18>)
 23fb768:	4403      	add	r3, r0
 23fb76a:	681b      	ldr	r3, [r3, #0]
 23fb76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb76e:	9302      	str	r3, [sp, #8]
 23fb770:	bd09      	pop	{r0, r3, pc}
 23fb772:	0000      	.short	0x0000
 23fb774:	1007ada0 	.word	0x1007ada0
 23fb778:	00000028 	.word	0x00000028

023fb77c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fb77c:	b509      	push	{r0, r3, lr}
 23fb77e:	4804      	ldr	r0, [pc, #16]	; (23fb790 <network_get_listen_timeout+0x14>)
 23fb780:	6800      	ldr	r0, [r0, #0]
 23fb782:	4b04      	ldr	r3, [pc, #16]	; (23fb794 <network_get_listen_timeout+0x18>)
 23fb784:	4403      	add	r3, r0
 23fb786:	681b      	ldr	r3, [r3, #0]
 23fb788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb78a:	9302      	str	r3, [sp, #8]
 23fb78c:	bd09      	pop	{r0, r3, pc}
 23fb78e:	0000      	.short	0x0000
 23fb790:	1007ada0 	.word	0x1007ada0
 23fb794:	00000028 	.word	0x00000028

023fb798 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fb798:	b509      	push	{r0, r3, lr}
 23fb79a:	4804      	ldr	r0, [pc, #16]	; (23fb7ac <network_is_on+0x14>)
 23fb79c:	6800      	ldr	r0, [r0, #0]
 23fb79e:	4b04      	ldr	r3, [pc, #16]	; (23fb7b0 <network_is_on+0x18>)
 23fb7a0:	4403      	add	r3, r0
 23fb7a2:	681b      	ldr	r3, [r3, #0]
 23fb7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb7a6:	9302      	str	r3, [sp, #8]
 23fb7a8:	bd09      	pop	{r0, r3, pc}
 23fb7aa:	0000      	.short	0x0000
 23fb7ac:	1007ada0 	.word	0x1007ada0
 23fb7b0:	00000028 	.word	0x00000028

023fb7b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fb7b4:	b509      	push	{r0, r3, lr}
 23fb7b6:	4804      	ldr	r0, [pc, #16]	; (23fb7c8 <network_is_off+0x14>)
 23fb7b8:	6800      	ldr	r0, [r0, #0]
 23fb7ba:	4b04      	ldr	r3, [pc, #16]	; (23fb7cc <network_is_off+0x18>)
 23fb7bc:	4403      	add	r3, r0
 23fb7be:	681b      	ldr	r3, [r3, #0]
 23fb7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb7c2:	9302      	str	r3, [sp, #8]
 23fb7c4:	bd09      	pop	{r0, r3, pc}
 23fb7c6:	0000      	.short	0x0000
 23fb7c8:	1007ada0 	.word	0x1007ada0
 23fb7cc:	00000028 	.word	0x00000028

023fb7d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fb7d0:	b509      	push	{r0, r3, lr}
 23fb7d2:	4804      	ldr	r0, [pc, #16]	; (23fb7e4 <malloc+0x14>)
 23fb7d4:	6800      	ldr	r0, [r0, #0]
 23fb7d6:	4b04      	ldr	r3, [pc, #16]	; (23fb7e8 <malloc+0x18>)
 23fb7d8:	4403      	add	r3, r0
 23fb7da:	681b      	ldr	r3, [r3, #0]
 23fb7dc:	681b      	ldr	r3, [r3, #0]
 23fb7de:	9302      	str	r3, [sp, #8]
 23fb7e0:	bd09      	pop	{r0, r3, pc}
 23fb7e2:	0000      	.short	0x0000
 23fb7e4:	1007ada0 	.word	0x1007ada0
 23fb7e8:	00000004 	.word	0x00000004

023fb7ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fb7ec:	b509      	push	{r0, r3, lr}
 23fb7ee:	4804      	ldr	r0, [pc, #16]	; (23fb800 <free+0x14>)
 23fb7f0:	6800      	ldr	r0, [r0, #0]
 23fb7f2:	4b04      	ldr	r3, [pc, #16]	; (23fb804 <free+0x18>)
 23fb7f4:	4403      	add	r3, r0
 23fb7f6:	681b      	ldr	r3, [r3, #0]
 23fb7f8:	685b      	ldr	r3, [r3, #4]
 23fb7fa:	9302      	str	r3, [sp, #8]
 23fb7fc:	bd09      	pop	{r0, r3, pc}
 23fb7fe:	0000      	.short	0x0000
 23fb800:	1007ada0 	.word	0x1007ada0
 23fb804:	00000004 	.word	0x00000004

023fb808 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fb808:	b509      	push	{r0, r3, lr}
 23fb80a:	4804      	ldr	r0, [pc, #16]	; (23fb81c <realloc+0x14>)
 23fb80c:	6800      	ldr	r0, [r0, #0]
 23fb80e:	4b04      	ldr	r3, [pc, #16]	; (23fb820 <realloc+0x18>)
 23fb810:	4403      	add	r3, r0
 23fb812:	681b      	ldr	r3, [r3, #0]
 23fb814:	689b      	ldr	r3, [r3, #8]
 23fb816:	9302      	str	r3, [sp, #8]
 23fb818:	bd09      	pop	{r0, r3, pc}
 23fb81a:	0000      	.short	0x0000
 23fb81c:	1007ada0 	.word	0x1007ada0
 23fb820:	00000004 	.word	0x00000004

023fb824 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fb824:	b509      	push	{r0, r3, lr}
 23fb826:	4804      	ldr	r0, [pc, #16]	; (23fb838 <vsnprintf+0x14>)
 23fb828:	6800      	ldr	r0, [r0, #0]
 23fb82a:	4b04      	ldr	r3, [pc, #16]	; (23fb83c <vsnprintf+0x18>)
 23fb82c:	4403      	add	r3, r0
 23fb82e:	681b      	ldr	r3, [r3, #0]
 23fb830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb832:	9302      	str	r3, [sp, #8]
 23fb834:	bd09      	pop	{r0, r3, pc}
 23fb836:	0000      	.short	0x0000
 23fb838:	1007ada0 	.word	0x1007ada0
 23fb83c:	00000004 	.word	0x00000004

023fb840 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fb840:	b509      	push	{r0, r3, lr}
 23fb842:	4804      	ldr	r0, [pc, #16]	; (23fb854 <abort+0x14>)
 23fb844:	6800      	ldr	r0, [r0, #0]
 23fb846:	4b04      	ldr	r3, [pc, #16]	; (23fb858 <abort+0x18>)
 23fb848:	4403      	add	r3, r0
 23fb84a:	681b      	ldr	r3, [r3, #0]
 23fb84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb84e:	9302      	str	r3, [sp, #8]
 23fb850:	bd09      	pop	{r0, r3, pc}
 23fb852:	0000      	.short	0x0000
 23fb854:	1007ada0 	.word	0x1007ada0
 23fb858:	00000004 	.word	0x00000004

023fb85c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fb85c:	b509      	push	{r0, r3, lr}
 23fb85e:	4804      	ldr	r0, [pc, #16]	; (23fb870 <_malloc_r+0x14>)
 23fb860:	6800      	ldr	r0, [r0, #0]
 23fb862:	4b04      	ldr	r3, [pc, #16]	; (23fb874 <_malloc_r+0x18>)
 23fb864:	4403      	add	r3, r0
 23fb866:	681b      	ldr	r3, [r3, #0]
 23fb868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb86a:	9302      	str	r3, [sp, #8]
 23fb86c:	bd09      	pop	{r0, r3, pc}
 23fb86e:	0000      	.short	0x0000
 23fb870:	1007ada0 	.word	0x1007ada0
 23fb874:	00000004 	.word	0x00000004

023fb878 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fb878:	b509      	push	{r0, r3, lr}
 23fb87a:	4804      	ldr	r0, [pc, #16]	; (23fb88c <__errno+0x14>)
 23fb87c:	6800      	ldr	r0, [r0, #0]
 23fb87e:	4b04      	ldr	r3, [pc, #16]	; (23fb890 <__errno+0x18>)
 23fb880:	4403      	add	r3, r0
 23fb882:	681b      	ldr	r3, [r3, #0]
 23fb884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb886:	9302      	str	r3, [sp, #8]
 23fb888:	bd09      	pop	{r0, r3, pc}
 23fb88a:	0000      	.short	0x0000
 23fb88c:	1007ada0 	.word	0x1007ada0
 23fb890:	00000004 	.word	0x00000004

023fb894 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fb894:	b509      	push	{r0, r3, lr}
 23fb896:	4804      	ldr	r0, [pc, #16]	; (23fb8a8 <__assert_func+0x14>)
 23fb898:	6800      	ldr	r0, [r0, #0]
 23fb89a:	4b04      	ldr	r3, [pc, #16]	; (23fb8ac <__assert_func+0x18>)
 23fb89c:	4403      	add	r3, r0
 23fb89e:	681b      	ldr	r3, [r3, #0]
 23fb8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb8a2:	9302      	str	r3, [sp, #8]
 23fb8a4:	bd09      	pop	{r0, r3, pc}
 23fb8a6:	0000      	.short	0x0000
 23fb8a8:	1007ada0 	.word	0x1007ada0
 23fb8ac:	00000004 	.word	0x00000004

023fb8b0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fb8b0:	b509      	push	{r0, r3, lr}
 23fb8b2:	4804      	ldr	r0, [pc, #16]	; (23fb8c4 <newlib_impure_ptr_callback+0x14>)
 23fb8b4:	6800      	ldr	r0, [r0, #0]
 23fb8b6:	4b04      	ldr	r3, [pc, #16]	; (23fb8c8 <newlib_impure_ptr_callback+0x18>)
 23fb8b8:	4403      	add	r3, r0
 23fb8ba:	681b      	ldr	r3, [r3, #0]
 23fb8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb8be:	9302      	str	r3, [sp, #8]
 23fb8c0:	bd09      	pop	{r0, r3, pc}
 23fb8c2:	0000      	.short	0x0000
 23fb8c4:	1007ada0 	.word	0x1007ada0
 23fb8c8:	00000004 	.word	0x00000004

023fb8cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fb8cc:	2100      	movs	r1, #0
 23fb8ce:	f7ff be59 	b.w	23fb584 <system_delay_ms>

023fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fb8d2:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fb8d4:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fb8d6:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fb8d8:	b17c      	cbz	r4, 23fb8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fb8da:	6863      	ldr	r3, [r4, #4]
 23fb8dc:	3b01      	subs	r3, #1
 23fb8de:	6063      	str	r3, [r4, #4]
 23fb8e0:	b95b      	cbnz	r3, 23fb8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fb8e2:	6823      	ldr	r3, [r4, #0]
 23fb8e4:	4620      	mov	r0, r4
 23fb8e6:	689b      	ldr	r3, [r3, #8]
 23fb8e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fb8ea:	68a3      	ldr	r3, [r4, #8]
 23fb8ec:	3b01      	subs	r3, #1
 23fb8ee:	60a3      	str	r3, [r4, #8]
 23fb8f0:	b91b      	cbnz	r3, 23fb8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fb8f2:	6823      	ldr	r3, [r4, #0]
 23fb8f4:	4620      	mov	r0, r4
 23fb8f6:	68db      	ldr	r3, [r3, #12]
 23fb8f8:	4798      	blx	r3
      }
 23fb8fa:	4628      	mov	r0, r5
 23fb8fc:	bd38      	pop	{r3, r4, r5, pc}

023fb8fe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fb8fe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fb900:	6883      	ldr	r3, [r0, #8]
 23fb902:	4604      	mov	r4, r0
 23fb904:	b90b      	cbnz	r3, 23fb90a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fb906:	f002 fbc9 	bl	23fe09c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb90a:	68c3      	ldr	r3, [r0, #12]
 23fb90c:	4798      	blx	r3
      if (_M_manager)
 23fb90e:	68a3      	ldr	r3, [r4, #8]
 23fb910:	b11b      	cbz	r3, 23fb91a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fb912:	2203      	movs	r2, #3
 23fb914:	4621      	mov	r1, r4
 23fb916:	4620      	mov	r0, r4
 23fb918:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fb91a:	4620      	mov	r0, r4
}
 23fb91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fb920:	2110      	movs	r1, #16
 23fb922:	f7fe bf66 	b.w	23fa7f2 <_ZdlPvj>

023fb926 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fb926:	b510      	push	{r4, lr}
      if (_M_manager)
 23fb928:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fb92a:	4604      	mov	r4, r0
      if (_M_manager)
 23fb92c:	b113      	cbz	r3, 23fb934 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fb92e:	2203      	movs	r2, #3
 23fb930:	4601      	mov	r1, r0
 23fb932:	4798      	blx	r3
    }
 23fb934:	4620      	mov	r0, r4
 23fb936:	bd10      	pop	{r4, pc}

023fb938 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fb938:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fb93a:	6843      	ldr	r3, [r0, #4]
    {
 23fb93c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fb93e:	3b01      	subs	r3, #1
 23fb940:	6043      	str	r3, [r0, #4]
 23fb942:	b963      	cbnz	r3, 23fb95e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fb944:	6803      	ldr	r3, [r0, #0]
 23fb946:	689b      	ldr	r3, [r3, #8]
 23fb948:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fb94a:	68a3      	ldr	r3, [r4, #8]
 23fb94c:	3b01      	subs	r3, #1
 23fb94e:	60a3      	str	r3, [r4, #8]
 23fb950:	b92b      	cbnz	r3, 23fb95e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fb952:	6823      	ldr	r3, [r4, #0]
 23fb954:	4620      	mov	r0, r4
    }
 23fb956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fb95a:	68db      	ldr	r3, [r3, #12]
 23fb95c:	4718      	bx	r3
    }
 23fb95e:	bd10      	pop	{r4, pc}

023fb960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb960:	b570      	push	{r4, r5, r6, lr}
 23fb962:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb964:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb968:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fb96c:	42ae      	cmp	r6, r5
 23fb96e:	d004      	beq.n	23fb97a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fb970:	4628      	mov	r0, r5
 23fb972:	f001 feeb 	bl	23fd74c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fb976:	3510      	adds	r5, #16
 23fb978:	e7f8      	b.n	23fb96c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb97a:	6820      	ldr	r0, [r4, #0]
 23fb97c:	f7ff ff36 	bl	23fb7ec <free>
    AllocatorT::free(data_);
}
 23fb980:	4620      	mov	r0, r4
 23fb982:	bd70      	pop	{r4, r5, r6, pc}

023fb984 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fb984:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb986:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fb988:	460b      	mov	r3, r1
 23fb98a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb98c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fb990:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fb994:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fb998:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fb99c:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fb9a0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fb9a4:	b002      	add	sp, #8
 23fb9a6:	bd10      	pop	{r4, pc}

023fb9a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fb9a8:	2300      	movs	r3, #0
 23fb9aa:	4802      	ldr	r0, [pc, #8]	; (23fb9b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fb9ac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fb9ae:	f7ff bb11 	b.w	23fafd4 <os_mutex_recursive_create>
 23fb9b2:	bf00      	nop
 23fb9b4:	1007ae58 	.word	0x1007ae58

023fb9b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fb9b8:	4770      	bx	lr

023fb9ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fb9ba:	2000      	movs	r0, #0
 23fb9bc:	4770      	bx	lr

023fb9be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fb9be:	b510      	push	{r4, lr}
 23fb9c0:	4604      	mov	r4, r0
 23fb9c2:	2110      	movs	r1, #16
 23fb9c4:	f7fe ff15 	bl	23fa7f2 <_ZdlPvj>
 23fb9c8:	4620      	mov	r0, r4
 23fb9ca:	bd10      	pop	{r4, pc}

023fb9cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fb9cc:	b508      	push	{r3, lr}
      { delete this; }
 23fb9ce:	f7ff fff6 	bl	23fb9be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fb9d2:	bd08      	pop	{r3, pc}

023fb9d4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fb9d4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fb9d6:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fb9d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fb9dc:	6002      	str	r2, [r0, #0]
 23fb9de:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb9e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb9e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb9e4:	680c      	ldr	r4, [r1, #0]
 23fb9e6:	8085      	strh	r5, [r0, #4]
 23fb9e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb9ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fb9ec:	bd30      	pop	{r4, r5, pc}

023fb9ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fb9ee:	b510      	push	{r4, lr}
 23fb9f0:	4604      	mov	r4, r0
    free((void*)msg_);
 23fb9f2:	6800      	ldr	r0, [r0, #0]
 23fb9f4:	f7ff fefa 	bl	23fb7ec <free>
}
 23fb9f8:	4620      	mov	r0, r4
 23fb9fa:	bd10      	pop	{r4, pc}

023fb9fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fb9fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fb9fe:	68c4      	ldr	r4, [r0, #12]
 23fba00:	b314      	cbz	r4, 23fba48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
 23fba02:	7823      	ldrb	r3, [r4, #0]
 23fba04:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fba06:	2b02      	cmp	r3, #2
 23fba08:	d103      	bne.n	23fba12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fba0a:	f104 000c 	add.w	r0, r4, #12
 23fba0e:	f7ff ffee 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fba12:	1d23      	adds	r3, r4, #4
 23fba14:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fba16:	b135      	cbz	r5, 23fba26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fba18:	4628      	mov	r0, r5
 23fba1a:	f7ff ff84 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
 23fba1e:	2110      	movs	r1, #16
 23fba20:	4628      	mov	r0, r5
 23fba22:	f7fe fee6 	bl	23fa7f2 <_ZdlPvj>
 23fba26:	f104 0308 	add.w	r3, r4, #8
 23fba2a:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fba2c:	b135      	cbz	r5, 23fba3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fba2e:	4628      	mov	r0, r5
 23fba30:	f7ff ff79 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
 23fba34:	2110      	movs	r1, #16
 23fba36:	4628      	mov	r0, r5
 23fba38:	f7fe fedb 	bl	23fa7f2 <_ZdlPvj>
 23fba3c:	4620      	mov	r0, r4
 23fba3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fba42:	2114      	movs	r1, #20
 23fba44:	f7fe bed5 	b.w	23fa7f2 <_ZdlPvj>
 23fba48:	bd38      	pop	{r3, r4, r5, pc}

023fba4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fba4a:	680b      	ldr	r3, [r1, #0]
 23fba4c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fba4e:	684b      	ldr	r3, [r1, #4]
 23fba50:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fba52:	b113      	cbz	r3, 23fba5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fba54:	685a      	ldr	r2, [r3, #4]
 23fba56:	3201      	adds	r2, #1
 23fba58:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fba5a:	4770      	bx	lr

023fba5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fba5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fba5e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fba60:	4668      	mov	r0, sp
 23fba62:	460d      	mov	r5, r1
 23fba64:	f7ff fff1 	bl	23fba4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fba68:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fba6a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fba6c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fba6e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fba70:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fba72:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fba74:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 23fba76:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fba78:	f7ff ff2b 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fba7c:	b135      	cbz	r5, 23fba8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fba7e:	1d28      	adds	r0, r5, #4
 23fba80:	f7ff ff27 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fba84:	2108      	movs	r1, #8
 23fba86:	4628      	mov	r0, r5
 23fba88:	f7fe feb3 	bl	23fa7f2 <_ZdlPvj>
        return p;
    }
 23fba8c:	4620      	mov	r0, r4
 23fba8e:	b003      	add	sp, #12
 23fba90:	bd30      	pop	{r4, r5, pc}

023fba92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fba92:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fba94:	b510      	push	{r4, lr}
      if (_M_empty())
 23fba96:	b90a      	cbnz	r2, 23fba9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fba98:	f002 fb00 	bl	23fe09c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fba9c:	68c3      	ldr	r3, [r0, #12]
    }
 23fba9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fbaa2:	4718      	bx	r3

023fbaa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fbaa4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fbaa6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fbaa8:	f100 0110 	add.w	r1, r0, #16
 23fbaac:	f7ff fff1 	bl	23fba92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fbab0:	bd08      	pop	{r3, pc}

023fbab2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fbab2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fbab4:	b510      	push	{r4, lr}
      if (_M_empty())
 23fbab6:	b90a      	cbnz	r2, 23fbabc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fbab8:	f002 faf0 	bl	23fe09c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fbabc:	68c3      	ldr	r3, [r0, #12]
    }
 23fbabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fbac2:	4718      	bx	r3

023fbac4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fbac4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fbac6:	6800      	ldr	r0, [r0, #0]
 23fbac8:	f100 0110 	add.w	r1, r0, #16
 23fbacc:	f7ff fff1 	bl	23fbab2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fbad0:	bd08      	pop	{r3, pc}
	...

023fbad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fbad4:	b538      	push	{r3, r4, r5, lr}
 23fbad6:	2300      	movs	r3, #0
 23fbad8:	4604      	mov	r4, r0
 23fbada:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fbadc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fbade:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fbae0:	f7fe fe83 	bl	23fa7ea <_Znwj>
 23fbae4:	b128      	cbz	r0, 23fbaf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fbae6:	2301      	movs	r3, #1
 23fbae8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fbaec:	4b02      	ldr	r3, [pc, #8]	; (23fbaf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fbaee:	60c5      	str	r5, [r0, #12]
 23fbaf0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fbaf2:	6020      	str	r0, [r4, #0]
	}
 23fbaf4:	4620      	mov	r0, r4
 23fbaf6:	bd38      	pop	{r3, r4, r5, pc}
 23fbaf8:	023ffb58 	.word	0x023ffb58

023fbafc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fbafc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fbafe:	2300      	movs	r3, #0
 23fbb00:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fbb02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fbb04:	4604      	mov	r4, r0
 23fbb06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fbb08:	b12b      	cbz	r3, 23fbb16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fbb0a:	2202      	movs	r2, #2
 23fbb0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fbb0e:	68eb      	ldr	r3, [r5, #12]
 23fbb10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fbb12:	68ab      	ldr	r3, [r5, #8]
 23fbb14:	60a3      	str	r3, [r4, #8]
    }
 23fbb16:	4620      	mov	r0, r4
 23fbb18:	bd38      	pop	{r3, r4, r5, pc}
	...

023fbb1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fbb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fbb1e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 23fbb20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fbb22:	4668      	mov	r0, sp
 23fbb24:	f7ff ff56 	bl	23fb9d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fbb28:	f04f 0302 	mov.w	r3, #2
 23fbb2c:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fbb30:	2a00      	cmp	r2, #0
 23fbb32:	d103      	bne.n	23fbb3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fbb34:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fbb38:	2900      	cmp	r1, #0
 23fbb3a:	d1f7      	bne.n	23fbb2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fbb3c:	d121      	bne.n	23fbb82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fbb3e:	f104 050c 	add.w	r5, r4, #12
 23fbb42:	4669      	mov	r1, sp
 23fbb44:	4628      	mov	r0, r5
 23fbb46:	f7ff ff45 	bl	23fb9d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fbb4a:	2201      	movs	r2, #1
 23fbb4c:	1c63      	adds	r3, r4, #1
 23fbb4e:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fbb52:	2000      	movs	r0, #0
 23fbb54:	f104 0308 	add.w	r3, r4, #8
 23fbb58:	e8d3 6fef 	ldaex	r6, [r3]
 23fbb5c:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fbb60:	2a00      	cmp	r2, #0
 23fbb62:	d1f9      	bne.n	23fbb58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fbb64:	b16e      	cbz	r6, 23fbb82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fbb66:	f7ff fd1b 	bl	23fb5a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fbb6a:	b178      	cbz	r0, 23fbb8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fbb6c:	4629      	mov	r1, r5
 23fbb6e:	4630      	mov	r0, r6
 23fbb70:	f7ff ff8f 	bl	23fba92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fbb74:	4630      	mov	r0, r6
 23fbb76:	f7ff fed6 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fbb7a:	2110      	movs	r1, #16
 23fbb7c:	4630      	mov	r0, r6
 23fbb7e:	f7fe fe38 	bl	23fa7f2 <_ZdlPvj>
        p_->setError(std::move(error));
 23fbb82:	4668      	mov	r0, sp
 23fbb84:	f7ff ff33 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
    }
 23fbb88:	b009      	add	sp, #36	; 0x24
 23fbb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fbb8c:	4631      	mov	r1, r6
 23fbb8e:	a802      	add	r0, sp, #8
 23fbb90:	f7ff ffb4 	bl	23fbafc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fbb94:	68e0      	ldr	r0, [r4, #12]
 23fbb96:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fbb9a:	b108      	cbz	r0, 23fbba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fbb9c:	f003 fe3c 	bl	23ff818 <strdup>
        type_(type) {
 23fbba0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fbba2:	2010      	movs	r0, #16
 23fbba4:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fbba8:	f7fe fe1f 	bl	23fa7ea <_Znwj>
 23fbbac:	4605      	mov	r5, r0
 23fbbae:	b1e8      	cbz	r0, 23fbbec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fbbb0:	2700      	movs	r7, #0
 23fbbb2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fbbb4:	2018      	movs	r0, #24
 23fbbb6:	f7fe fe18 	bl	23fa7ea <_Znwj>
 23fbbba:	4604      	mov	r4, r0
 23fbbbc:	b188      	cbz	r0, 23fbbe2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fbbbe:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fbbc0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fbbc2:	a802      	add	r0, sp, #8
 23fbbc4:	f7ff fede 	bl	23fb984 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbbc8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fbbca:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbbcc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbbce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fbbd0:	9204      	str	r2, [sp, #16]
 23fbbd2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fbbd4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fbbd6:	60e3      	str	r3, [r4, #12]
 23fbbd8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fbbdc:	9205      	str	r2, [sp, #20]
 23fbbde:	f7ff fef9 	bl	23fb9d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fbbe2:	4b08      	ldr	r3, [pc, #32]	; (23fbc04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fbbe4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fbbe6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fbbe8:	4b07      	ldr	r3, [pc, #28]	; (23fbc08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fbbea:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fbbec:	a806      	add	r0, sp, #24
 23fbbee:	f7ff fefe 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fbbf2:	a802      	add	r0, sp, #8
 23fbbf4:	f7ff fe97 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fbbf8:	2200      	movs	r2, #0
 23fbbfa:	4629      	mov	r1, r5
 23fbbfc:	4803      	ldr	r0, [pc, #12]	; (23fbc0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fbbfe:	f7ff fcdd 	bl	23fb5bc <application_thread_invoke>
 23fbc02:	e7b7      	b.n	23fbb74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fbc04:	023fbaa5 	.word	0x023fbaa5
 23fbc08:	023fbd21 	.word	0x023fbd21
 23fbc0c:	023fb8ff 	.word	0x023fb8ff

023fbc10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fbc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbc14:	b08b      	sub	sp, #44	; 0x2c
 23fbc16:	4605      	mov	r5, r0
 23fbc18:	460f      	mov	r7, r1
 23fbc1a:	4690      	mov	r8, r2
 23fbc1c:	4699      	mov	r9, r3
 23fbc1e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fbc22:	f7ff fd03 	bl	23fb62c <spark_cloud_flag_connected>
 23fbc26:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fbc28:	4683      	mov	fp, r0
 23fbc2a:	bb38      	cbnz	r0, 23fbc7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fbc2c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fbc30:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fbc32:	a905      	add	r1, sp, #20
 23fbc34:	4630      	mov	r0, r6
 23fbc36:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fbc3a:	f7ff fecb 	bl	23fb9d4 <_ZN8particle5ErrorC1EOS0_>
 23fbc3e:	2014      	movs	r0, #20
 23fbc40:	f7fe fdd3 	bl	23fa7ea <_Znwj>
 23fbc44:	4604      	mov	r4, r0
 23fbc46:	b148      	cbz	r0, 23fbc5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fbc48:	2302      	movs	r3, #2
 23fbc4a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fbc4c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fbc4e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fbc52:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fbc54:	4631      	mov	r1, r6
 23fbc56:	300c      	adds	r0, #12
 23fbc58:	f7ff febc 	bl	23fb9d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fbc5c:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fbc5e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fbc60:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fbc64:	f7ff ff36 	bl	23fbad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fbc68:	4630      	mov	r0, r6
 23fbc6a:	f7ff fec0 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fbc6e:	a805      	add	r0, sp, #20
 23fbc70:	f7ff febd 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fbc74:	4628      	mov	r0, r5
 23fbc76:	b00b      	add	sp, #44	; 0x2c
 23fbc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fbc7c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fbc7e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fbc80:	2014      	movs	r0, #20
 23fbc82:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fbc86:	9307      	str	r3, [sp, #28]
 23fbc88:	f7fe fdaf 	bl	23fa7ea <_Znwj>
 23fbc8c:	4601      	mov	r1, r0
 23fbc8e:	b118      	cbz	r0, 23fbc98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fbc90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fbc94:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fbc96:	7044      	strb	r4, [r0, #1]
 23fbc98:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fbc9a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fbc9c:	f7ff ff1a 	bl	23fbad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fbca0:	4b1e      	ldr	r3, [pc, #120]	; (23fbd1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fbca2:	2008      	movs	r0, #8
 23fbca4:	9308      	str	r3, [sp, #32]
 23fbca6:	f7fe fda0 	bl	23fa7ea <_Znwj>
 23fbcaa:	4604      	mov	r4, r0
 23fbcac:	b110      	cbz	r0, 23fbcb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fbcae:	a903      	add	r1, sp, #12
 23fbcb0:	f7ff fecb 	bl	23fba4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fbcb4:	464a      	mov	r2, r9
 23fbcb6:	4641      	mov	r1, r8
 23fbcb8:	4638      	mov	r0, r7
 23fbcba:	9600      	str	r6, [sp, #0]
 23fbcbc:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fbcc0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fbcc2:	f7ff fcc1 	bl	23fb648 <spark_send_event>
 23fbcc6:	b9b8      	cbnz	r0, 23fbcf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fbcc8:	9b03      	ldr	r3, [sp, #12]
 23fbcca:	3301      	adds	r3, #1
 23fbccc:	781b      	ldrb	r3, [r3, #0]
 23fbcce:	b2db      	uxtb	r3, r3
 23fbcd0:	b993      	cbnz	r3, 23fbcf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fbcd2:	9305      	str	r3, [sp, #20]
 23fbcd4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fbcd8:	a905      	add	r1, sp, #20
 23fbcda:	a803      	add	r0, sp, #12
 23fbcdc:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fbce0:	f7ff ff1c 	bl	23fbb1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fbce4:	a805      	add	r0, sp, #20
 23fbce6:	f7ff fe82 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fbcea:	a805      	add	r0, sp, #20
 23fbcec:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fbcee:	f7ff feb5 	bl	23fba5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fbcf2:	a806      	add	r0, sp, #24
 23fbcf4:	f7ff fded 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbcf8:	a903      	add	r1, sp, #12
 23fbcfa:	a805      	add	r0, sp, #20
 23fbcfc:	f7ff fea5 	bl	23fba4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fbd00:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fbd02:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fbd04:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fbd06:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fbd08:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fbd0a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fbd0c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fbd0e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fbd10:	f7ff fddf 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbd14:	a804      	add	r0, sp, #16
 23fbd16:	f7ff fddc 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fbd1a:	e7ab      	b.n	23fbc74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fbd1c:	023fbd9d 	.word	0x023fbd9d

023fbd20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fbd20:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fbd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd24:	4605      	mov	r5, r0
	switch (__op)
 23fbd26:	d103      	bne.n	23fbd30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fbd28:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fbd2a:	6003      	str	r3, [r0, #0]
      }
 23fbd2c:	2000      	movs	r0, #0
 23fbd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fbd30:	2a02      	cmp	r2, #2
 23fbd32:	d010      	beq.n	23fbd56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fbd34:	2a03      	cmp	r2, #3
 23fbd36:	d1f9      	bne.n	23fbd2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fbd38:	6804      	ldr	r4, [r0, #0]
 23fbd3a:	2c00      	cmp	r4, #0
 23fbd3c:	d0f6      	beq.n	23fbd2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fbd3e:	f104 0010 	add.w	r0, r4, #16
 23fbd42:	f7ff fe54 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fbd46:	4620      	mov	r0, r4
 23fbd48:	f7ff fded 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fbd4c:	2118      	movs	r1, #24
 23fbd4e:	4620      	mov	r0, r4
 23fbd50:	f7fe fd4f 	bl	23fa7f2 <_ZdlPvj>
 23fbd54:	e7ea      	b.n	23fbd2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbd56:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fbd58:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbd5a:	f7fe fd46 	bl	23fa7ea <_Znwj>
 23fbd5e:	4604      	mov	r4, r0
 23fbd60:	b150      	cbz	r0, 23fbd78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fbd62:	4631      	mov	r1, r6
 23fbd64:	f7ff feca 	bl	23fbafc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fbd68:	6930      	ldr	r0, [r6, #16]
 23fbd6a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fbd6e:	b108      	cbz	r0, 23fbd74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fbd70:	f003 fd52 	bl	23ff818 <strdup>
        type_(type) {
 23fbd74:	6120      	str	r0, [r4, #16]
 23fbd76:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fbd78:	602c      	str	r4, [r5, #0]
	}
 23fbd7a:	e7d7      	b.n	23fbd2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fbd7c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fbd7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fbd7e:	2300      	movs	r3, #0
 23fbd80:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fbd82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fbd84:	4604      	mov	r4, r0
 23fbd86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fbd88:	b12b      	cbz	r3, 23fbd96 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fbd8a:	2202      	movs	r2, #2
 23fbd8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fbd8e:	68eb      	ldr	r3, [r5, #12]
 23fbd90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fbd92:	68ab      	ldr	r3, [r5, #8]
 23fbd94:	60a3      	str	r3, [r4, #8]
    }
 23fbd96:	4620      	mov	r0, r4
 23fbd98:	bd38      	pop	{r3, r4, r5, pc}
	...

023fbd9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fbd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fbd9e:	4604      	mov	r4, r0
 23fbda0:	b089      	sub	sp, #36	; 0x24
 23fbda2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fbda4:	a801      	add	r0, sp, #4
 23fbda6:	4611      	mov	r1, r2
 23fbda8:	f7ff fe58 	bl	23fba5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fbdac:	b1a4      	cbz	r4, 23fbdd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fbdae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fbdb0:	b11d      	cbz	r5, 23fbdba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fbdb2:	4628      	mov	r0, r5
 23fbdb4:	f003 fd30 	bl	23ff818 <strdup>
 23fbdb8:	4605      	mov	r5, r0
 23fbdba:	a801      	add	r0, sp, #4
 23fbdbc:	a903      	add	r1, sp, #12
        type_(type) {
 23fbdbe:	9503      	str	r5, [sp, #12]
 23fbdc0:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fbdc4:	f7ff feaa 	bl	23fbb1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fbdc8:	a803      	add	r0, sp, #12
 23fbdca:	f7ff fe10 	bl	23fb9ee <_ZN8particle5ErrorD1Ev>
 23fbdce:	a802      	add	r0, sp, #8
 23fbdd0:	f7ff fd7f 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fbdd4:	b009      	add	sp, #36	; 0x24
 23fbdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fbdd8:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fbdda:	9d01      	ldr	r5, [sp, #4]
 23fbddc:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fbde0:	2a00      	cmp	r2, #0
 23fbde2:	d103      	bne.n	23fbdec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fbde4:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fbde8:	2900      	cmp	r1, #0
 23fbdea:	d1f7      	bne.n	23fbddc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fbdec:	d1ef      	bne.n	23fbdce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fbdee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fbdf0:	2201      	movs	r2, #1
 23fbdf2:	18eb      	adds	r3, r5, r3
 23fbdf4:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fbdf8:	1d2b      	adds	r3, r5, #4
 23fbdfa:	e8d3 6fef 	ldaex	r6, [r3]
 23fbdfe:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fbe02:	2a00      	cmp	r2, #0
 23fbe04:	d1f9      	bne.n	23fbdfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fbe06:	2e00      	cmp	r6, #0
 23fbe08:	d0e1      	beq.n	23fbdce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fbe0a:	4620      	mov	r0, r4
 23fbe0c:	f7ff fbc8 	bl	23fb5a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fbe10:	4607      	mov	r7, r0
 23fbe12:	b160      	cbz	r0, 23fbe2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fbe14:	4630      	mov	r0, r6
 23fbe16:	f105 010c 	add.w	r1, r5, #12
 23fbe1a:	f7ff fe4a 	bl	23fbab2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fbe1e:	4630      	mov	r0, r6
 23fbe20:	f7ff fd81 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fbe24:	2110      	movs	r1, #16
 23fbe26:	4630      	mov	r0, r6
 23fbe28:	f7fe fce3 	bl	23fa7f2 <_ZdlPvj>
 23fbe2c:	e7cf      	b.n	23fbdce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fbe2e:	4631      	mov	r1, r6
 23fbe30:	a803      	add	r0, sp, #12
 23fbe32:	f7ff ffa3 	bl	23fbd7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fbe36:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fbe38:	2010      	movs	r0, #16
 23fbe3a:	f88d 301c 	strb.w	r3, [sp, #28]
 23fbe3e:	f7fe fcd4 	bl	23fa7ea <_Znwj>
 23fbe42:	4605      	mov	r5, r0
 23fbe44:	b1d0      	cbz	r0, 23fbe7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fbe46:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fbe48:	2014      	movs	r0, #20
 23fbe4a:	f7fe fcce 	bl	23fa7ea <_Znwj>
 23fbe4e:	4604      	mov	r4, r0
 23fbe50:	b178      	cbz	r0, 23fbe72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fbe52:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fbe54:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fbe56:	a803      	add	r0, sp, #12
 23fbe58:	f7ff fd94 	bl	23fb984 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbe5c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fbe5e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbe60:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbe62:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fbe64:	9205      	str	r2, [sp, #20]
 23fbe66:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbe68:	60e3      	str	r3, [r4, #12]
 23fbe6a:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fbe6e:	9206      	str	r2, [sp, #24]
 23fbe70:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fbe72:	4b07      	ldr	r3, [pc, #28]	; (23fbe90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fbe74:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fbe76:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fbe78:	4b06      	ldr	r3, [pc, #24]	; (23fbe94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fbe7a:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fbe7c:	a803      	add	r0, sp, #12
 23fbe7e:	f7ff fd52 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fbe82:	2200      	movs	r2, #0
 23fbe84:	4629      	mov	r1, r5
 23fbe86:	4804      	ldr	r0, [pc, #16]	; (23fbe98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fbe88:	f7ff fb98 	bl	23fb5bc <application_thread_invoke>
 23fbe8c:	e7c7      	b.n	23fbe1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fbe8e:	bf00      	nop
 23fbe90:	023fbac5 	.word	0x023fbac5
 23fbe94:	023fbe9d 	.word	0x023fbe9d
 23fbe98:	023fb8ff 	.word	0x023fb8ff

023fbe9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fbe9c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fbe9e:	b570      	push	{r4, r5, r6, lr}
 23fbea0:	4604      	mov	r4, r0
	switch (__op)
 23fbea2:	d103      	bne.n	23fbeac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fbea4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fbea6:	6003      	str	r3, [r0, #0]
      }
 23fbea8:	2000      	movs	r0, #0
 23fbeaa:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fbeac:	2a02      	cmp	r2, #2
 23fbeae:	d00c      	beq.n	23fbeca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fbeb0:	2a03      	cmp	r2, #3
 23fbeb2:	d1f9      	bne.n	23fbea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fbeb4:	6804      	ldr	r4, [r0, #0]
 23fbeb6:	2c00      	cmp	r4, #0
 23fbeb8:	d0f6      	beq.n	23fbea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fbeba:	4620      	mov	r0, r4
 23fbebc:	f7ff fd33 	bl	23fb926 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fbec0:	2114      	movs	r1, #20
 23fbec2:	4620      	mov	r0, r4
 23fbec4:	f7fe fc95 	bl	23fa7f2 <_ZdlPvj>
 23fbec8:	e7ee      	b.n	23fbea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbeca:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fbecc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fbece:	f7fe fc8c 	bl	23fa7ea <_Znwj>
 23fbed2:	4605      	mov	r5, r0
 23fbed4:	b120      	cbz	r0, 23fbee0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fbed6:	4631      	mov	r1, r6
 23fbed8:	f7ff ff50 	bl	23fbd7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fbedc:	7c33      	ldrb	r3, [r6, #16]
 23fbede:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fbee0:	6025      	str	r5, [r4, #0]
	}
 23fbee2:	e7e1      	b.n	23fbea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fbee4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fbee4:	2200      	movs	r2, #0
 23fbee6:	6840      	ldr	r0, [r0, #4]
 23fbee8:	4611      	mov	r1, r2
 23fbeea:	f7ff bc2b 	b.w	23fb744 <network_listening>

023fbeee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fbeee:	2200      	movs	r2, #0
 23fbef0:	6840      	ldr	r0, [r0, #4]
 23fbef2:	4611      	mov	r1, r2
 23fbef4:	f7ff bc42 	b.w	23fb77c <network_get_listen_timeout>

023fbef8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fbef8:	2200      	movs	r2, #0
 23fbefa:	6840      	ldr	r0, [r0, #4]
 23fbefc:	f7ff bc30 	b.w	23fb760 <network_set_listen_timeout>

023fbf00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fbf00:	2200      	movs	r2, #0
 23fbf02:	6840      	ldr	r0, [r0, #4]
 23fbf04:	f081 0101 	eor.w	r1, r1, #1
 23fbf08:	f7ff bc0e 	b.w	23fb728 <network_listen>

023fbf0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fbf0c:	2300      	movs	r3, #0
 23fbf0e:	6840      	ldr	r0, [r0, #4]
 23fbf10:	461a      	mov	r2, r3
 23fbf12:	4619      	mov	r1, r3
 23fbf14:	f7ff bbfa 	b.w	23fb70c <network_off>

023fbf18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fbf18:	2300      	movs	r3, #0
 23fbf1a:	6840      	ldr	r0, [r0, #4]
 23fbf1c:	461a      	mov	r2, r3
 23fbf1e:	4619      	mov	r1, r3
 23fbf20:	f7ff bbe6 	b.w	23fb6f0 <network_on>

023fbf24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fbf24:	2200      	movs	r2, #0
 23fbf26:	6840      	ldr	r0, [r0, #4]
 23fbf28:	4611      	mov	r1, r2
 23fbf2a:	f7ff bbd3 	b.w	23fb6d4 <network_ready>

023fbf2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fbf2e:	2200      	movs	r2, #0
 23fbf30:	6840      	ldr	r0, [r0, #4]
 23fbf32:	4611      	mov	r1, r2
 23fbf34:	f7ff bbb2 	b.w	23fb69c <network_connecting>

023fbf38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fbf38:	2200      	movs	r2, #0
 23fbf3a:	2102      	movs	r1, #2
 23fbf3c:	6840      	ldr	r0, [r0, #4]
 23fbf3e:	f7ff bbbb 	b.w	23fb6b8 <network_disconnect>

023fbf42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fbf42:	2300      	movs	r3, #0
 23fbf44:	6840      	ldr	r0, [r0, #4]
 23fbf46:	461a      	mov	r2, r3
 23fbf48:	f7ff bb9a 	b.w	23fb680 <network_connect>

023fbf4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fbf4c:	2203      	movs	r2, #3
 23fbf4e:	4b02      	ldr	r3, [pc, #8]	; (23fbf58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fbf50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fbf52:	4a02      	ldr	r2, [pc, #8]	; (23fbf5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fbf54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fbf56:	4770      	bx	lr
 23fbf58:	1007ae5c 	.word	0x1007ae5c
 23fbf5c:	023ffb74 	.word	0x023ffb74

023fbf60 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fbf60:	4770      	bx	lr

023fbf62 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fbf62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbf64:	4606      	mov	r6, r0
 23fbf66:	4615      	mov	r5, r2
 23fbf68:	460c      	mov	r4, r1
 23fbf6a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fbf6c:	42bc      	cmp	r4, r7
 23fbf6e:	d006      	beq.n	23fbf7e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fbf70:	6833      	ldr	r3, [r6, #0]
 23fbf72:	4630      	mov	r0, r6
 23fbf74:	689b      	ldr	r3, [r3, #8]
 23fbf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fbf7a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fbf7c:	e7f6      	b.n	23fbf6c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fbf7e:	4628      	mov	r0, r5
 23fbf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbf82 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fbf82:	2200      	movs	r2, #0
 23fbf84:	7c00      	ldrb	r0, [r0, #16]
 23fbf86:	f7ff b8bf 	b.w	23fb108 <hal_i2c_write>

023fbf8a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fbf8a:	2100      	movs	r1, #0
 23fbf8c:	7c00      	ldrb	r0, [r0, #16]
 23fbf8e:	f7ff b8c9 	b.w	23fb124 <hal_i2c_available>

023fbf92 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fbf92:	2100      	movs	r1, #0
 23fbf94:	7c00      	ldrb	r0, [r0, #16]
 23fbf96:	f7ff b8d3 	b.w	23fb140 <hal_i2c_read>

023fbf9a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fbf9a:	2100      	movs	r1, #0
 23fbf9c:	7c00      	ldrb	r0, [r0, #16]
 23fbf9e:	f7ff b8dd 	b.w	23fb15c <hal_i2c_peek>

023fbfa2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fbfa2:	2100      	movs	r1, #0
 23fbfa4:	7c00      	ldrb	r0, [r0, #16]
 23fbfa6:	f7ff b8e7 	b.w	23fb178 <hal_i2c_flush>

023fbfaa <_ZN7TwoWireD0Ev>:
 23fbfaa:	b510      	push	{r4, lr}
 23fbfac:	4604      	mov	r4, r0
 23fbfae:	2114      	movs	r1, #20
 23fbfb0:	f7fe fc1f 	bl	23fa7f2 <_ZdlPvj>
 23fbfb4:	4620      	mov	r0, r4
 23fbfb6:	bd10      	pop	{r4, pc}

023fbfb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fbfb8:	b538      	push	{r3, r4, r5, lr}
 23fbfba:	4604      	mov	r4, r0
 23fbfbc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fbfbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbfc2:	2200      	movs	r2, #0
 23fbfc4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fbfc8:	4b09      	ldr	r3, [pc, #36]	; (23fbff0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fbfca:	4608      	mov	r0, r1
  _i2c = i2c;
 23fbfcc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fbfce:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fbfd0:	4629      	mov	r1, r5
 23fbfd2:	f7ff f8ed 	bl	23fb1b0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fbfd6:	30bf      	adds	r0, #191	; 0xbf
 23fbfd8:	d108      	bne.n	23fbfec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fbfda:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fbfdc:	07db      	lsls	r3, r3, #31
 23fbfde:	d505      	bpl.n	23fbfec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fbfe0:	6868      	ldr	r0, [r5, #4]
 23fbfe2:	f7ff fc03 	bl	23fb7ec <free>
    free(conf.tx_buffer);
 23fbfe6:	68e8      	ldr	r0, [r5, #12]
 23fbfe8:	f7ff fc00 	bl	23fb7ec <free>
}
 23fbfec:	4620      	mov	r0, r4
 23fbfee:	bd38      	pop	{r3, r4, r5, pc}
 23fbff0:	023ffbb0 	.word	0x023ffbb0

023fbff4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fbff4:	4770      	bx	lr

023fbff6 <_ZN9IPAddressD0Ev>:
 23fbff6:	b510      	push	{r4, lr}
 23fbff8:	4604      	mov	r4, r0
 23fbffa:	2118      	movs	r1, #24
 23fbffc:	f7fe fbf9 	bl	23fa7f2 <_ZdlPvj>
 23fc000:	4620      	mov	r0, r4
 23fc002:	bd10      	pop	{r4, pc}

023fc004 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc004:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc006:	7d03      	ldrb	r3, [r0, #20]
{
 23fc008:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc00a:	2b06      	cmp	r3, #6
 23fc00c:	f04f 0400 	mov.w	r4, #0
{
 23fc010:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc012:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc016:	d012      	beq.n	23fc03e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc018:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc01c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc020:	220a      	movs	r2, #10
 23fc022:	4630      	mov	r0, r6
 23fc024:	f001 facf 	bl	23fd5c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc028:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc02a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc02c:	d019      	beq.n	23fc062 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc02e:	2c00      	cmp	r4, #0
 23fc030:	d0f4      	beq.n	23fc01c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc032:	212e      	movs	r1, #46	; 0x2e
 23fc034:	4630      	mov	r0, r6
 23fc036:	f001 fac3 	bl	23fd5c0 <_ZN5Print5printEc>
 23fc03a:	4404      	add	r4, r0
 23fc03c:	e7ee      	b.n	23fc01c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc03e:	232f      	movs	r3, #47	; 0x2f
 23fc040:	466a      	mov	r2, sp
 23fc042:	4639      	mov	r1, r7
 23fc044:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc046:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc04a:	f7ff f8bf 	bl	23fb1cc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc04e:	4668      	mov	r0, sp
 23fc050:	f7fe fba6 	bl	23fa7a0 <strlen>
 23fc054:	6833      	ldr	r3, [r6, #0]
 23fc056:	4602      	mov	r2, r0
 23fc058:	4669      	mov	r1, sp
 23fc05a:	4630      	mov	r0, r6
 23fc05c:	68db      	ldr	r3, [r3, #12]
 23fc05e:	4798      	blx	r3
 23fc060:	4604      	mov	r4, r0
    }
    return n;
}
 23fc062:	4620      	mov	r0, r4
 23fc064:	b00d      	add	sp, #52	; 0x34
 23fc066:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc068 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc068:	b510      	push	{r4, lr}
 23fc06a:	4604      	mov	r4, r0
 23fc06c:	4b04      	ldr	r3, [pc, #16]	; (23fc080 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc06e:	2211      	movs	r2, #17
 23fc070:	2100      	movs	r1, #0
 23fc072:	f840 3b04 	str.w	r3, [r0], #4
 23fc076:	f003 fb78 	bl	23ff76a <memset>
}
 23fc07a:	4620      	mov	r0, r4
 23fc07c:	bd10      	pop	{r4, pc}
 23fc07e:	bf00      	nop
 23fc080:	023ffbd8 	.word	0x023ffbd8

023fc084 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc084:	4603      	mov	r3, r0
 23fc086:	4a07      	ldr	r2, [pc, #28]	; (23fc0a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc088:	b510      	push	{r4, lr}
 23fc08a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc08e:	f101 0210 	add.w	r2, r1, #16
 23fc092:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc096:	4291      	cmp	r1, r2
 23fc098:	f843 4b04 	str.w	r4, [r3], #4
 23fc09c:	d1f9      	bne.n	23fc092 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc09e:	780a      	ldrb	r2, [r1, #0]
 23fc0a0:	701a      	strb	r2, [r3, #0]
}
 23fc0a2:	bd10      	pop	{r4, pc}
 23fc0a4:	023ffbd8 	.word	0x023ffbd8

023fc0a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc0a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc0aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc0ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc0b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc0b6:	2304      	movs	r3, #4
 23fc0b8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc0bc:	6041      	str	r1, [r0, #4]
 23fc0be:	7503      	strb	r3, [r0, #20]
}
 23fc0c0:	bd10      	pop	{r4, pc}
	...

023fc0c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc0c4:	b507      	push	{r0, r1, r2, lr}
 23fc0c6:	4b06      	ldr	r3, [pc, #24]	; (23fc0e0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc0c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc0ca:	78cb      	ldrb	r3, [r1, #3]
 23fc0cc:	9300      	str	r3, [sp, #0]
 23fc0ce:	788b      	ldrb	r3, [r1, #2]
 23fc0d0:	784a      	ldrb	r2, [r1, #1]
 23fc0d2:	7809      	ldrb	r1, [r1, #0]
 23fc0d4:	f7ff ffe8 	bl	23fc0a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc0d8:	b003      	add	sp, #12
 23fc0da:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc0de:	bf00      	nop
 23fc0e0:	023ffbd8 	.word	0x023ffbd8

023fc0e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fc0e4:	2201      	movs	r2, #1
 23fc0e6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fc0ea:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fc0ee:	4618      	mov	r0, r3
 23fc0f0:	2901      	cmp	r1, #1
 23fc0f2:	d108      	bne.n	23fc106 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fc0f4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fc0f8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fc0fc:	3a01      	subs	r2, #1
 23fc0fe:	f103 0310 	add.w	r3, r3, #16
 23fc102:	d1f2      	bne.n	23fc0ea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fc104:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fc106:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fc108:	bf04      	itt	eq
 23fc10a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fc10e:	1852      	addeq	r2, r2, r1
 23fc110:	e7f4      	b.n	23fc0fc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fc112 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc112:	b40e      	push	{r1, r2, r3}
 23fc114:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc116:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc118:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc11a:	af00      	add	r7, sp, #0
 23fc11c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fc120:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc124:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc126:	462b      	mov	r3, r5
 23fc128:	1878      	adds	r0, r7, r1
 23fc12a:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc12c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc12e:	f7ff fb79 	bl	23fb824 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fc132:	280f      	cmp	r0, #15
 23fc134:	687a      	ldr	r2, [r7, #4]
 23fc136:	d91a      	bls.n	23fc16e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fc138:	f100 0308 	add.w	r3, r0, #8
 23fc13c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fc140:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fc142:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc146:	1c41      	adds	r1, r0, #1
 23fc148:	462b      	mov	r3, r5
 23fc14a:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc14c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc14e:	f7ff fb69 	bl	23fb824 <vsnprintf>
        if (n > 0) {
 23fc152:	1e02      	subs	r2, r0, #0
 23fc154:	dd04      	ble.n	23fc160 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fc156:	6823      	ldr	r3, [r4, #0]
 23fc158:	4669      	mov	r1, sp
 23fc15a:	4620      	mov	r0, r4
 23fc15c:	689b      	ldr	r3, [r3, #8]
 23fc15e:	4798      	blx	r3
 23fc160:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fc162:	3720      	adds	r7, #32
 23fc164:	46bd      	mov	sp, r7
 23fc166:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc16a:	b003      	add	sp, #12
 23fc16c:	4770      	bx	lr
    } else if (n > 0) {
 23fc16e:	2800      	cmp	r0, #0
 23fc170:	d0f7      	beq.n	23fc162 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fc172:	6823      	ldr	r3, [r4, #0]
 23fc174:	4602      	mov	r2, r0
 23fc176:	689b      	ldr	r3, [r3, #8]
 23fc178:	4620      	mov	r0, r4
 23fc17a:	f107 0110 	add.w	r1, r7, #16
 23fc17e:	4798      	blx	r3
}
 23fc180:	e7ef      	b.n	23fc162 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fc182 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc182:	b538      	push	{r3, r4, r5, lr}
 23fc184:	680b      	ldr	r3, [r1, #0]
 23fc186:	4604      	mov	r4, r0
 23fc188:	6003      	str	r3, [r0, #0]
 23fc18a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fc18c:	6843      	ldr	r3, [r0, #4]
 23fc18e:	429d      	cmp	r5, r3
 23fc190:	d008      	beq.n	23fc1a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fc192:	b115      	cbz	r5, 23fc19a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fc194:	686b      	ldr	r3, [r5, #4]
 23fc196:	3301      	adds	r3, #1
 23fc198:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fc19a:	6860      	ldr	r0, [r4, #4]
 23fc19c:	b108      	cbz	r0, 23fc1a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fc19e:	f7ff fbcb 	bl	23fb938 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fc1a2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc1a4:	bd38      	pop	{r3, r4, r5, pc}

023fc1a6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fc1a6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc1a8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fc1aa:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc1ae:	2201      	movs	r2, #1
 23fc1b0:	689b      	ldr	r3, [r3, #8]
 23fc1b2:	f10d 0107 	add.w	r1, sp, #7
 23fc1b6:	4798      	blx	r3
}
 23fc1b8:	b003      	add	sp, #12
 23fc1ba:	f85d fb04 	ldr.w	pc, [sp], #4

023fc1be <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc1be:	460b      	mov	r3, r1
 23fc1c0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fc1c2:	2200      	movs	r2, #0
 23fc1c4:	b510      	push	{r4, lr}
 23fc1c6:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc1c8:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fc1cc:	6083      	str	r3, [r0, #8]
    if (t) {
 23fc1ce:	b90b      	cbnz	r3, 23fc1d4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fc1d0:	4620      	mov	r0, r4
 23fc1d2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fc1d4:	f7ff ffd5 	bl	23fc182 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fc1d8:	e7fa      	b.n	23fc1d0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fc1da <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fc1da:	6883      	ldr	r3, [r0, #8]
 23fc1dc:	b1eb      	cbz	r3, 23fc21a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fc1de:	781a      	ldrb	r2, [r3, #0]
 23fc1e0:	2a03      	cmp	r2, #3
 23fc1e2:	d81a      	bhi.n	23fc21a <_ZNK5spark9JSONValue4typeEv+0x40>
 23fc1e4:	e8df f002 	tbb	[pc, r2]
 23fc1e8:	1b021704 	.word	0x1b021704
 23fc1ec:	2005      	movs	r0, #5
 23fc1ee:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fc1f0:	6802      	ldr	r2, [r0, #0]
 23fc1f2:	685b      	ldr	r3, [r3, #4]
 23fc1f4:	6852      	ldr	r2, [r2, #4]
 23fc1f6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fc1f8:	282d      	cmp	r0, #45	; 0x2d
 23fc1fa:	d012      	beq.n	23fc222 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fc1fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fc200:	2b09      	cmp	r3, #9
 23fc202:	d90e      	bls.n	23fc222 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fc204:	2874      	cmp	r0, #116	; 0x74
 23fc206:	d00e      	beq.n	23fc226 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fc208:	2866      	cmp	r0, #102	; 0x66
 23fc20a:	d00c      	beq.n	23fc226 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fc20c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fc210:	4258      	negs	r0, r3
 23fc212:	4158      	adcs	r0, r3
 23fc214:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fc216:	2006      	movs	r0, #6
 23fc218:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fc21a:	2000      	movs	r0, #0
 23fc21c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fc21e:	2004      	movs	r0, #4
 23fc220:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fc222:	2003      	movs	r0, #3
 23fc224:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fc226:	2002      	movs	r0, #2
}
 23fc228:	4770      	bx	lr

023fc22a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fc22a:	b510      	push	{r4, lr}
 23fc22c:	4604      	mov	r4, r0
    switch (type()) {
 23fc22e:	f7ff ffd4 	bl	23fc1da <_ZNK5spark9JSONValue4typeEv>
 23fc232:	2802      	cmp	r0, #2
 23fc234:	d00e      	beq.n	23fc254 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fc236:	1ec3      	subs	r3, r0, #3
 23fc238:	b2db      	uxtb	r3, r3
 23fc23a:	2b01      	cmp	r3, #1
 23fc23c:	d814      	bhi.n	23fc268 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fc23e:	6822      	ldr	r2, [r4, #0]
 23fc240:	68a3      	ldr	r3, [r4, #8]
 23fc242:	6850      	ldr	r0, [r2, #4]
 23fc244:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fc246:	220a      	movs	r2, #10
}
 23fc248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fc24c:	2100      	movs	r1, #0
 23fc24e:	4418      	add	r0, r3
 23fc250:	f003 bbaa 	b.w	23ff9a8 <strtol>
        const char* const s = d_->json + t_->start;
 23fc254:	6822      	ldr	r2, [r4, #0]
 23fc256:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fc258:	6852      	ldr	r2, [r2, #4]
 23fc25a:	685b      	ldr	r3, [r3, #4]
 23fc25c:	5cd0      	ldrb	r0, [r2, r3]
 23fc25e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fc262:	4258      	negs	r0, r3
 23fc264:	4158      	adcs	r0, r3
}
 23fc266:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fc268:	2000      	movs	r0, #0
 23fc26a:	e7fc      	b.n	23fc266 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fc26c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc26c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc26e:	2300      	movs	r3, #0
 23fc270:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc272:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fc276:	480e      	ldr	r0, [pc, #56]	; (23fc2b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fc278:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fc27c:	b1a9      	cbz	r1, 23fc2aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fc27e:	780b      	ldrb	r3, [r1, #0]
 23fc280:	2b03      	cmp	r3, #3
 23fc282:	d006      	beq.n	23fc292 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fc284:	b98b      	cbnz	r3, 23fc2aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fc286:	6813      	ldr	r3, [r2, #0]
 23fc288:	6858      	ldr	r0, [r3, #4]
 23fc28a:	684b      	ldr	r3, [r1, #4]
 23fc28c:	5cc3      	ldrb	r3, [r0, r3]
 23fc28e:	2b6e      	cmp	r3, #110	; 0x6e
 23fc290:	d007      	beq.n	23fc2a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fc292:	6813      	ldr	r3, [r2, #0]
 23fc294:	684d      	ldr	r5, [r1, #4]
 23fc296:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fc298:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fc29a:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fc29c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fc29e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fc2a0:	60e3      	str	r3, [r4, #12]
 23fc2a2:	4611      	mov	r1, r2
 23fc2a4:	4620      	mov	r0, r4
 23fc2a6:	f7ff ff6c 	bl	23fc182 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc2aa:	4620      	mov	r0, r4
 23fc2ac:	bd38      	pop	{r3, r4, r5, pc}
 23fc2ae:	bf00      	nop
 23fc2b0:	023ffc47 	.word	0x023ffc47

023fc2b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc2b4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc2b6:	2500      	movs	r5, #0
 23fc2b8:	460b      	mov	r3, r1
 23fc2ba:	4604      	mov	r4, r0
 23fc2bc:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc2be:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fc2c2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fc2c6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fc2ca:	b14b      	cbz	r3, 23fc2e0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fc2cc:	781a      	ldrb	r2, [r3, #0]
 23fc2ce:	2a01      	cmp	r2, #1
 23fc2d0:	d106      	bne.n	23fc2e0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fc2d2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fc2d6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fc2d8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fc2da:	6143      	str	r3, [r0, #20]
 23fc2dc:	f7ff ff51 	bl	23fc182 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc2e0:	4620      	mov	r0, r4
 23fc2e2:	bd38      	pop	{r3, r4, r5, pc}

023fc2e4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fc2e4:	b510      	push	{r4, lr}
    if (!n_) {
 23fc2e6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fc2e8:	4604      	mov	r4, r0
    if (!n_) {
 23fc2ea:	b163      	cbz	r3, 23fc306 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fc2ec:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fc2ee:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fc2f0:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fc2f2:	3010      	adds	r0, #16
 23fc2f4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fc2f6:	6120      	str	r0, [r4, #16]
    --n_;
 23fc2f8:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fc2fa:	b113      	cbz	r3, 23fc302 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fc2fc:	f7ff fef2 	bl	23fc0e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fc300:	60a0      	str	r0, [r4, #8]
    return true;
 23fc302:	2001      	movs	r0, #1
 23fc304:	e000      	b.n	23fc308 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fc306:	4618      	mov	r0, r3
}
 23fc308:	bd10      	pop	{r4, pc}

023fc30a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc30a:	b510      	push	{r4, lr}
    write('}');
 23fc30c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc30e:	4604      	mov	r4, r0
    write('}');
 23fc310:	f7ff ff49 	bl	23fc1a6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fc314:	2301      	movs	r3, #1
}
 23fc316:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc318:	7123      	strb	r3, [r4, #4]
}
 23fc31a:	bd10      	pop	{r4, pc}

023fc31c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fc31c:	b508      	push	{r3, lr}
    switch (state_) {
 23fc31e:	7903      	ldrb	r3, [r0, #4]
 23fc320:	2b01      	cmp	r3, #1
 23fc322:	d002      	beq.n	23fc32a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fc324:	2b02      	cmp	r3, #2
 23fc326:	d004      	beq.n	23fc332 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fc328:	bd08      	pop	{r3, pc}
        write(',');
 23fc32a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fc32c:	f7ff ff3b 	bl	23fc1a6 <_ZN5spark10JSONWriter5writeEc>
}
 23fc330:	e7fa      	b.n	23fc328 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fc332:	213a      	movs	r1, #58	; 0x3a
 23fc334:	e7fa      	b.n	23fc32c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fc336 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fc336:	b510      	push	{r4, lr}
 23fc338:	4604      	mov	r4, r0
    writeSeparator();
 23fc33a:	f7ff ffef 	bl	23fc31c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fc33e:	4620      	mov	r0, r4
 23fc340:	217b      	movs	r1, #123	; 0x7b
 23fc342:	f7ff ff30 	bl	23fc1a6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc346:	2300      	movs	r3, #0
}
 23fc348:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc34a:	7123      	strb	r3, [r4, #4]
}
 23fc34c:	bd10      	pop	{r4, pc}
	...

023fc350 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fc350:	b513      	push	{r0, r1, r4, lr}
 23fc352:	4604      	mov	r4, r0
 23fc354:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc356:	f7ff ffe1 	bl	23fc31c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fc35a:	6823      	ldr	r3, [r4, #0]
 23fc35c:	4620      	mov	r0, r4
 23fc35e:	68db      	ldr	r3, [r3, #12]
 23fc360:	9a01      	ldr	r2, [sp, #4]
 23fc362:	4903      	ldr	r1, [pc, #12]	; (23fc370 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fc364:	4798      	blx	r3
    state_ = NEXT;
 23fc366:	2301      	movs	r3, #1
}
 23fc368:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc36a:	7123      	strb	r3, [r4, #4]
}
 23fc36c:	b002      	add	sp, #8
 23fc36e:	bd10      	pop	{r4, pc}
 23fc370:	023ffbe4 	.word	0x023ffbe4

023fc374 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fc374:	b513      	push	{r0, r1, r4, lr}
 23fc376:	4604      	mov	r4, r0
 23fc378:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc37a:	f7ff ffcf 	bl	23fc31c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fc37e:	6823      	ldr	r3, [r4, #0]
 23fc380:	4620      	mov	r0, r4
 23fc382:	68db      	ldr	r3, [r3, #12]
 23fc384:	9a01      	ldr	r2, [sp, #4]
 23fc386:	4903      	ldr	r1, [pc, #12]	; (23fc394 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fc388:	4798      	blx	r3
    state_ = NEXT;
 23fc38a:	2301      	movs	r3, #1
}
 23fc38c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc38e:	7123      	strb	r3, [r4, #4]
}
 23fc390:	b002      	add	sp, #8
 23fc392:	bd10      	pop	{r4, pc}
 23fc394:	023ffbe7 	.word	0x023ffbe7

023fc398 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc39c:	460d      	mov	r5, r1
 23fc39e:	4690      	mov	r8, r2
    write('"');
 23fc3a0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc3a2:	4604      	mov	r4, r0
 23fc3a4:	462f      	mov	r7, r5
    write('"');
 23fc3a6:	f7ff fefe 	bl	23fc1a6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fc3aa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fc450 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fc3ae:	44a8      	add	r8, r5
    while (s != end) {
 23fc3b0:	4547      	cmp	r7, r8
 23fc3b2:	46ba      	mov	sl, r7
 23fc3b4:	d03d      	beq.n	23fc432 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fc3b6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fc3ba:	2e22      	cmp	r6, #34	; 0x22
 23fc3bc:	d006      	beq.n	23fc3cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc3be:	2e5c      	cmp	r6, #92	; 0x5c
 23fc3c0:	d004      	beq.n	23fc3cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc3c2:	4630      	mov	r0, r6
 23fc3c4:	f003 f9a2 	bl	23ff70c <isprint>
 23fc3c8:	2800      	cmp	r0, #0
 23fc3ca:	d1f1      	bne.n	23fc3b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fc3cc:	6823      	ldr	r3, [r4, #0]
 23fc3ce:	4629      	mov	r1, r5
 23fc3d0:	4620      	mov	r0, r4
 23fc3d2:	689b      	ldr	r3, [r3, #8]
 23fc3d4:	ebaa 0205 	sub.w	r2, sl, r5
 23fc3d8:	4798      	blx	r3
            write('\\');
 23fc3da:	215c      	movs	r1, #92	; 0x5c
 23fc3dc:	4620      	mov	r0, r4
 23fc3de:	f7ff fee2 	bl	23fc1a6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fc3e2:	2e0d      	cmp	r6, #13
 23fc3e4:	d80a      	bhi.n	23fc3fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fc3e6:	2e07      	cmp	r6, #7
 23fc3e8:	d91c      	bls.n	23fc424 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc3ea:	f1a6 0308 	sub.w	r3, r6, #8
 23fc3ee:	2b05      	cmp	r3, #5
 23fc3f0:	d818      	bhi.n	23fc424 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc3f2:	e8df f003 	tbb	[pc, r3]
 23fc3f6:	0f0d      	.short	0x0f0d
 23fc3f8:	15131711 	.word	0x15131711
 23fc3fc:	2e22      	cmp	r6, #34	; 0x22
 23fc3fe:	d001      	beq.n	23fc404 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fc400:	2e5c      	cmp	r6, #92	; 0x5c
 23fc402:	d10f      	bne.n	23fc424 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fc404:	4631      	mov	r1, r6
                write('b');
 23fc406:	4620      	mov	r0, r4
 23fc408:	f7ff fecd 	bl	23fc1a6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fc40c:	463d      	mov	r5, r7
    while (s != end) {
 23fc40e:	e7cf      	b.n	23fc3b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fc410:	2162      	movs	r1, #98	; 0x62
 23fc412:	e7f8      	b.n	23fc406 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fc414:	2174      	movs	r1, #116	; 0x74
 23fc416:	e7f6      	b.n	23fc406 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fc418:	216e      	movs	r1, #110	; 0x6e
 23fc41a:	e7f4      	b.n	23fc406 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fc41c:	2166      	movs	r1, #102	; 0x66
 23fc41e:	e7f2      	b.n	23fc406 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fc420:	2172      	movs	r1, #114	; 0x72
 23fc422:	e7f0      	b.n	23fc406 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fc424:	6823      	ldr	r3, [r4, #0]
 23fc426:	4632      	mov	r2, r6
 23fc428:	4649      	mov	r1, r9
 23fc42a:	4620      	mov	r0, r4
 23fc42c:	68db      	ldr	r3, [r3, #12]
 23fc42e:	4798      	blx	r3
                break;
 23fc430:	e7ec      	b.n	23fc40c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fc432:	42bd      	cmp	r5, r7
 23fc434:	d005      	beq.n	23fc442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fc436:	6823      	ldr	r3, [r4, #0]
 23fc438:	4629      	mov	r1, r5
 23fc43a:	4620      	mov	r0, r4
 23fc43c:	689b      	ldr	r3, [r3, #8]
 23fc43e:	1b7a      	subs	r2, r7, r5
 23fc440:	4798      	blx	r3
    }
    write('"');
 23fc442:	2122      	movs	r1, #34	; 0x22
 23fc444:	4620      	mov	r0, r4
 23fc446:	f7ff feae 	bl	23fc1a6 <_ZN5spark10JSONWriter5writeEc>
}
 23fc44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc44e:	bf00      	nop
 23fc450:	023ffbea 	.word	0x023ffbea

023fc454 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fc454:	b513      	push	{r0, r1, r4, lr}
 23fc456:	4604      	mov	r4, r0
 23fc458:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc45c:	f7ff ff5e 	bl	23fc31c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fc460:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc464:	4620      	mov	r0, r4
 23fc466:	f7ff ff97 	bl	23fc398 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fc46a:	2302      	movs	r3, #2
}
 23fc46c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fc46e:	7123      	strb	r3, [r4, #4]
}
 23fc470:	b002      	add	sp, #8
 23fc472:	bd10      	pop	{r4, pc}

023fc474 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fc474:	b513      	push	{r0, r1, r4, lr}
 23fc476:	4604      	mov	r4, r0
 23fc478:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc47c:	f7ff ff4e 	bl	23fc31c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fc480:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc484:	4620      	mov	r0, r4
 23fc486:	f7ff ff87 	bl	23fc398 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fc48a:	2301      	movs	r3, #1
}
 23fc48c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc48e:	7123      	strb	r3, [r4, #4]
}
 23fc490:	b002      	add	sp, #8
 23fc492:	bd10      	pop	{r4, pc}

023fc494 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc494:	6880      	ldr	r0, [r0, #8]
 23fc496:	6803      	ldr	r3, [r0, #0]
 23fc498:	68db      	ldr	r3, [r3, #12]
 23fc49a:	4718      	bx	r3

023fc49c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc49c:	4770      	bx	lr

023fc49e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc49e:	4608      	mov	r0, r1
 23fc4a0:	b111      	cbz	r1, 23fc4a8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc4a2:	680b      	ldr	r3, [r1, #0]
 23fc4a4:	685b      	ldr	r3, [r3, #4]
 23fc4a6:	4718      	bx	r3
}
 23fc4a8:	4770      	bx	lr

023fc4aa <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc4aa:	4770      	bx	lr

023fc4ac <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc4ac:	4770      	bx	lr

023fc4ae <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc4ae:	4770      	bx	lr

023fc4b0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc4b0:	4770      	bx	lr

023fc4b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc4b2:	b538      	push	{r3, r4, r5, lr}
 23fc4b4:	4604      	mov	r4, r0
 23fc4b6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc4b8:	6800      	ldr	r0, [r0, #0]
 23fc4ba:	212e      	movs	r1, #46	; 0x2e
 23fc4bc:	f003 f999 	bl	23ff7f2 <strchrnul>
    size = s - category;
 23fc4c0:	6823      	ldr	r3, [r4, #0]
 23fc4c2:	1ac3      	subs	r3, r0, r3
 23fc4c4:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc4c6:	b123      	cbz	r3, 23fc4d2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc4c8:	7803      	ldrb	r3, [r0, #0]
 23fc4ca:	b103      	cbz	r3, 23fc4ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc4cc:	3001      	adds	r0, #1
 23fc4ce:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc4d0:	6020      	str	r0, [r4, #0]
}
 23fc4d2:	4618      	mov	r0, r3
 23fc4d4:	bd38      	pop	{r3, r4, r5, pc}

023fc4d6 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc4d6:	b510      	push	{r4, lr}
 23fc4d8:	4604      	mov	r4, r0
 23fc4da:	210c      	movs	r1, #12
 23fc4dc:	f7fe f989 	bl	23fa7f2 <_ZdlPvj>
 23fc4e0:	4620      	mov	r0, r4
 23fc4e2:	bd10      	pop	{r4, pc}

023fc4e4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fc4e4:	b510      	push	{r4, lr}
 23fc4e6:	4604      	mov	r4, r0
 23fc4e8:	2104      	movs	r1, #4
 23fc4ea:	f7fe f982 	bl	23fa7f2 <_ZdlPvj>
 23fc4ee:	4620      	mov	r0, r4
 23fc4f0:	bd10      	pop	{r4, pc}

023fc4f2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc4f2:	b510      	push	{r4, lr}
 23fc4f4:	4604      	mov	r4, r0
 23fc4f6:	2104      	movs	r1, #4
 23fc4f8:	f7fe f97b 	bl	23fa7f2 <_ZdlPvj>
 23fc4fc:	4620      	mov	r0, r4
 23fc4fe:	bd10      	pop	{r4, pc}

023fc500 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fc500:	f7fe bd84 	b.w	23fb00c <os_mutex_recursive_lock>

023fc504 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fc504:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fc506:	f7fe f941 	bl	23fa78c <strcmp>
}
 23fc50a:	fab0 f080 	clz	r0, r0
 23fc50e:	0940      	lsrs	r0, r0, #5
 23fc510:	bd08      	pop	{r3, pc}

023fc512 <__tcf_1>:
 23fc512:	4770      	bx	lr

023fc514 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fc514:	b510      	push	{r4, lr}
 23fc516:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fc518:	f001 fafe 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fc51c:	4284      	cmp	r4, r0
 23fc51e:	d105      	bne.n	23fc52c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fc520:	f001 fafa 	bl	23fdb18 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fc524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fc528:	f001 bae8 	b.w	23fdafc <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fc52c:	f001 fd22 	bl	23fdf74 <_Z22__fetch_global_Serial1v>
 23fc530:	4284      	cmp	r4, r0
 23fc532:	d105      	bne.n	23fc540 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fc534:	f001 fd1e 	bl	23fdf74 <_Z22__fetch_global_Serial1v>
}
 23fc538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fc53c:	f001 ba81 	b.w	23fda42 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fc540:	b12c      	cbz	r4, 23fc54e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fc542:	6823      	ldr	r3, [r4, #0]
 23fc544:	4620      	mov	r0, r4
}
 23fc546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc54a:	685b      	ldr	r3, [r3, #4]
 23fc54c:	4718      	bx	r3
 23fc54e:	bd10      	pop	{r4, pc}

023fc550 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc550:	680b      	ldr	r3, [r1, #0]
 23fc552:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc554:	684b      	ldr	r3, [r1, #4]
 23fc556:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc558:	b113      	cbz	r3, 23fc560 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fc55a:	685a      	ldr	r2, [r3, #4]
 23fc55c:	3201      	adds	r2, #1
 23fc55e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc560:	4770      	bx	lr

023fc562 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fc562:	b513      	push	{r0, r1, r4, lr}
 23fc564:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fc566:	4608      	mov	r0, r1
 23fc568:	9101      	str	r1, [sp, #4]
 23fc56a:	f7fe f919 	bl	23fa7a0 <strlen>
 23fc56e:	4602      	mov	r2, r0
 23fc570:	4620      	mov	r0, r4
 23fc572:	9901      	ldr	r1, [sp, #4]
}
 23fc574:	b002      	add	sp, #8
 23fc576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fc57a:	f7ff bf7b 	b.w	23fc474 <_ZN5spark10JSONWriter5valueEPKcj>

023fc57e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fc57e:	b513      	push	{r0, r1, r4, lr}
 23fc580:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fc582:	4608      	mov	r0, r1
 23fc584:	9101      	str	r1, [sp, #4]
 23fc586:	f7fe f90b 	bl	23fa7a0 <strlen>
 23fc58a:	4602      	mov	r2, r0
 23fc58c:	4620      	mov	r0, r4
 23fc58e:	6823      	ldr	r3, [r4, #0]
 23fc590:	9901      	ldr	r1, [sp, #4]
 23fc592:	68db      	ldr	r3, [r3, #12]
}
 23fc594:	b002      	add	sp, #8
 23fc596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fc59a:	4718      	bx	r3

023fc59c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fc59c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc59e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fc5a0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc5a4:	2201      	movs	r2, #1
 23fc5a6:	68db      	ldr	r3, [r3, #12]
 23fc5a8:	f10d 0107 	add.w	r1, sp, #7
 23fc5ac:	4798      	blx	r3
}
 23fc5ae:	b003      	add	sp, #12
 23fc5b0:	f85d fb04 	ldr.w	pc, [sp], #4

023fc5b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fc5b4:	680a      	ldr	r2, [r1, #0]
 23fc5b6:	b510      	push	{r4, lr}
 23fc5b8:	6002      	str	r2, [r0, #0]
 23fc5ba:	684a      	ldr	r2, [r1, #4]
 23fc5bc:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fc5be:	2200      	movs	r2, #0
 23fc5c0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fc5c4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc5c6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc5c8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc5ca:	6084      	str	r4, [r0, #8]
 23fc5cc:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc5ce:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc5d0:	60c4      	str	r4, [r0, #12]
 23fc5d2:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc5d4:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc5d6:	6104      	str	r4, [r0, #16]
 23fc5d8:	bd10      	pop	{r4, pc}
	...

023fc5dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fc5e0:	f04f 0a14 	mov.w	sl, #20
 23fc5e4:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fc5e8:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fc5ea:	4645      	mov	r5, r8
 23fc5ec:	fb0a f404 	mul.w	r4, sl, r4
 23fc5f0:	9300      	str	r3, [sp, #0]
 23fc5f2:	4b17      	ldr	r3, [pc, #92]	; (23fc650 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc5f4:	10a4      	asrs	r4, r4, #2
 23fc5f6:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fc5f8:	2c00      	cmp	r4, #0
 23fc5fa:	dd21      	ble.n	23fc640 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fc5fc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fc5fe:	fb0a f006 	mul.w	r0, sl, r6
 23fc602:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fc606:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fc60a:	463a      	mov	r2, r7
 23fc60c:	455f      	cmp	r7, fp
 23fc60e:	bf28      	it	cs
 23fc610:	465a      	movcs	r2, fp
 23fc612:	5828      	ldr	r0, [r5, r0]
 23fc614:	9101      	str	r1, [sp, #4]
 23fc616:	f003 f91c 	bl	23ff852 <strncmp>
                if (cmp == 0) {
 23fc61a:	2800      	cmp	r0, #0
 23fc61c:	f04f 0301 	mov.w	r3, #1
 23fc620:	9901      	ldr	r1, [sp, #4]
 23fc622:	d10b      	bne.n	23fc63c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fc624:	455f      	cmp	r7, fp
 23fc626:	d103      	bne.n	23fc630 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fc628:	9a00      	ldr	r2, [sp, #0]
 23fc62a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc62c:	4634      	mov	r4, r6
 23fc62e:	e7e3      	b.n	23fc5f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fc630:	d9fc      	bls.n	23fc62c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fc632:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fc634:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fc638:	3e01      	subs	r6, #1
 23fc63a:	e7f7      	b.n	23fc62c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fc63c:	dbf9      	blt.n	23fc632 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fc63e:	e7f5      	b.n	23fc62c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fc640:	eba5 0508 	sub.w	r5, r5, r8
}
 23fc644:	4802      	ldr	r0, [pc, #8]	; (23fc650 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc646:	10ad      	asrs	r5, r5, #2
 23fc648:	4368      	muls	r0, r5
 23fc64a:	b003      	add	sp, #12
 23fc64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc650:	cccccccd 	.word	0xcccccccd

023fc654 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc654:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fc656:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fc658:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc65a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fc65c:	b303      	cbz	r3, 23fc6a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fc65e:	b1f9      	cbz	r1, 23fc6a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fc660:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fc662:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fc666:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fc668:	a903      	add	r1, sp, #12
 23fc66a:	a801      	add	r0, sp, #4
 23fc66c:	f7ff ff21 	bl	23fc4b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fc670:	4601      	mov	r1, r0
 23fc672:	b1a8      	cbz	r0, 23fc6a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc674:	f10d 030b 	add.w	r3, sp, #11
 23fc678:	4620      	mov	r0, r4
 23fc67a:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fc67c:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc680:	f7ff ffac 	bl	23fc5dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fc684:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fc688:	b153      	cbz	r3, 23fc6a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fc68a:	6823      	ldr	r3, [r4, #0]
 23fc68c:	2414      	movs	r4, #20
 23fc68e:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fc692:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fc696:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fc698:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fc69a:	bfa8      	it	ge
 23fc69c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fc69e:	e7e3      	b.n	23fc668 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fc6a0:	4628      	mov	r0, r5
 23fc6a2:	b004      	add	sp, #16
 23fc6a4:	bd70      	pop	{r4, r5, r6, pc}

023fc6a6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fc6a6:	b40e      	push	{r1, r2, r3}
 23fc6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc6aa:	b08c      	sub	sp, #48	; 0x30
 23fc6ac:	af00      	add	r7, sp, #0
 23fc6ae:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fc6b2:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc6b6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc6b8:	462b      	mov	r3, r5
 23fc6ba:	2120      	movs	r1, #32
 23fc6bc:	f107 0010 	add.w	r0, r7, #16
 23fc6c0:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc6c2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc6c4:	f7ff f8ae 	bl	23fb824 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fc6c8:	281f      	cmp	r0, #31
 23fc6ca:	687a      	ldr	r2, [r7, #4]
 23fc6cc:	d91a      	bls.n	23fc704 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fc6ce:	f100 0308 	add.w	r3, r0, #8
 23fc6d2:	f023 0307 	bic.w	r3, r3, #7
        }
 23fc6d6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fc6d8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc6dc:	1c41      	adds	r1, r0, #1
 23fc6de:	462b      	mov	r3, r5
 23fc6e0:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc6e2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc6e4:	f7ff f89e 	bl	23fb824 <vsnprintf>
        if (n > 0) {
 23fc6e8:	1e02      	subs	r2, r0, #0
 23fc6ea:	dd04      	ble.n	23fc6f6 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fc6ec:	6823      	ldr	r3, [r4, #0]
 23fc6ee:	4669      	mov	r1, sp
 23fc6f0:	4620      	mov	r0, r4
 23fc6f2:	68db      	ldr	r3, [r3, #12]
 23fc6f4:	4798      	blx	r3
 23fc6f6:	46b5      	mov	sp, r6
}
 23fc6f8:	3730      	adds	r7, #48	; 0x30
 23fc6fa:	46bd      	mov	sp, r7
 23fc6fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc700:	b003      	add	sp, #12
 23fc702:	4770      	bx	lr
    } else if (n > 0) {
 23fc704:	2800      	cmp	r0, #0
 23fc706:	d0f7      	beq.n	23fc6f8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fc708:	6823      	ldr	r3, [r4, #0]
 23fc70a:	4602      	mov	r2, r0
 23fc70c:	68db      	ldr	r3, [r3, #12]
 23fc70e:	4620      	mov	r0, r4
 23fc710:	f107 0110 	add.w	r1, r7, #16
 23fc714:	4798      	blx	r3
}
 23fc716:	e7ef      	b.n	23fc6f8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fc718 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fc718:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fc71a:	4c08      	ldr	r4, [pc, #32]	; (23fc73c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fc71c:	e8d4 3f8f 	ldab	r3, [r4]
 23fc720:	07db      	lsls	r3, r3, #31
 23fc722:	d409      	bmi.n	23fc738 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc724:	4620      	mov	r0, r4
 23fc726:	f7fe f873 	bl	23fa810 <__cxa_guard_acquire>
 23fc72a:	b128      	cbz	r0, 23fc738 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc72c:	4620      	mov	r0, r4
 23fc72e:	f7fe f874 	bl	23fa81a <__cxa_guard_release>
 23fc732:	4803      	ldr	r0, [pc, #12]	; (23fc740 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fc734:	f002 ffe4 	bl	23ff700 <atexit>
}
 23fc738:	4802      	ldr	r0, [pc, #8]	; (23fc744 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fc73a:	bd10      	pop	{r4, pc}
 23fc73c:	1007ae68 	.word	0x1007ae68
 23fc740:	023fc4ab 	.word	0x023fc4ab
 23fc744:	1007ada4 	.word	0x1007ada4

023fc748 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fc748:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fc74a:	4c08      	ldr	r4, [pc, #32]	; (23fc76c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fc74c:	e8d4 3f8f 	ldab	r3, [r4]
 23fc750:	07db      	lsls	r3, r3, #31
 23fc752:	d409      	bmi.n	23fc768 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc754:	4620      	mov	r0, r4
 23fc756:	f7fe f85b 	bl	23fa810 <__cxa_guard_acquire>
 23fc75a:	b128      	cbz	r0, 23fc768 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc75c:	4620      	mov	r0, r4
 23fc75e:	f7fe f85c 	bl	23fa81a <__cxa_guard_release>
 23fc762:	4803      	ldr	r0, [pc, #12]	; (23fc770 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fc764:	f002 ffcc 	bl	23ff700 <atexit>
    return &factory;
}
 23fc768:	4802      	ldr	r0, [pc, #8]	; (23fc774 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fc76a:	bd10      	pop	{r4, pc}
 23fc76c:	1007ae6c 	.word	0x1007ae6c
 23fc770:	023fc513 	.word	0x023fc513
 23fc774:	1007ada8 	.word	0x1007ada8

023fc778 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fc778:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fc77a:	2500      	movs	r5, #0
 23fc77c:	4604      	mov	r4, r0
 23fc77e:	e9c0 5500 	strd	r5, r5, [r0]
 23fc782:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fc786:	6085      	str	r5, [r0, #8]
 23fc788:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fc78a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fc78e:	f7fe fc21 	bl	23fafd4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fc792:	f7ff ffc1 	bl	23fc718 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fc796:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc798:	f7ff ffd6 	bl	23fc748 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fc79c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc79e:	6220      	str	r0, [r4, #32]
}
 23fc7a0:	4620      	mov	r0, r4
 23fc7a2:	bd38      	pop	{r3, r4, r5, pc}

023fc7a4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fc7a4:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fc7a6:	4c0a      	ldr	r4, [pc, #40]	; (23fc7d0 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fc7a8:	e8d4 3f8f 	ldab	r3, [r4]
 23fc7ac:	07db      	lsls	r3, r3, #31
 23fc7ae:	d40c      	bmi.n	23fc7ca <_ZN5spark10LogManager8instanceEv+0x26>
 23fc7b0:	4620      	mov	r0, r4
 23fc7b2:	f7fe f82d 	bl	23fa810 <__cxa_guard_acquire>
 23fc7b6:	b140      	cbz	r0, 23fc7ca <_ZN5spark10LogManager8instanceEv+0x26>
 23fc7b8:	4806      	ldr	r0, [pc, #24]	; (23fc7d4 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc7ba:	f7ff ffdd 	bl	23fc778 <_ZN5spark10LogManagerC1Ev>
 23fc7be:	4620      	mov	r0, r4
 23fc7c0:	f7fe f82b 	bl	23fa81a <__cxa_guard_release>
 23fc7c4:	4804      	ldr	r0, [pc, #16]	; (23fc7d8 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fc7c6:	f002 ff9b 	bl	23ff700 <atexit>
    return &mgr;
}
 23fc7ca:	4802      	ldr	r0, [pc, #8]	; (23fc7d4 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc7cc:	bd10      	pop	{r4, pc}
 23fc7ce:	bf00      	nop
 23fc7d0:	1007ae64 	.word	0x1007ae64
 23fc7d4:	1007ae74 	.word	0x1007ae74
 23fc7d8:	023fccf5 	.word	0x023fccf5

023fc7dc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fc7dc:	2300      	movs	r3, #0
 23fc7de:	4a02      	ldr	r2, [pc, #8]	; (23fc7e8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fc7e0:	4902      	ldr	r1, [pc, #8]	; (23fc7ec <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fc7e2:	4803      	ldr	r0, [pc, #12]	; (23fc7f0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fc7e4:	f7fe beb2 	b.w	23fb54c <log_set_callbacks>
 23fc7e8:	023fcadd 	.word	0x023fcadd
 23fc7ec:	023fca69 	.word	0x023fca69
 23fc7f0:	023fc9e9 	.word	0x023fc9e9

023fc7f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fc7f4:	2300      	movs	r3, #0
 23fc7f6:	461a      	mov	r2, r3
 23fc7f8:	4619      	mov	r1, r3
 23fc7fa:	4618      	mov	r0, r3
 23fc7fc:	f7fe bea6 	b.w	23fb54c <log_set_callbacks>

023fc800 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fc800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc802:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fc804:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fc806:	4668      	mov	r0, sp
 23fc808:	f7ff fea2 	bl	23fc550 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc80c:	466a      	mov	r2, sp
 23fc80e:	4629      	mov	r1, r5
 23fc810:	4620      	mov	r0, r4
 23fc812:	f7ff fd4f 	bl	23fc2b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fc816:	a801      	add	r0, sp, #4
 23fc818:	f7ff f85b 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc81c:	4620      	mov	r0, r4
 23fc81e:	b003      	add	sp, #12
 23fc820:	bd30      	pop	{r4, r5, pc}

023fc822 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fc822:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc824:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fc826:	68cd      	ldr	r5, [r1, #12]
 23fc828:	4668      	mov	r0, sp
 23fc82a:	f7ff fe91 	bl	23fc550 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc82e:	466a      	mov	r2, sp
 23fc830:	4629      	mov	r1, r5
 23fc832:	4620      	mov	r0, r4
 23fc834:	f7ff fd1a 	bl	23fc26c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc838:	a801      	add	r0, sp, #4
 23fc83a:	f7ff f84a 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc83e:	4620      	mov	r0, r4
 23fc840:	b003      	add	sp, #12
 23fc842:	bd30      	pop	{r4, r5, pc}

023fc844 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fc844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc846:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fc848:	690d      	ldr	r5, [r1, #16]
 23fc84a:	4668      	mov	r0, sp
 23fc84c:	f7ff fe80 	bl	23fc550 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc850:	466a      	mov	r2, sp
 23fc852:	4629      	mov	r1, r5
 23fc854:	4620      	mov	r0, r4
 23fc856:	f7ff fcb2 	bl	23fc1be <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc85a:	a801      	add	r0, sp, #4
 23fc85c:	f7ff f839 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc860:	4620      	mov	r0, r4
 23fc862:	b003      	add	sp, #12
 23fc864:	bd30      	pop	{r4, r5, pc}
	...

023fc868 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fc868:	b570      	push	{r4, r5, r6, lr}
 23fc86a:	b08a      	sub	sp, #40	; 0x28
 23fc86c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fc86e:	4601      	mov	r1, r0
 23fc870:	a804      	add	r0, sp, #16
 23fc872:	f7ff ffc5 	bl	23fc800 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fc876:	4e14      	ldr	r6, [pc, #80]	; (23fc8c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fc878:	a804      	add	r0, sp, #16
 23fc87a:	f7ff fd33 	bl	23fc2e4 <_ZN5spark18JSONObjectIterator4nextEv>
 23fc87e:	b1e8      	cbz	r0, 23fc8bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fc880:	4668      	mov	r0, sp
 23fc882:	a904      	add	r1, sp, #16
 23fc884:	f7ff ffcd 	bl	23fc822 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fc888:	4631      	mov	r1, r6
 23fc88a:	9802      	ldr	r0, [sp, #8]
 23fc88c:	f7ff fe3a 	bl	23fc504 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fc890:	4604      	mov	r4, r0
 23fc892:	b110      	cbz	r0, 23fc89a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fc894:	1e2c      	subs	r4, r5, #0
 23fc896:	bf18      	it	ne
 23fc898:	2401      	movne	r4, #1
 23fc89a:	a801      	add	r0, sp, #4
 23fc89c:	f7ff f819 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc8a0:	2c00      	cmp	r4, #0
 23fc8a2:	d0e9      	beq.n	23fc878 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fc8a4:	4668      	mov	r0, sp
 23fc8a6:	a904      	add	r1, sp, #16
 23fc8a8:	f7ff ffcc 	bl	23fc844 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fc8ac:	4668      	mov	r0, sp
 23fc8ae:	f7ff fcbc 	bl	23fc22a <_ZNK5spark9JSONValue5toIntEv>
 23fc8b2:	6028      	str	r0, [r5, #0]
 23fc8b4:	a801      	add	r0, sp, #4
 23fc8b6:	f7ff f80c 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc8ba:	e7dd      	b.n	23fc878 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fc8bc:	a805      	add	r0, sp, #20
 23fc8be:	f7ff f808 	bl	23fb8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc8c2:	b00a      	add	sp, #40	; 0x28
 23fc8c4:	bd70      	pop	{r4, r5, r6, pc}
 23fc8c6:	bf00      	nop
 23fc8c8:	023ffbf0 	.word	0x023ffbf0

023fc8cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc8ce:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fc8d0:	4913      	ldr	r1, [pc, #76]	; (23fc920 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fc8d2:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc8d4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fc8d6:	f7fd ff59 	bl	23fa78c <strcmp>
 23fc8da:	b950      	cbnz	r0, 23fc8f2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fc8dc:	f001 f91c 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fc8e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc8e4:	f001 f906 	bl	23fdaf4 <_ZN9USBSerial5beginEl>
}
 23fc8e8:	b003      	add	sp, #12
 23fc8ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fc8ee:	f001 b913 	b.w	23fdb18 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fc8f2:	4620      	mov	r0, r4
 23fc8f4:	490b      	ldr	r1, [pc, #44]	; (23fc924 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fc8f6:	f7fd ff49 	bl	23fa78c <strcmp>
 23fc8fa:	b978      	cbnz	r0, 23fc91c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fc8fc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fc900:	a901      	add	r1, sp, #4
 23fc902:	4628      	mov	r0, r5
        int baud = 9600;
 23fc904:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fc906:	f7ff ffaf 	bl	23fc868 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fc90a:	f001 fb33 	bl	23fdf74 <_Z22__fetch_global_Serial1v>
 23fc90e:	9901      	ldr	r1, [sp, #4]
 23fc910:	f001 f894 	bl	23fda3c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fc914:	f001 fb2e 	bl	23fdf74 <_Z22__fetch_global_Serial1v>
}
 23fc918:	b003      	add	sp, #12
 23fc91a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fc91c:	2000      	movs	r0, #0
 23fc91e:	e7fb      	b.n	23fc918 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fc920:	023ffbf5 	.word	0x023ffbf5
 23fc924:	023ffbfc 	.word	0x023ffbfc

023fc928 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc928:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc92a:	2614      	movs	r6, #20
 23fc92c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc930:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc932:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc936:	42ae      	cmp	r6, r5
 23fc938:	d005      	beq.n	23fc946 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fc93a:	f105 0008 	add.w	r0, r5, #8
 23fc93e:	f7ff fff3 	bl	23fc928 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc942:	3514      	adds	r5, #20
 23fc944:	e7f7      	b.n	23fc936 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc946:	6820      	ldr	r0, [r4, #0]
 23fc948:	f7fe ff50 	bl	23fb7ec <free>
}
 23fc94c:	4620      	mov	r0, r4
 23fc94e:	bd70      	pop	{r4, r5, r6, pc}

023fc950 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fc950:	b510      	push	{r4, lr}
 23fc952:	4604      	mov	r4, r0
 23fc954:	300c      	adds	r0, #12
 23fc956:	f7ff ffe7 	bl	23fc928 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc95a:	4620      	mov	r0, r4
 23fc95c:	f7ff f800 	bl	23fb960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fc960:	4620      	mov	r0, r4
 23fc962:	bd10      	pop	{r4, pc}

023fc964 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fc964:	b510      	push	{r4, lr}
 23fc966:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fc968:	4b03      	ldr	r3, [pc, #12]	; (23fc978 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fc96a:	f840 3b04 	str.w	r3, [r0], #4
 23fc96e:	f7ff ffef 	bl	23fc950 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fc972:	4620      	mov	r0, r4
 23fc974:	bd10      	pop	{r4, pc}
 23fc976:	bf00      	nop
 23fc978:	023ffb28 	.word	0x023ffb28

023fc97c <_ZN5spark16StreamLogHandlerD0Ev>:
 23fc97c:	b510      	push	{r4, lr}
 23fc97e:	4604      	mov	r4, r0
 23fc980:	f7ff fff0 	bl	23fc964 <_ZN5spark16StreamLogHandlerD1Ev>
 23fc984:	4620      	mov	r0, r4
 23fc986:	2124      	movs	r1, #36	; 0x24
 23fc988:	f7fd ff33 	bl	23fa7f2 <_ZdlPvj>
 23fc98c:	4620      	mov	r0, r4
 23fc98e:	bd10      	pop	{r4, pc}

023fc990 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fc990:	b510      	push	{r4, lr}
 23fc992:	4604      	mov	r4, r0
 23fc994:	4b02      	ldr	r3, [pc, #8]	; (23fc9a0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fc996:	6003      	str	r3, [r0, #0]
 23fc998:	f7ff ffe4 	bl	23fc964 <_ZN5spark16StreamLogHandlerD1Ev>
 23fc99c:	4620      	mov	r0, r4
 23fc99e:	bd10      	pop	{r4, pc}
 23fc9a0:	023ffc98 	.word	0x023ffc98

023fc9a4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fc9a4:	b510      	push	{r4, lr}
 23fc9a6:	4604      	mov	r4, r0
 23fc9a8:	f7ff fff2 	bl	23fc990 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fc9ac:	4620      	mov	r0, r4
 23fc9ae:	2124      	movs	r1, #36	; 0x24
 23fc9b0:	f7fd ff1f 	bl	23fa7f2 <_ZdlPvj>
 23fc9b4:	4620      	mov	r0, r4
 23fc9b6:	bd10      	pop	{r4, pc}

023fc9b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fc9b8:	2200      	movs	r2, #0
 23fc9ba:	e9c0 2200 	strd	r2, r2, [r0]
 23fc9be:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fc9c0:	b510      	push	{r4, lr}
 23fc9c2:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc9c4:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fc9c6:	6004      	str	r4, [r0, #0]
 23fc9c8:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc9ca:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc9cc:	6044      	str	r4, [r0, #4]
 23fc9ce:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc9d0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc9d2:	6084      	str	r4, [r0, #8]
}
 23fc9d4:	bd10      	pop	{r4, pc}

023fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fc9d6:	b510      	push	{r4, lr}
 23fc9d8:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fc9da:	6803      	ldr	r3, [r0, #0]
 23fc9dc:	6818      	ldr	r0, [r3, #0]
 23fc9de:	f7fe fb23 	bl	23fb028 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fc9e2:	4620      	mov	r0, r4
 23fc9e4:	bd10      	pop	{r4, pc}
	...

023fc9e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fc9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc9ec:	b087      	sub	sp, #28
 23fc9ee:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fc9f0:	4b1c      	ldr	r3, [pc, #112]	; (23fca64 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fc9f2:	4680      	mov	r8, r0
 23fc9f4:	685b      	ldr	r3, [r3, #4]
 23fc9f6:	4689      	mov	r9, r1
 23fc9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fc9fc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fc9fe:	b96b      	cbnz	r3, 23fca1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fca00:	f7ff fed0 	bl	23fc7a4 <_ZN5spark10LogManager8instanceEv>
 23fca04:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fca06:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fca0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fca0c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fca0e:	f7ff fd77 	bl	23fc500 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fca12:	7b23      	ldrb	r3, [r4, #12]
 23fca14:	b12b      	cbz	r3, 23fca22 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fca16:	a805      	add	r0, sp, #20
 23fca18:	f7ff ffdd 	bl	23fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fca1c:	b007      	add	sp, #28
 23fca1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fca22:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fca24:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fca28:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fca2a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fca2e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fca32:	45aa      	cmp	sl, r5
 23fca34:	d012      	beq.n	23fca5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fca36:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fca3a:	4631      	mov	r1, r6
 23fca3c:	1d38      	adds	r0, r7, #4
 23fca3e:	f7ff fe09 	bl	23fc654 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fca42:	4581      	cmp	r9, r0
 23fca44:	d3f5      	bcc.n	23fca32 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fca46:	9a03      	ldr	r2, [sp, #12]
 23fca48:	683b      	ldr	r3, [r7, #0]
 23fca4a:	9200      	str	r2, [sp, #0]
 23fca4c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fca50:	464a      	mov	r2, r9
 23fca52:	4633      	mov	r3, r6
 23fca54:	4641      	mov	r1, r8
 23fca56:	4638      	mov	r0, r7
 23fca58:	47d8      	blx	fp
 23fca5a:	e7ea      	b.n	23fca32 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fca5c:	2300      	movs	r3, #0
 23fca5e:	7323      	strb	r3, [r4, #12]
 23fca60:	e7d9      	b.n	23fca16 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fca62:	bf00      	nop
 23fca64:	e000ed00 	.word	0xe000ed00

023fca68 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fca68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fca6c:	469b      	mov	fp, r3
 23fca6e:	4b1a      	ldr	r3, [pc, #104]	; (23fcad8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fca70:	4680      	mov	r8, r0
 23fca72:	685b      	ldr	r3, [r3, #4]
 23fca74:	4689      	mov	r9, r1
 23fca76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fca7a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fca7c:	b96b      	cbnz	r3, 23fca9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fca7e:	f7ff fe91 	bl	23fc7a4 <_ZN5spark10LogManager8instanceEv>
 23fca82:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fca84:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fca88:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fca8a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fca8c:	f7ff fd38 	bl	23fc500 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fca90:	7b23      	ldrb	r3, [r4, #12]
 23fca92:	b12b      	cbz	r3, 23fcaa0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fca94:	a801      	add	r0, sp, #4
 23fca96:	f7ff ff9e 	bl	23fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fca9a:	b003      	add	sp, #12
 23fca9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fcaa0:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fcaa2:	b2f6      	uxtb	r6, r6
 23fcaa4:	7323      	strb	r3, [r4, #12]
 23fcaa6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fcaaa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcaae:	4555      	cmp	r5, sl
 23fcab0:	d00e      	beq.n	23fcad0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fcab2:	f855 7b04 	ldr.w	r7, [r5], #4
 23fcab6:	4659      	mov	r1, fp
 23fcab8:	1d38      	adds	r0, r7, #4
 23fcaba:	f7ff fdcb 	bl	23fc654 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fcabe:	4286      	cmp	r6, r0
 23fcac0:	d3f5      	bcc.n	23fcaae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fcac2:	683b      	ldr	r3, [r7, #0]
 23fcac4:	464a      	mov	r2, r9
 23fcac6:	4641      	mov	r1, r8
 23fcac8:	4638      	mov	r0, r7
 23fcaca:	68db      	ldr	r3, [r3, #12]
 23fcacc:	4798      	blx	r3
 23fcace:	e7ee      	b.n	23fcaae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fcad0:	2300      	movs	r3, #0
 23fcad2:	7323      	strb	r3, [r4, #12]
 23fcad4:	e7de      	b.n	23fca94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fcad6:	bf00      	nop
 23fcad8:	e000ed00 	.word	0xe000ed00

023fcadc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fcadc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fcae0:	4b16      	ldr	r3, [pc, #88]	; (23fcb3c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fcae2:	4605      	mov	r5, r0
 23fcae4:	685b      	ldr	r3, [r3, #4]
 23fcae6:	460f      	mov	r7, r1
 23fcae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fcaec:	bb1b      	cbnz	r3, 23fcb36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fcaee:	f7ff fe59 	bl	23fc7a4 <_ZN5spark10LogManager8instanceEv>
 23fcaf2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcaf4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcaf8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcafa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fcafc:	f7ff fd00 	bl	23fc500 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fcb00:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fcb04:	2446      	movs	r4, #70	; 0x46
 23fcb06:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcb0a:	45b0      	cmp	r8, r6
 23fcb0c:	d109      	bne.n	23fcb22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fcb0e:	a801      	add	r0, sp, #4
 23fcb10:	f7ff ff61 	bl	23fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fcb14:	42a5      	cmp	r5, r4
 23fcb16:	bfb4      	ite	lt
 23fcb18:	2000      	movlt	r0, #0
 23fcb1a:	2001      	movge	r0, #1
}
 23fcb1c:	b002      	add	sp, #8
 23fcb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fcb22:	f856 0b04 	ldr.w	r0, [r6], #4
 23fcb26:	4639      	mov	r1, r7
 23fcb28:	3004      	adds	r0, #4
 23fcb2a:	f7ff fd93 	bl	23fc654 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fcb2e:	4284      	cmp	r4, r0
 23fcb30:	bfa8      	it	ge
 23fcb32:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fcb34:	e7e9      	b.n	23fcb0a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fcb36:	2000      	movs	r0, #0
 23fcb38:	e7f0      	b.n	23fcb1c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fcb3a:	bf00      	nop
 23fcb3c:	e000ed00 	.word	0xe000ed00

023fcb40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fcb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb42:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fcb46:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fcb48:	4604      	mov	r4, r0
 23fcb4a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb4c:	db0d      	blt.n	23fcb6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fcb4e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fcb50:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fcb52:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fcb54:	dd04      	ble.n	23fcb60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fcb56:	00b9      	lsls	r1, r7, #2
 23fcb58:	f7fe fe56 	bl	23fb808 <realloc>
            if (!d) {
 23fcb5c:	b918      	cbnz	r0, 23fcb66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fcb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fcb60:	f7fe fe44 	bl	23fb7ec <free>
        T* d = nullptr;
 23fcb64:	2000      	movs	r0, #0
        data_ = d;
 23fcb66:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fcb68:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fcb6a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fcb6c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fcb6e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fcb72:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcb74:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fcb78:	1d08      	adds	r0, r1, #4
 23fcb7a:	f002 fddc 	bl	23ff736 <memmove>
    new(p) T(std::move(value));
 23fcb7e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fcb82:	6863      	ldr	r3, [r4, #4]
    return true;
 23fcb84:	2001      	movs	r0, #1
    ++size_;
 23fcb86:	3301      	adds	r3, #1
 23fcb88:	6063      	str	r3, [r4, #4]
    return true;
 23fcb8a:	e7e8      	b.n	23fcb5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fcb8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fcb8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcb8e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fcb90:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcb94:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcb96:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fcb98:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fcb9a:	f7ff fcb1 	bl	23fc500 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fcb9e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fcba2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fcba6:	4293      	cmp	r3, r2
 23fcba8:	4619      	mov	r1, r3
 23fcbaa:	d00a      	beq.n	23fcbc2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fcbac:	6809      	ldr	r1, [r1, #0]
 23fcbae:	3304      	adds	r3, #4
 23fcbb0:	42a9      	cmp	r1, r5
 23fcbb2:	d1f8      	bne.n	23fcba6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fcbb4:	a801      	add	r0, sp, #4
 23fcbb6:	f7ff ff0e 	bl	23fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fcbba:	2500      	movs	r5, #0
}
 23fcbbc:	4628      	mov	r0, r5
 23fcbbe:	b003      	add	sp, #12
 23fcbc0:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fcbc2:	4629      	mov	r1, r5
 23fcbc4:	4620      	mov	r0, r4
 23fcbc6:	f7ff ffbb 	bl	23fcb40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fcbca:	4605      	mov	r5, r0
 23fcbcc:	2800      	cmp	r0, #0
 23fcbce:	d0f1      	beq.n	23fcbb4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fcbd0:	6863      	ldr	r3, [r4, #4]
 23fcbd2:	2b01      	cmp	r3, #1
 23fcbd4:	d101      	bne.n	23fcbda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fcbd6:	f7ff fe01 	bl	23fc7dc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fcbda:	a801      	add	r0, sp, #4
 23fcbdc:	f7ff fefb 	bl	23fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fcbe0:	e7ec      	b.n	23fcbbc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fcbe2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fcbe2:	460b      	mov	r3, r1
 23fcbe4:	b570      	push	{r4, r5, r6, lr}
 23fcbe6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fcbe8:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fcbec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fcbf0:	4282      	cmp	r2, r0
 23fcbf2:	d00f      	beq.n	23fcc14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fcbf4:	4601      	mov	r1, r0
            if (*p == value) {
 23fcbf6:	681d      	ldr	r5, [r3, #0]
 23fcbf8:	f851 6b04 	ldr.w	r6, [r1], #4
 23fcbfc:	42ae      	cmp	r6, r5
 23fcbfe:	d107      	bne.n	23fcc10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcc00:	1a52      	subs	r2, r2, r1
 23fcc02:	f002 fd98 	bl	23ff736 <memmove>
    return true;
 23fcc06:	2001      	movs	r0, #1
    --size_;
 23fcc08:	6863      	ldr	r3, [r4, #4]
 23fcc0a:	3b01      	subs	r3, #1
 23fcc0c:	6063      	str	r3, [r4, #4]
}
 23fcc0e:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fcc10:	4608      	mov	r0, r1
 23fcc12:	e7ed      	b.n	23fcbf0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fcc14:	2000      	movs	r0, #0
 23fcc16:	e7fa      	b.n	23fcc0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fcc18 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fcc18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fcc1a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fcc1c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcc20:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fcc22:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcc24:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fcc26:	f7ff fc6b 	bl	23fc500 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fcc2a:	4620      	mov	r0, r4
 23fcc2c:	a901      	add	r1, sp, #4
 23fcc2e:	f7ff ffd8 	bl	23fcbe2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fcc32:	b118      	cbz	r0, 23fcc3c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fcc34:	6863      	ldr	r3, [r4, #4]
 23fcc36:	b90b      	cbnz	r3, 23fcc3c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fcc38:	f7ff fddc 	bl	23fc7f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fcc3c:	a803      	add	r0, sp, #12
 23fcc3e:	f7ff feca 	bl	23fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fcc42:	b004      	add	sp, #16
 23fcc44:	bd10      	pop	{r4, pc}

023fcc46 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fcc46:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fcc48:	b570      	push	{r4, r5, r6, lr}
 23fcc4a:	4604      	mov	r4, r0
 23fcc4c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fcc50:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fcc54:	42ae      	cmp	r6, r5
 23fcc56:	d015      	beq.n	23fcc84 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fcc58:	4620      	mov	r0, r4
 23fcc5a:	f105 0110 	add.w	r1, r5, #16
 23fcc5e:	f7ff ffc0 	bl	23fcbe2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fcc62:	6863      	ldr	r3, [r4, #4]
 23fcc64:	b90b      	cbnz	r3, 23fcc6a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fcc66:	f7ff fdc5 	bl	23fc7f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fcc6a:	69e0      	ldr	r0, [r4, #28]
 23fcc6c:	6929      	ldr	r1, [r5, #16]
 23fcc6e:	6803      	ldr	r3, [r0, #0]
 23fcc70:	68db      	ldr	r3, [r3, #12]
 23fcc72:	4798      	blx	r3
        if (h.stream) {
 23fcc74:	6969      	ldr	r1, [r5, #20]
 23fcc76:	b119      	cbz	r1, 23fcc80 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fcc78:	6a20      	ldr	r0, [r4, #32]
 23fcc7a:	6803      	ldr	r3, [r0, #0]
 23fcc7c:	68db      	ldr	r3, [r3, #12]
 23fcc7e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fcc80:	3518      	adds	r5, #24
 23fcc82:	e7e7      	b.n	23fcc54 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fcc84:	2618      	movs	r6, #24
 23fcc86:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fcc8a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcc8e:	42ae      	cmp	r6, r5
 23fcc90:	d004      	beq.n	23fcc9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fcc92:	4628      	mov	r0, r5
 23fcc94:	f000 fd5a 	bl	23fd74c <_ZN6StringD1Ev>
 23fcc98:	3518      	adds	r5, #24
 23fcc9a:	e7f8      	b.n	23fcc8e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fcc9c:	2300      	movs	r3, #0
 23fcc9e:	6163      	str	r3, [r4, #20]
}
 23fcca0:	bd70      	pop	{r4, r5, r6, pc}

023fcca2 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fcca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fcca4:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fcca6:	f7ff fda5 	bl	23fc7f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fccaa:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fccae:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fccb0:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fccb2:	f7ff fc25 	bl	23fc500 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fccb6:	4620      	mov	r0, r4
 23fccb8:	f7ff ffc5 	bl	23fcc46 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fccbc:	a801      	add	r0, sp, #4
 23fccbe:	f7ff fe8a 	bl	23fc9d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fccc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fccc4:	b108      	cbz	r0, 23fccca <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fccc6:	f7fe f993 	bl	23faff0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fccca:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fccce:	2618      	movs	r6, #24
 23fccd0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fccd4:	42ae      	cmp	r6, r5
 23fccd6:	d004      	beq.n	23fcce2 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fccd8:	4628      	mov	r0, r5
 23fccda:	f000 fd37 	bl	23fd74c <_ZN6StringD1Ev>
 23fccde:	3518      	adds	r5, #24
 23fcce0:	e7f8      	b.n	23fccd4 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fcce2:	6920      	ldr	r0, [r4, #16]
 23fcce4:	f7fe fd82 	bl	23fb7ec <free>
 23fcce8:	6820      	ldr	r0, [r4, #0]
 23fccea:	f7fe fd7f 	bl	23fb7ec <free>
}
 23fccee:	4620      	mov	r0, r4
 23fccf0:	b002      	add	sp, #8
 23fccf2:	bd70      	pop	{r4, r5, r6, pc}

023fccf4 <__tcf_2>:
    static LogManager mgr;
 23fccf4:	4801      	ldr	r0, [pc, #4]	; (23fccfc <__tcf_2+0x8>)
 23fccf6:	f7ff bfd4 	b.w	23fcca2 <_ZN5spark10LogManagerD1Ev>
 23fccfa:	bf00      	nop
 23fccfc:	1007ae74 	.word	0x1007ae74

023fcd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fcd00:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcd04:	4604      	mov	r4, r0
 23fcd06:	460d      	mov	r5, r1
 23fcd08:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcd0a:	d915      	bls.n	23fcd38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fcd0c:	4290      	cmp	r0, r2
 23fcd0e:	d214      	bcs.n	23fcd3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fcd10:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fcd14:	1a75      	subs	r5, r6, r1
 23fcd16:	f1a1 0714 	sub.w	r7, r1, #20
 23fcd1a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcd1c:	42b7      	cmp	r7, r6
 23fcd1e:	d01a      	beq.n	23fcd56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fcd20:	b11c      	cbz	r4, 23fcd2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fcd22:	4631      	mov	r1, r6
 23fcd24:	4620      	mov	r0, r4
 23fcd26:	f7ff fc45 	bl	23fc5b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fcd2a:	f106 0008 	add.w	r0, r6, #8
 23fcd2e:	f7ff fdfb 	bl	23fc928 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fcd32:	3e14      	subs	r6, #20
 23fcd34:	3c14      	subs	r4, #20
 23fcd36:	e7f1      	b.n	23fcd1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fcd38:	d00d      	beq.n	23fcd56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fcd3a:	42b5      	cmp	r5, r6
 23fcd3c:	d00b      	beq.n	23fcd56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fcd3e:	b11c      	cbz	r4, 23fcd48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fcd40:	4629      	mov	r1, r5
 23fcd42:	4620      	mov	r0, r4
 23fcd44:	f7ff fc36 	bl	23fc5b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fcd48:	f105 0008 	add.w	r0, r5, #8
 23fcd4c:	f7ff fdec 	bl	23fc928 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fcd50:	3514      	adds	r5, #20
 23fcd52:	3414      	adds	r4, #20
 23fcd54:	e7f1      	b.n	23fcd3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fcd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcd58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fcd58:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcd5c:	4604      	mov	r4, r0
 23fcd5e:	460d      	mov	r5, r1
 23fcd60:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcd62:	d914      	bls.n	23fcd8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fcd64:	4290      	cmp	r0, r2
 23fcd66:	d213      	bcs.n	23fcd90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fcd68:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fcd6c:	1a75      	subs	r5, r6, r1
 23fcd6e:	f1a1 0710 	sub.w	r7, r1, #16
 23fcd72:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcd74:	42b7      	cmp	r7, r6
 23fcd76:	d018      	beq.n	23fcdaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fcd78:	b11c      	cbz	r4, 23fcd82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fcd7a:	4631      	mov	r1, r6
 23fcd7c:	4620      	mov	r0, r4
 23fcd7e:	f000 fd4e 	bl	23fd81e <_ZN6StringC1EOS_>
                end->~T();
 23fcd82:	4630      	mov	r0, r6
 23fcd84:	f000 fce2 	bl	23fd74c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fcd88:	3e10      	subs	r6, #16
 23fcd8a:	3c10      	subs	r4, #16
 23fcd8c:	e7f2      	b.n	23fcd74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fcd8e:	d00c      	beq.n	23fcdaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fcd90:	42b5      	cmp	r5, r6
 23fcd92:	d00a      	beq.n	23fcdaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fcd94:	b11c      	cbz	r4, 23fcd9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fcd96:	4629      	mov	r1, r5
 23fcd98:	4620      	mov	r0, r4
 23fcd9a:	f000 fd40 	bl	23fd81e <_ZN6StringC1EOS_>
                p->~T();
 23fcd9e:	4628      	mov	r0, r5
 23fcda0:	f000 fcd4 	bl	23fd74c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcda4:	3510      	adds	r5, #16
 23fcda6:	3410      	adds	r4, #16
 23fcda8:	e7f2      	b.n	23fcd90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fcdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcdac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fcdac:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fcdae:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fcdb0:	4605      	mov	r5, r0
        if (n > 0) {
 23fcdb2:	dd11      	ble.n	23fcdd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fcdb4:	0130      	lsls	r0, r6, #4
 23fcdb6:	f7fe fd0b 	bl	23fb7d0 <malloc>
            if (!d) {
 23fcdba:	4604      	mov	r4, r0
 23fcdbc:	b158      	cbz	r0, 23fcdd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fcdbe:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcdc2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fcdc6:	f7ff ffc7 	bl	23fcd58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fcdca:	6828      	ldr	r0, [r5, #0]
 23fcdcc:	f7fe fd0e 	bl	23fb7ec <free>
        return true;
 23fcdd0:	2001      	movs	r0, #1
        data_ = d;
 23fcdd2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fcdd4:	60ae      	str	r6, [r5, #8]
    }
 23fcdd6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fcdd8:	2400      	movs	r4, #0
 23fcdda:	e7f6      	b.n	23fcdca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fcddc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fcddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcde0:	4690      	mov	r8, r2
        capacity_(0) {
 23fcde2:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fcde4:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fcde6:	b095      	sub	sp, #84	; 0x54
 23fcde8:	9103      	str	r1, [sp, #12]
    return size_;
 23fcdea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fcdee:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fcdf0:	4299      	cmp	r1, r3
        capacity_(0) {
 23fcdf2:	e9c0 3300 	strd	r3, r3, [r0]
 23fcdf6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fcdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fcdfe:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fce02:	7602      	strb	r2, [r0, #24]
 23fce04:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fce06:	dc23      	bgt.n	23fce50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fce08:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fce0c:	2314      	movs	r3, #20
 23fce0e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fce12:	42af      	cmp	r7, r5
 23fce14:	d03b      	beq.n	23fce8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fce16:	4629      	mov	r1, r5
 23fce18:	a80b      	add	r0, sp, #44	; 0x2c
 23fce1a:	f000 fd00 	bl	23fd81e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fce1e:	a90b      	add	r1, sp, #44	; 0x2c
 23fce20:	a80f      	add	r0, sp, #60	; 0x3c
 23fce22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fce24:	f000 fcfb 	bl	23fd81e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fce28:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fce2c:	4299      	cmp	r1, r3
 23fce2e:	da1b      	bge.n	23fce68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fce30:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fce32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fce34:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fce38:	4631      	mov	r1, r6
 23fce3a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fce3e:	f106 0010 	add.w	r0, r6, #16
 23fce42:	f7ff ff89 	bl	23fcd58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fce46:	b9ee      	cbnz	r6, 23fce84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fce48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fce4a:	3301      	adds	r3, #1
 23fce4c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fce4e:	e011      	b.n	23fce74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fce50:	a808      	add	r0, sp, #32
 23fce52:	f7ff ffab 	bl	23fcdac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fce56:	2800      	cmp	r0, #0
 23fce58:	d1d6      	bne.n	23fce08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fce5a:	a808      	add	r0, sp, #32
 23fce5c:	f7fe fd80 	bl	23fb960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fce60:	4620      	mov	r0, r4
 23fce62:	b015      	add	sp, #84	; 0x54
 23fce64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fce68:	3101      	adds	r1, #1
 23fce6a:	a808      	add	r0, sp, #32
 23fce6c:	f7ff ff9e 	bl	23fcdac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fce70:	2800      	cmp	r0, #0
 23fce72:	d1dd      	bne.n	23fce30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fce74:	a80f      	add	r0, sp, #60	; 0x3c
 23fce76:	f000 fc69 	bl	23fd74c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fce7a:	a80b      	add	r0, sp, #44	; 0x2c
 23fce7c:	f000 fc66 	bl	23fd74c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fce80:	3514      	adds	r5, #20
 23fce82:	e7c6      	b.n	23fce12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fce84:	4630      	mov	r0, r6
 23fce86:	a90f      	add	r1, sp, #60	; 0x3c
 23fce88:	f000 fcc9 	bl	23fd81e <_ZN6StringC1EOS_>
 23fce8c:	e7dc      	b.n	23fce48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fce8e:	2600      	movs	r6, #0
 23fce90:	f04f 0914 	mov.w	r9, #20
 23fce94:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fce98:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fce9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fce9e:	429e      	cmp	r6, r3
 23fcea0:	da7c      	bge.n	23fcf9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fcea2:	0133      	lsls	r3, r6, #4
 23fcea4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fcea6:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fcea8:	b90b      	cbnz	r3, 23fceae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fceaa:	3601      	adds	r6, #1
 23fceac:	e7f5      	b.n	23fce9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fceae:	2300      	movs	r3, #0
 23fceb0:	9307      	str	r3, [sp, #28]
 23fceb2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fceb6:	ad0b      	add	r5, sp, #44	; 0x2c
 23fceb8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fceba:	a907      	add	r1, sp, #28
 23fcebc:	a806      	add	r0, sp, #24
 23fcebe:	f7ff faf8 	bl	23fc4b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fcec2:	4682      	mov	sl, r0
 23fcec4:	2800      	cmp	r0, #0
 23fcec6:	d0f0      	beq.n	23fceaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fcec8:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcecc:	4601      	mov	r1, r0
            bool found = false;
 23fcece:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fced2:	4628      	mov	r0, r5
 23fced4:	9a07      	ldr	r2, [sp, #28]
 23fced6:	f10d 0317 	add.w	r3, sp, #23
 23fceda:	f7ff fb7f 	bl	23fc5dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcede:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcee2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcee4:	2f00      	cmp	r7, #0
 23fcee6:	d14a      	bne.n	23fcf7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fcee8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fceec:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fcef0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fcef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fcef8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fcefc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fcf00:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcf02:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fcf06:	4293      	cmp	r3, r2
 23fcf08:	db17      	blt.n	23fcf3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fcf0a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fcf0e:	f1ba 0f00 	cmp.w	sl, #0
 23fcf12:	dd30      	ble.n	23fcf76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fcf14:	fb09 f00a 	mul.w	r0, r9, sl
 23fcf18:	f7fe fc5a 	bl	23fb7d0 <malloc>
            if (!d) {
 23fcf1c:	4683      	mov	fp, r0
 23fcf1e:	b360      	cbz	r0, 23fcf7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fcf20:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcf24:	fb09 1202 	mla	r2, r9, r2, r1
 23fcf28:	f7ff feea 	bl	23fcd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fcf2c:	6828      	ldr	r0, [r5, #0]
 23fcf2e:	f7fe fc5d 	bl	23fb7ec <free>
        data_ = d;
 23fcf32:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fcf36:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fcf3a:	682b      	ldr	r3, [r5, #0]
 23fcf3c:	9a01      	ldr	r2, [sp, #4]
 23fcf3e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fcf42:	686a      	ldr	r2, [r5, #4]
 23fcf44:	4651      	mov	r1, sl
 23fcf46:	fb09 3202 	mla	r2, r9, r2, r3
 23fcf4a:	f10a 0014 	add.w	r0, sl, #20
 23fcf4e:	f7ff fed7 	bl	23fcd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fcf52:	f1ba 0f00 	cmp.w	sl, #0
 23fcf56:	d003      	beq.n	23fcf60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fcf58:	4650      	mov	r0, sl
 23fcf5a:	a90f      	add	r1, sp, #60	; 0x3c
 23fcf5c:	f7ff fb2a 	bl	23fc5b4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fcf60:	686b      	ldr	r3, [r5, #4]
 23fcf62:	3301      	adds	r3, #1
 23fcf64:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fcf66:	a811      	add	r0, sp, #68	; 0x44
 23fcf68:	f7ff fcde 	bl	23fc928 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcf6c:	b13f      	cbz	r7, 23fcf7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fcf6e:	a80b      	add	r0, sp, #44	; 0x2c
 23fcf70:	f7ff fcda 	bl	23fc928 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcf74:	e771      	b.n	23fce5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fcf76:	46bb      	mov	fp, r7
 23fcf78:	e7d8      	b.n	23fcf2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcf7a:	2701      	movs	r7, #1
 23fcf7c:	e7f3      	b.n	23fcf66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fcf7e:	9b01      	ldr	r3, [sp, #4]
 23fcf80:	682d      	ldr	r5, [r5, #0]
 23fcf82:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fcf86:	9b06      	ldr	r3, [sp, #24]
 23fcf88:	781b      	ldrb	r3, [r3, #0]
 23fcf8a:	b92b      	cbnz	r3, 23fcf98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fcf8c:	f8d8 3000 	ldr.w	r3, [r8]
 23fcf90:	9a02      	ldr	r2, [sp, #8]
 23fcf92:	4413      	add	r3, r2
 23fcf94:	7c1b      	ldrb	r3, [r3, #16]
 23fcf96:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fcf98:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fcf9a:	e78e      	b.n	23fceba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcf9c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fcf9e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcfa0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcfa2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcfa4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfa6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fcfa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfaa:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcfac:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fcfae:	60a2      	str	r2, [r4, #8]
 23fcfb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfb2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcfb4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcfb6:	60e2      	str	r2, [r4, #12]
 23fcfb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfba:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcfbc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcfbe:	6122      	str	r2, [r4, #16]
 23fcfc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfc2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fcfc4:	9b03      	ldr	r3, [sp, #12]
 23fcfc6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fcfc8:	6162      	str	r2, [r4, #20]
 23fcfca:	7623      	strb	r3, [r4, #24]
 23fcfcc:	e7cf      	b.n	23fcf6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fcfd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fcfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcfd2:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fcfd4:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fcfd6:	4617      	mov	r7, r2
 23fcfd8:	b087      	sub	sp, #28
 23fcfda:	460d      	mov	r5, r1
        stream_(&stream) {
 23fcfdc:	4668      	mov	r0, sp
 23fcfde:	4619      	mov	r1, r3
 23fcfe0:	f7fd fdc6 	bl	23fab70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fcfe4:	4b0b      	ldr	r3, [pc, #44]	; (23fd014 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fcfe6:	4669      	mov	r1, sp
 23fcfe8:	f846 3b04 	str.w	r3, [r6], #4
 23fcfec:	a803      	add	r0, sp, #12
 23fcfee:	f7fd fdbf 	bl	23fab70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fcff2:	4639      	mov	r1, r7
 23fcff4:	aa03      	add	r2, sp, #12
 23fcff6:	4630      	mov	r0, r6
 23fcff8:	f7ff fef0 	bl	23fcddc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcffc:	a803      	add	r0, sp, #12
 23fcffe:	f7fd fc87 	bl	23fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd002:	4668      	mov	r0, sp
 23fd004:	f7fd fc84 	bl	23fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd008:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd00a:	4b03      	ldr	r3, [pc, #12]	; (23fd018 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd00c:	6225      	str	r5, [r4, #32]
 23fd00e:	6023      	str	r3, [r4, #0]
}
 23fd010:	b007      	add	sp, #28
 23fd012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd014:	023ffb28 	.word	0x023ffb28
 23fd018:	023ffc80 	.word	0x023ffc80

023fd01c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd01e:	460f      	mov	r7, r1
 23fd020:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd022:	4638      	mov	r0, r7
 23fd024:	491c      	ldr	r1, [pc, #112]	; (23fd098 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd026:	4616      	mov	r6, r2
 23fd028:	461d      	mov	r5, r3
 23fd02a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd02c:	f7fd fbae 	bl	23fa78c <strcmp>
 23fd030:	b9c0      	cbnz	r0, 23fd064 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd032:	b1a4      	cbz	r4, 23fd05e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd034:	4629      	mov	r1, r5
 23fd036:	a801      	add	r0, sp, #4
 23fd038:	f7ff fcbe 	bl	23fc9b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd03c:	2024      	movs	r0, #36	; 0x24
 23fd03e:	4917      	ldr	r1, [pc, #92]	; (23fd09c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd040:	f001 f828 	bl	23fe094 <_ZnwjRKSt9nothrow_t>
 23fd044:	4605      	mov	r5, r0
 23fd046:	b130      	cbz	r0, 23fd056 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd048:	ab01      	add	r3, sp, #4
 23fd04a:	4632      	mov	r2, r6
 23fd04c:	4621      	mov	r1, r4
 23fd04e:	f7ff ffbf 	bl	23fcfd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd052:	4b13      	ldr	r3, [pc, #76]	; (23fd0a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd054:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd056:	a801      	add	r0, sp, #4
 23fd058:	f7fd fc5a 	bl	23fa910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd05c:	462c      	mov	r4, r5
}
 23fd05e:	4620      	mov	r0, r4
 23fd060:	b005      	add	sp, #20
 23fd062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd064:	4638      	mov	r0, r7
 23fd066:	490f      	ldr	r1, [pc, #60]	; (23fd0a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd068:	f7fd fb90 	bl	23fa78c <strcmp>
 23fd06c:	b990      	cbnz	r0, 23fd094 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd06e:	2c00      	cmp	r4, #0
 23fd070:	d0f5      	beq.n	23fd05e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd072:	4629      	mov	r1, r5
 23fd074:	a801      	add	r0, sp, #4
 23fd076:	f7ff fc9f 	bl	23fc9b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd07a:	2024      	movs	r0, #36	; 0x24
 23fd07c:	4907      	ldr	r1, [pc, #28]	; (23fd09c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd07e:	f001 f809 	bl	23fe094 <_ZnwjRKSt9nothrow_t>
 23fd082:	4605      	mov	r5, r0
 23fd084:	2800      	cmp	r0, #0
 23fd086:	d0e6      	beq.n	23fd056 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fd088:	4632      	mov	r2, r6
 23fd08a:	4621      	mov	r1, r4
 23fd08c:	ab01      	add	r3, sp, #4
 23fd08e:	f7ff ff9f 	bl	23fcfd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd092:	e7e0      	b.n	23fd056 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fd094:	2400      	movs	r4, #0
 23fd096:	e7e2      	b.n	23fd05e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fd098:	023ffc04 	.word	0x023ffc04
 23fd09c:	023ffdcc 	.word	0x023ffdcc
 23fd0a0:	023ffc98 	.word	0x023ffc98
 23fd0a4:	023ffc08 	.word	0x023ffc08

023fd0a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fd0a8:	4b01      	ldr	r3, [pc, #4]	; (23fd0b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd0aa:	4a02      	ldr	r2, [pc, #8]	; (23fd0b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd0ac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd0ae:	4770      	bx	lr
 23fd0b0:	1007ae70 	.word	0x1007ae70
 23fd0b4:	023ffc19 	.word	0x023ffc19

023fd0b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd0bc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fd0be:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd0c2:	4604      	mov	r4, r0
 23fd0c4:	460e      	mov	r6, r1
 23fd0c6:	4617      	mov	r7, r2
 23fd0c8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fd0ca:	f000 fd25 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fd0ce:	4581      	cmp	r9, r0
 23fd0d0:	d04d      	beq.n	23fd16e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fd0d2:	792b      	ldrb	r3, [r5, #4]
 23fd0d4:	0719      	lsls	r1, r3, #28
 23fd0d6:	d504      	bpl.n	23fd0e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fd0d8:	4620      	mov	r0, r4
 23fd0da:	696a      	ldr	r2, [r5, #20]
 23fd0dc:	4954      	ldr	r1, [pc, #336]	; (23fd230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fd0de:	f7ff fae2 	bl	23fc6a6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fd0e2:	f1b8 0f00 	cmp.w	r8, #0
 23fd0e6:	d00d      	beq.n	23fd104 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fd0e8:	215b      	movs	r1, #91	; 0x5b
 23fd0ea:	4620      	mov	r0, r4
 23fd0ec:	f7ff fa56 	bl	23fc59c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fd0f0:	4641      	mov	r1, r8
 23fd0f2:	4620      	mov	r0, r4
 23fd0f4:	f7ff fa43 	bl	23fc57e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fd0f8:	6823      	ldr	r3, [r4, #0]
 23fd0fa:	2202      	movs	r2, #2
 23fd0fc:	4620      	mov	r0, r4
 23fd0fe:	68db      	ldr	r3, [r3, #12]
 23fd100:	494c      	ldr	r1, [pc, #304]	; (23fd234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fd102:	4798      	blx	r3
    if (attr.has_file) {
 23fd104:	792b      	ldrb	r3, [r5, #4]
 23fd106:	07da      	lsls	r2, r3, #31
 23fd108:	d524      	bpl.n	23fd154 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fd10a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fd10e:	212f      	movs	r1, #47	; 0x2f
 23fd110:	4640      	mov	r0, r8
 23fd112:	f002 fbb2 	bl	23ff87a <strrchr>
    if (s1) {
 23fd116:	b108      	cbz	r0, 23fd11c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fd118:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fd11c:	4641      	mov	r1, r8
 23fd11e:	4620      	mov	r0, r4
 23fd120:	f7ff fa2d 	bl	23fc57e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fd124:	792b      	ldrb	r3, [r5, #4]
 23fd126:	079b      	lsls	r3, r3, #30
 23fd128:	d508      	bpl.n	23fd13c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fd12a:	213a      	movs	r1, #58	; 0x3a
 23fd12c:	4620      	mov	r0, r4
 23fd12e:	f7ff fa35 	bl	23fc59c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fd132:	4620      	mov	r0, r4
 23fd134:	68ea      	ldr	r2, [r5, #12]
 23fd136:	4940      	ldr	r1, [pc, #256]	; (23fd238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fd138:	f7ff fab5 	bl	23fc6a6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fd13c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fd13e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fd140:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fd144:	4620      	mov	r0, r4
            write(", ", 2);
 23fd146:	f04f 0202 	mov.w	r2, #2
 23fd14a:	68db      	ldr	r3, [r3, #12]
 23fd14c:	bf14      	ite	ne
 23fd14e:	493b      	ldrne	r1, [pc, #236]	; (23fd23c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fd150:	493b      	ldreq	r1, [pc, #236]	; (23fd240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd152:	4798      	blx	r3
    if (attr.has_function) {
 23fd154:	792b      	ldrb	r3, [r5, #4]
 23fd156:	0758      	lsls	r0, r3, #29
 23fd158:	d51d      	bpl.n	23fd196 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd15a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd15c:	460b      	mov	r3, r1
 23fd15e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fd160:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd164:	b160      	cbz	r0, 23fd180 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fd166:	2820      	cmp	r0, #32
 23fd168:	d108      	bne.n	23fd17c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fd16a:	4619      	mov	r1, r3
 23fd16c:	e7f7      	b.n	23fd15e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fd16e:	4835      	ldr	r0, [pc, #212]	; (23fd244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fd170:	f000 f983 	bl	23fd47a <_ZN5spark12NetworkClass9listeningEv>
 23fd174:	2800      	cmp	r0, #0
 23fd176:	d0ac      	beq.n	23fd0d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fd178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fd17c:	2828      	cmp	r0, #40	; 0x28
 23fd17e:	d1ee      	bne.n	23fd15e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fd180:	6823      	ldr	r3, [r4, #0]
 23fd182:	1a52      	subs	r2, r2, r1
 23fd184:	4620      	mov	r0, r4
 23fd186:	68db      	ldr	r3, [r3, #12]
 23fd188:	4798      	blx	r3
        write("(): ", 4);
 23fd18a:	6823      	ldr	r3, [r4, #0]
 23fd18c:	2204      	movs	r2, #4
 23fd18e:	4620      	mov	r0, r4
 23fd190:	68db      	ldr	r3, [r3, #12]
 23fd192:	492d      	ldr	r1, [pc, #180]	; (23fd248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fd194:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fd196:	2100      	movs	r1, #0
 23fd198:	4638      	mov	r0, r7
 23fd19a:	f7fe f9c9 	bl	23fb530 <log_level_name>
 23fd19e:	4601      	mov	r1, r0
    write(s);
 23fd1a0:	4620      	mov	r0, r4
 23fd1a2:	f7ff f9ec 	bl	23fc57e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fd1a6:	6823      	ldr	r3, [r4, #0]
 23fd1a8:	2202      	movs	r2, #2
 23fd1aa:	4620      	mov	r0, r4
 23fd1ac:	68db      	ldr	r3, [r3, #12]
 23fd1ae:	4924      	ldr	r1, [pc, #144]	; (23fd240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd1b0:	4798      	blx	r3
    if (msg) {
 23fd1b2:	b11e      	cbz	r6, 23fd1bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fd1b4:	4631      	mov	r1, r6
 23fd1b6:	4620      	mov	r0, r4
 23fd1b8:	f7ff f9e1 	bl	23fc57e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fd1bc:	792b      	ldrb	r3, [r5, #4]
 23fd1be:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fd1c2:	d02c      	beq.n	23fd21e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fd1c4:	6823      	ldr	r3, [r4, #0]
 23fd1c6:	4921      	ldr	r1, [pc, #132]	; (23fd24c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fd1c8:	68db      	ldr	r3, [r3, #12]
 23fd1ca:	2202      	movs	r2, #2
 23fd1cc:	4620      	mov	r0, r4
 23fd1ce:	4798      	blx	r3
        if (attr.has_code) {
 23fd1d0:	792b      	ldrb	r3, [r5, #4]
 23fd1d2:	06d9      	lsls	r1, r3, #27
 23fd1d4:	d50a      	bpl.n	23fd1ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fd1d6:	6823      	ldr	r3, [r4, #0]
 23fd1d8:	2207      	movs	r2, #7
 23fd1da:	4620      	mov	r0, r4
 23fd1dc:	491c      	ldr	r1, [pc, #112]	; (23fd250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fd1de:	68db      	ldr	r3, [r3, #12]
 23fd1e0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fd1e2:	4620      	mov	r0, r4
 23fd1e4:	69aa      	ldr	r2, [r5, #24]
 23fd1e6:	491b      	ldr	r1, [pc, #108]	; (23fd254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fd1e8:	f7ff fa5d 	bl	23fc6a6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fd1ec:	792b      	ldrb	r3, [r5, #4]
 23fd1ee:	069a      	lsls	r2, r3, #26
 23fd1f0:	d511      	bpl.n	23fd216 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fd1f2:	06db      	lsls	r3, r3, #27
 23fd1f4:	d505      	bpl.n	23fd202 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fd1f6:	6823      	ldr	r3, [r4, #0]
 23fd1f8:	2202      	movs	r2, #2
 23fd1fa:	4620      	mov	r0, r4
 23fd1fc:	68db      	ldr	r3, [r3, #12]
 23fd1fe:	490f      	ldr	r1, [pc, #60]	; (23fd23c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fd200:	4798      	blx	r3
            write("details = ", 10);
 23fd202:	6823      	ldr	r3, [r4, #0]
 23fd204:	4620      	mov	r0, r4
 23fd206:	4914      	ldr	r1, [pc, #80]	; (23fd258 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fd208:	220a      	movs	r2, #10
 23fd20a:	68db      	ldr	r3, [r3, #12]
 23fd20c:	4798      	blx	r3
            write(attr.details);
 23fd20e:	4620      	mov	r0, r4
 23fd210:	69e9      	ldr	r1, [r5, #28]
 23fd212:	f7ff f9b4 	bl	23fc57e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fd216:	215d      	movs	r1, #93	; 0x5d
 23fd218:	4620      	mov	r0, r4
 23fd21a:	f7ff f9bf 	bl	23fc59c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fd21e:	6823      	ldr	r3, [r4, #0]
 23fd220:	4620      	mov	r0, r4
}
 23fd222:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fd226:	2202      	movs	r2, #2
 23fd228:	68db      	ldr	r3, [r3, #12]
 23fd22a:	490c      	ldr	r1, [pc, #48]	; (23fd25c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fd22c:	4718      	bx	r3
 23fd22e:	bf00      	nop
 23fd230:	023ffc1d 	.word	0x023ffc1d
 23fd234:	023ffc24 	.word	0x023ffc24
 23fd238:	023ffbe4 	.word	0x023ffbe4
 23fd23c:	023ffad0 	.word	0x023ffad0
 23fd240:	023ffc29 	.word	0x023ffc29
 23fd244:	1007ae9c 	.word	0x1007ae9c
 23fd248:	023ffc27 	.word	0x023ffc27
 23fd24c:	023ffc2c 	.word	0x023ffc2c
 23fd250:	023ffc2f 	.word	0x023ffc2f
 23fd254:	023ffc37 	.word	0x023ffc37
 23fd258:	023ffc3a 	.word	0x023ffc3a
 23fd25c:	023ffc45 	.word	0x023ffc45

023fd260 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd264:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fd266:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd268:	460d      	mov	r5, r1
 23fd26a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fd26c:	f000 fc54 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fd270:	4287      	cmp	r7, r0
 23fd272:	d007      	beq.n	23fd284 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fd274:	6a20      	ldr	r0, [r4, #32]
 23fd276:	4632      	mov	r2, r6
 23fd278:	6803      	ldr	r3, [r0, #0]
 23fd27a:	4629      	mov	r1, r5
}
 23fd27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fd280:	68db      	ldr	r3, [r3, #12]
 23fd282:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fd284:	4803      	ldr	r0, [pc, #12]	; (23fd294 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fd286:	f000 f8f8 	bl	23fd47a <_ZN5spark12NetworkClass9listeningEv>
 23fd28a:	2800      	cmp	r0, #0
 23fd28c:	d0f2      	beq.n	23fd274 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fd28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd292:	bf00      	nop
 23fd294:	1007ae9c 	.word	0x1007ae9c

023fd298 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd29c:	b085      	sub	sp, #20
    return stream_;
 23fd29e:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fd2a2:	4605      	mov	r5, r0
 23fd2a4:	460f      	mov	r7, r1
 23fd2a6:	4690      	mov	r8, r2
 23fd2a8:	461e      	mov	r6, r3
 23fd2aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fd2ac:	f000 fc34 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fd2b0:	4581      	cmp	r9, r0
 23fd2b2:	d105      	bne.n	23fd2c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fd2b4:	4849      	ldr	r0, [pc, #292]	; (23fd3dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fd2b6:	f000 f8e0 	bl	23fd47a <_ZN5spark12NetworkClass9listeningEv>
 23fd2ba:	2800      	cmp	r0, #0
 23fd2bc:	f040 808a 	bne.w	23fd3d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fd2c0:	f04f 0900 	mov.w	r9, #0
 23fd2c4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fd2c6:	4a46      	ldr	r2, [pc, #280]	; (23fd3e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fd2c8:	a801      	add	r0, sp, #4
 23fd2ca:	9201      	str	r2, [sp, #4]
 23fd2cc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fd2ce:	f88d 9008 	strb.w	r9, [sp, #8]
 23fd2d2:	f7ff f830 	bl	23fc336 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fd2d6:	4649      	mov	r1, r9
 23fd2d8:	4640      	mov	r0, r8
 23fd2da:	f7fe f929 	bl	23fb530 <log_level_name>
 23fd2de:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd2e0:	4940      	ldr	r1, [pc, #256]	; (23fd3e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd2e2:	2201      	movs	r2, #1
 23fd2e4:	a801      	add	r0, sp, #4
 23fd2e6:	f7ff f8b5 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd2ea:	4641      	mov	r1, r8
 23fd2ec:	f7ff f939 	bl	23fc562 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd2f0:	b13f      	cbz	r7, 23fd302 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd2f2:	493d      	ldr	r1, [pc, #244]	; (23fd3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd2f4:	2201      	movs	r2, #1
 23fd2f6:	a801      	add	r0, sp, #4
 23fd2f8:	f7ff f8ac 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd2fc:	4639      	mov	r1, r7
 23fd2fe:	f7ff f930 	bl	23fc562 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd302:	b13e      	cbz	r6, 23fd314 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd304:	4939      	ldr	r1, [pc, #228]	; (23fd3ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd306:	2201      	movs	r2, #1
 23fd308:	a801      	add	r0, sp, #4
 23fd30a:	f7ff f8a3 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd30e:	4631      	mov	r1, r6
 23fd310:	f7ff f927 	bl	23fc562 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd314:	7923      	ldrb	r3, [r4, #4]
 23fd316:	07df      	lsls	r7, r3, #31
 23fd318:	d50e      	bpl.n	23fd338 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd31a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd31c:	212f      	movs	r1, #47	; 0x2f
 23fd31e:	4630      	mov	r0, r6
 23fd320:	f002 faab 	bl	23ff87a <strrchr>
    if (s1) {
 23fd324:	b100      	cbz	r0, 23fd328 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd326:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd328:	4931      	ldr	r1, [pc, #196]	; (23fd3f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd32a:	2201      	movs	r2, #1
 23fd32c:	a801      	add	r0, sp, #4
 23fd32e:	f7ff f891 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd332:	4631      	mov	r1, r6
 23fd334:	f7ff f915 	bl	23fc562 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd338:	7923      	ldrb	r3, [r4, #4]
 23fd33a:	079e      	lsls	r6, r3, #30
 23fd33c:	d507      	bpl.n	23fd34e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd33e:	492d      	ldr	r1, [pc, #180]	; (23fd3f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd340:	2202      	movs	r2, #2
 23fd342:	a801      	add	r0, sp, #4
 23fd344:	f7ff f886 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd348:	68e1      	ldr	r1, [r4, #12]
 23fd34a:	f7ff f801 	bl	23fc350 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd34e:	7923      	ldrb	r3, [r4, #4]
 23fd350:	0758      	lsls	r0, r3, #29
 23fd352:	d514      	bpl.n	23fd37e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd354:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd356:	4633      	mov	r3, r6
 23fd358:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd35e:	b12a      	cbz	r2, 23fd36c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd360:	2a20      	cmp	r2, #32
 23fd362:	d101      	bne.n	23fd368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd364:	461e      	mov	r6, r3
 23fd366:	e7f7      	b.n	23fd358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd368:	2a28      	cmp	r2, #40	; 0x28
 23fd36a:	d1f5      	bne.n	23fd358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd36c:	2202      	movs	r2, #2
 23fd36e:	4922      	ldr	r1, [pc, #136]	; (23fd3f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd370:	a801      	add	r0, sp, #4
 23fd372:	f7ff f86f 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd376:	4631      	mov	r1, r6
 23fd378:	1bba      	subs	r2, r7, r6
 23fd37a:	f7ff f87b 	bl	23fc474 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd37e:	7923      	ldrb	r3, [r4, #4]
 23fd380:	0719      	lsls	r1, r3, #28
 23fd382:	d507      	bpl.n	23fd394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd384:	491d      	ldr	r1, [pc, #116]	; (23fd3fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd386:	2201      	movs	r2, #1
 23fd388:	a801      	add	r0, sp, #4
 23fd38a:	f7ff f863 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd38e:	6961      	ldr	r1, [r4, #20]
 23fd390:	f7fe fff0 	bl	23fc374 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd394:	7923      	ldrb	r3, [r4, #4]
 23fd396:	06da      	lsls	r2, r3, #27
 23fd398:	d508      	bpl.n	23fd3ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd39a:	2204      	movs	r2, #4
 23fd39c:	4918      	ldr	r1, [pc, #96]	; (23fd400 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd39e:	eb0d 0002 	add.w	r0, sp, r2
 23fd3a2:	f7ff f857 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd3a6:	69a1      	ldr	r1, [r4, #24]
 23fd3a8:	f7fe ffd2 	bl	23fc350 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd3ac:	7923      	ldrb	r3, [r4, #4]
 23fd3ae:	069b      	lsls	r3, r3, #26
 23fd3b0:	d507      	bpl.n	23fd3c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd3b2:	4914      	ldr	r1, [pc, #80]	; (23fd404 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd3b4:	2206      	movs	r2, #6
 23fd3b6:	a801      	add	r0, sp, #4
 23fd3b8:	f7ff f84c 	bl	23fc454 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd3bc:	69e1      	ldr	r1, [r4, #28]
 23fd3be:	f7ff f8d0 	bl	23fc562 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd3c2:	a801      	add	r0, sp, #4
 23fd3c4:	f7fe ffa1 	bl	23fc30a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd3c8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd3ca:	2202      	movs	r2, #2
 23fd3cc:	6803      	ldr	r3, [r0, #0]
 23fd3ce:	490e      	ldr	r1, [pc, #56]	; (23fd408 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd3d0:	68db      	ldr	r3, [r3, #12]
 23fd3d2:	4798      	blx	r3
}
 23fd3d4:	b005      	add	sp, #20
 23fd3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd3da:	bf00      	nop
 23fd3dc:	1007ae9c 	.word	0x1007ae9c
 23fd3e0:	023ffc68 	.word	0x023ffc68
 23fd3e4:	023ffbfa 	.word	0x023ffbfa
 23fd3e8:	023ffc48 	.word	0x023ffc48
 23fd3ec:	023ffec6 	.word	0x023ffec6
 23fd3f0:	023ffc4a 	.word	0x023ffc4a
 23fd3f4:	023ffc4c 	.word	0x023ffc4c
 23fd3f8:	023ffc4f 	.word	0x023ffc4f
 23fd3fc:	023ffc52 	.word	0x023ffc52
 23fd400:	023ffc54 	.word	0x023ffc54
 23fd404:	023ffc59 	.word	0x023ffc59
 23fd408:	023ffc45 	.word	0x023ffc45

023fd40c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd40c:	2300      	movs	r3, #0
 23fd40e:	6840      	ldr	r0, [r0, #4]
 23fd410:	461a      	mov	r2, r3
 23fd412:	f7fe b935 	b.w	23fb680 <network_connect>

023fd416 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd416:	2200      	movs	r2, #0
 23fd418:	2102      	movs	r1, #2
 23fd41a:	6840      	ldr	r0, [r0, #4]
 23fd41c:	f7fe b94c 	b.w	23fb6b8 <network_disconnect>

023fd420 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd420:	2200      	movs	r2, #0
 23fd422:	6840      	ldr	r0, [r0, #4]
 23fd424:	4611      	mov	r1, r2
 23fd426:	f7fe b939 	b.w	23fb69c <network_connecting>

023fd42a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd42a:	2200      	movs	r2, #0
 23fd42c:	6840      	ldr	r0, [r0, #4]
 23fd42e:	4611      	mov	r1, r2
 23fd430:	f7fe b950 	b.w	23fb6d4 <network_ready>

023fd434 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd434:	2300      	movs	r3, #0
 23fd436:	6840      	ldr	r0, [r0, #4]
 23fd438:	461a      	mov	r2, r3
 23fd43a:	4619      	mov	r1, r3
 23fd43c:	f7fe b958 	b.w	23fb6f0 <network_on>

023fd440 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd440:	2300      	movs	r3, #0
 23fd442:	6840      	ldr	r0, [r0, #4]
 23fd444:	461a      	mov	r2, r3
 23fd446:	4619      	mov	r1, r3
 23fd448:	f7fe b960 	b.w	23fb70c <network_off>

023fd44c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd44c:	2100      	movs	r1, #0
 23fd44e:	6840      	ldr	r0, [r0, #4]
 23fd450:	f7fe b9a2 	b.w	23fb798 <network_is_on>

023fd454 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd454:	2100      	movs	r1, #0
 23fd456:	6840      	ldr	r0, [r0, #4]
 23fd458:	f7fe b9ac 	b.w	23fb7b4 <network_is_off>

023fd45c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd45c:	2200      	movs	r2, #0
 23fd45e:	6840      	ldr	r0, [r0, #4]
 23fd460:	f081 0101 	eor.w	r1, r1, #1
 23fd464:	f7fe b960 	b.w	23fb728 <network_listen>

023fd468 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fd468:	2200      	movs	r2, #0
 23fd46a:	6840      	ldr	r0, [r0, #4]
 23fd46c:	f7fe b978 	b.w	23fb760 <network_set_listen_timeout>

023fd470 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fd470:	2200      	movs	r2, #0
 23fd472:	6840      	ldr	r0, [r0, #4]
 23fd474:	4611      	mov	r1, r2
 23fd476:	f7fe b981 	b.w	23fb77c <network_get_listen_timeout>

023fd47a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fd47a:	2200      	movs	r2, #0
 23fd47c:	6840      	ldr	r0, [r0, #4]
 23fd47e:	4611      	mov	r1, r2
 23fd480:	f7fe b960 	b.w	23fb744 <network_listening>

023fd484 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fd484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd488:	b095      	sub	sp, #84	; 0x54
 23fd48a:	4614      	mov	r4, r2
 23fd48c:	460d      	mov	r5, r1
 23fd48e:	4607      	mov	r7, r0
    IPAddress addr;
 23fd490:	f7fe fdea 	bl	23fc068 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fd494:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fd496:	221c      	movs	r2, #28
 23fd498:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fd49a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fd49c:	f002 f965 	bl	23ff76a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fd4a0:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd4a2:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fd4a4:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd4a6:	2100      	movs	r1, #0
 23fd4a8:	466b      	mov	r3, sp
 23fd4aa:	aa0c      	add	r2, sp, #48	; 0x30
 23fd4ac:	f7fd feaa 	bl	23fb204 <netdb_getaddrinfo>
    if (!r) {
 23fd4b0:	4604      	mov	r4, r0
 23fd4b2:	2800      	cmp	r0, #0
 23fd4b4:	d14b      	bne.n	23fd54e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd4b6:	4602      	mov	r2, r0
 23fd4b8:	2101      	movs	r1, #1
 23fd4ba:	6868      	ldr	r0, [r5, #4]
 23fd4bc:	f7fe f90a 	bl	23fb6d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd4c0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd4c2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd4c4:	4622      	mov	r2, r4
 23fd4c6:	6868      	ldr	r0, [r5, #4]
 23fd4c8:	f7fe f904 	bl	23fb6d4 <network_ready>
        bool ok = false;
 23fd4cc:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd4ce:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd4d0:	9e00      	ldr	r6, [sp, #0]
 23fd4d2:	2e00      	cmp	r6, #0
 23fd4d4:	d03b      	beq.n	23fd54e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fd4d6:	2900      	cmp	r1, #0
 23fd4d8:	d139      	bne.n	23fd54e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fd4da:	6873      	ldr	r3, [r6, #4]
 23fd4dc:	2b02      	cmp	r3, #2
 23fd4de:	d003      	beq.n	23fd4e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fd4e0:	2b0a      	cmp	r3, #10
 23fd4e2:	d011      	beq.n	23fd508 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd4e4:	69f6      	ldr	r6, [r6, #28]
 23fd4e6:	e7f4      	b.n	23fd4d2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fd4e8:	f1b8 0f00 	cmp.w	r8, #0
 23fd4ec:	d0fa      	beq.n	23fd4e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fd4ee:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fd4f0:	a806      	add	r0, sp, #24
 23fd4f2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fd4f4:	1d3c      	adds	r4, r7, #4
 23fd4f6:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fd4f8:	f7fe fde4 	bl	23fc0c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fd4fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd4fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd500:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd502:	4641      	mov	r1, r8
 23fd504:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fd506:	e7ed      	b.n	23fd4e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fd508:	f1b9 0f00 	cmp.w	r9, #0
 23fd50c:	d0ea      	beq.n	23fd4e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fd50e:	2210      	movs	r2, #16
 23fd510:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fd512:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fd514:	f002 f929 	bl	23ff76a <memset>
                    a.v = 6;
 23fd518:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd51a:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fd51c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd520:	f104 0308 	add.w	r3, r4, #8
 23fd524:	3418      	adds	r4, #24
 23fd526:	462a      	mov	r2, r5
 23fd528:	6818      	ldr	r0, [r3, #0]
 23fd52a:	6859      	ldr	r1, [r3, #4]
 23fd52c:	3308      	adds	r3, #8
 23fd52e:	c203      	stmia	r2!, {r0, r1}
 23fd530:	42a3      	cmp	r3, r4
 23fd532:	4615      	mov	r5, r2
 23fd534:	d1f7      	bne.n	23fd526 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fd536:	a901      	add	r1, sp, #4
 23fd538:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fd53a:	1d3c      	adds	r4, r7, #4
 23fd53c:	ad07      	add	r5, sp, #28
 23fd53e:	f7fe fda1 	bl	23fc084 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fd542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd546:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd548:	4649      	mov	r1, r9
 23fd54a:	7023      	strb	r3, [r4, #0]
                    break;
 23fd54c:	e7ca      	b.n	23fd4e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fd54e:	9800      	ldr	r0, [sp, #0]
 23fd550:	f7fd fe4a 	bl	23fb1e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fd554:	4638      	mov	r0, r7
 23fd556:	b015      	add	sp, #84	; 0x54
 23fd558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd55c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fd55c:	4b02      	ldr	r3, [pc, #8]	; (23fd568 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fd55e:	4a03      	ldr	r2, [pc, #12]	; (23fd56c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fd560:	601a      	str	r2, [r3, #0]
 23fd562:	2200      	movs	r2, #0
 23fd564:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fd566:	4770      	bx	lr
 23fd568:	1007ae9c 	.word	0x1007ae9c
 23fd56c:	023ffce0 	.word	0x023ffce0

023fd570 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd572:	4606      	mov	r6, r0
 23fd574:	460d      	mov	r5, r1
  size_t n = 0;
 23fd576:	2400      	movs	r4, #0
 23fd578:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd57a:	42bd      	cmp	r5, r7
 23fd57c:	d00c      	beq.n	23fd598 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd57e:	6833      	ldr	r3, [r6, #0]
 23fd580:	4630      	mov	r0, r6
 23fd582:	689b      	ldr	r3, [r3, #8]
 23fd584:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd588:	4798      	blx	r3
     if (chunk>=0)
 23fd58a:	1e03      	subs	r3, r0, #0
 23fd58c:	db01      	blt.n	23fd592 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd58e:	441c      	add	r4, r3
  while (size--) {
 23fd590:	e7f3      	b.n	23fd57a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd592:	2c00      	cmp	r4, #0
 23fd594:	bf08      	it	eq
 23fd596:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd598:	4620      	mov	r0, r4
 23fd59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd59c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd59c:	b513      	push	{r0, r1, r4, lr}
 23fd59e:	4604      	mov	r4, r0
    }
 23fd5a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd5a2:	b159      	cbz	r1, 23fd5bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd5a4:	9101      	str	r1, [sp, #4]
 23fd5a6:	f7fd f8fb 	bl	23fa7a0 <strlen>
 23fd5aa:	4602      	mov	r2, r0
 23fd5ac:	4620      	mov	r0, r4
 23fd5ae:	6823      	ldr	r3, [r4, #0]
 23fd5b0:	9901      	ldr	r1, [sp, #4]
 23fd5b2:	68db      	ldr	r3, [r3, #12]
    }
 23fd5b4:	b002      	add	sp, #8
 23fd5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd5ba:	4718      	bx	r3
    }
 23fd5bc:	b002      	add	sp, #8
 23fd5be:	bd10      	pop	{r4, pc}

023fd5c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd5c0:	6803      	ldr	r3, [r0, #0]
 23fd5c2:	689b      	ldr	r3, [r3, #8]
 23fd5c4:	4718      	bx	r3

023fd5c6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd5c6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd5c8:	2a01      	cmp	r2, #1
 23fd5ca:	bf98      	it	ls
 23fd5cc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd5ce:	b530      	push	{r4, r5, lr}
 23fd5d0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd5d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd5d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd5d8:	460d      	mov	r5, r1
 23fd5da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd5de:	fb01 5312 	mls	r3, r1, r2, r5
 23fd5e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd5e6:	2b09      	cmp	r3, #9
 23fd5e8:	bf94      	ite	ls
 23fd5ea:	3330      	addls	r3, #48	; 0x30
 23fd5ec:	3337      	addhi	r3, #55	; 0x37
 23fd5ee:	b2db      	uxtb	r3, r3
  } while(n);
 23fd5f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd5f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd5f6:	d9ef      	bls.n	23fd5d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd5f8:	4621      	mov	r1, r4
 23fd5fa:	f7ff ffcf 	bl	23fd59c <_ZN5Print5writeEPKc>
}
 23fd5fe:	b00b      	add	sp, #44	; 0x2c
 23fd600:	bd30      	pop	{r4, r5, pc}
	...

023fd604 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fd604:	2200      	movs	r2, #0
 23fd606:	4b01      	ldr	r3, [pc, #4]	; (23fd60c <_GLOBAL__sub_I_RGB+0x8>)
 23fd608:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd60a:	4770      	bx	lr
 23fd60c:	1007aea4 	.word	0x1007aea4

023fd610 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd610:	2100      	movs	r1, #0
 23fd612:	f7fd be59 	b.w	23fb2c8 <hal_spi_release>

023fd616 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd616:	2100      	movs	r1, #0
 23fd618:	f7fd be48 	b.w	23fb2ac <hal_spi_acquire>

023fd61c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd61c:	b510      	push	{r4, lr}
 23fd61e:	4604      	mov	r4, r0
 23fd620:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd622:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd624:	f7fd fe26 	bl	23fb274 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd628:	2300      	movs	r3, #0
}
 23fd62a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd62c:	6063      	str	r3, [r4, #4]
}
 23fd62e:	bd10      	pop	{r4, pc}

023fd630 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd630:	b513      	push	{r0, r1, r4, lr}
 23fd632:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd634:	7800      	ldrb	r0, [r0, #0]
 23fd636:	f7ff ffee 	bl	23fd616 <_ZN8SPIClass4lockEv.isra.0>
 23fd63a:	b958      	cbnz	r0, 23fd654 <_ZN8SPIClass5beginEv+0x24>
 23fd63c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd63e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd642:	9001      	str	r0, [sp, #4]
 23fd644:	f7fd fdec 	bl	23fb220 <hal_spi_begin>
        unlock();
 23fd648:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd64a:	b002      	add	sp, #8
 23fd64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd650:	f7ff bfde 	b.w	23fd610 <_ZN8SPIClass6unlockEv.isra.0>
 23fd654:	b002      	add	sp, #8
 23fd656:	bd10      	pop	{r4, pc}

023fd658 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fd658:	b513      	push	{r0, r1, r4, lr}
 23fd65a:	4604      	mov	r4, r0
    if (!lock())
 23fd65c:	7800      	ldrb	r0, [r0, #0]
{
 23fd65e:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fd660:	f7ff ffd9 	bl	23fd616 <_ZN8SPIClass4lockEv.isra.0>
 23fd664:	9901      	ldr	r1, [sp, #4]
 23fd666:	b948      	cbnz	r0, 23fd67c <_ZN8SPIClass11setDataModeEh+0x24>
 23fd668:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fd66a:	9001      	str	r0, [sp, #4]
 23fd66c:	f7fd fde6 	bl	23fb23c <hal_spi_set_data_mode>
        unlock();
 23fd670:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd672:	b002      	add	sp, #8
 23fd674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd678:	f7ff bfca 	b.w	23fd610 <_ZN8SPIClass6unlockEv.isra.0>
 23fd67c:	b002      	add	sp, #8
 23fd67e:	bd10      	pop	{r4, pc}

023fd680 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fd680:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd682:	7800      	ldrb	r0, [r0, #0]
 23fd684:	f7fd fde8 	bl	23fb258 <hal_spi_transfer>
}
 23fd688:	b2c0      	uxtb	r0, r0
 23fd68a:	bd08      	pop	{r3, pc}

023fd68c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 23fd68c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd690:	ec57 6b10 	vmov	r6, r7, d0
 23fd694:	4680      	mov	r8, r0
 23fd696:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
 23fd698:	2200      	movs	r2, #0
 23fd69a:	2300      	movs	r3, #0
 23fd69c:	ee10 0a10 	vmov	r0, s0
 23fd6a0:	4639      	mov	r1, r7
 23fd6a2:	f7fc fe17 	bl	23fa2d4 <__aeabi_dcmplt>
 23fd6a6:	b128      	cbz	r0, 23fd6b4 <_Z4dtoadhPc+0x28>
        val = -val;
 23fd6a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 23fd6ac:	461f      	mov	r7, r3
        *sout++ = '-';
 23fd6ae:	232d      	movs	r3, #45	; 0x2d
 23fd6b0:	f804 3b01 	strb.w	r3, [r4], #1
 23fd6b4:	2300      	movs	r3, #0
    }
    long scale = 1;
 23fd6b6:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 23fd6ba:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 23fd6bc:	b2d9      	uxtb	r1, r3
 23fd6be:	4588      	cmp	r8, r1
 23fd6c0:	d903      	bls.n	23fd6ca <_Z4dtoadhPc+0x3e>
        scale *= 10;
 23fd6c2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
 23fd6c6:	3301      	adds	r3, #1
 23fd6c8:	e7f8      	b.n	23fd6bc <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
 23fd6ca:	4648      	mov	r0, r9
 23fd6cc:	f7fc fb26 	bl	23f9d1c <__aeabi_i2d>
 23fd6d0:	4632      	mov	r2, r6
 23fd6d2:	463b      	mov	r3, r7
 23fd6d4:	f7fc fb8c 	bl	23f9df0 <__aeabi_dmul>
 23fd6d8:	4606      	mov	r6, r0
 23fd6da:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
 23fd6dc:	f7fc fec0 	bl	23fa460 <__aeabi_d2ulz>
 23fd6e0:	468a      	mov	sl, r1
 23fd6e2:	4605      	mov	r5, r0
 23fd6e4:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 23fd6e6:	f7fc fb4d 	bl	23f9d84 <__aeabi_ul2d>
 23fd6ea:	4602      	mov	r2, r0
 23fd6ec:	460b      	mov	r3, r1
 23fd6ee:	4630      	mov	r0, r6
 23fd6f0:	4639      	mov	r1, r7
 23fd6f2:	f7fc f9c5 	bl	23f9a80 <__aeabi_dsub>
 23fd6f6:	2200      	movs	r2, #0
 23fd6f8:	4b13      	ldr	r3, [pc, #76]	; (23fd748 <_Z4dtoadhPc+0xbc>)
 23fd6fa:	f7fc fdff 	bl	23fa2fc <__aeabi_dcmpge>
 23fd6fe:	b110      	cbz	r0, 23fd706 <_Z4dtoadhPc+0x7a>
        fixed++;
 23fd700:	3501      	adds	r5, #1
 23fd702:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
 23fd706:	464a      	mov	r2, r9
 23fd708:	4628      	mov	r0, r5
 23fd70a:	4659      	mov	r1, fp
 23fd70c:	17d3      	asrs	r3, r2, #31
 23fd70e:	f7fc fe8f 	bl	23fa430 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 23fd712:	2301      	movs	r3, #1
 23fd714:	4615      	mov	r5, r2
 23fd716:	4621      	mov	r1, r4
 23fd718:	220a      	movs	r2, #10
 23fd71a:	f000 fa70 	bl	23fdbfe <ultoa>
    if (prec) {
 23fd71e:	f1b8 0f00 	cmp.w	r8, #0
 23fd722:	d00e      	beq.n	23fd742 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
 23fd724:	4620      	mov	r0, r4
 23fd726:	f7fd f83b 	bl	23fa7a0 <strlen>
        *sout++ = '.';
 23fd72a:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 23fd72c:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 23fd72e:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 23fd730:	220a      	movs	r2, #10
 23fd732:	4643      	mov	r3, r8
 23fd734:	4628      	mov	r0, r5
 23fd736:	3101      	adds	r1, #1
    }
}
 23fd738:	b001      	add	sp, #4
 23fd73a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 23fd73e:	f000 ba5e 	b.w	23fdbfe <ultoa>
}
 23fd742:	b001      	add	sp, #4
 23fd744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd748:	3fe00000 	.word	0x3fe00000

023fd74c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fd74c:	b510      	push	{r4, lr}
 23fd74e:	4604      	mov	r4, r0
{
	free(buffer);
 23fd750:	6800      	ldr	r0, [r0, #0]
 23fd752:	f7fe f84b 	bl	23fb7ec <free>
}
 23fd756:	4620      	mov	r0, r4
 23fd758:	bd10      	pop	{r4, pc}

023fd75a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fd75a:	b510      	push	{r4, lr}
 23fd75c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fd75e:	6800      	ldr	r0, [r0, #0]
 23fd760:	b108      	cbz	r0, 23fd766 <_ZN6String10invalidateEv+0xc>
 23fd762:	f7fe f843 	bl	23fb7ec <free>
	buffer = NULL;
 23fd766:	2300      	movs	r3, #0
	capacity = len = 0;
 23fd768:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fd76c:	6023      	str	r3, [r4, #0]
}
 23fd76e:	bd10      	pop	{r4, pc}

023fd770 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd770:	b538      	push	{r3, r4, r5, lr}
 23fd772:	4604      	mov	r4, r0
 23fd774:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd776:	6800      	ldr	r0, [r0, #0]
 23fd778:	3101      	adds	r1, #1
 23fd77a:	f7fe f845 	bl	23fb808 <realloc>
	if (newbuffer) {
 23fd77e:	b110      	cbz	r0, 23fd786 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fd780:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fd784:	2001      	movs	r0, #1
	}
	return 0;
}
 23fd786:	bd38      	pop	{r3, r4, r5, pc}

023fd788 <_ZN6String7reserveEj>:
{
 23fd788:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fd78a:	6803      	ldr	r3, [r0, #0]
{
 23fd78c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fd78e:	b123      	cbz	r3, 23fd79a <_ZN6String7reserveEj+0x12>
 23fd790:	6843      	ldr	r3, [r0, #4]
 23fd792:	428b      	cmp	r3, r1
 23fd794:	d301      	bcc.n	23fd79a <_ZN6String7reserveEj+0x12>
 23fd796:	2001      	movs	r0, #1
}
 23fd798:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fd79a:	4620      	mov	r0, r4
 23fd79c:	f7ff ffe8 	bl	23fd770 <_ZN6String12changeBufferEj>
 23fd7a0:	2800      	cmp	r0, #0
 23fd7a2:	d0f9      	beq.n	23fd798 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fd7a4:	68a3      	ldr	r3, [r4, #8]
 23fd7a6:	2b00      	cmp	r3, #0
 23fd7a8:	d1f5      	bne.n	23fd796 <_ZN6String7reserveEj+0xe>
 23fd7aa:	6822      	ldr	r2, [r4, #0]
 23fd7ac:	7013      	strb	r3, [r2, #0]
 23fd7ae:	e7f2      	b.n	23fd796 <_ZN6String7reserveEj+0xe>

023fd7b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd7b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fd7b4:	4611      	mov	r1, r2
 23fd7b6:	9201      	str	r2, [sp, #4]
{
 23fd7b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fd7ba:	f7ff ffe5 	bl	23fd788 <_ZN6String7reserveEj>
 23fd7be:	9a01      	ldr	r2, [sp, #4]
 23fd7c0:	b928      	cbnz	r0, 23fd7ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fd7c2:	4620      	mov	r0, r4
 23fd7c4:	f7ff ffc9 	bl	23fd75a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fd7c8:	4620      	mov	r0, r4
 23fd7ca:	b003      	add	sp, #12
 23fd7cc:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fd7ce:	4629      	mov	r1, r5
	len = length;
 23fd7d0:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fd7d2:	6820      	ldr	r0, [r4, #0]
 23fd7d4:	f001 ffa2 	bl	23ff71c <memcpy>
	buffer[len] = 0;
 23fd7d8:	2100      	movs	r1, #0
 23fd7da:	6822      	ldr	r2, [r4, #0]
 23fd7dc:	68a3      	ldr	r3, [r4, #8]
 23fd7de:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fd7e0:	e7f2      	b.n	23fd7c8 <_ZN6String4copyEPKcj+0x18>

023fd7e2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd7e2:	b538      	push	{r3, r4, r5, lr}
 23fd7e4:	4605      	mov	r5, r0
	if (buffer) {
 23fd7e6:	6800      	ldr	r0, [r0, #0]
{
 23fd7e8:	460c      	mov	r4, r1
	if (buffer) {
 23fd7ea:	b170      	cbz	r0, 23fd80a <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fd7ec:	686a      	ldr	r2, [r5, #4]
 23fd7ee:	688b      	ldr	r3, [r1, #8]
 23fd7f0:	429a      	cmp	r2, r3
 23fd7f2:	d308      	bcc.n	23fd806 <_ZN6String4moveERS_+0x24>
 23fd7f4:	6809      	ldr	r1, [r1, #0]
 23fd7f6:	b131      	cbz	r1, 23fd806 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fd7f8:	f002 f805 	bl	23ff806 <strcpy>
			len = rhs.len;
 23fd7fc:	68a3      	ldr	r3, [r4, #8]
 23fd7fe:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fd800:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fd802:	60a3      	str	r3, [r4, #8]
}
 23fd804:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fd806:	f7fd fff1 	bl	23fb7ec <free>
	buffer = rhs.buffer;
 23fd80a:	6823      	ldr	r3, [r4, #0]
 23fd80c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fd80e:	6863      	ldr	r3, [r4, #4]
 23fd810:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fd812:	68a3      	ldr	r3, [r4, #8]
 23fd814:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fd816:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fd818:	e9c4 3300 	strd	r3, r3, [r4]
 23fd81c:	e7f1      	b.n	23fd802 <_ZN6String4moveERS_+0x20>

023fd81e <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fd81e:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd820:	b510      	push	{r4, lr}
 23fd822:	4604      	mov	r4, r0
	capacity = 0;
 23fd824:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd828:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd82a:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fd82c:	f7ff ffd9 	bl	23fd7e2 <_ZN6String4moveERS_>
}
 23fd830:	4620      	mov	r0, r4
 23fd832:	bd10      	pop	{r4, pc}

023fd834 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fd834:	4288      	cmp	r0, r1
{
 23fd836:	b510      	push	{r4, lr}
 23fd838:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fd83a:	d005      	beq.n	23fd848 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fd83c:	680b      	ldr	r3, [r1, #0]
 23fd83e:	b12b      	cbz	r3, 23fd84c <_ZN6StringaSERKS_+0x18>
 23fd840:	688a      	ldr	r2, [r1, #8]
 23fd842:	4619      	mov	r1, r3
 23fd844:	f7ff ffb4 	bl	23fd7b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fd848:	4620      	mov	r0, r4
 23fd84a:	bd10      	pop	{r4, pc}
	else invalidate();
 23fd84c:	f7ff ff85 	bl	23fd75a <_ZN6String10invalidateEv>
 23fd850:	e7fa      	b.n	23fd848 <_ZN6StringaSERKS_+0x14>

023fd852 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fd852:	2300      	movs	r3, #0
String::String(const String &value)
 23fd854:	b510      	push	{r4, lr}
 23fd856:	4604      	mov	r4, r0
	capacity = 0;
 23fd858:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd85c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd85e:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fd860:	f7ff ffe8 	bl	23fd834 <_ZN6StringaSERKS_>
}
 23fd864:	4620      	mov	r0, r4
 23fd866:	bd10      	pop	{r4, pc}

023fd868 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fd868:	b513      	push	{r0, r1, r4, lr}
 23fd86a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23fd86c:	b159      	cbz	r1, 23fd886 <_ZN6StringaSEPKc+0x1e>
 23fd86e:	4608      	mov	r0, r1
 23fd870:	9101      	str	r1, [sp, #4]
 23fd872:	f7fc ff95 	bl	23fa7a0 <strlen>
 23fd876:	9901      	ldr	r1, [sp, #4]
 23fd878:	4602      	mov	r2, r0
 23fd87a:	4620      	mov	r0, r4
 23fd87c:	f7ff ff98 	bl	23fd7b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fd880:	4620      	mov	r0, r4
 23fd882:	b002      	add	sp, #8
 23fd884:	bd10      	pop	{r4, pc}
	else invalidate();
 23fd886:	f7ff ff68 	bl	23fd75a <_ZN6String10invalidateEv>
 23fd88a:	e7f9      	b.n	23fd880 <_ZN6StringaSEPKc+0x18>

023fd88c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23fd88c:	b510      	push	{r4, lr}
	buffer = NULL;
 23fd88e:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 23fd890:	4604      	mov	r4, r0
 23fd892:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 23fd894:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23fd898:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23fd89a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 23fd89c:	4608      	mov	r0, r1
	itoa(value, buf, base);
 23fd89e:	a901      	add	r1, sp, #4
 23fd8a0:	f000 f9d2 	bl	23fdc48 <itoa>
	*this = buf;
 23fd8a4:	4620      	mov	r0, r4
 23fd8a6:	a901      	add	r1, sp, #4
 23fd8a8:	f7ff ffde 	bl	23fd868 <_ZN6StringaSEPKc>
}
 23fd8ac:	4620      	mov	r0, r4
 23fd8ae:	b00a      	add	sp, #40	; 0x28
 23fd8b0:	bd10      	pop	{r4, pc}

023fd8b2 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
 23fd8b2:	b530      	push	{r4, r5, lr}
	buffer = NULL;
 23fd8b4:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 23fd8b6:	4604      	mov	r4, r0
 23fd8b8:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 23fd8ba:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23fd8be:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23fd8c0:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
 23fd8c2:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
 23fd8c6:	b2cd      	uxtb	r5, r1
 23fd8c8:	f7fc fa3a 	bl	23f9d40 <__aeabi_f2d>
 23fd8cc:	ec41 0b10 	vmov	d0, r0, r1
 23fd8d0:	4628      	mov	r0, r5
 23fd8d2:	a901      	add	r1, sp, #4
 23fd8d4:	f7ff feda 	bl	23fd68c <_Z4dtoadhPc>
        *this = buf;
 23fd8d8:	4620      	mov	r0, r4
 23fd8da:	a901      	add	r1, sp, #4
 23fd8dc:	f7ff ffc4 	bl	23fd868 <_ZN6StringaSEPKc>
}
 23fd8e0:	4620      	mov	r0, r4
 23fd8e2:	b00b      	add	sp, #44	; 0x2c
 23fd8e4:	bd30      	pop	{r4, r5, pc}

023fd8e6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fd8e6:	b570      	push	{r4, r5, r6, lr}
 23fd8e8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23fd8ea:	460e      	mov	r6, r1
 23fd8ec:	b909      	cbnz	r1, 23fd8f2 <_ZN6String6concatEPKcj+0xc>
 23fd8ee:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23fd8f0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23fd8f2:	b16a      	cbz	r2, 23fd910 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23fd8f4:	6884      	ldr	r4, [r0, #8]
 23fd8f6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23fd8f8:	4621      	mov	r1, r4
 23fd8fa:	f7ff ff45 	bl	23fd788 <_ZN6String7reserveEj>
 23fd8fe:	2800      	cmp	r0, #0
 23fd900:	d0f5      	beq.n	23fd8ee <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23fd902:	6828      	ldr	r0, [r5, #0]
 23fd904:	68ab      	ldr	r3, [r5, #8]
 23fd906:	4631      	mov	r1, r6
 23fd908:	4418      	add	r0, r3
 23fd90a:	f001 ff7c 	bl	23ff806 <strcpy>
	len = newlen;
 23fd90e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23fd910:	2001      	movs	r0, #1
 23fd912:	e7ed      	b.n	23fd8f0 <_ZN6String6concatEPKcj+0xa>

023fd914 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fd914:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fd916:	688a      	ldr	r2, [r1, #8]
 23fd918:	6809      	ldr	r1, [r1, #0]
{
 23fd91a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fd91c:	f7ff ffe3 	bl	23fd8e6 <_ZN6String6concatEPKcj>
 23fd920:	b910      	cbnz	r0, 23fd928 <_ZplRK15StringSumHelperRK6String+0x14>
 23fd922:	4620      	mov	r0, r4
 23fd924:	f7ff ff19 	bl	23fd75a <_ZN6String10invalidateEv>
	return a;
}
 23fd928:	4620      	mov	r0, r4
 23fd92a:	bd10      	pop	{r4, pc}

023fd92c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fd92c:	b513      	push	{r0, r1, r4, lr}
 23fd92e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fd930:	b929      	cbnz	r1, 23fd93e <_ZplRK15StringSumHelperPKc+0x12>
 23fd932:	4620      	mov	r0, r4
 23fd934:	f7ff ff11 	bl	23fd75a <_ZN6String10invalidateEv>
	return a;
}
 23fd938:	4620      	mov	r0, r4
 23fd93a:	b002      	add	sp, #8
 23fd93c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fd93e:	4608      	mov	r0, r1
 23fd940:	9101      	str	r1, [sp, #4]
 23fd942:	f7fc ff2d 	bl	23fa7a0 <strlen>
 23fd946:	9901      	ldr	r1, [sp, #4]
 23fd948:	4602      	mov	r2, r0
 23fd94a:	4620      	mov	r0, r4
 23fd94c:	f7ff ffcb 	bl	23fd8e6 <_ZN6String6concatEPKcj>
 23fd950:	2800      	cmp	r0, #0
 23fd952:	d0ee      	beq.n	23fd932 <_ZplRK15StringSumHelperPKc+0x6>
 23fd954:	e7f0      	b.n	23fd938 <_ZplRK15StringSumHelperPKc+0xc>
	...

023fd958 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd958:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd95a:	2000      	movs	r0, #0
 23fd95c:	4b04      	ldr	r3, [pc, #16]	; (23fd970 <_GLOBAL__sub_I_System+0x18>)
 23fd95e:	601a      	str	r2, [r3, #0]
 23fd960:	4b04      	ldr	r3, [pc, #16]	; (23fd974 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd962:	4a05      	ldr	r2, [pc, #20]	; (23fd978 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd964:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd968:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd96a:	f7fd bdfd 	b.w	23fb568 <set_system_mode>
 23fd96e:	bf00      	nop
 23fd970:	1007aec0 	.word	0x1007aec0
 23fd974:	1007aeb4 	.word	0x1007aeb4
 23fd978:	ffff0000 	.word	0xffff0000

023fd97c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd97c:	4b02      	ldr	r3, [pc, #8]	; (23fd988 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd97e:	681a      	ldr	r2, [r3, #0]
 23fd980:	4b02      	ldr	r3, [pc, #8]	; (23fd98c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd982:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fd984:	4770      	bx	lr
 23fd986:	bf00      	nop
 23fd988:	1007adac 	.word	0x1007adac
 23fd98c:	1007aec4 	.word	0x1007aec4

023fd990 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fd990:	4770      	bx	lr

023fd992 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd992:	7441      	strb	r1, [r0, #17]
}
 23fd994:	4770      	bx	lr

023fd996 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fd996:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fd998:	7c00      	ldrb	r0, [r0, #16]
 23fd99a:	f7fd fd05 	bl	23fb3a8 <hal_usart_available_data_for_write>
}
 23fd99e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd9a2:	bd08      	pop	{r3, pc}

023fd9a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fd9a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fd9a6:	7c00      	ldrb	r0, [r0, #16]
 23fd9a8:	f7fd fcb8 	bl	23fb31c <hal_usart_available>
}
 23fd9ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd9b0:	bd08      	pop	{r3, pc}

023fd9b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fd9b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fd9b4:	7c00      	ldrb	r0, [r0, #16]
 23fd9b6:	f7fd fccd 	bl	23fb354 <hal_usart_peek>
}
 23fd9ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd9be:	bd08      	pop	{r3, pc}

023fd9c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fd9c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fd9c2:	7c00      	ldrb	r0, [r0, #16]
 23fd9c4:	f7fd fcb8 	bl	23fb338 <hal_usart_read>
}
 23fd9c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd9cc:	bd08      	pop	{r3, pc}

023fd9ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fd9ce:	7c00      	ldrb	r0, [r0, #16]
 23fd9d0:	f7fd bcce 	b.w	23fb370 <hal_usart_flush>

023fd9d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fd9d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd9d6:	7c45      	ldrb	r5, [r0, #17]
{
 23fd9d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd9da:	b12d      	cbz	r5, 23fd9e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fd9dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fd9de:	b003      	add	sp, #12
 23fd9e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fd9e4:	f7fd bc8c 	b.w	23fb300 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd9e8:	7c00      	ldrb	r0, [r0, #16]
 23fd9ea:	9101      	str	r1, [sp, #4]
 23fd9ec:	f7fd fcdc 	bl	23fb3a8 <hal_usart_available_data_for_write>
 23fd9f0:	2800      	cmp	r0, #0
 23fd9f2:	9901      	ldr	r1, [sp, #4]
 23fd9f4:	dcf2      	bgt.n	23fd9dc <_ZN11USARTSerial5writeEh+0x8>
}
 23fd9f6:	4628      	mov	r0, r5
 23fd9f8:	b003      	add	sp, #12
 23fd9fa:	bd30      	pop	{r4, r5, pc}

023fd9fc <_ZN11USARTSerialD0Ev>:
 23fd9fc:	b510      	push	{r4, lr}
 23fd9fe:	4604      	mov	r4, r0
 23fda00:	2114      	movs	r1, #20
 23fda02:	f7fc fef6 	bl	23fa7f2 <_ZdlPvj>
 23fda06:	4620      	mov	r0, r4
 23fda08:	bd10      	pop	{r4, pc}
	...

023fda0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fda0c:	b510      	push	{r4, lr}
 23fda0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fda12:	4604      	mov	r4, r0
 23fda14:	4608      	mov	r0, r1
 23fda16:	4611      	mov	r1, r2
 23fda18:	2200      	movs	r2, #0
 23fda1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fda1e:	4b04      	ldr	r3, [pc, #16]	; (23fda30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fda20:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fda22:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fda24:	2301      	movs	r3, #1
 23fda26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fda28:	f7fd fcda 	bl	23fb3e0 <hal_usart_init_ex>
}
 23fda2c:	4620      	mov	r0, r4
 23fda2e:	bd10      	pop	{r4, pc}
 23fda30:	023ffd38 	.word	0x023ffd38

023fda34 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fda34:	2300      	movs	r3, #0
 23fda36:	7c00      	ldrb	r0, [r0, #16]
 23fda38:	f7fd bcc4 	b.w	23fb3c4 <hal_usart_begin_config>

023fda3c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fda3c:	2200      	movs	r2, #0
 23fda3e:	f7ff bff9 	b.w	23fda34 <_ZN11USARTSerial5beginEmm>

023fda42 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fda42:	7c00      	ldrb	r0, [r0, #16]
 23fda44:	f7fd bc4e 	b.w	23fb2e4 <hal_usart_end>

023fda48 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fda48:	7c00      	ldrb	r0, [r0, #16]
 23fda4a:	f7fd bc9f 	b.w	23fb38c <hal_usart_is_enabled>

023fda4e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fda4e:	7441      	strb	r1, [r0, #17]
}
 23fda50:	4770      	bx	lr

023fda52 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fda52:	4770      	bx	lr

023fda54 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fda54:	4770      	bx	lr

023fda56 <_ZN9USBSerial4readEv>:
{
 23fda56:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fda58:	2100      	movs	r1, #0
 23fda5a:	7c00      	ldrb	r0, [r0, #16]
 23fda5c:	f7fd fd14 	bl	23fb488 <HAL_USB_USART_Receive_Data>
}
 23fda60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fda64:	bd08      	pop	{r3, pc}

023fda66 <_ZN9USBSerial4peekEv>:
{
 23fda66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fda68:	2101      	movs	r1, #1
 23fda6a:	7c00      	ldrb	r0, [r0, #16]
 23fda6c:	f7fd fd0c 	bl	23fb488 <HAL_USB_USART_Receive_Data>
}
 23fda70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fda74:	bd08      	pop	{r3, pc}

023fda76 <_ZN9USBSerial17availableForWriteEv>:
{
 23fda76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fda78:	7c00      	ldrb	r0, [r0, #16]
 23fda7a:	f7fd fcf7 	bl	23fb46c <HAL_USB_USART_Available_Data_For_Write>
}
 23fda7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fda82:	bd08      	pop	{r3, pc}

023fda84 <_ZN9USBSerial9availableEv>:
{
 23fda84:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fda86:	7c00      	ldrb	r0, [r0, #16]
 23fda88:	f7fd fce2 	bl	23fb450 <HAL_USB_USART_Available_Data>
}
 23fda8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fda90:	bd08      	pop	{r3, pc}

023fda92 <_ZN9USBSerial5writeEh>:
{
 23fda92:	b513      	push	{r0, r1, r4, lr}
 23fda94:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fda96:	7c00      	ldrb	r0, [r0, #16]
{
 23fda98:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fda9a:	f7fd fce7 	bl	23fb46c <HAL_USB_USART_Available_Data_For_Write>
 23fda9e:	2800      	cmp	r0, #0
 23fdaa0:	9901      	ldr	r1, [sp, #4]
 23fdaa2:	dc01      	bgt.n	23fdaa8 <_ZN9USBSerial5writeEh+0x16>
 23fdaa4:	7c60      	ldrb	r0, [r4, #17]
 23fdaa6:	b120      	cbz	r0, 23fdab2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fdaa8:	7c20      	ldrb	r0, [r4, #16]
 23fdaaa:	f7fd fcfb 	bl	23fb4a4 <HAL_USB_USART_Send_Data>
 23fdaae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fdab2:	b002      	add	sp, #8
 23fdab4:	bd10      	pop	{r4, pc}

023fdab6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fdab6:	7c00      	ldrb	r0, [r0, #16]
 23fdab8:	f7fd bd02 	b.w	23fb4c0 <HAL_USB_USART_Flush_Data>

023fdabc <_ZN9USBSerialD0Ev>:
 23fdabc:	b510      	push	{r4, lr}
 23fdabe:	4604      	mov	r4, r0
 23fdac0:	2114      	movs	r1, #20
 23fdac2:	f7fc fe96 	bl	23fa7f2 <_ZdlPvj>
 23fdac6:	4620      	mov	r0, r4
 23fdac8:	bd10      	pop	{r4, pc}
	...

023fdacc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdacc:	b510      	push	{r4, lr}
 23fdace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdad2:	4604      	mov	r4, r0
 23fdad4:	4608      	mov	r0, r1
 23fdad6:	2100      	movs	r1, #0
 23fdad8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fdadc:	4b04      	ldr	r3, [pc, #16]	; (23fdaf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fdade:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdae0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdae2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fdae4:	4611      	mov	r1, r2
  _blocking = true;
 23fdae6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fdae8:	f7fd fc88 	bl	23fb3fc <HAL_USB_USART_Init>
}
 23fdaec:	4620      	mov	r0, r4
 23fdaee:	bd10      	pop	{r4, pc}
 23fdaf0:	023ffd68 	.word	0x023ffd68

023fdaf4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fdaf4:	2200      	movs	r2, #0
 23fdaf6:	7c00      	ldrb	r0, [r0, #16]
 23fdaf8:	f7fd bc8e 	b.w	23fb418 <HAL_USB_USART_Begin>

023fdafc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fdafc:	7c00      	ldrb	r0, [r0, #16]
 23fdafe:	f7fd bc99 	b.w	23fb434 <HAL_USB_USART_End>

023fdb02 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fdb02:	7c00      	ldrb	r0, [r0, #16]
 23fdb04:	f7fd bcea 	b.w	23fb4dc <HAL_USB_USART_Is_Connected>

023fdb08 <_Z19acquireSerialBufferv>:
{
 23fdb08:	b510      	push	{r4, lr}
 23fdb0a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fdb0c:	2214      	movs	r2, #20
 23fdb0e:	2100      	movs	r1, #0
 23fdb10:	f001 fe2b 	bl	23ff76a <memset>
}
 23fdb14:	4620      	mov	r0, r4
 23fdb16:	bd10      	pop	{r4, pc}

023fdb18 <_Z16_fetch_usbserialv>:
{
 23fdb18:	b510      	push	{r4, lr}
 23fdb1a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fdb1c:	a803      	add	r0, sp, #12
 23fdb1e:	f7ff fff3 	bl	23fdb08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdb22:	4c0c      	ldr	r4, [pc, #48]	; (23fdb54 <_Z16_fetch_usbserialv+0x3c>)
 23fdb24:	e8d4 1f8f 	ldab	r1, [r4]
 23fdb28:	f011 0101 	ands.w	r1, r1, #1
 23fdb2c:	d10f      	bne.n	23fdb4e <_Z16_fetch_usbserialv+0x36>
 23fdb2e:	4620      	mov	r0, r4
 23fdb30:	9101      	str	r1, [sp, #4]
 23fdb32:	f7fc fe6d 	bl	23fa810 <__cxa_guard_acquire>
 23fdb36:	9901      	ldr	r1, [sp, #4]
 23fdb38:	b148      	cbz	r0, 23fdb4e <_Z16_fetch_usbserialv+0x36>
 23fdb3a:	aa03      	add	r2, sp, #12
 23fdb3c:	4806      	ldr	r0, [pc, #24]	; (23fdb58 <_Z16_fetch_usbserialv+0x40>)
 23fdb3e:	f7ff ffc5 	bl	23fdacc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fdb42:	4620      	mov	r0, r4
 23fdb44:	f7fc fe69 	bl	23fa81a <__cxa_guard_release>
 23fdb48:	4804      	ldr	r0, [pc, #16]	; (23fdb5c <_Z16_fetch_usbserialv+0x44>)
 23fdb4a:	f001 fdd9 	bl	23ff700 <atexit>
	return _usbserial;
}
 23fdb4e:	4802      	ldr	r0, [pc, #8]	; (23fdb58 <_Z16_fetch_usbserialv+0x40>)
 23fdb50:	b008      	add	sp, #32
 23fdb52:	bd10      	pop	{r4, pc}
 23fdb54:	1007aec8 	.word	0x1007aec8
 23fdb58:	1007aecc 	.word	0x1007aecc
 23fdb5c:	023fda53 	.word	0x023fda53

023fdb60 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fdb60:	2200      	movs	r2, #0
 23fdb62:	6840      	ldr	r0, [r0, #4]
 23fdb64:	4611      	mov	r1, r2
 23fdb66:	f7fd bdb5 	b.w	23fb6d4 <network_ready>

023fdb6a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fdb6a:	2200      	movs	r2, #0
 23fdb6c:	6840      	ldr	r0, [r0, #4]
 23fdb6e:	4611      	mov	r1, r2
 23fdb70:	f7fd bde8 	b.w	23fb744 <network_listening>

023fdb74 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fdb74:	2200      	movs	r2, #0
 23fdb76:	6840      	ldr	r0, [r0, #4]
 23fdb78:	4611      	mov	r1, r2
 23fdb7a:	f7fd bdff 	b.w	23fb77c <network_get_listen_timeout>

023fdb7e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fdb7e:	2200      	movs	r2, #0
 23fdb80:	6840      	ldr	r0, [r0, #4]
 23fdb82:	f7fd bded 	b.w	23fb760 <network_set_listen_timeout>

023fdb86 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fdb86:	2200      	movs	r2, #0
 23fdb88:	6840      	ldr	r0, [r0, #4]
 23fdb8a:	f081 0101 	eor.w	r1, r1, #1
 23fdb8e:	f7fd bdcb 	b.w	23fb728 <network_listen>

023fdb92 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fdb92:	2300      	movs	r3, #0
 23fdb94:	6840      	ldr	r0, [r0, #4]
 23fdb96:	461a      	mov	r2, r3
 23fdb98:	4619      	mov	r1, r3
 23fdb9a:	f7fd bdb7 	b.w	23fb70c <network_off>

023fdb9e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fdb9e:	2300      	movs	r3, #0
 23fdba0:	6840      	ldr	r0, [r0, #4]
 23fdba2:	461a      	mov	r2, r3
 23fdba4:	4619      	mov	r1, r3
 23fdba6:	f7fd bda3 	b.w	23fb6f0 <network_on>

023fdbaa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fdbaa:	2200      	movs	r2, #0
 23fdbac:	6840      	ldr	r0, [r0, #4]
 23fdbae:	4611      	mov	r1, r2
 23fdbb0:	f7fd bd74 	b.w	23fb69c <network_connecting>

023fdbb4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fdbb4:	2200      	movs	r2, #0
 23fdbb6:	2102      	movs	r1, #2
 23fdbb8:	6840      	ldr	r0, [r0, #4]
 23fdbba:	f7fd bd7d 	b.w	23fb6b8 <network_disconnect>

023fdbbe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fdbbe:	2300      	movs	r3, #0
 23fdbc0:	6840      	ldr	r0, [r0, #4]
 23fdbc2:	461a      	mov	r2, r3
 23fdbc4:	f7fd bd5c 	b.w	23fb680 <network_connect>

023fdbc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fdbc8:	2204      	movs	r2, #4
 23fdbca:	4b02      	ldr	r3, [pc, #8]	; (23fdbd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fdbcc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fdbce:	4a02      	ldr	r2, [pc, #8]	; (23fdbd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fdbd0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fdbd2:	4770      	bx	lr
 23fdbd4:	1007aee0 	.word	0x1007aee0
 23fdbd8:	023ffd98 	.word	0x023ffd98

023fdbdc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23fdbdc:	b510      	push	{r4, lr}
 23fdbde:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23fdbe0:	f7fc fdde 	bl	23fa7a0 <strlen>
 23fdbe4:	3801      	subs	r0, #1
 23fdbe6:	1823      	adds	r3, r4, r0
 23fdbe8:	4620      	mov	r0, r4
	while(i<j){
 23fdbea:	4283      	cmp	r3, r0
 23fdbec:	d906      	bls.n	23fdbfc <_Z11str_reversePc+0x20>
		c = *i;
 23fdbee:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23fdbf0:	7819      	ldrb	r1, [r3, #0]
 23fdbf2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23fdbf6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23fdbfa:	e7f6      	b.n	23fdbea <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23fdbfc:	bd10      	pop	{r4, pc}

023fdbfe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23fdbfe:	b570      	push	{r4, r5, r6, lr}
 23fdc00:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23fdc02:	1e91      	subs	r1, r2, #2
 23fdc04:	2922      	cmp	r1, #34	; 0x22
 23fdc06:	d81d      	bhi.n	23fdc44 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23fdc08:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23fdc0a:	b930      	cbnz	r0, 23fdc1a <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23fdc0c:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23fdc0e:	4423      	add	r3, r4
 23fdc10:	429d      	cmp	r5, r3
 23fdc12:	d210      	bcs.n	23fdc36 <ultoa+0x38>
            *ptr++ = '0';
 23fdc14:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23fdc18:	e7fa      	b.n	23fdc10 <ultoa+0x12>
            result.quot = a/radix;
 23fdc1a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23fdc1e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23fdc22:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23fdc24:	2809      	cmp	r0, #9
                *ptr += '0';
 23fdc26:	bf94      	ite	ls
 23fdc28:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23fdc2a:	3157      	addhi	r1, #87	; 0x57
 23fdc2c:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23fdc2e:	4630      	mov	r0, r6
 23fdc30:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23fdc34:	e7e9      	b.n	23fdc0a <ultoa+0xc>

	*ptr = '\0';
 23fdc36:	2300      	movs	r3, #0
	str_reverse(buffer);
 23fdc38:	4620      	mov	r0, r4
	*ptr = '\0';
 23fdc3a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23fdc3c:	f7ff ffce 	bl	23fdbdc <_Z11str_reversePc>
	return buffer;
 23fdc40:	4620      	mov	r0, r4
}
 23fdc42:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23fdc44:	2000      	movs	r0, #0
 23fdc46:	e7fc      	b.n	23fdc42 <ultoa+0x44>

023fdc48 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fdc48:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23fdc4a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fdc4c:	460c      	mov	r4, r1
 23fdc4e:	4615      	mov	r5, r2
	if(a<0){
 23fdc50:	da0d      	bge.n	23fdc6e <itoa+0x26>
		*buffer = '-';
 23fdc52:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23fdc54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23fdc58:	bf0c      	ite	eq
 23fdc5a:	4618      	moveq	r0, r3
 23fdc5c:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23fdc5e:	2301      	movs	r3, #1
		*buffer = '-';
 23fdc60:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23fdc62:	462a      	mov	r2, r5
 23fdc64:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23fdc66:	f7ff ffca 	bl	23fdbfe <ultoa>
	}
	return buffer;
}
 23fdc6a:	4620      	mov	r0, r4
 23fdc6c:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23fdc6e:	2301      	movs	r3, #1
 23fdc70:	e7f9      	b.n	23fdc66 <itoa+0x1e>
	...

023fdc74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdc74:	4b01      	ldr	r3, [pc, #4]	; (23fdc7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fdc76:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fdc78:	4770      	bx	lr
 23fdc7a:	bf00      	nop
 23fdc7c:	1007adb4 	.word	0x1007adb4

023fdc80 <serialEventRun>:
{
 23fdc80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fdc82:	4b0f      	ldr	r3, [pc, #60]	; (23fdcc0 <serialEventRun+0x40>)
 23fdc84:	b143      	cbz	r3, 23fdc98 <serialEventRun+0x18>
 23fdc86:	f7ff ff47 	bl	23fdb18 <_Z16_fetch_usbserialv>
 23fdc8a:	6803      	ldr	r3, [r0, #0]
 23fdc8c:	691b      	ldr	r3, [r3, #16]
 23fdc8e:	4798      	blx	r3
 23fdc90:	2800      	cmp	r0, #0
 23fdc92:	dd01      	ble.n	23fdc98 <serialEventRun+0x18>
        serialEvent();
 23fdc94:	e000      	b.n	23fdc98 <serialEventRun+0x18>
 23fdc96:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fdc98:	4b0a      	ldr	r3, [pc, #40]	; (23fdcc4 <serialEventRun+0x44>)
 23fdc9a:	b143      	cbz	r3, 23fdcae <serialEventRun+0x2e>
 23fdc9c:	f000 f96a 	bl	23fdf74 <_Z22__fetch_global_Serial1v>
 23fdca0:	6803      	ldr	r3, [r0, #0]
 23fdca2:	691b      	ldr	r3, [r3, #16]
 23fdca4:	4798      	blx	r3
 23fdca6:	2800      	cmp	r0, #0
 23fdca8:	dd01      	ble.n	23fdcae <serialEventRun+0x2e>
        serialEvent1();
 23fdcaa:	e000      	b.n	23fdcae <serialEventRun+0x2e>
 23fdcac:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fdcae:	4b06      	ldr	r3, [pc, #24]	; (23fdcc8 <serialEventRun+0x48>)
 23fdcb0:	b10b      	cbz	r3, 23fdcb6 <serialEventRun+0x36>
 23fdcb2:	f000 f9a5 	bl	23fe000 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fdcb6:	4b05      	ldr	r3, [pc, #20]	; (23fdccc <serialEventRun+0x4c>)
 23fdcb8:	b10b      	cbz	r3, 23fdcbe <serialEventRun+0x3e>
 23fdcba:	f000 f9d7 	bl	23fe06c <_Z15serialEventRun3v>
}
 23fdcbe:	bd08      	pop	{r3, pc}
	...

023fdcd0 <_post_loop>:
{
 23fdcd0:	b508      	push	{r3, lr}
	serialEventRun();
 23fdcd2:	f7ff ffd5 	bl	23fdc80 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fdcd6:	f7fd f9d1 	bl	23fb07c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fdcda:	4b01      	ldr	r3, [pc, #4]	; (23fdce0 <_post_loop+0x10>)
 23fdcdc:	6018      	str	r0, [r3, #0]
}
 23fdcde:	bd08      	pop	{r3, pc}
 23fdce0:	1007aef0 	.word	0x1007aef0

023fdce4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdce4:	4805      	ldr	r0, [pc, #20]	; (23fdcfc <_Z33system_initialize_user_backup_ramv+0x18>)
 23fdce6:	4a06      	ldr	r2, [pc, #24]	; (23fdd00 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fdce8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdcea:	1a12      	subs	r2, r2, r0
 23fdcec:	4905      	ldr	r1, [pc, #20]	; (23fdd04 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fdcee:	f001 fd15 	bl	23ff71c <memcpy>
    __backup_sram_signature = signature;
 23fdcf2:	4b05      	ldr	r3, [pc, #20]	; (23fdd08 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fdcf4:	4a05      	ldr	r2, [pc, #20]	; (23fdd0c <_Z33system_initialize_user_backup_ramv+0x28>)
 23fdcf6:	601a      	str	r2, [r3, #0]
}
 23fdcf8:	bd08      	pop	{r3, pc}
 23fdcfa:	bf00      	nop
 23fdcfc:	1007b400 	.word	0x1007b400
 23fdd00:	1007b404 	.word	0x1007b404
 23fdd04:	085ff6ac 	.word	0x085ff6ac
 23fdd08:	1007b400 	.word	0x1007b400
 23fdd0c:	9a271c1e 	.word	0x9a271c1e

023fdd10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdd10:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fdd12:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdd14:	461a      	mov	r2, r3
 23fdd16:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdd1a:	9300      	str	r3, [sp, #0]
 23fdd1c:	f7fd fc6a 	bl	23fb5f4 <system_ctrl_set_result>
}
 23fdd20:	b003      	add	sp, #12
 23fdd22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fdd28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fdd28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fdd2a:	8843      	ldrh	r3, [r0, #2]
 23fdd2c:	2b0a      	cmp	r3, #10
 23fdd2e:	d008      	beq.n	23fdd42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fdd30:	2b50      	cmp	r3, #80	; 0x50
 23fdd32:	d10b      	bne.n	23fdd4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fdd34:	4b09      	ldr	r3, [pc, #36]	; (23fdd5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fdd36:	681b      	ldr	r3, [r3, #0]
 23fdd38:	b14b      	cbz	r3, 23fdd4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fdd3a:	b003      	add	sp, #12
 23fdd3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fdd40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fdd42:	f7ff ffe5 	bl	23fdd10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fdd46:	b003      	add	sp, #12
 23fdd48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdd4c:	2300      	movs	r3, #0
 23fdd4e:	461a      	mov	r2, r3
 23fdd50:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdd54:	9300      	str	r3, [sp, #0]
 23fdd56:	f7fd fc4d 	bl	23fb5f4 <system_ctrl_set_result>
}
 23fdd5a:	e7f4      	b.n	23fdd46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fdd5c:	1007aeec 	.word	0x1007aeec

023fdd60 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdd60:	2100      	movs	r1, #0
{
 23fdd62:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdd64:	4811      	ldr	r0, [pc, #68]	; (23fddac <module_user_init_hook+0x4c>)
 23fdd66:	f7fd fda3 	bl	23fb8b0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fdd6a:	4b11      	ldr	r3, [pc, #68]	; (23fddb0 <module_user_init_hook+0x50>)
 23fdd6c:	681a      	ldr	r2, [r3, #0]
 23fdd6e:	4b11      	ldr	r3, [pc, #68]	; (23fddb4 <module_user_init_hook+0x54>)
 23fdd70:	429a      	cmp	r2, r3
 23fdd72:	bf0c      	ite	eq
 23fdd74:	2201      	moveq	r2, #1
 23fdd76:	2200      	movne	r2, #0
 23fdd78:	4b0f      	ldr	r3, [pc, #60]	; (23fddb8 <module_user_init_hook+0x58>)
 23fdd7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fdd7c:	d001      	beq.n	23fdd82 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fdd7e:	f7ff ffb1 	bl	23fdce4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fdd82:	f7fd f95f 	bl	23fb044 <HAL_RNG_GetRandomNumber>
 23fdd86:	4604      	mov	r4, r0
    srand(seed);
 23fdd88:	f001 fcf8 	bl	23ff77c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fdd8c:	4b0b      	ldr	r3, [pc, #44]	; (23fddbc <module_user_init_hook+0x5c>)
 23fdd8e:	b113      	cbz	r3, 23fdd96 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fdd90:	4620      	mov	r0, r4
 23fdd92:	e000      	b.n	23fdd96 <module_user_init_hook+0x36>
 23fdd94:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fdd96:	2100      	movs	r1, #0
 23fdd98:	4808      	ldr	r0, [pc, #32]	; (23fddbc <module_user_init_hook+0x5c>)
 23fdd9a:	f7fd fc63 	bl	23fb664 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fdd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fdda2:	2100      	movs	r1, #0
 23fdda4:	4806      	ldr	r0, [pc, #24]	; (23fddc0 <module_user_init_hook+0x60>)
 23fdda6:	f7fd bc17 	b.w	23fb5d8 <system_ctrl_set_app_request_handler>
 23fddaa:	bf00      	nop
 23fddac:	023fdc75 	.word	0x023fdc75
 23fddb0:	1007b400 	.word	0x1007b400
 23fddb4:	9a271c1e 	.word	0x9a271c1e
 23fddb8:	1007aee8 	.word	0x1007aee8
 23fddbc:	00000000 	.word	0x00000000
 23fddc0:	023fdd29 	.word	0x023fdd29

023fddc4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fddc4:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fddc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fddc8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fddca:	d902      	bls.n	23fddd2 <pinAvailable+0xe>
    return false;
 23fddcc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fddce:	b003      	add	sp, #12
 23fddd0:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fddd2:	f1a0 030f 	sub.w	r3, r0, #15
 23fddd6:	2b02      	cmp	r3, #2
 23fddd8:	d90b      	bls.n	23fddf2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fddda:	2801      	cmp	r0, #1
 23fdddc:	d821      	bhi.n	23fde22 <pinAvailable+0x5e>
 23fddde:	f000 f875 	bl	23fdecc <_Z19__fetch_global_Wirev>
 23fdde2:	2100      	movs	r1, #0
 23fdde4:	7c00      	ldrb	r0, [r0, #16]
 23fdde6:	f7fd f9d5 	bl	23fb194 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fddea:	f080 0001 	eor.w	r0, r0, #1
 23fddee:	b2c0      	uxtb	r0, r0
 23fddf0:	e7ed      	b.n	23fddce <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fddf2:	4d11      	ldr	r5, [pc, #68]	; (23fde38 <pinAvailable+0x74>)
 23fddf4:	e8d5 1f8f 	ldab	r1, [r5]
 23fddf8:	f011 0101 	ands.w	r1, r1, #1
 23fddfc:	d10b      	bne.n	23fde16 <pinAvailable+0x52>
 23fddfe:	4628      	mov	r0, r5
 23fde00:	9101      	str	r1, [sp, #4]
 23fde02:	f7fc fd05 	bl	23fa810 <__cxa_guard_acquire>
 23fde06:	9901      	ldr	r1, [sp, #4]
 23fde08:	b128      	cbz	r0, 23fde16 <pinAvailable+0x52>
 23fde0a:	480c      	ldr	r0, [pc, #48]	; (23fde3c <pinAvailable+0x78>)
 23fde0c:	f7ff fc06 	bl	23fd61c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fde10:	4628      	mov	r0, r5
 23fde12:	f7fc fd02 	bl	23fa81a <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fde16:	4b09      	ldr	r3, [pc, #36]	; (23fde3c <pinAvailable+0x78>)
 23fde18:	7818      	ldrb	r0, [r3, #0]
 23fde1a:	f7fd fa39 	bl	23fb290 <hal_spi_is_enabled>
 23fde1e:	2800      	cmp	r0, #0
 23fde20:	d1d4      	bne.n	23fddcc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fde22:	3c08      	subs	r4, #8
 23fde24:	2c01      	cmp	r4, #1
 23fde26:	d805      	bhi.n	23fde34 <pinAvailable+0x70>
 23fde28:	f000 f8a4 	bl	23fdf74 <_Z22__fetch_global_Serial1v>
 23fde2c:	7c00      	ldrb	r0, [r0, #16]
 23fde2e:	f7fd faad 	bl	23fb38c <hal_usart_is_enabled>
 23fde32:	e7da      	b.n	23fddea <pinAvailable+0x26>
  return true; // 'pin' is available
 23fde34:	2001      	movs	r0, #1
 23fde36:	e7ca      	b.n	23fddce <pinAvailable+0xa>
 23fde38:	1007ae4c 	.word	0x1007ae4c
 23fde3c:	1007ae50 	.word	0x1007ae50

023fde40 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fde40:	281b      	cmp	r0, #27
{
 23fde42:	b538      	push	{r3, r4, r5, lr}
 23fde44:	4604      	mov	r4, r0
 23fde46:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fde48:	d80a      	bhi.n	23fde60 <pinMode+0x20>
 23fde4a:	29ff      	cmp	r1, #255	; 0xff
 23fde4c:	d008      	beq.n	23fde60 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fde4e:	f7ff ffb9 	bl	23fddc4 <pinAvailable>
 23fde52:	b128      	cbz	r0, 23fde60 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fde54:	4629      	mov	r1, r5
 23fde56:	4620      	mov	r0, r4
}
 23fde58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fde5c:	f7fd b92a 	b.w	23fb0b4 <hal_gpio_mode>
}
 23fde60:	bd38      	pop	{r3, r4, r5, pc}

023fde62 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fde62:	b538      	push	{r3, r4, r5, lr}
 23fde64:	4604      	mov	r4, r0
 23fde66:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fde68:	f7fd f932 	bl	23fb0d0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fde6c:	28ff      	cmp	r0, #255	; 0xff
 23fde6e:	d010      	beq.n	23fde92 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fde70:	2806      	cmp	r0, #6
 23fde72:	d804      	bhi.n	23fde7e <digitalWrite+0x1c>
 23fde74:	234d      	movs	r3, #77	; 0x4d
 23fde76:	fa23 f000 	lsr.w	r0, r3, r0
 23fde7a:	07c3      	lsls	r3, r0, #31
 23fde7c:	d409      	bmi.n	23fde92 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fde7e:	4620      	mov	r0, r4
 23fde80:	f7ff ffa0 	bl	23fddc4 <pinAvailable>
 23fde84:	b128      	cbz	r0, 23fde92 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fde86:	4629      	mov	r1, r5
 23fde88:	4620      	mov	r0, r4
}
 23fde8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fde8e:	f7fd b92d 	b.w	23fb0ec <hal_gpio_write>
}
 23fde92:	bd38      	pop	{r3, r4, r5, pc}

023fde94 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fde94:	4770      	bx	lr
	...

023fde98 <_Z17acquireWireBufferv>:
{
 23fde98:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fde9a:	4b0a      	ldr	r3, [pc, #40]	; (23fdec4 <_Z17acquireWireBufferv+0x2c>)
{
 23fde9c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fde9e:	6003      	str	r3, [r0, #0]
 23fdea0:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdea2:	4909      	ldr	r1, [pc, #36]	; (23fdec8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fdea4:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdea6:	2020      	movs	r0, #32
 23fdea8:	f000 f8f6 	bl	23fe098 <_ZnajRKSt9nothrow_t>
	};
 23fdeac:	2520      	movs	r5, #32
 23fdeae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdeb0:	4905      	ldr	r1, [pc, #20]	; (23fdec8 <_Z17acquireWireBufferv+0x30>)
 23fdeb2:	4628      	mov	r0, r5
	};
 23fdeb4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdeb6:	f000 f8ef 	bl	23fe098 <_ZnajRKSt9nothrow_t>
	};
 23fdeba:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fdebe:	4620      	mov	r0, r4
 23fdec0:	bd38      	pop	{r3, r4, r5, pc}
 23fdec2:	bf00      	nop
 23fdec4:	00010018 	.word	0x00010018
 23fdec8:	023ffdcc 	.word	0x023ffdcc

023fdecc <_Z19__fetch_global_Wirev>:
{
 23fdecc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdece:	4d0e      	ldr	r5, [pc, #56]	; (23fdf08 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fded0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fded2:	e8d5 1f8f 	ldab	r1, [r5]
 23fded6:	f011 0401 	ands.w	r4, r1, #1
 23fdeda:	d111      	bne.n	23fdf00 <_Z19__fetch_global_Wirev+0x34>
 23fdedc:	4628      	mov	r0, r5
 23fdede:	f7fc fc97 	bl	23fa810 <__cxa_guard_acquire>
 23fdee2:	b168      	cbz	r0, 23fdf00 <_Z19__fetch_global_Wirev+0x34>
 23fdee4:	4668      	mov	r0, sp
 23fdee6:	f7ff ffd7 	bl	23fde98 <_Z17acquireWireBufferv>
 23fdeea:	466a      	mov	r2, sp
 23fdeec:	4621      	mov	r1, r4
 23fdeee:	4807      	ldr	r0, [pc, #28]	; (23fdf0c <_Z19__fetch_global_Wirev+0x40>)
 23fdef0:	f7fe f862 	bl	23fbfb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fdef4:	4628      	mov	r0, r5
 23fdef6:	f7fc fc90 	bl	23fa81a <__cxa_guard_release>
 23fdefa:	4805      	ldr	r0, [pc, #20]	; (23fdf10 <_Z19__fetch_global_Wirev+0x44>)
 23fdefc:	f001 fc00 	bl	23ff700 <atexit>
	return wire;
}
 23fdf00:	4802      	ldr	r0, [pc, #8]	; (23fdf0c <_Z19__fetch_global_Wirev+0x40>)
 23fdf02:	b007      	add	sp, #28
 23fdf04:	bd30      	pop	{r4, r5, pc}
 23fdf06:	bf00      	nop
 23fdf08:	1007aef4 	.word	0x1007aef4
 23fdf0c:	1007aef8 	.word	0x1007aef8
 23fdf10:	023fde95 	.word	0x023fde95

023fdf14 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdf14:	4770      	bx	lr
	...

023fdf18 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdf18:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fdf1a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdf1c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fdf1e:	462a      	mov	r2, r5
 23fdf20:	2100      	movs	r1, #0
 23fdf22:	f001 fc22 	bl	23ff76a <memset>
 23fdf26:	8025      	strh	r5, [r4, #0]
 23fdf28:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdf2a:	4907      	ldr	r1, [pc, #28]	; (23fdf48 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fdf2c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fdf2e:	8125      	strh	r5, [r4, #8]
 23fdf30:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdf32:	f000 f8b1 	bl	23fe098 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdf36:	4904      	ldr	r1, [pc, #16]	; (23fdf48 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fdf38:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdf3a:	4628      	mov	r0, r5
 23fdf3c:	f000 f8ac 	bl	23fe098 <_ZnajRKSt9nothrow_t>
    };
 23fdf40:	60e0      	str	r0, [r4, #12]
}
 23fdf42:	4620      	mov	r0, r4
 23fdf44:	bd38      	pop	{r3, r4, r5, pc}
 23fdf46:	bf00      	nop
 23fdf48:	023ffdcc 	.word	0x023ffdcc

023fdf4c <__tcf_2>:
 23fdf4c:	4770      	bx	lr

023fdf4e <__tcf_1>:
 23fdf4e:	4770      	bx	lr

023fdf50 <_Z20acquireSerial1Bufferv>:
{
 23fdf50:	b510      	push	{r4, lr}
 23fdf52:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fdf54:	f7ff ffe0 	bl	23fdf18 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fdf58:	4620      	mov	r0, r4
 23fdf5a:	bd10      	pop	{r4, pc}

023fdf5c <_Z20acquireSerial2Bufferv>:
 23fdf5c:	b510      	push	{r4, lr}
 23fdf5e:	4604      	mov	r4, r0
 23fdf60:	f7ff ffda 	bl	23fdf18 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fdf64:	4620      	mov	r0, r4
 23fdf66:	bd10      	pop	{r4, pc}

023fdf68 <_Z20acquireSerial3Bufferv>:
 23fdf68:	b510      	push	{r4, lr}
 23fdf6a:	4604      	mov	r4, r0
 23fdf6c:	f7ff ffd4 	bl	23fdf18 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fdf70:	4620      	mov	r0, r4
 23fdf72:	bd10      	pop	{r4, pc}

023fdf74 <_Z22__fetch_global_Serial1v>:
{
 23fdf74:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdf76:	4d0e      	ldr	r5, [pc, #56]	; (23fdfb0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fdf78:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdf7a:	e8d5 1f8f 	ldab	r1, [r5]
 23fdf7e:	f011 0401 	ands.w	r4, r1, #1
 23fdf82:	d111      	bne.n	23fdfa8 <_Z22__fetch_global_Serial1v+0x34>
 23fdf84:	4628      	mov	r0, r5
 23fdf86:	f7fc fc43 	bl	23fa810 <__cxa_guard_acquire>
 23fdf8a:	b168      	cbz	r0, 23fdfa8 <_Z22__fetch_global_Serial1v+0x34>
 23fdf8c:	a801      	add	r0, sp, #4
 23fdf8e:	f7ff ffdf 	bl	23fdf50 <_Z20acquireSerial1Bufferv>
 23fdf92:	4621      	mov	r1, r4
 23fdf94:	aa01      	add	r2, sp, #4
 23fdf96:	4807      	ldr	r0, [pc, #28]	; (23fdfb4 <_Z22__fetch_global_Serial1v+0x40>)
 23fdf98:	f7ff fd38 	bl	23fda0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdf9c:	4628      	mov	r0, r5
 23fdf9e:	f7fc fc3c 	bl	23fa81a <__cxa_guard_release>
 23fdfa2:	4805      	ldr	r0, [pc, #20]	; (23fdfb8 <_Z22__fetch_global_Serial1v+0x44>)
 23fdfa4:	f001 fbac 	bl	23ff700 <atexit>
    return serial1;
}
 23fdfa8:	4802      	ldr	r0, [pc, #8]	; (23fdfb4 <_Z22__fetch_global_Serial1v+0x40>)
 23fdfaa:	b007      	add	sp, #28
 23fdfac:	bd30      	pop	{r4, r5, pc}
 23fdfae:	bf00      	nop
 23fdfb0:	1007af0c 	.word	0x1007af0c
 23fdfb4:	1007af18 	.word	0x1007af18
 23fdfb8:	023fdf15 	.word	0x023fdf15

023fdfbc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fdfbc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fdfbe:	4c0d      	ldr	r4, [pc, #52]	; (23fdff4 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fdfc0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fdfc2:	e8d4 3f8f 	ldab	r3, [r4]
 23fdfc6:	07db      	lsls	r3, r3, #31
 23fdfc8:	d411      	bmi.n	23fdfee <_Z22__fetch_global_Serial2v+0x32>
 23fdfca:	4620      	mov	r0, r4
 23fdfcc:	f7fc fc20 	bl	23fa810 <__cxa_guard_acquire>
 23fdfd0:	b168      	cbz	r0, 23fdfee <_Z22__fetch_global_Serial2v+0x32>
 23fdfd2:	a801      	add	r0, sp, #4
 23fdfd4:	f7ff ffc2 	bl	23fdf5c <_Z20acquireSerial2Bufferv>
 23fdfd8:	2101      	movs	r1, #1
 23fdfda:	aa01      	add	r2, sp, #4
 23fdfdc:	4806      	ldr	r0, [pc, #24]	; (23fdff8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fdfde:	f7ff fd15 	bl	23fda0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdfe2:	4620      	mov	r0, r4
 23fdfe4:	f7fc fc19 	bl	23fa81a <__cxa_guard_release>
 23fdfe8:	4804      	ldr	r0, [pc, #16]	; (23fdffc <_Z22__fetch_global_Serial2v+0x40>)
 23fdfea:	f001 fb89 	bl	23ff700 <atexit>
	return serial2;
}
 23fdfee:	4802      	ldr	r0, [pc, #8]	; (23fdff8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fdff0:	b006      	add	sp, #24
 23fdff2:	bd10      	pop	{r4, pc}
 23fdff4:	1007af10 	.word	0x1007af10
 23fdff8:	1007af2c 	.word	0x1007af2c
 23fdffc:	023fdf4f 	.word	0x023fdf4f

023fe000 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe000:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe002:	f7ff ffdb 	bl	23fdfbc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe006:	4b07      	ldr	r3, [pc, #28]	; (23fe024 <_Z15serialEventRun2v+0x24>)
 23fe008:	4604      	mov	r4, r0
 23fe00a:	b153      	cbz	r3, 23fe022 <_Z15serialEventRun2v+0x22>
 23fe00c:	f7ff fd1c 	bl	23fda48 <_ZN11USARTSerial9isEnabledEv>
 23fe010:	b138      	cbz	r0, 23fe022 <_Z15serialEventRun2v+0x22>
 23fe012:	6823      	ldr	r3, [r4, #0]
 23fe014:	4620      	mov	r0, r4
 23fe016:	691b      	ldr	r3, [r3, #16]
 23fe018:	4798      	blx	r3
 23fe01a:	2800      	cmp	r0, #0
 23fe01c:	dd01      	ble.n	23fe022 <_Z15serialEventRun2v+0x22>
        handler();
 23fe01e:	e000      	b.n	23fe022 <_Z15serialEventRun2v+0x22>
 23fe020:	bf00      	nop
}
 23fe022:	bd10      	pop	{r4, pc}
 23fe024:	00000000 	.word	0x00000000

023fe028 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe028:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe02a:	4c0d      	ldr	r4, [pc, #52]	; (23fe060 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe02c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe02e:	e8d4 3f8f 	ldab	r3, [r4]
 23fe032:	07db      	lsls	r3, r3, #31
 23fe034:	d411      	bmi.n	23fe05a <_Z22__fetch_global_Serial3v+0x32>
 23fe036:	4620      	mov	r0, r4
 23fe038:	f7fc fbea 	bl	23fa810 <__cxa_guard_acquire>
 23fe03c:	b168      	cbz	r0, 23fe05a <_Z22__fetch_global_Serial3v+0x32>
 23fe03e:	a801      	add	r0, sp, #4
 23fe040:	f7ff ff92 	bl	23fdf68 <_Z20acquireSerial3Bufferv>
 23fe044:	2102      	movs	r1, #2
 23fe046:	aa01      	add	r2, sp, #4
 23fe048:	4806      	ldr	r0, [pc, #24]	; (23fe064 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe04a:	f7ff fcdf 	bl	23fda0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe04e:	4620      	mov	r0, r4
 23fe050:	f7fc fbe3 	bl	23fa81a <__cxa_guard_release>
 23fe054:	4804      	ldr	r0, [pc, #16]	; (23fe068 <_Z22__fetch_global_Serial3v+0x40>)
 23fe056:	f001 fb53 	bl	23ff700 <atexit>
	return serial3;
}
 23fe05a:	4802      	ldr	r0, [pc, #8]	; (23fe064 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe05c:	b006      	add	sp, #24
 23fe05e:	bd10      	pop	{r4, pc}
 23fe060:	1007af14 	.word	0x1007af14
 23fe064:	1007af40 	.word	0x1007af40
 23fe068:	023fdf4d 	.word	0x023fdf4d

023fe06c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe06c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe06e:	f7ff ffdb 	bl	23fe028 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe072:	4b07      	ldr	r3, [pc, #28]	; (23fe090 <_Z15serialEventRun3v+0x24>)
 23fe074:	4604      	mov	r4, r0
 23fe076:	b153      	cbz	r3, 23fe08e <_Z15serialEventRun3v+0x22>
 23fe078:	f7ff fce6 	bl	23fda48 <_ZN11USARTSerial9isEnabledEv>
 23fe07c:	b138      	cbz	r0, 23fe08e <_Z15serialEventRun3v+0x22>
 23fe07e:	6823      	ldr	r3, [r4, #0]
 23fe080:	4620      	mov	r0, r4
 23fe082:	691b      	ldr	r3, [r3, #16]
 23fe084:	4798      	blx	r3
 23fe086:	2800      	cmp	r0, #0
 23fe088:	dd01      	ble.n	23fe08e <_Z15serialEventRun3v+0x22>
        handler();
 23fe08a:	e000      	b.n	23fe08e <_Z15serialEventRun3v+0x22>
 23fe08c:	bf00      	nop
}
 23fe08e:	bd10      	pop	{r4, pc}
 23fe090:	00000000 	.word	0x00000000

023fe094 <_ZnwjRKSt9nothrow_t>:
 23fe094:	f7fc bba9 	b.w	23fa7ea <_Znwj>

023fe098 <_ZnajRKSt9nothrow_t>:
 23fe098:	f7fc bba9 	b.w	23fa7ee <_Znaj>

023fe09c <_ZSt25__throw_bad_function_callv>:
 23fe09c:	b508      	push	{r3, lr}
 23fe09e:	f7fd fbcf 	bl	23fb840 <abort>
	...

023fe0a4 <atan2>:
 23fe0a4:	f000 b90c 	b.w	23fe2c0 <__ieee754_atan2>

023fe0a8 <pow>:
 23fe0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe0aa:	ed2d 8b02 	vpush	{d8}
 23fe0ae:	ec57 6b10 	vmov	r6, r7, d0
 23fe0b2:	ec55 4b11 	vmov	r4, r5, d1
 23fe0b6:	f000 f9d7 	bl	23fe468 <__ieee754_pow>
 23fe0ba:	4b63      	ldr	r3, [pc, #396]	; (23fe248 <pow+0x1a0>)
 23fe0bc:	eeb0 8a40 	vmov.f32	s16, s0
 23fe0c0:	eef0 8a60 	vmov.f32	s17, s1
 23fe0c4:	f993 3000 	ldrsb.w	r3, [r3]
 23fe0c8:	3301      	adds	r3, #1
 23fe0ca:	d02a      	beq.n	23fe122 <pow+0x7a>
 23fe0cc:	4622      	mov	r2, r4
 23fe0ce:	462b      	mov	r3, r5
 23fe0d0:	4620      	mov	r0, r4
 23fe0d2:	4629      	mov	r1, r5
 23fe0d4:	f7fc f926 	bl	23fa324 <__aeabi_dcmpun>
 23fe0d8:	bb18      	cbnz	r0, 23fe122 <pow+0x7a>
 23fe0da:	4632      	mov	r2, r6
 23fe0dc:	463b      	mov	r3, r7
 23fe0de:	4630      	mov	r0, r6
 23fe0e0:	4639      	mov	r1, r7
 23fe0e2:	f7fc f91f 	bl	23fa324 <__aeabi_dcmpun>
 23fe0e6:	2800      	cmp	r0, #0
 23fe0e8:	d144      	bne.n	23fe174 <pow+0xcc>
 23fe0ea:	2200      	movs	r2, #0
 23fe0ec:	2300      	movs	r3, #0
 23fe0ee:	4630      	mov	r0, r6
 23fe0f0:	4639      	mov	r1, r7
 23fe0f2:	f7fc f8e5 	bl	23fa2c0 <__aeabi_dcmpeq>
 23fe0f6:	b1d8      	cbz	r0, 23fe130 <pow+0x88>
 23fe0f8:	2200      	movs	r2, #0
 23fe0fa:	2300      	movs	r3, #0
 23fe0fc:	4620      	mov	r0, r4
 23fe0fe:	4629      	mov	r1, r5
 23fe100:	f7fc f8de 	bl	23fa2c0 <__aeabi_dcmpeq>
 23fe104:	2800      	cmp	r0, #0
 23fe106:	d13d      	bne.n	23fe184 <pow+0xdc>
 23fe108:	ec45 4b10 	vmov	d0, r4, r5
 23fe10c:	f001 f9b2 	bl	23ff474 <finite>
 23fe110:	b138      	cbz	r0, 23fe122 <pow+0x7a>
 23fe112:	4620      	mov	r0, r4
 23fe114:	4629      	mov	r1, r5
 23fe116:	2200      	movs	r2, #0
 23fe118:	2300      	movs	r3, #0
 23fe11a:	f7fc f8db 	bl	23fa2d4 <__aeabi_dcmplt>
 23fe11e:	2800      	cmp	r0, #0
 23fe120:	d15c      	bne.n	23fe1dc <pow+0x134>
 23fe122:	eeb0 0a48 	vmov.f32	s0, s16
 23fe126:	eef0 0a68 	vmov.f32	s1, s17
 23fe12a:	ecbd 8b02 	vpop	{d8}
 23fe12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe130:	eeb0 0a48 	vmov.f32	s0, s16
 23fe134:	eef0 0a68 	vmov.f32	s1, s17
 23fe138:	f001 f99c 	bl	23ff474 <finite>
 23fe13c:	b358      	cbz	r0, 23fe196 <pow+0xee>
 23fe13e:	2200      	movs	r2, #0
 23fe140:	2300      	movs	r3, #0
 23fe142:	ec51 0b18 	vmov	r0, r1, d8
 23fe146:	f7fc f8bb 	bl	23fa2c0 <__aeabi_dcmpeq>
 23fe14a:	2800      	cmp	r0, #0
 23fe14c:	d0e9      	beq.n	23fe122 <pow+0x7a>
 23fe14e:	ec47 6b10 	vmov	d0, r6, r7
 23fe152:	f001 f98f 	bl	23ff474 <finite>
 23fe156:	2800      	cmp	r0, #0
 23fe158:	d0e3      	beq.n	23fe122 <pow+0x7a>
 23fe15a:	ec45 4b10 	vmov	d0, r4, r5
 23fe15e:	f001 f989 	bl	23ff474 <finite>
 23fe162:	2800      	cmp	r0, #0
 23fe164:	d0dd      	beq.n	23fe122 <pow+0x7a>
 23fe166:	f7fd fb87 	bl	23fb878 <__errno>
 23fe16a:	2322      	movs	r3, #34	; 0x22
 23fe16c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fe228 <pow+0x180>
 23fe170:	6003      	str	r3, [r0, #0]
 23fe172:	e7d6      	b.n	23fe122 <pow+0x7a>
 23fe174:	4620      	mov	r0, r4
 23fe176:	4629      	mov	r1, r5
 23fe178:	2200      	movs	r2, #0
 23fe17a:	2300      	movs	r3, #0
 23fe17c:	f7fc f8a0 	bl	23fa2c0 <__aeabi_dcmpeq>
 23fe180:	2800      	cmp	r0, #0
 23fe182:	d0ce      	beq.n	23fe122 <pow+0x7a>
 23fe184:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fe230 <pow+0x188>
 23fe188:	eeb0 0a48 	vmov.f32	s0, s16
 23fe18c:	eef0 0a68 	vmov.f32	s1, s17
 23fe190:	ecbd 8b02 	vpop	{d8}
 23fe194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe196:	ec47 6b10 	vmov	d0, r6, r7
 23fe19a:	f001 f96b 	bl	23ff474 <finite>
 23fe19e:	2800      	cmp	r0, #0
 23fe1a0:	d0cd      	beq.n	23fe13e <pow+0x96>
 23fe1a2:	ec45 4b10 	vmov	d0, r4, r5
 23fe1a6:	f001 f965 	bl	23ff474 <finite>
 23fe1aa:	2800      	cmp	r0, #0
 23fe1ac:	d0c7      	beq.n	23fe13e <pow+0x96>
 23fe1ae:	ee18 0a10 	vmov	r0, s16
 23fe1b2:	ec53 2b18 	vmov	r2, r3, d8
 23fe1b6:	4619      	mov	r1, r3
 23fe1b8:	f7fc f8b4 	bl	23fa324 <__aeabi_dcmpun>
 23fe1bc:	bb20      	cbnz	r0, 23fe208 <pow+0x160>
 23fe1be:	f7fd fb5b 	bl	23fb878 <__errno>
 23fe1c2:	2222      	movs	r2, #34	; 0x22
 23fe1c4:	4603      	mov	r3, r0
 23fe1c6:	4639      	mov	r1, r7
 23fe1c8:	4630      	mov	r0, r6
 23fe1ca:	601a      	str	r2, [r3, #0]
 23fe1cc:	2200      	movs	r2, #0
 23fe1ce:	2300      	movs	r3, #0
 23fe1d0:	f7fc f880 	bl	23fa2d4 <__aeabi_dcmplt>
 23fe1d4:	b948      	cbnz	r0, 23fe1ea <pow+0x142>
 23fe1d6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fe238 <pow+0x190>
 23fe1da:	e7a2      	b.n	23fe122 <pow+0x7a>
 23fe1dc:	f7fd fb4c 	bl	23fb878 <__errno>
 23fe1e0:	2321      	movs	r3, #33	; 0x21
 23fe1e2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fe240 <pow+0x198>
 23fe1e6:	6003      	str	r3, [r0, #0]
 23fe1e8:	e79b      	b.n	23fe122 <pow+0x7a>
 23fe1ea:	ec45 4b10 	vmov	d0, r4, r5
 23fe1ee:	f001 f957 	bl	23ff4a0 <rint>
 23fe1f2:	4622      	mov	r2, r4
 23fe1f4:	462b      	mov	r3, r5
 23fe1f6:	ec51 0b10 	vmov	r0, r1, d0
 23fe1fa:	f7fc f861 	bl	23fa2c0 <__aeabi_dcmpeq>
 23fe1fe:	2800      	cmp	r0, #0
 23fe200:	d1e9      	bne.n	23fe1d6 <pow+0x12e>
 23fe202:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fe240 <pow+0x198>
 23fe206:	e78c      	b.n	23fe122 <pow+0x7a>
 23fe208:	f7fd fb36 	bl	23fb878 <__errno>
 23fe20c:	2200      	movs	r2, #0
 23fe20e:	2300      	movs	r3, #0
 23fe210:	2121      	movs	r1, #33	; 0x21
 23fe212:	6001      	str	r1, [r0, #0]
 23fe214:	4610      	mov	r0, r2
 23fe216:	4619      	mov	r1, r3
 23fe218:	f7fb ff14 	bl	23fa044 <__aeabi_ddiv>
 23fe21c:	ec41 0b18 	vmov	d8, r0, r1
 23fe220:	e77f      	b.n	23fe122 <pow+0x7a>
 23fe222:	bf00      	nop
 23fe224:	f3af 8000 	nop.w
	...
 23fe234:	3ff00000 	.word	0x3ff00000
 23fe238:	00000000 	.word	0x00000000
 23fe23c:	7ff00000 	.word	0x7ff00000
 23fe240:	00000000 	.word	0x00000000
 23fe244:	fff00000 	.word	0xfff00000
 23fe248:	1007adb0 	.word	0x1007adb0

023fe24c <sqrt>:
 23fe24c:	b538      	push	{r3, r4, r5, lr}
 23fe24e:	ed2d 8b02 	vpush	{d8}
 23fe252:	ec55 4b10 	vmov	r4, r5, d0
 23fe256:	f000 fe99 	bl	23fef8c <__ieee754_sqrt>
 23fe25a:	4b18      	ldr	r3, [pc, #96]	; (23fe2bc <sqrt+0x70>)
 23fe25c:	eeb0 8a40 	vmov.f32	s16, s0
 23fe260:	eef0 8a60 	vmov.f32	s17, s1
 23fe264:	f993 3000 	ldrsb.w	r3, [r3]
 23fe268:	3301      	adds	r3, #1
 23fe26a:	d00d      	beq.n	23fe288 <sqrt+0x3c>
 23fe26c:	4622      	mov	r2, r4
 23fe26e:	462b      	mov	r3, r5
 23fe270:	4620      	mov	r0, r4
 23fe272:	4629      	mov	r1, r5
 23fe274:	f7fc f856 	bl	23fa324 <__aeabi_dcmpun>
 23fe278:	b930      	cbnz	r0, 23fe288 <sqrt+0x3c>
 23fe27a:	2200      	movs	r2, #0
 23fe27c:	2300      	movs	r3, #0
 23fe27e:	4620      	mov	r0, r4
 23fe280:	4629      	mov	r1, r5
 23fe282:	f7fc f827 	bl	23fa2d4 <__aeabi_dcmplt>
 23fe286:	b930      	cbnz	r0, 23fe296 <sqrt+0x4a>
 23fe288:	eeb0 0a48 	vmov.f32	s0, s16
 23fe28c:	eef0 0a68 	vmov.f32	s1, s17
 23fe290:	ecbd 8b02 	vpop	{d8}
 23fe294:	bd38      	pop	{r3, r4, r5, pc}
 23fe296:	f7fd faef 	bl	23fb878 <__errno>
 23fe29a:	2200      	movs	r2, #0
 23fe29c:	2300      	movs	r3, #0
 23fe29e:	2121      	movs	r1, #33	; 0x21
 23fe2a0:	6001      	str	r1, [r0, #0]
 23fe2a2:	4610      	mov	r0, r2
 23fe2a4:	4619      	mov	r1, r3
 23fe2a6:	f7fb fecd 	bl	23fa044 <__aeabi_ddiv>
 23fe2aa:	ec41 0b18 	vmov	d8, r0, r1
 23fe2ae:	eeb0 0a48 	vmov.f32	s0, s16
 23fe2b2:	eef0 0a68 	vmov.f32	s1, s17
 23fe2b6:	ecbd 8b02 	vpop	{d8}
 23fe2ba:	bd38      	pop	{r3, r4, r5, pc}
 23fe2bc:	1007adb0 	.word	0x1007adb0

023fe2c0 <__ieee754_atan2>:
 23fe2c0:	ec51 0b11 	vmov	r0, r1, d1
 23fe2c4:	4243      	negs	r3, r0
 23fe2c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe2ca:	4303      	orrs	r3, r0
 23fe2cc:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fe2d0:	4e61      	ldr	r6, [pc, #388]	; (23fe458 <__ieee754_atan2+0x198>)
 23fe2d2:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fe2d6:	42b3      	cmp	r3, r6
 23fe2d8:	ec55 4b10 	vmov	r4, r5, d0
 23fe2dc:	d83c      	bhi.n	23fe358 <__ieee754_atan2+0x98>
 23fe2de:	4263      	negs	r3, r4
 23fe2e0:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fe2e4:	46a9      	mov	r9, r5
 23fe2e6:	4323      	orrs	r3, r4
 23fe2e8:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fe2ec:	42b3      	cmp	r3, r6
 23fe2ee:	d833      	bhi.n	23fe358 <__ieee754_atan2+0x98>
 23fe2f0:	4b5a      	ldr	r3, [pc, #360]	; (23fe45c <__ieee754_atan2+0x19c>)
 23fe2f2:	440b      	add	r3, r1
 23fe2f4:	4303      	orrs	r3, r0
 23fe2f6:	d03e      	beq.n	23fe376 <__ieee754_atan2+0xb6>
 23fe2f8:	178f      	asrs	r7, r1, #30
 23fe2fa:	ea5a 0304 	orrs.w	r3, sl, r4
 23fe2fe:	f007 0702 	and.w	r7, r7, #2
 23fe302:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fe306:	d02f      	beq.n	23fe368 <__ieee754_atan2+0xa8>
 23fe308:	ea5e 0300 	orrs.w	r3, lr, r0
 23fe30c:	d037      	beq.n	23fe37e <__ieee754_atan2+0xbe>
 23fe30e:	45b6      	cmp	lr, r6
 23fe310:	d044      	beq.n	23fe39c <__ieee754_atan2+0xdc>
 23fe312:	45b2      	cmp	sl, r6
 23fe314:	d033      	beq.n	23fe37e <__ieee754_atan2+0xbe>
 23fe316:	ebaa 0e0e 	sub.w	lr, sl, lr
 23fe31a:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23fe31e:	ea4f 532e 	mov.w	r3, lr, asr #20
 23fe322:	da38      	bge.n	23fe396 <__ieee754_atan2+0xd6>
 23fe324:	2900      	cmp	r1, #0
 23fe326:	da6a      	bge.n	23fe3fe <__ieee754_atan2+0x13e>
 23fe328:	333c      	adds	r3, #60	; 0x3c
 23fe32a:	da68      	bge.n	23fe3fe <__ieee754_atan2+0x13e>
 23fe32c:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fe420 <__ieee754_atan2+0x160>
 23fe330:	2f01      	cmp	r7, #1
 23fe332:	d050      	beq.n	23fe3d6 <__ieee754_atan2+0x116>
 23fe334:	2f02      	cmp	r7, #2
 23fe336:	d03d      	beq.n	23fe3b4 <__ieee754_atan2+0xf4>
 23fe338:	b1a7      	cbz	r7, 23fe364 <__ieee754_atan2+0xa4>
 23fe33a:	ec51 0b10 	vmov	r0, r1, d0
 23fe33e:	a33a      	add	r3, pc, #232	; (adr r3, 23fe428 <__ieee754_atan2+0x168>)
 23fe340:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe344:	f7fb fb9c 	bl	23f9a80 <__aeabi_dsub>
 23fe348:	a339      	add	r3, pc, #228	; (adr r3, 23fe430 <__ieee754_atan2+0x170>)
 23fe34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe34e:	f7fb fb97 	bl	23f9a80 <__aeabi_dsub>
 23fe352:	ec41 0b10 	vmov	d0, r0, r1
 23fe356:	e005      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe358:	4622      	mov	r2, r4
 23fe35a:	462b      	mov	r3, r5
 23fe35c:	f7fb fb92 	bl	23f9a84 <__adddf3>
 23fe360:	ec41 0b10 	vmov	d0, r0, r1
 23fe364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe368:	2f02      	cmp	r7, #2
 23fe36a:	d00e      	beq.n	23fe38a <__ieee754_atan2+0xca>
 23fe36c:	2f03      	cmp	r7, #3
 23fe36e:	d1f9      	bne.n	23fe364 <__ieee754_atan2+0xa4>
 23fe370:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fe438 <__ieee754_atan2+0x178>
 23fe374:	e7f6      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe376:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe37a:	f000 bec9 	b.w	23ff110 <atan>
 23fe37e:	f1b9 0f00 	cmp.w	r9, #0
 23fe382:	db05      	blt.n	23fe390 <__ieee754_atan2+0xd0>
 23fe384:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fe440 <__ieee754_atan2+0x180>
 23fe388:	e7ec      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe38a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fe430 <__ieee754_atan2+0x170>
 23fe38e:	e7e9      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe390:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fe448 <__ieee754_atan2+0x188>
 23fe394:	e7e6      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe396:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fe440 <__ieee754_atan2+0x180>
 23fe39a:	e7c9      	b.n	23fe330 <__ieee754_atan2+0x70>
 23fe39c:	45f2      	cmp	sl, lr
 23fe39e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fe3a2:	d021      	beq.n	23fe3e8 <__ieee754_atan2+0x128>
 23fe3a4:	2f02      	cmp	r7, #2
 23fe3a6:	d827      	bhi.n	23fe3f8 <__ieee754_atan2+0x138>
 23fe3a8:	4b2d      	ldr	r3, [pc, #180]	; (23fe460 <__ieee754_atan2+0x1a0>)
 23fe3aa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe3ae:	ed97 0b00 	vldr	d0, [r7]
 23fe3b2:	e7d7      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe3b4:	a31c      	add	r3, pc, #112	; (adr r3, 23fe428 <__ieee754_atan2+0x168>)
 23fe3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe3ba:	ec51 0b10 	vmov	r0, r1, d0
 23fe3be:	f7fb fb5f 	bl	23f9a80 <__aeabi_dsub>
 23fe3c2:	4602      	mov	r2, r0
 23fe3c4:	460b      	mov	r3, r1
 23fe3c6:	a11a      	add	r1, pc, #104	; (adr r1, 23fe430 <__ieee754_atan2+0x170>)
 23fe3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fe3cc:	f7fb fb58 	bl	23f9a80 <__aeabi_dsub>
 23fe3d0:	ec41 0b10 	vmov	d0, r0, r1
 23fe3d4:	e7c6      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe3d6:	ee10 1a90 	vmov	r1, s1
 23fe3da:	ec53 2b10 	vmov	r2, r3, d0
 23fe3de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fe3e2:	ec43 2b10 	vmov	d0, r2, r3
 23fe3e6:	e7bd      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe3e8:	2f02      	cmp	r7, #2
 23fe3ea:	d815      	bhi.n	23fe418 <__ieee754_atan2+0x158>
 23fe3ec:	4b1d      	ldr	r3, [pc, #116]	; (23fe464 <__ieee754_atan2+0x1a4>)
 23fe3ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe3f2:	ed97 0b00 	vldr	d0, [r7]
 23fe3f6:	e7b5      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe3f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fe420 <__ieee754_atan2+0x160>
 23fe3fc:	e7b2      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe3fe:	4602      	mov	r2, r0
 23fe400:	460b      	mov	r3, r1
 23fe402:	4620      	mov	r0, r4
 23fe404:	4629      	mov	r1, r5
 23fe406:	f7fb fe1d 	bl	23fa044 <__aeabi_ddiv>
 23fe40a:	ec41 0b10 	vmov	d0, r0, r1
 23fe40e:	f001 f827 	bl	23ff460 <fabs>
 23fe412:	f000 fe7d 	bl	23ff110 <atan>
 23fe416:	e78b      	b.n	23fe330 <__ieee754_atan2+0x70>
 23fe418:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fe450 <__ieee754_atan2+0x190>
 23fe41c:	e7a2      	b.n	23fe364 <__ieee754_atan2+0xa4>
 23fe41e:	bf00      	nop
	...
 23fe428:	33145c07 	.word	0x33145c07
 23fe42c:	3ca1a626 	.word	0x3ca1a626
 23fe430:	54442d18 	.word	0x54442d18
 23fe434:	400921fb 	.word	0x400921fb
 23fe438:	54442d18 	.word	0x54442d18
 23fe43c:	c00921fb 	.word	0xc00921fb
 23fe440:	54442d18 	.word	0x54442d18
 23fe444:	3ff921fb 	.word	0x3ff921fb
 23fe448:	54442d18 	.word	0x54442d18
 23fe44c:	bff921fb 	.word	0xbff921fb
 23fe450:	54442d18 	.word	0x54442d18
 23fe454:	3fe921fb 	.word	0x3fe921fb
 23fe458:	7ff00000 	.word	0x7ff00000
 23fe45c:	c0100000 	.word	0xc0100000
 23fe460:	023ffde8 	.word	0x023ffde8
 23fe464:	023ffdd0 	.word	0x023ffdd0

023fe468 <__ieee754_pow>:
 23fe468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe46c:	ec55 4b11 	vmov	r4, r5, d1
 23fe470:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fe474:	ea5a 0204 	orrs.w	r2, sl, r4
 23fe478:	ed2d 8b0c 	vpush	{d8-d13}
 23fe47c:	b087      	sub	sp, #28
 23fe47e:	d01f      	beq.n	23fe4c0 <__ieee754_pow+0x58>
 23fe480:	495d      	ldr	r1, [pc, #372]	; (23fe5f8 <__ieee754_pow+0x190>)
 23fe482:	ee10 2a10 	vmov	r2, s0
 23fe486:	ec57 6b10 	vmov	r6, r7, d0
 23fe48a:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fe48e:	46b9      	mov	r9, r7
 23fe490:	4588      	cmp	r8, r1
 23fe492:	dc11      	bgt.n	23fe4b8 <__ieee754_pow+0x50>
 23fe494:	46ab      	mov	fp, r5
 23fe496:	ee11 3a10 	vmov	r3, s2
 23fe49a:	d108      	bne.n	23fe4ae <__ieee754_pow+0x46>
 23fe49c:	b13e      	cbz	r6, 23fe4ae <__ieee754_pow+0x46>
 23fe49e:	4857      	ldr	r0, [pc, #348]	; (23fe5fc <__ieee754_pow+0x194>)
 23fe4a0:	b007      	add	sp, #28
 23fe4a2:	ecbd 8b0c 	vpop	{d8-d13}
 23fe4a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe4aa:	f000 bff1 	b.w	23ff490 <nan>
 23fe4ae:	4952      	ldr	r1, [pc, #328]	; (23fe5f8 <__ieee754_pow+0x190>)
 23fe4b0:	458a      	cmp	sl, r1
 23fe4b2:	dc01      	bgt.n	23fe4b8 <__ieee754_pow+0x50>
 23fe4b4:	d10b      	bne.n	23fe4ce <__ieee754_pow+0x66>
 23fe4b6:	b153      	cbz	r3, 23fe4ce <__ieee754_pow+0x66>
 23fe4b8:	4b51      	ldr	r3, [pc, #324]	; (23fe600 <__ieee754_pow+0x198>)
 23fe4ba:	4443      	add	r3, r8
 23fe4bc:	4313      	orrs	r3, r2
 23fe4be:	d1ee      	bne.n	23fe49e <__ieee754_pow+0x36>
 23fe4c0:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fe5e8 <__ieee754_pow+0x180>
 23fe4c4:	b007      	add	sp, #28
 23fe4c6:	ecbd 8b0c 	vpop	{d8-d13}
 23fe4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe4ce:	f1b9 0f00 	cmp.w	r9, #0
 23fe4d2:	db45      	blt.n	23fe560 <__ieee754_pow+0xf8>
 23fe4d4:	2100      	movs	r1, #0
 23fe4d6:	9100      	str	r1, [sp, #0]
 23fe4d8:	b983      	cbnz	r3, 23fe4fc <__ieee754_pow+0x94>
 23fe4da:	4b47      	ldr	r3, [pc, #284]	; (23fe5f8 <__ieee754_pow+0x190>)
 23fe4dc:	459a      	cmp	sl, r3
 23fe4de:	d05b      	beq.n	23fe598 <__ieee754_pow+0x130>
 23fe4e0:	4b48      	ldr	r3, [pc, #288]	; (23fe604 <__ieee754_pow+0x19c>)
 23fe4e2:	459a      	cmp	sl, r3
 23fe4e4:	d06a      	beq.n	23fe5bc <__ieee754_pow+0x154>
 23fe4e6:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fe4ea:	f000 84b0 	beq.w	23fee4e <__ieee754_pow+0x9e6>
 23fe4ee:	4b46      	ldr	r3, [pc, #280]	; (23fe608 <__ieee754_pow+0x1a0>)
 23fe4f0:	459b      	cmp	fp, r3
 23fe4f2:	d103      	bne.n	23fe4fc <__ieee754_pow+0x94>
 23fe4f4:	f1b9 0f00 	cmp.w	r9, #0
 23fe4f8:	f280 850d 	bge.w	23fef16 <__ieee754_pow+0xaae>
 23fe4fc:	9202      	str	r2, [sp, #8]
 23fe4fe:	ec47 6b10 	vmov	d0, r6, r7
 23fe502:	f000 ffad 	bl	23ff460 <fabs>
 23fe506:	9a02      	ldr	r2, [sp, #8]
 23fe508:	b94a      	cbnz	r2, 23fe51e <__ieee754_pow+0xb6>
 23fe50a:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fe50e:	4a3d      	ldr	r2, [pc, #244]	; (23fe604 <__ieee754_pow+0x19c>)
 23fe510:	4293      	cmp	r3, r2
 23fe512:	f000 83a8 	beq.w	23fec66 <__ieee754_pow+0x7fe>
 23fe516:	f1b8 0f00 	cmp.w	r8, #0
 23fe51a:	f000 83a4 	beq.w	23fec66 <__ieee754_pow+0x7fe>
 23fe51e:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fe522:	9a00      	ldr	r2, [sp, #0]
 23fe524:	3b01      	subs	r3, #1
 23fe526:	9304      	str	r3, [sp, #16]
 23fe528:	4313      	orrs	r3, r2
 23fe52a:	d04e      	beq.n	23fe5ca <__ieee754_pow+0x162>
 23fe52c:	4b37      	ldr	r3, [pc, #220]	; (23fe60c <__ieee754_pow+0x1a4>)
 23fe52e:	459a      	cmp	sl, r3
 23fe530:	dd72      	ble.n	23fe618 <__ieee754_pow+0x1b0>
 23fe532:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fe536:	459a      	cmp	sl, r3
 23fe538:	4b35      	ldr	r3, [pc, #212]	; (23fe610 <__ieee754_pow+0x1a8>)
 23fe53a:	f340 842b 	ble.w	23fed94 <__ieee754_pow+0x92c>
 23fe53e:	4598      	cmp	r8, r3
 23fe540:	f340 83a9 	ble.w	23fec96 <__ieee754_pow+0x82e>
 23fe544:	f1bb 0f00 	cmp.w	fp, #0
 23fe548:	f340 83a9 	ble.w	23fec9e <__ieee754_pow+0x836>
 23fe54c:	a328      	add	r3, pc, #160	; (adr r3, 23fe5f0 <__ieee754_pow+0x188>)
 23fe54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe552:	4610      	mov	r0, r2
 23fe554:	4619      	mov	r1, r3
 23fe556:	f7fb fc4b 	bl	23f9df0 <__aeabi_dmul>
 23fe55a:	ec41 0b10 	vmov	d0, r0, r1
 23fe55e:	e7b1      	b.n	23fe4c4 <__ieee754_pow+0x5c>
 23fe560:	492c      	ldr	r1, [pc, #176]	; (23fe614 <__ieee754_pow+0x1ac>)
 23fe562:	458a      	cmp	sl, r1
 23fe564:	dc27      	bgt.n	23fe5b6 <__ieee754_pow+0x14e>
 23fe566:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fe56a:	458a      	cmp	sl, r1
 23fe56c:	ddb2      	ble.n	23fe4d4 <__ieee754_pow+0x6c>
 23fe56e:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fe572:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fe576:	2914      	cmp	r1, #20
 23fe578:	f340 847d 	ble.w	23fee76 <__ieee754_pow+0xa0e>
 23fe57c:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fe580:	fa23 f001 	lsr.w	r0, r3, r1
 23fe584:	fa00 f101 	lsl.w	r1, r0, r1
 23fe588:	4299      	cmp	r1, r3
 23fe58a:	d1a3      	bne.n	23fe4d4 <__ieee754_pow+0x6c>
 23fe58c:	f000 0001 	and.w	r0, r0, #1
 23fe590:	f1c0 0102 	rsb	r1, r0, #2
 23fe594:	9100      	str	r1, [sp, #0]
 23fe596:	e79f      	b.n	23fe4d8 <__ieee754_pow+0x70>
 23fe598:	4b19      	ldr	r3, [pc, #100]	; (23fe600 <__ieee754_pow+0x198>)
 23fe59a:	4443      	add	r3, r8
 23fe59c:	4313      	orrs	r3, r2
 23fe59e:	d08f      	beq.n	23fe4c0 <__ieee754_pow+0x58>
 23fe5a0:	4b1b      	ldr	r3, [pc, #108]	; (23fe610 <__ieee754_pow+0x1a8>)
 23fe5a2:	4598      	cmp	r8, r3
 23fe5a4:	f340 83ab 	ble.w	23fecfe <__ieee754_pow+0x896>
 23fe5a8:	f1bb 0f00 	cmp.w	fp, #0
 23fe5ac:	f2c0 8377 	blt.w	23fec9e <__ieee754_pow+0x836>
 23fe5b0:	ec45 4b10 	vmov	d0, r4, r5
 23fe5b4:	e786      	b.n	23fe4c4 <__ieee754_pow+0x5c>
 23fe5b6:	2102      	movs	r1, #2
 23fe5b8:	9100      	str	r1, [sp, #0]
 23fe5ba:	e78d      	b.n	23fe4d8 <__ieee754_pow+0x70>
 23fe5bc:	f1bb 0f00 	cmp.w	fp, #0
 23fe5c0:	f2c0 844f 	blt.w	23fee62 <__ieee754_pow+0x9fa>
 23fe5c4:	ec47 6b10 	vmov	d0, r6, r7
 23fe5c8:	e77c      	b.n	23fe4c4 <__ieee754_pow+0x5c>
 23fe5ca:	4632      	mov	r2, r6
 23fe5cc:	463b      	mov	r3, r7
 23fe5ce:	4610      	mov	r0, r2
 23fe5d0:	4619      	mov	r1, r3
 23fe5d2:	f7fb fa55 	bl	23f9a80 <__aeabi_dsub>
 23fe5d6:	4602      	mov	r2, r0
 23fe5d8:	460b      	mov	r3, r1
 23fe5da:	f7fb fd33 	bl	23fa044 <__aeabi_ddiv>
 23fe5de:	ec41 0b10 	vmov	d0, r0, r1
 23fe5e2:	e76f      	b.n	23fe4c4 <__ieee754_pow+0x5c>
 23fe5e4:	f3af 8000 	nop.w
 23fe5e8:	00000000 	.word	0x00000000
 23fe5ec:	3ff00000 	.word	0x3ff00000
 23fe5f0:	8800759c 	.word	0x8800759c
 23fe5f4:	7e37e43c 	.word	0x7e37e43c
 23fe5f8:	7ff00000 	.word	0x7ff00000
 23fe5fc:	023ffe00 	.word	0x023ffe00
 23fe600:	c0100000 	.word	0xc0100000
 23fe604:	3ff00000 	.word	0x3ff00000
 23fe608:	3fe00000 	.word	0x3fe00000
 23fe60c:	41e00000 	.word	0x41e00000
 23fe610:	3fefffff 	.word	0x3fefffff
 23fe614:	433fffff 	.word	0x433fffff
 23fe618:	4be3      	ldr	r3, [pc, #908]	; (23fe9a8 <__ieee754_pow+0x540>)
 23fe61a:	2200      	movs	r2, #0
 23fe61c:	ea09 0303 	and.w	r3, r9, r3
 23fe620:	b953      	cbnz	r3, 23fe638 <__ieee754_pow+0x1d0>
 23fe622:	4be2      	ldr	r3, [pc, #904]	; (23fe9ac <__ieee754_pow+0x544>)
 23fe624:	ec51 0b10 	vmov	r0, r1, d0
 23fe628:	f7fb fbe2 	bl	23f9df0 <__aeabi_dmul>
 23fe62c:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fe630:	ec41 0b10 	vmov	d0, r0, r1
 23fe634:	ee10 8a90 	vmov	r8, s1
 23fe638:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fe63c:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fe640:	4edb      	ldr	r6, [pc, #876]	; (23fe9b0 <__ieee754_pow+0x548>)
 23fe642:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fe646:	ea48 0606 	orr.w	r6, r8, r6
 23fe64a:	189a      	adds	r2, r3, r2
 23fe64c:	4bd9      	ldr	r3, [pc, #868]	; (23fe9b4 <__ieee754_pow+0x54c>)
 23fe64e:	4598      	cmp	r8, r3
 23fe650:	9205      	str	r2, [sp, #20]
 23fe652:	dd07      	ble.n	23fe664 <__ieee754_pow+0x1fc>
 23fe654:	4bd8      	ldr	r3, [pc, #864]	; (23fe9b8 <__ieee754_pow+0x550>)
 23fe656:	4598      	cmp	r8, r3
 23fe658:	f340 8433 	ble.w	23feec2 <__ieee754_pow+0xa5a>
 23fe65c:	3201      	adds	r2, #1
 23fe65e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fe662:	9205      	str	r2, [sp, #20]
 23fe664:	2700      	movs	r7, #0
 23fe666:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fe948 <__ieee754_pow+0x4e0>
 23fe66a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fe950 <__ieee754_pow+0x4e8>
 23fe66e:	eeb0 da47 	vmov.f32	s26, s14
 23fe672:	eef0 da67 	vmov.f32	s27, s15
 23fe676:	eeb0 ca47 	vmov.f32	s24, s14
 23fe67a:	eef0 ca67 	vmov.f32	s25, s15
 23fe67e:	ec51 0b16 	vmov	r0, r1, d6
 23fe682:	ec53 2b10 	vmov	r2, r3, d0
 23fe686:	4633      	mov	r3, r6
 23fe688:	1076      	asrs	r6, r6, #1
 23fe68a:	ec43 2b19 	vmov	d9, r2, r3
 23fe68e:	ec41 0b1a 	vmov	d10, r0, r1
 23fe692:	4602      	mov	r2, r0
 23fe694:	460b      	mov	r3, r1
 23fe696:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fe69a:	ec51 0b19 	vmov	r0, r1, d9
 23fe69e:	f7fb f9ef 	bl	23f9a80 <__aeabi_dsub>
 23fe6a2:	4680      	mov	r8, r0
 23fe6a4:	4689      	mov	r9, r1
 23fe6a6:	ec53 2b1a 	vmov	r2, r3, d10
 23fe6aa:	ec51 0b19 	vmov	r0, r1, d9
 23fe6ae:	f7fb f9e9 	bl	23f9a84 <__adddf3>
 23fe6b2:	4602      	mov	r2, r0
 23fe6b4:	460b      	mov	r3, r1
 23fe6b6:	2000      	movs	r0, #0
 23fe6b8:	49bd      	ldr	r1, [pc, #756]	; (23fe9b0 <__ieee754_pow+0x548>)
 23fe6ba:	f7fb fcc3 	bl	23fa044 <__aeabi_ddiv>
 23fe6be:	ec41 0b1b 	vmov	d11, r0, r1
 23fe6c2:	ec53 2b1b 	vmov	r2, r3, d11
 23fe6c6:	4640      	mov	r0, r8
 23fe6c8:	4649      	mov	r1, r9
 23fe6ca:	f7fb fb91 	bl	23f9df0 <__aeabi_dmul>
 23fe6ce:	460a      	mov	r2, r1
 23fe6d0:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fe6d4:	ec41 0b18 	vmov	d8, r0, r1
 23fe6d8:	4601      	mov	r1, r0
 23fe6da:	2000      	movs	r0, #0
 23fe6dc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fe6e0:	2100      	movs	r1, #0
 23fe6e2:	4606      	mov	r6, r0
 23fe6e4:	4602      	mov	r2, r0
 23fe6e6:	9102      	str	r1, [sp, #8]
 23fe6e8:	19d9      	adds	r1, r3, r7
 23fe6ea:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fe6ee:	460f      	mov	r7, r1
 23fe6f0:	460b      	mov	r3, r1
 23fe6f2:	4650      	mov	r0, sl
 23fe6f4:	4659      	mov	r1, fp
 23fe6f6:	f7fb fb7b 	bl	23f9df0 <__aeabi_dmul>
 23fe6fa:	4602      	mov	r2, r0
 23fe6fc:	460b      	mov	r3, r1
 23fe6fe:	4640      	mov	r0, r8
 23fe700:	4649      	mov	r1, r9
 23fe702:	f7fb f9bd 	bl	23f9a80 <__aeabi_dsub>
 23fe706:	4680      	mov	r8, r0
 23fe708:	4689      	mov	r9, r1
 23fe70a:	4630      	mov	r0, r6
 23fe70c:	4639      	mov	r1, r7
 23fe70e:	ec53 2b1a 	vmov	r2, r3, d10
 23fe712:	f7fb f9b5 	bl	23f9a80 <__aeabi_dsub>
 23fe716:	4602      	mov	r2, r0
 23fe718:	460b      	mov	r3, r1
 23fe71a:	ec51 0b19 	vmov	r0, r1, d9
 23fe71e:	f7fb f9af 	bl	23f9a80 <__aeabi_dsub>
 23fe722:	4652      	mov	r2, sl
 23fe724:	465b      	mov	r3, fp
 23fe726:	f7fb fb63 	bl	23f9df0 <__aeabi_dmul>
 23fe72a:	4602      	mov	r2, r0
 23fe72c:	460b      	mov	r3, r1
 23fe72e:	4640      	mov	r0, r8
 23fe730:	4649      	mov	r1, r9
 23fe732:	f7fb f9a5 	bl	23f9a80 <__aeabi_dsub>
 23fe736:	ec53 2b1b 	vmov	r2, r3, d11
 23fe73a:	f7fb fb59 	bl	23f9df0 <__aeabi_dmul>
 23fe73e:	ec53 2b18 	vmov	r2, r3, d8
 23fe742:	ec41 0b1a 	vmov	d10, r0, r1
 23fe746:	ec51 0b18 	vmov	r0, r1, d8
 23fe74a:	f7fb fb51 	bl	23f9df0 <__aeabi_dmul>
 23fe74e:	4606      	mov	r6, r0
 23fe750:	460f      	mov	r7, r1
 23fe752:	a381      	add	r3, pc, #516	; (adr r3, 23fe958 <__ieee754_pow+0x4f0>)
 23fe754:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe758:	f7fb fb4a 	bl	23f9df0 <__aeabi_dmul>
 23fe75c:	a380      	add	r3, pc, #512	; (adr r3, 23fe960 <__ieee754_pow+0x4f8>)
 23fe75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe762:	f7fb f98f 	bl	23f9a84 <__adddf3>
 23fe766:	4632      	mov	r2, r6
 23fe768:	463b      	mov	r3, r7
 23fe76a:	f7fb fb41 	bl	23f9df0 <__aeabi_dmul>
 23fe76e:	a37e      	add	r3, pc, #504	; (adr r3, 23fe968 <__ieee754_pow+0x500>)
 23fe770:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe774:	f7fb f986 	bl	23f9a84 <__adddf3>
 23fe778:	4632      	mov	r2, r6
 23fe77a:	463b      	mov	r3, r7
 23fe77c:	f7fb fb38 	bl	23f9df0 <__aeabi_dmul>
 23fe780:	a37b      	add	r3, pc, #492	; (adr r3, 23fe970 <__ieee754_pow+0x508>)
 23fe782:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe786:	f7fb f97d 	bl	23f9a84 <__adddf3>
 23fe78a:	4632      	mov	r2, r6
 23fe78c:	463b      	mov	r3, r7
 23fe78e:	f7fb fb2f 	bl	23f9df0 <__aeabi_dmul>
 23fe792:	a379      	add	r3, pc, #484	; (adr r3, 23fe978 <__ieee754_pow+0x510>)
 23fe794:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe798:	f7fb f974 	bl	23f9a84 <__adddf3>
 23fe79c:	4632      	mov	r2, r6
 23fe79e:	463b      	mov	r3, r7
 23fe7a0:	f7fb fb26 	bl	23f9df0 <__aeabi_dmul>
 23fe7a4:	a376      	add	r3, pc, #472	; (adr r3, 23fe980 <__ieee754_pow+0x518>)
 23fe7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe7aa:	f7fb f96b 	bl	23f9a84 <__adddf3>
 23fe7ae:	4680      	mov	r8, r0
 23fe7b0:	4689      	mov	r9, r1
 23fe7b2:	4632      	mov	r2, r6
 23fe7b4:	463b      	mov	r3, r7
 23fe7b6:	4630      	mov	r0, r6
 23fe7b8:	4639      	mov	r1, r7
 23fe7ba:	f7fb fb19 	bl	23f9df0 <__aeabi_dmul>
 23fe7be:	4602      	mov	r2, r0
 23fe7c0:	460b      	mov	r3, r1
 23fe7c2:	4640      	mov	r0, r8
 23fe7c4:	4649      	mov	r1, r9
 23fe7c6:	f04f 0800 	mov.w	r8, #0
 23fe7ca:	f7fb fb11 	bl	23f9df0 <__aeabi_dmul>
 23fe7ce:	4652      	mov	r2, sl
 23fe7d0:	4606      	mov	r6, r0
 23fe7d2:	460f      	mov	r7, r1
 23fe7d4:	465b      	mov	r3, fp
 23fe7d6:	ec51 0b18 	vmov	r0, r1, d8
 23fe7da:	f7fb f953 	bl	23f9a84 <__adddf3>
 23fe7de:	ec53 2b1a 	vmov	r2, r3, d10
 23fe7e2:	f7fb fb05 	bl	23f9df0 <__aeabi_dmul>
 23fe7e6:	4632      	mov	r2, r6
 23fe7e8:	463b      	mov	r3, r7
 23fe7ea:	f7fb f94b 	bl	23f9a84 <__adddf3>
 23fe7ee:	4652      	mov	r2, sl
 23fe7f0:	465b      	mov	r3, fp
 23fe7f2:	ec41 0b19 	vmov	d9, r0, r1
 23fe7f6:	4650      	mov	r0, sl
 23fe7f8:	4659      	mov	r1, fp
 23fe7fa:	f7fb faf9 	bl	23f9df0 <__aeabi_dmul>
 23fe7fe:	2200      	movs	r2, #0
 23fe800:	4b6e      	ldr	r3, [pc, #440]	; (23fe9bc <__ieee754_pow+0x554>)
 23fe802:	4606      	mov	r6, r0
 23fe804:	460f      	mov	r7, r1
 23fe806:	f7fb f93d 	bl	23f9a84 <__adddf3>
 23fe80a:	ec53 2b19 	vmov	r2, r3, d9
 23fe80e:	f7fb f939 	bl	23f9a84 <__adddf3>
 23fe812:	4689      	mov	r9, r1
 23fe814:	4642      	mov	r2, r8
 23fe816:	4650      	mov	r0, sl
 23fe818:	464b      	mov	r3, r9
 23fe81a:	4659      	mov	r1, fp
 23fe81c:	f7fb fae8 	bl	23f9df0 <__aeabi_dmul>
 23fe820:	2200      	movs	r2, #0
 23fe822:	4682      	mov	sl, r0
 23fe824:	468b      	mov	fp, r1
 23fe826:	4b65      	ldr	r3, [pc, #404]	; (23fe9bc <__ieee754_pow+0x554>)
 23fe828:	4640      	mov	r0, r8
 23fe82a:	4649      	mov	r1, r9
 23fe82c:	f7fb f928 	bl	23f9a80 <__aeabi_dsub>
 23fe830:	4632      	mov	r2, r6
 23fe832:	463b      	mov	r3, r7
 23fe834:	f7fb f924 	bl	23f9a80 <__aeabi_dsub>
 23fe838:	4602      	mov	r2, r0
 23fe83a:	460b      	mov	r3, r1
 23fe83c:	ec51 0b19 	vmov	r0, r1, d9
 23fe840:	f7fb f91e 	bl	23f9a80 <__aeabi_dsub>
 23fe844:	ec53 2b18 	vmov	r2, r3, d8
 23fe848:	f7fb fad2 	bl	23f9df0 <__aeabi_dmul>
 23fe84c:	4606      	mov	r6, r0
 23fe84e:	460f      	mov	r7, r1
 23fe850:	4642      	mov	r2, r8
 23fe852:	464b      	mov	r3, r9
 23fe854:	ec51 0b1a 	vmov	r0, r1, d10
 23fe858:	f7fb faca 	bl	23f9df0 <__aeabi_dmul>
 23fe85c:	4602      	mov	r2, r0
 23fe85e:	460b      	mov	r3, r1
 23fe860:	4630      	mov	r0, r6
 23fe862:	4639      	mov	r1, r7
 23fe864:	f7fb f90e 	bl	23f9a84 <__adddf3>
 23fe868:	4680      	mov	r8, r0
 23fe86a:	4689      	mov	r9, r1
 23fe86c:	4650      	mov	r0, sl
 23fe86e:	4642      	mov	r2, r8
 23fe870:	4659      	mov	r1, fp
 23fe872:	464b      	mov	r3, r9
 23fe874:	f7fb f906 	bl	23f9a84 <__adddf3>
 23fe878:	2000      	movs	r0, #0
 23fe87a:	460f      	mov	r7, r1
 23fe87c:	4606      	mov	r6, r0
 23fe87e:	a342      	add	r3, pc, #264	; (adr r3, 23fe988 <__ieee754_pow+0x520>)
 23fe880:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe884:	f7fb fab4 	bl	23f9df0 <__aeabi_dmul>
 23fe888:	4652      	mov	r2, sl
 23fe88a:	465b      	mov	r3, fp
 23fe88c:	ec41 0b19 	vmov	d9, r0, r1
 23fe890:	4630      	mov	r0, r6
 23fe892:	4639      	mov	r1, r7
 23fe894:	f7fb f8f4 	bl	23f9a80 <__aeabi_dsub>
 23fe898:	4602      	mov	r2, r0
 23fe89a:	460b      	mov	r3, r1
 23fe89c:	4640      	mov	r0, r8
 23fe89e:	4649      	mov	r1, r9
 23fe8a0:	f7fb f8ee 	bl	23f9a80 <__aeabi_dsub>
 23fe8a4:	a33a      	add	r3, pc, #232	; (adr r3, 23fe990 <__ieee754_pow+0x528>)
 23fe8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe8aa:	f7fb faa1 	bl	23f9df0 <__aeabi_dmul>
 23fe8ae:	4680      	mov	r8, r0
 23fe8b0:	4689      	mov	r9, r1
 23fe8b2:	4630      	mov	r0, r6
 23fe8b4:	4639      	mov	r1, r7
 23fe8b6:	a338      	add	r3, pc, #224	; (adr r3, 23fe998 <__ieee754_pow+0x530>)
 23fe8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe8bc:	f7fb fa98 	bl	23f9df0 <__aeabi_dmul>
 23fe8c0:	4602      	mov	r2, r0
 23fe8c2:	460b      	mov	r3, r1
 23fe8c4:	4640      	mov	r0, r8
 23fe8c6:	4649      	mov	r1, r9
 23fe8c8:	f7fb f8dc 	bl	23f9a84 <__adddf3>
 23fe8cc:	ec53 2b1c 	vmov	r2, r3, d12
 23fe8d0:	f7fb f8d8 	bl	23f9a84 <__adddf3>
 23fe8d4:	4606      	mov	r6, r0
 23fe8d6:	460f      	mov	r7, r1
 23fe8d8:	9805      	ldr	r0, [sp, #20]
 23fe8da:	f7fb fa1f 	bl	23f9d1c <__aeabi_i2d>
 23fe8de:	4632      	mov	r2, r6
 23fe8e0:	4680      	mov	r8, r0
 23fe8e2:	4689      	mov	r9, r1
 23fe8e4:	463b      	mov	r3, r7
 23fe8e6:	ec51 0b19 	vmov	r0, r1, d9
 23fe8ea:	f7fb f8cb 	bl	23f9a84 <__adddf3>
 23fe8ee:	ec53 2b1d 	vmov	r2, r3, d13
 23fe8f2:	f7fb f8c7 	bl	23f9a84 <__adddf3>
 23fe8f6:	4642      	mov	r2, r8
 23fe8f8:	464b      	mov	r3, r9
 23fe8fa:	f7fb f8c3 	bl	23f9a84 <__adddf3>
 23fe8fe:	2000      	movs	r0, #0
 23fe900:	4642      	mov	r2, r8
 23fe902:	464b      	mov	r3, r9
 23fe904:	4682      	mov	sl, r0
 23fe906:	468b      	mov	fp, r1
 23fe908:	f7fb f8ba 	bl	23f9a80 <__aeabi_dsub>
 23fe90c:	ec53 2b1d 	vmov	r2, r3, d13
 23fe910:	f7fb f8b6 	bl	23f9a80 <__aeabi_dsub>
 23fe914:	ec53 2b19 	vmov	r2, r3, d9
 23fe918:	f7fb f8b2 	bl	23f9a80 <__aeabi_dsub>
 23fe91c:	4602      	mov	r2, r0
 23fe91e:	460b      	mov	r3, r1
 23fe920:	4630      	mov	r0, r6
 23fe922:	4639      	mov	r1, r7
 23fe924:	f7fb f8ac 	bl	23f9a80 <__aeabi_dsub>
 23fe928:	9b00      	ldr	r3, [sp, #0]
 23fe92a:	9a04      	ldr	r2, [sp, #16]
 23fe92c:	3b01      	subs	r3, #1
 23fe92e:	4313      	orrs	r3, r2
 23fe930:	ec41 0b18 	vmov	d8, r0, r1
 23fe934:	f040 81dc 	bne.w	23fecf0 <__ieee754_pow+0x888>
 23fe938:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fe9a0 <__ieee754_pow+0x538>
 23fe93c:	eeb0 9a47 	vmov.f32	s18, s14
 23fe940:	eef0 9a67 	vmov.f32	s19, s15
 23fe944:	e03c      	b.n	23fe9c0 <__ieee754_pow+0x558>
 23fe946:	bf00      	nop
	...
 23fe954:	3ff00000 	.word	0x3ff00000
 23fe958:	4a454eef 	.word	0x4a454eef
 23fe95c:	3fca7e28 	.word	0x3fca7e28
 23fe960:	93c9db65 	.word	0x93c9db65
 23fe964:	3fcd864a 	.word	0x3fcd864a
 23fe968:	a91d4101 	.word	0xa91d4101
 23fe96c:	3fd17460 	.word	0x3fd17460
 23fe970:	518f264d 	.word	0x518f264d
 23fe974:	3fd55555 	.word	0x3fd55555
 23fe978:	db6fabff 	.word	0xdb6fabff
 23fe97c:	3fdb6db6 	.word	0x3fdb6db6
 23fe980:	33333303 	.word	0x33333303
 23fe984:	3fe33333 	.word	0x3fe33333
 23fe988:	e0000000 	.word	0xe0000000
 23fe98c:	3feec709 	.word	0x3feec709
 23fe990:	dc3a03fd 	.word	0xdc3a03fd
 23fe994:	3feec709 	.word	0x3feec709
 23fe998:	145b01f5 	.word	0x145b01f5
 23fe99c:	be3e2fe0 	.word	0xbe3e2fe0
 23fe9a0:	00000000 	.word	0x00000000
 23fe9a4:	bff00000 	.word	0xbff00000
 23fe9a8:	7ff00000 	.word	0x7ff00000
 23fe9ac:	43400000 	.word	0x43400000
 23fe9b0:	3ff00000 	.word	0x3ff00000
 23fe9b4:	0003988e 	.word	0x0003988e
 23fe9b8:	000bb679 	.word	0x000bb679
 23fe9bc:	40080000 	.word	0x40080000
 23fe9c0:	2300      	movs	r3, #0
 23fe9c2:	4620      	mov	r0, r4
 23fe9c4:	4629      	mov	r1, r5
 23fe9c6:	e9cd 4500 	strd	r4, r5, [sp]
 23fe9ca:	9300      	str	r3, [sp, #0]
 23fe9cc:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fe9d0:	4642      	mov	r2, r8
 23fe9d2:	464b      	mov	r3, r9
 23fe9d4:	f7fb f854 	bl	23f9a80 <__aeabi_dsub>
 23fe9d8:	465b      	mov	r3, fp
 23fe9da:	4652      	mov	r2, sl
 23fe9dc:	f7fb fa08 	bl	23f9df0 <__aeabi_dmul>
 23fe9e0:	4606      	mov	r6, r0
 23fe9e2:	460f      	mov	r7, r1
 23fe9e4:	4622      	mov	r2, r4
 23fe9e6:	462b      	mov	r3, r5
 23fe9e8:	ec51 0b18 	vmov	r0, r1, d8
 23fe9ec:	f7fb fa00 	bl	23f9df0 <__aeabi_dmul>
 23fe9f0:	4602      	mov	r2, r0
 23fe9f2:	460b      	mov	r3, r1
 23fe9f4:	4630      	mov	r0, r6
 23fe9f6:	4639      	mov	r1, r7
 23fe9f8:	f7fb f844 	bl	23f9a84 <__adddf3>
 23fe9fc:	4642      	mov	r2, r8
 23fe9fe:	4604      	mov	r4, r0
 23fea00:	460d      	mov	r5, r1
 23fea02:	464b      	mov	r3, r9
 23fea04:	4659      	mov	r1, fp
 23fea06:	4650      	mov	r0, sl
 23fea08:	46a0      	mov	r8, r4
 23fea0a:	f7fb f9f1 	bl	23f9df0 <__aeabi_dmul>
 23fea0e:	4606      	mov	r6, r0
 23fea10:	460f      	mov	r7, r1
 23fea12:	4620      	mov	r0, r4
 23fea14:	4629      	mov	r1, r5
 23fea16:	4632      	mov	r2, r6
 23fea18:	463b      	mov	r3, r7
 23fea1a:	46a9      	mov	r9, r5
 23fea1c:	f7fb f832 	bl	23f9a84 <__adddf3>
 23fea20:	4bd5      	ldr	r3, [pc, #852]	; (23fed78 <__ieee754_pow+0x910>)
 23fea22:	4604      	mov	r4, r0
 23fea24:	460d      	mov	r5, r1
 23fea26:	4299      	cmp	r1, r3
 23fea28:	468b      	mov	fp, r1
 23fea2a:	f340 813b 	ble.w	23feca4 <__ieee754_pow+0x83c>
 23fea2e:	4bd3      	ldr	r3, [pc, #844]	; (23fed7c <__ieee754_pow+0x914>)
 23fea30:	440b      	add	r3, r1
 23fea32:	4303      	orrs	r3, r0
 23fea34:	f040 8235 	bne.w	23feea2 <__ieee754_pow+0xa3a>
 23fea38:	4640      	mov	r0, r8
 23fea3a:	4649      	mov	r1, r9
 23fea3c:	a3b6      	add	r3, pc, #728	; (adr r3, 23fed18 <__ieee754_pow+0x8b0>)
 23fea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fea42:	f7fb f81f 	bl	23f9a84 <__adddf3>
 23fea46:	4632      	mov	r2, r6
 23fea48:	463b      	mov	r3, r7
 23fea4a:	ec41 0b18 	vmov	d8, r0, r1
 23fea4e:	4620      	mov	r0, r4
 23fea50:	4629      	mov	r1, r5
 23fea52:	f7fb f815 	bl	23f9a80 <__aeabi_dsub>
 23fea56:	4602      	mov	r2, r0
 23fea58:	460b      	mov	r3, r1
 23fea5a:	ec51 0b18 	vmov	r0, r1, d8
 23fea5e:	f7fb fc57 	bl	23fa310 <__aeabi_dcmpgt>
 23fea62:	2800      	cmp	r0, #0
 23fea64:	f040 821d 	bne.w	23feea2 <__ieee754_pow+0xa3a>
 23fea68:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fea6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fea70:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fea74:	4cc2      	ldr	r4, [pc, #776]	; (23fed80 <__ieee754_pow+0x918>)
 23fea76:	f1bb 0f00 	cmp.w	fp, #0
 23fea7a:	fa42 f303 	asr.w	r3, r2, r3
 23fea7e:	f04f 0000 	mov.w	r0, #0
 23fea82:	445b      	add	r3, fp
 23fea84:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fea88:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fea8c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fea90:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fea94:	fa44 f402 	asr.w	r4, r4, r2
 23fea98:	f1c2 0214 	rsb	r2, r2, #20
 23fea9c:	ea23 0104 	bic.w	r1, r3, r4
 23feaa0:	fa4a fa02 	asr.w	sl, sl, r2
 23feaa4:	4602      	mov	r2, r0
 23feaa6:	4630      	mov	r0, r6
 23feaa8:	460b      	mov	r3, r1
 23feaaa:	bfb8      	it	lt
 23feaac:	f1ca 0a00 	rsblt	sl, sl, #0
 23feab0:	4639      	mov	r1, r7
 23feab2:	f7fa ffe5 	bl	23f9a80 <__aeabi_dsub>
 23feab6:	4602      	mov	r2, r0
 23feab8:	460b      	mov	r3, r1
 23feaba:	4606      	mov	r6, r0
 23feabc:	460f      	mov	r7, r1
 23feabe:	4640      	mov	r0, r8
 23feac0:	4649      	mov	r1, r9
 23feac2:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23feac6:	f7fa ffdd 	bl	23f9a84 <__adddf3>
 23feaca:	460d      	mov	r5, r1
 23feacc:	2400      	movs	r4, #0
 23feace:	4629      	mov	r1, r5
 23fead0:	a393      	add	r3, pc, #588	; (adr r3, 23fed20 <__ieee754_pow+0x8b8>)
 23fead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fead6:	4620      	mov	r0, r4
 23fead8:	f7fb f98a 	bl	23f9df0 <__aeabi_dmul>
 23feadc:	4632      	mov	r2, r6
 23feade:	463b      	mov	r3, r7
 23feae0:	4606      	mov	r6, r0
 23feae2:	460f      	mov	r7, r1
 23feae4:	4620      	mov	r0, r4
 23feae6:	4629      	mov	r1, r5
 23feae8:	f7fa ffca 	bl	23f9a80 <__aeabi_dsub>
 23feaec:	4602      	mov	r2, r0
 23feaee:	460b      	mov	r3, r1
 23feaf0:	4640      	mov	r0, r8
 23feaf2:	4649      	mov	r1, r9
 23feaf4:	f7fa ffc4 	bl	23f9a80 <__aeabi_dsub>
 23feaf8:	a38b      	add	r3, pc, #556	; (adr r3, 23fed28 <__ieee754_pow+0x8c0>)
 23feafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feafe:	f7fb f977 	bl	23f9df0 <__aeabi_dmul>
 23feb02:	4680      	mov	r8, r0
 23feb04:	4689      	mov	r9, r1
 23feb06:	4620      	mov	r0, r4
 23feb08:	4629      	mov	r1, r5
 23feb0a:	a389      	add	r3, pc, #548	; (adr r3, 23fed30 <__ieee754_pow+0x8c8>)
 23feb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb10:	f7fb f96e 	bl	23f9df0 <__aeabi_dmul>
 23feb14:	4602      	mov	r2, r0
 23feb16:	460b      	mov	r3, r1
 23feb18:	4640      	mov	r0, r8
 23feb1a:	4649      	mov	r1, r9
 23feb1c:	f7fa ffb2 	bl	23f9a84 <__adddf3>
 23feb20:	4680      	mov	r8, r0
 23feb22:	4689      	mov	r9, r1
 23feb24:	4630      	mov	r0, r6
 23feb26:	4642      	mov	r2, r8
 23feb28:	4639      	mov	r1, r7
 23feb2a:	464b      	mov	r3, r9
 23feb2c:	f7fa ffaa 	bl	23f9a84 <__adddf3>
 23feb30:	4632      	mov	r2, r6
 23feb32:	4604      	mov	r4, r0
 23feb34:	460d      	mov	r5, r1
 23feb36:	463b      	mov	r3, r7
 23feb38:	f7fa ffa2 	bl	23f9a80 <__aeabi_dsub>
 23feb3c:	4602      	mov	r2, r0
 23feb3e:	460b      	mov	r3, r1
 23feb40:	4640      	mov	r0, r8
 23feb42:	4649      	mov	r1, r9
 23feb44:	f7fa ff9c 	bl	23f9a80 <__aeabi_dsub>
 23feb48:	4622      	mov	r2, r4
 23feb4a:	4680      	mov	r8, r0
 23feb4c:	4689      	mov	r9, r1
 23feb4e:	462b      	mov	r3, r5
 23feb50:	4620      	mov	r0, r4
 23feb52:	4629      	mov	r1, r5
 23feb54:	f7fb f94c 	bl	23f9df0 <__aeabi_dmul>
 23feb58:	4606      	mov	r6, r0
 23feb5a:	460f      	mov	r7, r1
 23feb5c:	a376      	add	r3, pc, #472	; (adr r3, 23fed38 <__ieee754_pow+0x8d0>)
 23feb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb62:	f7fb f945 	bl	23f9df0 <__aeabi_dmul>
 23feb66:	a376      	add	r3, pc, #472	; (adr r3, 23fed40 <__ieee754_pow+0x8d8>)
 23feb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb6c:	f7fa ff88 	bl	23f9a80 <__aeabi_dsub>
 23feb70:	4632      	mov	r2, r6
 23feb72:	463b      	mov	r3, r7
 23feb74:	f7fb f93c 	bl	23f9df0 <__aeabi_dmul>
 23feb78:	a373      	add	r3, pc, #460	; (adr r3, 23fed48 <__ieee754_pow+0x8e0>)
 23feb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb7e:	f7fa ff81 	bl	23f9a84 <__adddf3>
 23feb82:	4632      	mov	r2, r6
 23feb84:	463b      	mov	r3, r7
 23feb86:	f7fb f933 	bl	23f9df0 <__aeabi_dmul>
 23feb8a:	a371      	add	r3, pc, #452	; (adr r3, 23fed50 <__ieee754_pow+0x8e8>)
 23feb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb90:	f7fa ff76 	bl	23f9a80 <__aeabi_dsub>
 23feb94:	4632      	mov	r2, r6
 23feb96:	463b      	mov	r3, r7
 23feb98:	f7fb f92a 	bl	23f9df0 <__aeabi_dmul>
 23feb9c:	a36e      	add	r3, pc, #440	; (adr r3, 23fed58 <__ieee754_pow+0x8f0>)
 23feb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feba2:	f7fa ff6f 	bl	23f9a84 <__adddf3>
 23feba6:	4632      	mov	r2, r6
 23feba8:	463b      	mov	r3, r7
 23febaa:	f7fb f921 	bl	23f9df0 <__aeabi_dmul>
 23febae:	4602      	mov	r2, r0
 23febb0:	460b      	mov	r3, r1
 23febb2:	4620      	mov	r0, r4
 23febb4:	4629      	mov	r1, r5
 23febb6:	f7fa ff63 	bl	23f9a80 <__aeabi_dsub>
 23febba:	4606      	mov	r6, r0
 23febbc:	460f      	mov	r7, r1
 23febbe:	4620      	mov	r0, r4
 23febc0:	4632      	mov	r2, r6
 23febc2:	4629      	mov	r1, r5
 23febc4:	463b      	mov	r3, r7
 23febc6:	f7fb f913 	bl	23f9df0 <__aeabi_dmul>
 23febca:	2200      	movs	r2, #0
 23febcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23febd0:	ec41 0b18 	vmov	d8, r0, r1
 23febd4:	4630      	mov	r0, r6
 23febd6:	4639      	mov	r1, r7
 23febd8:	f7fa ff52 	bl	23f9a80 <__aeabi_dsub>
 23febdc:	4602      	mov	r2, r0
 23febde:	460b      	mov	r3, r1
 23febe0:	ec51 0b18 	vmov	r0, r1, d8
 23febe4:	f7fb fa2e 	bl	23fa044 <__aeabi_ddiv>
 23febe8:	4642      	mov	r2, r8
 23febea:	4606      	mov	r6, r0
 23febec:	460f      	mov	r7, r1
 23febee:	464b      	mov	r3, r9
 23febf0:	4620      	mov	r0, r4
 23febf2:	4629      	mov	r1, r5
 23febf4:	f7fb f8fc 	bl	23f9df0 <__aeabi_dmul>
 23febf8:	4642      	mov	r2, r8
 23febfa:	464b      	mov	r3, r9
 23febfc:	f7fa ff42 	bl	23f9a84 <__adddf3>
 23fec00:	4602      	mov	r2, r0
 23fec02:	460b      	mov	r3, r1
 23fec04:	4630      	mov	r0, r6
 23fec06:	4639      	mov	r1, r7
 23fec08:	f7fa ff3a 	bl	23f9a80 <__aeabi_dsub>
 23fec0c:	4622      	mov	r2, r4
 23fec0e:	462b      	mov	r3, r5
 23fec10:	f7fa ff36 	bl	23f9a80 <__aeabi_dsub>
 23fec14:	4602      	mov	r2, r0
 23fec16:	460b      	mov	r3, r1
 23fec18:	2000      	movs	r0, #0
 23fec1a:	495a      	ldr	r1, [pc, #360]	; (23fed84 <__ieee754_pow+0x91c>)
 23fec1c:	f7fa ff30 	bl	23f9a80 <__aeabi_dsub>
 23fec20:	448b      	add	fp, r1
 23fec22:	4602      	mov	r2, r0
 23fec24:	460b      	mov	r3, r1
 23fec26:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fec2a:	f2c0 816c 	blt.w	23fef06 <__ieee754_pow+0xa9e>
 23fec2e:	4659      	mov	r1, fp
 23fec30:	ec53 2b19 	vmov	r2, r3, d9
 23fec34:	f7fb f8dc 	bl	23f9df0 <__aeabi_dmul>
 23fec38:	ec41 0b10 	vmov	d0, r0, r1
 23fec3c:	e442      	b.n	23fe4c4 <__ieee754_pow+0x5c>
 23fec3e:	ec47 6b10 	vmov	d0, r6, r7
 23fec42:	9200      	str	r2, [sp, #0]
 23fec44:	f000 fc0c 	bl	23ff460 <fabs>
 23fec48:	9a00      	ldr	r2, [sp, #0]
 23fec4a:	2a00      	cmp	r2, #0
 23fec4c:	f47f acbd 	bne.w	23fe5ca <__ieee754_pow+0x162>
 23fec50:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fec54:	4a4b      	ldr	r2, [pc, #300]	; (23fed84 <__ieee754_pow+0x91c>)
 23fec56:	4293      	cmp	r3, r2
 23fec58:	d003      	beq.n	23fec62 <__ieee754_pow+0x7fa>
 23fec5a:	f1b8 0f00 	cmp.w	r8, #0
 23fec5e:	f47f acb4 	bne.w	23fe5ca <__ieee754_pow+0x162>
 23fec62:	2300      	movs	r3, #0
 23fec64:	9300      	str	r3, [sp, #0]
 23fec66:	f1bb 0f00 	cmp.w	fp, #0
 23fec6a:	da07      	bge.n	23fec7c <__ieee754_pow+0x814>
 23fec6c:	2000      	movs	r0, #0
 23fec6e:	4945      	ldr	r1, [pc, #276]	; (23fed84 <__ieee754_pow+0x91c>)
 23fec70:	ec53 2b10 	vmov	r2, r3, d0
 23fec74:	f7fb f9e6 	bl	23fa044 <__aeabi_ddiv>
 23fec78:	ec41 0b10 	vmov	d0, r0, r1
 23fec7c:	f1b9 0f00 	cmp.w	r9, #0
 23fec80:	f6bf ac20 	bge.w	23fe4c4 <__ieee754_pow+0x5c>
 23fec84:	4b40      	ldr	r3, [pc, #256]	; (23fed88 <__ieee754_pow+0x920>)
 23fec86:	9a00      	ldr	r2, [sp, #0]
 23fec88:	4443      	add	r3, r8
 23fec8a:	4313      	orrs	r3, r2
 23fec8c:	f040 812d 	bne.w	23feeea <__ieee754_pow+0xa82>
 23fec90:	ec53 2b10 	vmov	r2, r3, d0
 23fec94:	e49b      	b.n	23fe5ce <__ieee754_pow+0x166>
 23fec96:	f1bb 0f00 	cmp.w	fp, #0
 23fec9a:	f6ff ac57 	blt.w	23fe54c <__ieee754_pow+0xe4>
 23fec9e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fed60 <__ieee754_pow+0x8f8>
 23feca2:	e40f      	b.n	23fe4c4 <__ieee754_pow+0x5c>
 23feca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23feca8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fed90 <__ieee754_pow+0x928>
 23fecac:	4563      	cmp	r3, ip
 23fecae:	f340 80f0 	ble.w	23fee92 <__ieee754_pow+0xa2a>
 23fecb2:	4b36      	ldr	r3, [pc, #216]	; (23fed8c <__ieee754_pow+0x924>)
 23fecb4:	440b      	add	r3, r1
 23fecb6:	4303      	orrs	r3, r0
 23fecb8:	d10a      	bne.n	23fecd0 <__ieee754_pow+0x868>
 23fecba:	4632      	mov	r2, r6
 23fecbc:	463b      	mov	r3, r7
 23fecbe:	f7fa fedf 	bl	23f9a80 <__aeabi_dsub>
 23fecc2:	4642      	mov	r2, r8
 23fecc4:	464b      	mov	r3, r9
 23fecc6:	f7fb fb19 	bl	23fa2fc <__aeabi_dcmpge>
 23fecca:	2800      	cmp	r0, #0
 23feccc:	f43f aecc 	beq.w	23fea68 <__ieee754_pow+0x600>
 23fecd0:	a325      	add	r3, pc, #148	; (adr r3, 23fed68 <__ieee754_pow+0x900>)
 23fecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fecd6:	ec51 0b19 	vmov	r0, r1, d9
 23fecda:	f7fb f889 	bl	23f9df0 <__aeabi_dmul>
 23fecde:	a322      	add	r3, pc, #136	; (adr r3, 23fed68 <__ieee754_pow+0x900>)
 23fece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fece4:	f7fb f884 	bl	23f9df0 <__aeabi_dmul>
 23fece8:	ec41 0b10 	vmov	d0, r0, r1
 23fecec:	f7ff bbea 	b.w	23fe4c4 <__ieee754_pow+0x5c>
 23fecf0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fed70 <__ieee754_pow+0x908>
 23fecf4:	eeb0 9a47 	vmov.f32	s18, s14
 23fecf8:	eef0 9a67 	vmov.f32	s19, s15
 23fecfc:	e660      	b.n	23fe9c0 <__ieee754_pow+0x558>
 23fecfe:	f1bb 0f00 	cmp.w	fp, #0
 23fed02:	dacc      	bge.n	23fec9e <__ieee754_pow+0x836>
 23fed04:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fed08:	ee00 4a10 	vmov	s0, r4
 23fed0c:	ee00 3a90 	vmov	s1, r3
 23fed10:	f7ff bbd8 	b.w	23fe4c4 <__ieee754_pow+0x5c>
 23fed14:	f3af 8000 	nop.w
 23fed18:	652b82fe 	.word	0x652b82fe
 23fed1c:	3c971547 	.word	0x3c971547
 23fed20:	00000000 	.word	0x00000000
 23fed24:	3fe62e43 	.word	0x3fe62e43
 23fed28:	fefa39ef 	.word	0xfefa39ef
 23fed2c:	3fe62e42 	.word	0x3fe62e42
 23fed30:	0ca86c39 	.word	0x0ca86c39
 23fed34:	be205c61 	.word	0xbe205c61
 23fed38:	72bea4d0 	.word	0x72bea4d0
 23fed3c:	3e663769 	.word	0x3e663769
 23fed40:	c5d26bf1 	.word	0xc5d26bf1
 23fed44:	3ebbbd41 	.word	0x3ebbbd41
 23fed48:	af25de2c 	.word	0xaf25de2c
 23fed4c:	3f11566a 	.word	0x3f11566a
 23fed50:	16bebd93 	.word	0x16bebd93
 23fed54:	3f66c16c 	.word	0x3f66c16c
 23fed58:	5555553e 	.word	0x5555553e
 23fed5c:	3fc55555 	.word	0x3fc55555
	...
 23fed68:	c2f8f359 	.word	0xc2f8f359
 23fed6c:	01a56e1f 	.word	0x01a56e1f
 23fed70:	00000000 	.word	0x00000000
 23fed74:	3ff00000 	.word	0x3ff00000
 23fed78:	408fffff 	.word	0x408fffff
 23fed7c:	bf700000 	.word	0xbf700000
 23fed80:	000fffff 	.word	0x000fffff
 23fed84:	3ff00000 	.word	0x3ff00000
 23fed88:	c0100000 	.word	0xc0100000
 23fed8c:	3f6f3400 	.word	0x3f6f3400
 23fed90:	4090cbff 	.word	0x4090cbff
 23fed94:	4598      	cmp	r8, r3
 23fed96:	f6ff af7e 	blt.w	23fec96 <__ieee754_pow+0x82e>
 23fed9a:	4b79      	ldr	r3, [pc, #484]	; (23fef80 <__ieee754_pow+0xb18>)
 23fed9c:	4598      	cmp	r8, r3
 23fed9e:	f73f abd1 	bgt.w	23fe544 <__ieee754_pow+0xdc>
 23feda2:	2200      	movs	r2, #0
 23feda4:	4b76      	ldr	r3, [pc, #472]	; (23fef80 <__ieee754_pow+0xb18>)
 23feda6:	ec51 0b10 	vmov	r0, r1, d0
 23fedaa:	f7fa fe69 	bl	23f9a80 <__aeabi_dsub>
 23fedae:	4606      	mov	r6, r0
 23fedb0:	460f      	mov	r7, r1
 23fedb2:	a363      	add	r3, pc, #396	; (adr r3, 23fef40 <__ieee754_pow+0xad8>)
 23fedb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fedb8:	f7fb f81a 	bl	23f9df0 <__aeabi_dmul>
 23fedbc:	4682      	mov	sl, r0
 23fedbe:	468b      	mov	fp, r1
 23fedc0:	4630      	mov	r0, r6
 23fedc2:	4639      	mov	r1, r7
 23fedc4:	a360      	add	r3, pc, #384	; (adr r3, 23fef48 <__ieee754_pow+0xae0>)
 23fedc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fedca:	f7fb f811 	bl	23f9df0 <__aeabi_dmul>
 23fedce:	2200      	movs	r2, #0
 23fedd0:	4b6c      	ldr	r3, [pc, #432]	; (23fef84 <__ieee754_pow+0xb1c>)
 23fedd2:	ec41 0b18 	vmov	d8, r0, r1
 23fedd6:	4630      	mov	r0, r6
 23fedd8:	4639      	mov	r1, r7
 23fedda:	f7fb f809 	bl	23f9df0 <__aeabi_dmul>
 23fedde:	4602      	mov	r2, r0
 23fede0:	460b      	mov	r3, r1
 23fede2:	a15b      	add	r1, pc, #364	; (adr r1, 23fef50 <__ieee754_pow+0xae8>)
 23fede4:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fede8:	f7fa fe4a 	bl	23f9a80 <__aeabi_dsub>
 23fedec:	4632      	mov	r2, r6
 23fedee:	463b      	mov	r3, r7
 23fedf0:	f7fa fffe 	bl	23f9df0 <__aeabi_dmul>
 23fedf4:	4602      	mov	r2, r0
 23fedf6:	460b      	mov	r3, r1
 23fedf8:	2000      	movs	r0, #0
 23fedfa:	4963      	ldr	r1, [pc, #396]	; (23fef88 <__ieee754_pow+0xb20>)
 23fedfc:	f7fa fe40 	bl	23f9a80 <__aeabi_dsub>
 23fee00:	4680      	mov	r8, r0
 23fee02:	4689      	mov	r9, r1
 23fee04:	4632      	mov	r2, r6
 23fee06:	463b      	mov	r3, r7
 23fee08:	4630      	mov	r0, r6
 23fee0a:	4639      	mov	r1, r7
 23fee0c:	f7fa fff0 	bl	23f9df0 <__aeabi_dmul>
 23fee10:	4602      	mov	r2, r0
 23fee12:	460b      	mov	r3, r1
 23fee14:	4640      	mov	r0, r8
 23fee16:	4649      	mov	r1, r9
 23fee18:	f7fa ffea 	bl	23f9df0 <__aeabi_dmul>
 23fee1c:	a34e      	add	r3, pc, #312	; (adr r3, 23fef58 <__ieee754_pow+0xaf0>)
 23fee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee22:	f7fa ffe5 	bl	23f9df0 <__aeabi_dmul>
 23fee26:	4602      	mov	r2, r0
 23fee28:	460b      	mov	r3, r1
 23fee2a:	ec51 0b18 	vmov	r0, r1, d8
 23fee2e:	f7fa fe27 	bl	23f9a80 <__aeabi_dsub>
 23fee32:	4606      	mov	r6, r0
 23fee34:	460f      	mov	r7, r1
 23fee36:	4650      	mov	r0, sl
 23fee38:	4659      	mov	r1, fp
 23fee3a:	4632      	mov	r2, r6
 23fee3c:	463b      	mov	r3, r7
 23fee3e:	f7fa fe21 	bl	23f9a84 <__adddf3>
 23fee42:	2000      	movs	r0, #0
 23fee44:	4652      	mov	r2, sl
 23fee46:	465b      	mov	r3, fp
 23fee48:	4682      	mov	sl, r0
 23fee4a:	468b      	mov	fp, r1
 23fee4c:	e564      	b.n	23fe918 <__ieee754_pow+0x4b0>
 23fee4e:	4632      	mov	r2, r6
 23fee50:	463b      	mov	r3, r7
 23fee52:	4630      	mov	r0, r6
 23fee54:	4639      	mov	r1, r7
 23fee56:	f7fa ffcb 	bl	23f9df0 <__aeabi_dmul>
 23fee5a:	ec41 0b10 	vmov	d0, r0, r1
 23fee5e:	f7ff bb31 	b.w	23fe4c4 <__ieee754_pow+0x5c>
 23fee62:	2000      	movs	r0, #0
 23fee64:	4946      	ldr	r1, [pc, #280]	; (23fef80 <__ieee754_pow+0xb18>)
 23fee66:	4632      	mov	r2, r6
 23fee68:	463b      	mov	r3, r7
 23fee6a:	f7fb f8eb 	bl	23fa044 <__aeabi_ddiv>
 23fee6e:	ec41 0b10 	vmov	d0, r0, r1
 23fee72:	f7ff bb27 	b.w	23fe4c4 <__ieee754_pow+0x5c>
 23fee76:	2b00      	cmp	r3, #0
 23fee78:	f47f aee1 	bne.w	23fec3e <__ieee754_pow+0x7d6>
 23fee7c:	f1c1 0114 	rsb	r1, r1, #20
 23fee80:	fa4a f001 	asr.w	r0, sl, r1
 23fee84:	fa00 f101 	lsl.w	r1, r0, r1
 23fee88:	4551      	cmp	r1, sl
 23fee8a:	d04d      	beq.n	23fef28 <__ieee754_pow+0xac0>
 23fee8c:	9300      	str	r3, [sp, #0]
 23fee8e:	f7ff bb27 	b.w	23fe4e0 <__ieee754_pow+0x78>
 23fee92:	4a3d      	ldr	r2, [pc, #244]	; (23fef88 <__ieee754_pow+0xb20>)
 23fee94:	4293      	cmp	r3, r2
 23fee96:	dc4e      	bgt.n	23fef36 <__ieee754_pow+0xace>
 23fee98:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fee9c:	4693      	mov	fp, r2
 23fee9e:	4692      	mov	sl, r2
 23feea0:	e614      	b.n	23feacc <__ieee754_pow+0x664>
 23feea2:	a32f      	add	r3, pc, #188	; (adr r3, 23fef60 <__ieee754_pow+0xaf8>)
 23feea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feea8:	ec51 0b19 	vmov	r0, r1, d9
 23feeac:	f7fa ffa0 	bl	23f9df0 <__aeabi_dmul>
 23feeb0:	a32b      	add	r3, pc, #172	; (adr r3, 23fef60 <__ieee754_pow+0xaf8>)
 23feeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feeb6:	f7fa ff9b 	bl	23f9df0 <__aeabi_dmul>
 23feeba:	ec41 0b10 	vmov	d0, r0, r1
 23feebe:	f7ff bb01 	b.w	23fe4c4 <__ieee754_pow+0x5c>
 23feec2:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fef68 <__ieee754_pow+0xb00>
 23feec6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23feeca:	eeb0 da47 	vmov.f32	s26, s14
 23feece:	eef0 da67 	vmov.f32	s27, s15
 23feed2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fef70 <__ieee754_pow+0xb08>
 23feed6:	eeb0 ca47 	vmov.f32	s24, s14
 23feeda:	eef0 ca67 	vmov.f32	s25, s15
 23feede:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fef78 <__ieee754_pow+0xb10>
 23feee2:	ec51 0b17 	vmov	r0, r1, d7
 23feee6:	f7ff bbcc 	b.w	23fe682 <__ieee754_pow+0x21a>
 23feeea:	9b00      	ldr	r3, [sp, #0]
 23feeec:	2b01      	cmp	r3, #1
 23feeee:	f47f aae9 	bne.w	23fe4c4 <__ieee754_pow+0x5c>
 23feef2:	ee10 1a90 	vmov	r1, s1
 23feef6:	ee10 2a10 	vmov	r2, s0
 23feefa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23feefe:	ec43 2b10 	vmov	d0, r2, r3
 23fef02:	f7ff badf 	b.w	23fe4c4 <__ieee754_pow+0x5c>
 23fef06:	4650      	mov	r0, sl
 23fef08:	ec43 2b10 	vmov	d0, r2, r3
 23fef0c:	f000 fb64 	bl	23ff5d8 <scalbn>
 23fef10:	ec51 0b10 	vmov	r0, r1, d0
 23fef14:	e68c      	b.n	23fec30 <__ieee754_pow+0x7c8>
 23fef16:	ec47 6b10 	vmov	d0, r6, r7
 23fef1a:	b007      	add	sp, #28
 23fef1c:	ecbd 8b0c 	vpop	{d8-d13}
 23fef20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fef24:	f000 b832 	b.w	23fef8c <__ieee754_sqrt>
 23fef28:	f000 0001 	and.w	r0, r0, #1
 23fef2c:	f1c0 0302 	rsb	r3, r0, #2
 23fef30:	9300      	str	r3, [sp, #0]
 23fef32:	f7ff bad5 	b.w	23fe4e0 <__ieee754_pow+0x78>
 23fef36:	151b      	asrs	r3, r3, #20
 23fef38:	e598      	b.n	23fea6c <__ieee754_pow+0x604>
 23fef3a:	bf00      	nop
 23fef3c:	f3af 8000 	nop.w
 23fef40:	60000000 	.word	0x60000000
 23fef44:	3ff71547 	.word	0x3ff71547
 23fef48:	f85ddf44 	.word	0xf85ddf44
 23fef4c:	3e54ae0b 	.word	0x3e54ae0b
 23fef50:	55555555 	.word	0x55555555
 23fef54:	3fd55555 	.word	0x3fd55555
 23fef58:	652b82fe 	.word	0x652b82fe
 23fef5c:	3ff71547 	.word	0x3ff71547
 23fef60:	8800759c 	.word	0x8800759c
 23fef64:	7e37e43c 	.word	0x7e37e43c
 23fef68:	40000000 	.word	0x40000000
 23fef6c:	3fe2b803 	.word	0x3fe2b803
 23fef70:	43cfd006 	.word	0x43cfd006
 23fef74:	3e4cfdeb 	.word	0x3e4cfdeb
 23fef78:	00000000 	.word	0x00000000
 23fef7c:	3ff80000 	.word	0x3ff80000
 23fef80:	3ff00000 	.word	0x3ff00000
 23fef84:	3fd00000 	.word	0x3fd00000
 23fef88:	3fe00000 	.word	0x3fe00000

023fef8c <__ieee754_sqrt>:
 23fef8c:	495e      	ldr	r1, [pc, #376]	; (23ff108 <__ieee754_sqrt+0x17c>)
 23fef8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fef92:	ec55 4b10 	vmov	r4, r5, d0
 23fef96:	43a9      	bics	r1, r5
 23fef98:	f000 8094 	beq.w	23ff0c4 <__ieee754_sqrt+0x138>
 23fef9c:	2d00      	cmp	r5, #0
 23fef9e:	462b      	mov	r3, r5
 23fefa0:	ee10 2a10 	vmov	r2, s0
 23fefa4:	dd5a      	ble.n	23ff05c <__ieee754_sqrt+0xd0>
 23fefa6:	1528      	asrs	r0, r5, #20
 23fefa8:	d067      	beq.n	23ff07a <__ieee754_sqrt+0xee>
 23fefaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fefae:	07c1      	lsls	r1, r0, #31
 23fefb0:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fefb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fefb8:	d403      	bmi.n	23fefc2 <__ieee754_sqrt+0x36>
 23fefba:	005b      	lsls	r3, r3, #1
 23fefbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fefc0:	0052      	lsls	r2, r2, #1
 23fefc2:	0fd1      	lsrs	r1, r2, #31
 23fefc4:	2600      	movs	r6, #0
 23fefc6:	107f      	asrs	r7, r7, #1
 23fefc8:	f04f 0c16 	mov.w	ip, #22
 23fefcc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fefd0:	46b6      	mov	lr, r6
 23fefd2:	0052      	lsls	r2, r2, #1
 23fefd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fefd8:	eb0e 0001 	add.w	r0, lr, r1
 23fefdc:	4298      	cmp	r0, r3
 23fefde:	dc03      	bgt.n	23fefe8 <__ieee754_sqrt+0x5c>
 23fefe0:	1a1b      	subs	r3, r3, r0
 23fefe2:	eb00 0e01 	add.w	lr, r0, r1
 23fefe6:	440e      	add	r6, r1
 23fefe8:	005b      	lsls	r3, r3, #1
 23fefea:	f1bc 0c01 	subs.w	ip, ip, #1
 23fefee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23feff2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23feff6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23feffa:	d1ed      	bne.n	23fefd8 <__ieee754_sqrt+0x4c>
 23feffc:	4665      	mov	r5, ip
 23feffe:	2420      	movs	r4, #32
 23ff000:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23ff004:	e014      	b.n	23ff030 <__ieee754_sqrt+0xa4>
 23ff006:	d10a      	bne.n	23ff01e <__ieee754_sqrt+0x92>
 23ff008:	4290      	cmp	r0, r2
 23ff00a:	d808      	bhi.n	23ff01e <__ieee754_sqrt+0x92>
 23ff00c:	2800      	cmp	r0, #0
 23ff00e:	eb00 0c01 	add.w	ip, r0, r1
 23ff012:	db1d      	blt.n	23ff050 <__ieee754_sqrt+0xc4>
 23ff014:	46f0      	mov	r8, lr
 23ff016:	2300      	movs	r3, #0
 23ff018:	1a12      	subs	r2, r2, r0
 23ff01a:	440d      	add	r5, r1
 23ff01c:	46c6      	mov	lr, r8
 23ff01e:	0fd0      	lsrs	r0, r2, #31
 23ff020:	3c01      	subs	r4, #1
 23ff022:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23ff026:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23ff02a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ff02e:	d033      	beq.n	23ff098 <__ieee754_sqrt+0x10c>
 23ff030:	4573      	cmp	r3, lr
 23ff032:	eb01 000c 	add.w	r0, r1, ip
 23ff036:	dde6      	ble.n	23ff006 <__ieee754_sqrt+0x7a>
 23ff038:	2800      	cmp	r0, #0
 23ff03a:	eb00 0c01 	add.w	ip, r0, r1
 23ff03e:	db07      	blt.n	23ff050 <__ieee754_sqrt+0xc4>
 23ff040:	46f0      	mov	r8, lr
 23ff042:	eba3 030e 	sub.w	r3, r3, lr
 23ff046:	4290      	cmp	r0, r2
 23ff048:	bf88      	it	hi
 23ff04a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23ff04e:	e7e3      	b.n	23ff018 <__ieee754_sqrt+0x8c>
 23ff050:	f1bc 0f00 	cmp.w	ip, #0
 23ff054:	dbf4      	blt.n	23ff040 <__ieee754_sqrt+0xb4>
 23ff056:	f10e 0801 	add.w	r8, lr, #1
 23ff05a:	e7f2      	b.n	23ff042 <__ieee754_sqrt+0xb6>
 23ff05c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23ff060:	4321      	orrs	r1, r4
 23ff062:	d028      	beq.n	23ff0b6 <__ieee754_sqrt+0x12a>
 23ff064:	2d00      	cmp	r5, #0
 23ff066:	d13d      	bne.n	23ff0e4 <__ieee754_sqrt+0x158>
 23ff068:	4628      	mov	r0, r5
 23ff06a:	0ad1      	lsrs	r1, r2, #11
 23ff06c:	3815      	subs	r0, #21
 23ff06e:	0552      	lsls	r2, r2, #21
 23ff070:	460b      	mov	r3, r1
 23ff072:	2900      	cmp	r1, #0
 23ff074:	d0f9      	beq.n	23ff06a <__ieee754_sqrt+0xde>
 23ff076:	02cf      	lsls	r7, r1, #11
 23ff078:	d441      	bmi.n	23ff0fe <__ieee754_sqrt+0x172>
 23ff07a:	2400      	movs	r4, #0
 23ff07c:	005b      	lsls	r3, r3, #1
 23ff07e:	4625      	mov	r5, r4
 23ff080:	3401      	adds	r4, #1
 23ff082:	02de      	lsls	r6, r3, #11
 23ff084:	d5fa      	bpl.n	23ff07c <__ieee754_sqrt+0xf0>
 23ff086:	4619      	mov	r1, r3
 23ff088:	4613      	mov	r3, r2
 23ff08a:	40a2      	lsls	r2, r4
 23ff08c:	f1c4 0420 	rsb	r4, r4, #32
 23ff090:	40e3      	lsrs	r3, r4
 23ff092:	1b40      	subs	r0, r0, r5
 23ff094:	430b      	orrs	r3, r1
 23ff096:	e788      	b.n	23fefaa <__ieee754_sqrt+0x1e>
 23ff098:	4313      	orrs	r3, r2
 23ff09a:	d10e      	bne.n	23ff0ba <__ieee754_sqrt+0x12e>
 23ff09c:	086c      	lsrs	r4, r5, #1
 23ff09e:	07f3      	lsls	r3, r6, #31
 23ff0a0:	491a      	ldr	r1, [pc, #104]	; (23ff10c <__ieee754_sqrt+0x180>)
 23ff0a2:	bf48      	it	mi
 23ff0a4:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23ff0a8:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23ff0ac:	4622      	mov	r2, r4
 23ff0ae:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23ff0b2:	ec43 2b10 	vmov	d0, r2, r3
 23ff0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff0ba:	1c6a      	adds	r2, r5, #1
 23ff0bc:	d01d      	beq.n	23ff0fa <__ieee754_sqrt+0x16e>
 23ff0be:	1c6c      	adds	r4, r5, #1
 23ff0c0:	0864      	lsrs	r4, r4, #1
 23ff0c2:	e7ec      	b.n	23ff09e <__ieee754_sqrt+0x112>
 23ff0c4:	ee10 2a10 	vmov	r2, s0
 23ff0c8:	462b      	mov	r3, r5
 23ff0ca:	ee10 0a10 	vmov	r0, s0
 23ff0ce:	4629      	mov	r1, r5
 23ff0d0:	f7fa fe8e 	bl	23f9df0 <__aeabi_dmul>
 23ff0d4:	4622      	mov	r2, r4
 23ff0d6:	462b      	mov	r3, r5
 23ff0d8:	f7fa fcd4 	bl	23f9a84 <__adddf3>
 23ff0dc:	ec41 0b10 	vmov	d0, r0, r1
 23ff0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff0e4:	4620      	mov	r0, r4
 23ff0e6:	4629      	mov	r1, r5
 23ff0e8:	f7fa fcca 	bl	23f9a80 <__aeabi_dsub>
 23ff0ec:	4602      	mov	r2, r0
 23ff0ee:	460b      	mov	r3, r1
 23ff0f0:	f7fa ffa8 	bl	23fa044 <__aeabi_ddiv>
 23ff0f4:	ec41 0b10 	vmov	d0, r0, r1
 23ff0f8:	e7dd      	b.n	23ff0b6 <__ieee754_sqrt+0x12a>
 23ff0fa:	3601      	adds	r6, #1
 23ff0fc:	e7cf      	b.n	23ff09e <__ieee754_sqrt+0x112>
 23ff0fe:	4613      	mov	r3, r2
 23ff100:	2420      	movs	r4, #32
 23ff102:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23ff106:	e7c3      	b.n	23ff090 <__ieee754_sqrt+0x104>
 23ff108:	7ff00000 	.word	0x7ff00000
 23ff10c:	3fe00000 	.word	0x3fe00000

023ff110 <atan>:
 23ff110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff114:	ec55 4b10 	vmov	r4, r5, d0
 23ff118:	4bc7      	ldr	r3, [pc, #796]	; (23ff438 <atan+0x328>)
 23ff11a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23ff11e:	46aa      	mov	sl, r5
 23ff120:	429e      	cmp	r6, r3
 23ff122:	dd16      	ble.n	23ff152 <atan+0x42>
 23ff124:	4bc5      	ldr	r3, [pc, #788]	; (23ff43c <atan+0x32c>)
 23ff126:	429e      	cmp	r6, r3
 23ff128:	dc01      	bgt.n	23ff12e <atan+0x1e>
 23ff12a:	d10a      	bne.n	23ff142 <atan+0x32>
 23ff12c:	b14c      	cbz	r4, 23ff142 <atan+0x32>
 23ff12e:	4622      	mov	r2, r4
 23ff130:	462b      	mov	r3, r5
 23ff132:	4620      	mov	r0, r4
 23ff134:	4629      	mov	r1, r5
 23ff136:	f7fa fca5 	bl	23f9a84 <__adddf3>
 23ff13a:	ec41 0b10 	vmov	d0, r0, r1
 23ff13e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff142:	f1ba 0f00 	cmp.w	sl, #0
 23ff146:	f340 80bf 	ble.w	23ff2c8 <atan+0x1b8>
 23ff14a:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23ff3c8 <atan+0x2b8>
 23ff14e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff152:	4bbb      	ldr	r3, [pc, #748]	; (23ff440 <atan+0x330>)
 23ff154:	429e      	cmp	r6, r3
 23ff156:	f300 80ba 	bgt.w	23ff2ce <atan+0x1be>
 23ff15a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23ff15e:	429e      	cmp	r6, r3
 23ff160:	f340 80a0 	ble.w	23ff2a4 <atan+0x194>
 23ff164:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23ff168:	4622      	mov	r2, r4
 23ff16a:	462b      	mov	r3, r5
 23ff16c:	4620      	mov	r0, r4
 23ff16e:	4629      	mov	r1, r5
 23ff170:	f7fa fe3e 	bl	23f9df0 <__aeabi_dmul>
 23ff174:	4602      	mov	r2, r0
 23ff176:	460b      	mov	r3, r1
 23ff178:	4680      	mov	r8, r0
 23ff17a:	4689      	mov	r9, r1
 23ff17c:	f7fa fe38 	bl	23f9df0 <__aeabi_dmul>
 23ff180:	4606      	mov	r6, r0
 23ff182:	460f      	mov	r7, r1
 23ff184:	a392      	add	r3, pc, #584	; (adr r3, 23ff3d0 <atan+0x2c0>)
 23ff186:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff18a:	f7fa fe31 	bl	23f9df0 <__aeabi_dmul>
 23ff18e:	a392      	add	r3, pc, #584	; (adr r3, 23ff3d8 <atan+0x2c8>)
 23ff190:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff194:	f7fa fc76 	bl	23f9a84 <__adddf3>
 23ff198:	4632      	mov	r2, r6
 23ff19a:	463b      	mov	r3, r7
 23ff19c:	f7fa fe28 	bl	23f9df0 <__aeabi_dmul>
 23ff1a0:	a38f      	add	r3, pc, #572	; (adr r3, 23ff3e0 <atan+0x2d0>)
 23ff1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff1a6:	f7fa fc6d 	bl	23f9a84 <__adddf3>
 23ff1aa:	4632      	mov	r2, r6
 23ff1ac:	463b      	mov	r3, r7
 23ff1ae:	f7fa fe1f 	bl	23f9df0 <__aeabi_dmul>
 23ff1b2:	a38d      	add	r3, pc, #564	; (adr r3, 23ff3e8 <atan+0x2d8>)
 23ff1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff1b8:	f7fa fc64 	bl	23f9a84 <__adddf3>
 23ff1bc:	4632      	mov	r2, r6
 23ff1be:	463b      	mov	r3, r7
 23ff1c0:	f7fa fe16 	bl	23f9df0 <__aeabi_dmul>
 23ff1c4:	a38a      	add	r3, pc, #552	; (adr r3, 23ff3f0 <atan+0x2e0>)
 23ff1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff1ca:	f7fa fc5b 	bl	23f9a84 <__adddf3>
 23ff1ce:	4632      	mov	r2, r6
 23ff1d0:	463b      	mov	r3, r7
 23ff1d2:	f7fa fe0d 	bl	23f9df0 <__aeabi_dmul>
 23ff1d6:	a388      	add	r3, pc, #544	; (adr r3, 23ff3f8 <atan+0x2e8>)
 23ff1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff1dc:	f7fa fc52 	bl	23f9a84 <__adddf3>
 23ff1e0:	4642      	mov	r2, r8
 23ff1e2:	464b      	mov	r3, r9
 23ff1e4:	f7fa fe04 	bl	23f9df0 <__aeabi_dmul>
 23ff1e8:	4680      	mov	r8, r0
 23ff1ea:	4689      	mov	r9, r1
 23ff1ec:	4630      	mov	r0, r6
 23ff1ee:	4639      	mov	r1, r7
 23ff1f0:	a383      	add	r3, pc, #524	; (adr r3, 23ff400 <atan+0x2f0>)
 23ff1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff1f6:	f7fa fdfb 	bl	23f9df0 <__aeabi_dmul>
 23ff1fa:	a383      	add	r3, pc, #524	; (adr r3, 23ff408 <atan+0x2f8>)
 23ff1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff200:	f7fa fc3e 	bl	23f9a80 <__aeabi_dsub>
 23ff204:	4632      	mov	r2, r6
 23ff206:	463b      	mov	r3, r7
 23ff208:	f7fa fdf2 	bl	23f9df0 <__aeabi_dmul>
 23ff20c:	a380      	add	r3, pc, #512	; (adr r3, 23ff410 <atan+0x300>)
 23ff20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff212:	f7fa fc35 	bl	23f9a80 <__aeabi_dsub>
 23ff216:	4632      	mov	r2, r6
 23ff218:	463b      	mov	r3, r7
 23ff21a:	f7fa fde9 	bl	23f9df0 <__aeabi_dmul>
 23ff21e:	a37e      	add	r3, pc, #504	; (adr r3, 23ff418 <atan+0x308>)
 23ff220:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff224:	f7fa fc2c 	bl	23f9a80 <__aeabi_dsub>
 23ff228:	4632      	mov	r2, r6
 23ff22a:	463b      	mov	r3, r7
 23ff22c:	f7fa fde0 	bl	23f9df0 <__aeabi_dmul>
 23ff230:	a37b      	add	r3, pc, #492	; (adr r3, 23ff420 <atan+0x310>)
 23ff232:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff236:	f7fa fc23 	bl	23f9a80 <__aeabi_dsub>
 23ff23a:	4632      	mov	r2, r6
 23ff23c:	463b      	mov	r3, r7
 23ff23e:	f7fa fdd7 	bl	23f9df0 <__aeabi_dmul>
 23ff242:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23ff246:	4602      	mov	r2, r0
 23ff248:	460b      	mov	r3, r1
 23ff24a:	4640      	mov	r0, r8
 23ff24c:	4649      	mov	r1, r9
 23ff24e:	d063      	beq.n	23ff318 <atan+0x208>
 23ff250:	4e7c      	ldr	r6, [pc, #496]	; (23ff444 <atan+0x334>)
 23ff252:	f7fa fc17 	bl	23f9a84 <__adddf3>
 23ff256:	4622      	mov	r2, r4
 23ff258:	462b      	mov	r3, r5
 23ff25a:	f7fa fdc9 	bl	23f9df0 <__aeabi_dmul>
 23ff25e:	4b7a      	ldr	r3, [pc, #488]	; (23ff448 <atan+0x338>)
 23ff260:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23ff264:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23ff268:	449b      	add	fp, r3
 23ff26a:	e9db 2300 	ldrd	r2, r3, [fp]
 23ff26e:	f7fa fc07 	bl	23f9a80 <__aeabi_dsub>
 23ff272:	4622      	mov	r2, r4
 23ff274:	462b      	mov	r3, r5
 23ff276:	f7fa fc03 	bl	23f9a80 <__aeabi_dsub>
 23ff27a:	4602      	mov	r2, r0
 23ff27c:	460b      	mov	r3, r1
 23ff27e:	e9d6 0100 	ldrd	r0, r1, [r6]
 23ff282:	f7fa fbfd 	bl	23f9a80 <__aeabi_dsub>
 23ff286:	f1ba 0f00 	cmp.w	sl, #0
 23ff28a:	ec41 0b10 	vmov	d0, r0, r1
 23ff28e:	f6bf af56 	bge.w	23ff13e <atan+0x2e>
 23ff292:	ee10 1a90 	vmov	r1, s1
 23ff296:	4602      	mov	r2, r0
 23ff298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23ff29c:	ec43 2b10 	vmov	d0, r2, r3
 23ff2a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff2a4:	a360      	add	r3, pc, #384	; (adr r3, 23ff428 <atan+0x318>)
 23ff2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2aa:	ee10 0a10 	vmov	r0, s0
 23ff2ae:	4629      	mov	r1, r5
 23ff2b0:	f7fa fbe8 	bl	23f9a84 <__adddf3>
 23ff2b4:	2200      	movs	r2, #0
 23ff2b6:	4b65      	ldr	r3, [pc, #404]	; (23ff44c <atan+0x33c>)
 23ff2b8:	f7fb f82a 	bl	23fa310 <__aeabi_dcmpgt>
 23ff2bc:	2800      	cmp	r0, #0
 23ff2be:	f43f af51 	beq.w	23ff164 <atan+0x54>
 23ff2c2:	ec45 4b10 	vmov	d0, r4, r5
 23ff2c6:	e73a      	b.n	23ff13e <atan+0x2e>
 23ff2c8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23ff430 <atan+0x320>
 23ff2cc:	e737      	b.n	23ff13e <atan+0x2e>
 23ff2ce:	f000 f8c7 	bl	23ff460 <fabs>
 23ff2d2:	4b5f      	ldr	r3, [pc, #380]	; (23ff450 <atan+0x340>)
 23ff2d4:	429e      	cmp	r6, r3
 23ff2d6:	ec55 4b10 	vmov	r4, r5, d0
 23ff2da:	dc2d      	bgt.n	23ff338 <atan+0x228>
 23ff2dc:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23ff2e0:	429e      	cmp	r6, r3
 23ff2e2:	dd58      	ble.n	23ff396 <atan+0x286>
 23ff2e4:	2200      	movs	r2, #0
 23ff2e6:	4b59      	ldr	r3, [pc, #356]	; (23ff44c <atan+0x33c>)
 23ff2e8:	ee10 0a10 	vmov	r0, s0
 23ff2ec:	4629      	mov	r1, r5
 23ff2ee:	f7fa fbc7 	bl	23f9a80 <__aeabi_dsub>
 23ff2f2:	f04f 0b01 	mov.w	fp, #1
 23ff2f6:	4606      	mov	r6, r0
 23ff2f8:	460f      	mov	r7, r1
 23ff2fa:	4620      	mov	r0, r4
 23ff2fc:	4629      	mov	r1, r5
 23ff2fe:	2200      	movs	r2, #0
 23ff300:	4b52      	ldr	r3, [pc, #328]	; (23ff44c <atan+0x33c>)
 23ff302:	f7fa fbbf 	bl	23f9a84 <__adddf3>
 23ff306:	4602      	mov	r2, r0
 23ff308:	460b      	mov	r3, r1
 23ff30a:	4630      	mov	r0, r6
 23ff30c:	4639      	mov	r1, r7
 23ff30e:	f7fa fe99 	bl	23fa044 <__aeabi_ddiv>
 23ff312:	4604      	mov	r4, r0
 23ff314:	460d      	mov	r5, r1
 23ff316:	e727      	b.n	23ff168 <atan+0x58>
 23ff318:	f7fa fbb4 	bl	23f9a84 <__adddf3>
 23ff31c:	4622      	mov	r2, r4
 23ff31e:	462b      	mov	r3, r5
 23ff320:	f7fa fd66 	bl	23f9df0 <__aeabi_dmul>
 23ff324:	4602      	mov	r2, r0
 23ff326:	460b      	mov	r3, r1
 23ff328:	4620      	mov	r0, r4
 23ff32a:	4629      	mov	r1, r5
 23ff32c:	f7fa fba8 	bl	23f9a80 <__aeabi_dsub>
 23ff330:	ec41 0b10 	vmov	d0, r0, r1
 23ff334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff338:	4b46      	ldr	r3, [pc, #280]	; (23ff454 <atan+0x344>)
 23ff33a:	429e      	cmp	r6, r3
 23ff33c:	da1f      	bge.n	23ff37e <atan+0x26e>
 23ff33e:	ee10 0a10 	vmov	r0, s0
 23ff342:	2200      	movs	r2, #0
 23ff344:	4b44      	ldr	r3, [pc, #272]	; (23ff458 <atan+0x348>)
 23ff346:	4629      	mov	r1, r5
 23ff348:	f7fa fb9a 	bl	23f9a80 <__aeabi_dsub>
 23ff34c:	4602      	mov	r2, r0
 23ff34e:	460b      	mov	r3, r1
 23ff350:	4620      	mov	r0, r4
 23ff352:	4629      	mov	r1, r5
 23ff354:	4614      	mov	r4, r2
 23ff356:	461d      	mov	r5, r3
 23ff358:	2200      	movs	r2, #0
 23ff35a:	4b3f      	ldr	r3, [pc, #252]	; (23ff458 <atan+0x348>)
 23ff35c:	f04f 0b02 	mov.w	fp, #2
 23ff360:	f7fa fd46 	bl	23f9df0 <__aeabi_dmul>
 23ff364:	2200      	movs	r2, #0
 23ff366:	4b39      	ldr	r3, [pc, #228]	; (23ff44c <atan+0x33c>)
 23ff368:	f7fa fb8c 	bl	23f9a84 <__adddf3>
 23ff36c:	4602      	mov	r2, r0
 23ff36e:	460b      	mov	r3, r1
 23ff370:	4620      	mov	r0, r4
 23ff372:	4629      	mov	r1, r5
 23ff374:	f7fa fe66 	bl	23fa044 <__aeabi_ddiv>
 23ff378:	4604      	mov	r4, r0
 23ff37a:	460d      	mov	r5, r1
 23ff37c:	e6f4      	b.n	23ff168 <atan+0x58>
 23ff37e:	462b      	mov	r3, r5
 23ff380:	2000      	movs	r0, #0
 23ff382:	4936      	ldr	r1, [pc, #216]	; (23ff45c <atan+0x34c>)
 23ff384:	ee10 2a10 	vmov	r2, s0
 23ff388:	f7fa fe5c 	bl	23fa044 <__aeabi_ddiv>
 23ff38c:	f04f 0b03 	mov.w	fp, #3
 23ff390:	4604      	mov	r4, r0
 23ff392:	460d      	mov	r5, r1
 23ff394:	e6e8      	b.n	23ff168 <atan+0x58>
 23ff396:	ee10 2a10 	vmov	r2, s0
 23ff39a:	462b      	mov	r3, r5
 23ff39c:	ee10 0a10 	vmov	r0, s0
 23ff3a0:	4629      	mov	r1, r5
 23ff3a2:	f7fa fb6f 	bl	23f9a84 <__adddf3>
 23ff3a6:	2200      	movs	r2, #0
 23ff3a8:	4b28      	ldr	r3, [pc, #160]	; (23ff44c <atan+0x33c>)
 23ff3aa:	f04f 0b00 	mov.w	fp, #0
 23ff3ae:	f7fa fb67 	bl	23f9a80 <__aeabi_dsub>
 23ff3b2:	2200      	movs	r2, #0
 23ff3b4:	4606      	mov	r6, r0
 23ff3b6:	460f      	mov	r7, r1
 23ff3b8:	4620      	mov	r0, r4
 23ff3ba:	4629      	mov	r1, r5
 23ff3bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23ff3c0:	e79f      	b.n	23ff302 <atan+0x1f2>
 23ff3c2:	bf00      	nop
 23ff3c4:	f3af 8000 	nop.w
 23ff3c8:	54442d18 	.word	0x54442d18
 23ff3cc:	3ff921fb 	.word	0x3ff921fb
 23ff3d0:	e322da11 	.word	0xe322da11
 23ff3d4:	3f90ad3a 	.word	0x3f90ad3a
 23ff3d8:	24760deb 	.word	0x24760deb
 23ff3dc:	3fa97b4b 	.word	0x3fa97b4b
 23ff3e0:	a0d03d51 	.word	0xa0d03d51
 23ff3e4:	3fb10d66 	.word	0x3fb10d66
 23ff3e8:	c54c206e 	.word	0xc54c206e
 23ff3ec:	3fb745cd 	.word	0x3fb745cd
 23ff3f0:	920083ff 	.word	0x920083ff
 23ff3f4:	3fc24924 	.word	0x3fc24924
 23ff3f8:	5555550d 	.word	0x5555550d
 23ff3fc:	3fd55555 	.word	0x3fd55555
 23ff400:	2c6a6c2f 	.word	0x2c6a6c2f
 23ff404:	bfa2b444 	.word	0xbfa2b444
 23ff408:	52defd9a 	.word	0x52defd9a
 23ff40c:	3fadde2d 	.word	0x3fadde2d
 23ff410:	af749a6d 	.word	0xaf749a6d
 23ff414:	3fb3b0f2 	.word	0x3fb3b0f2
 23ff418:	fe231671 	.word	0xfe231671
 23ff41c:	3fbc71c6 	.word	0x3fbc71c6
 23ff420:	9998ebc4 	.word	0x9998ebc4
 23ff424:	3fc99999 	.word	0x3fc99999
 23ff428:	8800759c 	.word	0x8800759c
 23ff42c:	7e37e43c 	.word	0x7e37e43c
 23ff430:	54442d18 	.word	0x54442d18
 23ff434:	bff921fb 	.word	0xbff921fb
 23ff438:	440fffff 	.word	0x440fffff
 23ff43c:	7ff00000 	.word	0x7ff00000
 23ff440:	3fdbffff 	.word	0x3fdbffff
 23ff444:	023ffe08 	.word	0x023ffe08
 23ff448:	023ffe28 	.word	0x023ffe28
 23ff44c:	3ff00000 	.word	0x3ff00000
 23ff450:	3ff2ffff 	.word	0x3ff2ffff
 23ff454:	40038000 	.word	0x40038000
 23ff458:	3ff80000 	.word	0x3ff80000
 23ff45c:	bff00000 	.word	0xbff00000

023ff460 <fabs>:
 23ff460:	ec51 0b10 	vmov	r0, r1, d0
 23ff464:	ee10 2a10 	vmov	r2, s0
 23ff468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23ff46c:	ec43 2b10 	vmov	d0, r2, r3
 23ff470:	4770      	bx	lr
 23ff472:	bf00      	nop

023ff474 <finite>:
 23ff474:	b082      	sub	sp, #8
 23ff476:	4805      	ldr	r0, [pc, #20]	; (23ff48c <finite+0x18>)
 23ff478:	ed8d 0b00 	vstr	d0, [sp]
 23ff47c:	9b01      	ldr	r3, [sp, #4]
 23ff47e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23ff482:	4418      	add	r0, r3
 23ff484:	0fc0      	lsrs	r0, r0, #31
 23ff486:	b002      	add	sp, #8
 23ff488:	4770      	bx	lr
 23ff48a:	bf00      	nop
 23ff48c:	80100000 	.word	0x80100000

023ff490 <nan>:
 23ff490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23ff498 <nan+0x8>
 23ff494:	4770      	bx	lr
 23ff496:	bf00      	nop
 23ff498:	00000000 	.word	0x00000000
 23ff49c:	7ff80000 	.word	0x7ff80000

023ff4a0 <rint>:
 23ff4a0:	ec53 2b10 	vmov	r2, r3, d0
 23ff4a4:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23ff4a8:	ee10 0a10 	vmov	r0, s0
 23ff4ac:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23ff4b0:	2913      	cmp	r1, #19
 23ff4b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff4b4:	461c      	mov	r4, r3
 23ff4b6:	b083      	sub	sp, #12
 23ff4b8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23ff4bc:	dc3a      	bgt.n	23ff534 <rint+0x94>
 23ff4be:	2900      	cmp	r1, #0
 23ff4c0:	db30      	blt.n	23ff524 <rint+0x84>
 23ff4c2:	4d42      	ldr	r5, [pc, #264]	; (23ff5cc <rint+0x12c>)
 23ff4c4:	fa45 fc01 	asr.w	ip, r5, r1
 23ff4c8:	ea03 050c 	and.w	r5, r3, ip
 23ff4cc:	4315      	orrs	r5, r2
 23ff4ce:	d02d      	beq.n	23ff52c <rint+0x8c>
 23ff4d0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23ff4d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23ff4d8:	4318      	orrs	r0, r3
 23ff4da:	d00c      	beq.n	23ff4f6 <rint+0x56>
 23ff4dc:	ea24 0c0c 	bic.w	ip, r4, ip
 23ff4e0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23ff4e4:	2913      	cmp	r1, #19
 23ff4e6:	fa44 f101 	asr.w	r1, r4, r1
 23ff4ea:	bf0c      	ite	eq
 23ff4ec:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23ff4f0:	2000      	movne	r0, #0
 23ff4f2:	ea4c 0401 	orr.w	r4, ip, r1
 23ff4f6:	4936      	ldr	r1, [pc, #216]	; (23ff5d0 <rint+0x130>)
 23ff4f8:	4623      	mov	r3, r4
 23ff4fa:	4602      	mov	r2, r0
 23ff4fc:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23ff500:	e9de 4500 	ldrd	r4, r5, [lr]
 23ff504:	4620      	mov	r0, r4
 23ff506:	4629      	mov	r1, r5
 23ff508:	f7fa fabc 	bl	23f9a84 <__adddf3>
 23ff50c:	4622      	mov	r2, r4
 23ff50e:	462b      	mov	r3, r5
 23ff510:	e9cd 0100 	strd	r0, r1, [sp]
 23ff514:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff518:	f7fa fab2 	bl	23f9a80 <__aeabi_dsub>
 23ff51c:	ec41 0b10 	vmov	d0, r0, r1
 23ff520:	b003      	add	sp, #12
 23ff522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff524:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23ff528:	4311      	orrs	r1, r2
 23ff52a:	d124      	bne.n	23ff576 <rint+0xd6>
 23ff52c:	ec43 2b10 	vmov	d0, r2, r3
 23ff530:	b003      	add	sp, #12
 23ff532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff534:	2933      	cmp	r1, #51	; 0x33
 23ff536:	dd08      	ble.n	23ff54a <rint+0xaa>
 23ff538:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23ff53c:	d1f6      	bne.n	23ff52c <rint+0x8c>
 23ff53e:	4619      	mov	r1, r3
 23ff540:	f7fa faa0 	bl	23f9a84 <__adddf3>
 23ff544:	ec41 0b10 	vmov	d0, r0, r1
 23ff548:	e7f2      	b.n	23ff530 <rint+0x90>
 23ff54a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23ff54e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ff552:	fa21 f10c 	lsr.w	r1, r1, ip
 23ff556:	420a      	tst	r2, r1
 23ff558:	d0e8      	beq.n	23ff52c <rint+0x8c>
 23ff55a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23ff55e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23ff562:	d0c8      	beq.n	23ff4f6 <rint+0x56>
 23ff564:	ea20 0303 	bic.w	r3, r0, r3
 23ff568:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ff56c:	fa40 fc0c 	asr.w	ip, r0, ip
 23ff570:	ea43 000c 	orr.w	r0, r3, ip
 23ff574:	e7bf      	b.n	23ff4f6 <rint+0x56>
 23ff576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff57a:	4a16      	ldr	r2, [pc, #88]	; (23ff5d4 <rint+0x134>)
 23ff57c:	4318      	orrs	r0, r3
 23ff57e:	4022      	ands	r2, r4
 23ff580:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23ff584:	4243      	negs	r3, r0
 23ff586:	4303      	orrs	r3, r0
 23ff588:	0b1b      	lsrs	r3, r3, #12
 23ff58a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23ff58e:	ea43 0702 	orr.w	r7, r3, r2
 23ff592:	4b0f      	ldr	r3, [pc, #60]	; (23ff5d0 <rint+0x130>)
 23ff594:	ee10 2a10 	vmov	r2, s0
 23ff598:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23ff59c:	463b      	mov	r3, r7
 23ff59e:	e9de 6700 	ldrd	r6, r7, [lr]
 23ff5a2:	4630      	mov	r0, r6
 23ff5a4:	4639      	mov	r1, r7
 23ff5a6:	f7fa fa6d 	bl	23f9a84 <__adddf3>
 23ff5aa:	4632      	mov	r2, r6
 23ff5ac:	463b      	mov	r3, r7
 23ff5ae:	e9cd 0100 	strd	r0, r1, [sp]
 23ff5b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff5b6:	f7fa fa63 	bl	23f9a80 <__aeabi_dsub>
 23ff5ba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ff5be:	4602      	mov	r2, r0
 23ff5c0:	ea41 0304 	orr.w	r3, r1, r4
 23ff5c4:	ec43 2b10 	vmov	d0, r2, r3
 23ff5c8:	b003      	add	sp, #12
 23ff5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff5cc:	000fffff 	.word	0x000fffff
 23ff5d0:	023ffe48 	.word	0x023ffe48
 23ff5d4:	fffe0000 	.word	0xfffe0000

023ff5d8 <scalbn>:
 23ff5d8:	b538      	push	{r3, r4, r5, lr}
 23ff5da:	ec53 2b10 	vmov	r2, r3, d0
 23ff5de:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23ff5e2:	469c      	mov	ip, r3
 23ff5e4:	4604      	mov	r4, r0
 23ff5e6:	bb89      	cbnz	r1, 23ff64c <scalbn+0x74>
 23ff5e8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23ff5ec:	ee10 1a10 	vmov	r1, s0
 23ff5f0:	ea5c 0101 	orrs.w	r1, ip, r1
 23ff5f4:	d029      	beq.n	23ff64a <scalbn+0x72>
 23ff5f6:	4d3e      	ldr	r5, [pc, #248]	; (23ff6f0 <scalbn+0x118>)
 23ff5f8:	4619      	mov	r1, r3
 23ff5fa:	2200      	movs	r2, #0
 23ff5fc:	4b3d      	ldr	r3, [pc, #244]	; (23ff6f4 <scalbn+0x11c>)
 23ff5fe:	ee10 0a10 	vmov	r0, s0
 23ff602:	f7fa fbf5 	bl	23f9df0 <__aeabi_dmul>
 23ff606:	42ac      	cmp	r4, r5
 23ff608:	4602      	mov	r2, r0
 23ff60a:	460b      	mov	r3, r1
 23ff60c:	db16      	blt.n	23ff63c <scalbn+0x64>
 23ff60e:	468c      	mov	ip, r1
 23ff610:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23ff614:	3936      	subs	r1, #54	; 0x36
 23ff616:	4421      	add	r1, r4
 23ff618:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23ff61c:	4281      	cmp	r1, r0
 23ff61e:	dc21      	bgt.n	23ff664 <scalbn+0x8c>
 23ff620:	2900      	cmp	r1, #0
 23ff622:	dc47      	bgt.n	23ff6b4 <scalbn+0xdc>
 23ff624:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23ff628:	da34      	bge.n	23ff694 <scalbn+0xbc>
 23ff62a:	f24c 3150 	movw	r1, #50000	; 0xc350
 23ff62e:	428c      	cmp	r4, r1
 23ff630:	dc18      	bgt.n	23ff664 <scalbn+0x8c>
 23ff632:	2b00      	cmp	r3, #0
 23ff634:	a126      	add	r1, pc, #152	; (adr r1, 23ff6d0 <scalbn+0xf8>)
 23ff636:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff63a:	db43      	blt.n	23ff6c4 <scalbn+0xec>
 23ff63c:	a324      	add	r3, pc, #144	; (adr r3, 23ff6d0 <scalbn+0xf8>)
 23ff63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff642:	f7fa fbd5 	bl	23f9df0 <__aeabi_dmul>
 23ff646:	ec41 0b10 	vmov	d0, r0, r1
 23ff64a:	bd38      	pop	{r3, r4, r5, pc}
 23ff64c:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23ff650:	4571      	cmp	r1, lr
 23ff652:	d1e0      	bne.n	23ff616 <scalbn+0x3e>
 23ff654:	ee10 0a10 	vmov	r0, s0
 23ff658:	4619      	mov	r1, r3
 23ff65a:	f7fa fa13 	bl	23f9a84 <__adddf3>
 23ff65e:	ec41 0b10 	vmov	d0, r0, r1
 23ff662:	bd38      	pop	{r3, r4, r5, pc}
 23ff664:	2b00      	cmp	r3, #0
 23ff666:	a11c      	add	r1, pc, #112	; (adr r1, 23ff6d8 <scalbn+0x100>)
 23ff668:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff66c:	db07      	blt.n	23ff67e <scalbn+0xa6>
 23ff66e:	a31a      	add	r3, pc, #104	; (adr r3, 23ff6d8 <scalbn+0x100>)
 23ff670:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff674:	f7fa fbbc 	bl	23f9df0 <__aeabi_dmul>
 23ff678:	ec41 0b10 	vmov	d0, r0, r1
 23ff67c:	bd38      	pop	{r3, r4, r5, pc}
 23ff67e:	a118      	add	r1, pc, #96	; (adr r1, 23ff6e0 <scalbn+0x108>)
 23ff680:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff684:	a314      	add	r3, pc, #80	; (adr r3, 23ff6d8 <scalbn+0x100>)
 23ff686:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff68a:	f7fa fbb1 	bl	23f9df0 <__aeabi_dmul>
 23ff68e:	ec41 0b10 	vmov	d0, r0, r1
 23ff692:	e7f3      	b.n	23ff67c <scalbn+0xa4>
 23ff694:	4818      	ldr	r0, [pc, #96]	; (23ff6f8 <scalbn+0x120>)
 23ff696:	3136      	adds	r1, #54	; 0x36
 23ff698:	4614      	mov	r4, r2
 23ff69a:	4b18      	ldr	r3, [pc, #96]	; (23ff6fc <scalbn+0x124>)
 23ff69c:	ea0c 0000 	and.w	r0, ip, r0
 23ff6a0:	2200      	movs	r2, #0
 23ff6a2:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23ff6a6:	4620      	mov	r0, r4
 23ff6a8:	4629      	mov	r1, r5
 23ff6aa:	f7fa fba1 	bl	23f9df0 <__aeabi_dmul>
 23ff6ae:	ec41 0b10 	vmov	d0, r0, r1
 23ff6b2:	bd38      	pop	{r3, r4, r5, pc}
 23ff6b4:	4810      	ldr	r0, [pc, #64]	; (23ff6f8 <scalbn+0x120>)
 23ff6b6:	ea0c 0000 	and.w	r0, ip, r0
 23ff6ba:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23ff6be:	ec43 2b10 	vmov	d0, r2, r3
 23ff6c2:	bd38      	pop	{r3, r4, r5, pc}
 23ff6c4:	a108      	add	r1, pc, #32	; (adr r1, 23ff6e8 <scalbn+0x110>)
 23ff6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff6ca:	e7b7      	b.n	23ff63c <scalbn+0x64>
 23ff6cc:	f3af 8000 	nop.w
 23ff6d0:	c2f8f359 	.word	0xc2f8f359
 23ff6d4:	01a56e1f 	.word	0x01a56e1f
 23ff6d8:	8800759c 	.word	0x8800759c
 23ff6dc:	7e37e43c 	.word	0x7e37e43c
 23ff6e0:	8800759c 	.word	0x8800759c
 23ff6e4:	fe37e43c 	.word	0xfe37e43c
 23ff6e8:	c2f8f359 	.word	0xc2f8f359
 23ff6ec:	81a56e1f 	.word	0x81a56e1f
 23ff6f0:	ffff3cb0 	.word	0xffff3cb0
 23ff6f4:	43500000 	.word	0x43500000
 23ff6f8:	800fffff 	.word	0x800fffff
 23ff6fc:	3c900000 	.word	0x3c900000

023ff700 <atexit>:
 23ff700:	2300      	movs	r3, #0
 23ff702:	4601      	mov	r1, r0
 23ff704:	461a      	mov	r2, r3
 23ff706:	4618      	mov	r0, r3
 23ff708:	f000 b958 	b.w	23ff9bc <__register_exitproc>

023ff70c <isprint>:
 23ff70c:	4b02      	ldr	r3, [pc, #8]	; (23ff718 <isprint+0xc>)
 23ff70e:	4418      	add	r0, r3
 23ff710:	7840      	ldrb	r0, [r0, #1]
 23ff712:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff716:	4770      	bx	lr
 23ff718:	023ffec8 	.word	0x023ffec8

023ff71c <memcpy>:
 23ff71c:	440a      	add	r2, r1
 23ff71e:	1e43      	subs	r3, r0, #1
 23ff720:	4291      	cmp	r1, r2
 23ff722:	d100      	bne.n	23ff726 <memcpy+0xa>
 23ff724:	4770      	bx	lr
 23ff726:	b510      	push	{r4, lr}
 23ff728:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff72c:	4291      	cmp	r1, r2
 23ff72e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff732:	d1f9      	bne.n	23ff728 <memcpy+0xc>
 23ff734:	bd10      	pop	{r4, pc}

023ff736 <memmove>:
 23ff736:	4288      	cmp	r0, r1
 23ff738:	b510      	push	{r4, lr}
 23ff73a:	eb01 0402 	add.w	r4, r1, r2
 23ff73e:	d902      	bls.n	23ff746 <memmove+0x10>
 23ff740:	4284      	cmp	r4, r0
 23ff742:	4623      	mov	r3, r4
 23ff744:	d807      	bhi.n	23ff756 <memmove+0x20>
 23ff746:	1e43      	subs	r3, r0, #1
 23ff748:	42a1      	cmp	r1, r4
 23ff74a:	d008      	beq.n	23ff75e <memmove+0x28>
 23ff74c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff750:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff754:	e7f8      	b.n	23ff748 <memmove+0x12>
 23ff756:	4402      	add	r2, r0
 23ff758:	4601      	mov	r1, r0
 23ff75a:	428a      	cmp	r2, r1
 23ff75c:	d100      	bne.n	23ff760 <memmove+0x2a>
 23ff75e:	bd10      	pop	{r4, pc}
 23ff760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff764:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff768:	e7f7      	b.n	23ff75a <memmove+0x24>

023ff76a <memset>:
 23ff76a:	4402      	add	r2, r0
 23ff76c:	4603      	mov	r3, r0
 23ff76e:	4293      	cmp	r3, r2
 23ff770:	d100      	bne.n	23ff774 <memset+0xa>
 23ff772:	4770      	bx	lr
 23ff774:	f803 1b01 	strb.w	r1, [r3], #1
 23ff778:	e7f9      	b.n	23ff76e <memset+0x4>
	...

023ff77c <srand>:
 23ff77c:	b538      	push	{r3, r4, r5, lr}
 23ff77e:	4b10      	ldr	r3, [pc, #64]	; (23ff7c0 <srand+0x44>)
 23ff780:	4604      	mov	r4, r0
 23ff782:	681d      	ldr	r5, [r3, #0]
 23ff784:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff786:	b9b3      	cbnz	r3, 23ff7b6 <srand+0x3a>
 23ff788:	2018      	movs	r0, #24
 23ff78a:	f7fc f821 	bl	23fb7d0 <malloc>
 23ff78e:	4602      	mov	r2, r0
 23ff790:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff792:	b920      	cbnz	r0, 23ff79e <srand+0x22>
 23ff794:	4b0b      	ldr	r3, [pc, #44]	; (23ff7c4 <srand+0x48>)
 23ff796:	2142      	movs	r1, #66	; 0x42
 23ff798:	480b      	ldr	r0, [pc, #44]	; (23ff7c8 <srand+0x4c>)
 23ff79a:	f7fc f87b 	bl	23fb894 <__assert_func>
 23ff79e:	490b      	ldr	r1, [pc, #44]	; (23ff7cc <srand+0x50>)
 23ff7a0:	4b0b      	ldr	r3, [pc, #44]	; (23ff7d0 <srand+0x54>)
 23ff7a2:	e9c0 1300 	strd	r1, r3, [r0]
 23ff7a6:	4b0b      	ldr	r3, [pc, #44]	; (23ff7d4 <srand+0x58>)
 23ff7a8:	2100      	movs	r1, #0
 23ff7aa:	6083      	str	r3, [r0, #8]
 23ff7ac:	230b      	movs	r3, #11
 23ff7ae:	8183      	strh	r3, [r0, #12]
 23ff7b0:	2001      	movs	r0, #1
 23ff7b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff7b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff7b8:	2200      	movs	r2, #0
 23ff7ba:	611c      	str	r4, [r3, #16]
 23ff7bc:	615a      	str	r2, [r3, #20]
 23ff7be:	bd38      	pop	{r3, r4, r5, pc}
 23ff7c0:	1007adb4 	.word	0x1007adb4
 23ff7c4:	023ffe58 	.word	0x023ffe58
 23ff7c8:	023ffe6f 	.word	0x023ffe6f
 23ff7cc:	abcd330e 	.word	0xabcd330e
 23ff7d0:	e66d1234 	.word	0xe66d1234
 23ff7d4:	0005deec 	.word	0x0005deec

023ff7d8 <strchr>:
 23ff7d8:	b2c9      	uxtb	r1, r1
 23ff7da:	4603      	mov	r3, r0
 23ff7dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff7e0:	b11a      	cbz	r2, 23ff7ea <strchr+0x12>
 23ff7e2:	428a      	cmp	r2, r1
 23ff7e4:	d1f9      	bne.n	23ff7da <strchr+0x2>
 23ff7e6:	4618      	mov	r0, r3
 23ff7e8:	4770      	bx	lr
 23ff7ea:	2900      	cmp	r1, #0
 23ff7ec:	bf18      	it	ne
 23ff7ee:	2300      	movne	r3, #0
 23ff7f0:	e7f9      	b.n	23ff7e6 <strchr+0xe>

023ff7f2 <strchrnul>:
 23ff7f2:	b510      	push	{r4, lr}
 23ff7f4:	4604      	mov	r4, r0
 23ff7f6:	f7ff ffef 	bl	23ff7d8 <strchr>
 23ff7fa:	b918      	cbnz	r0, 23ff804 <strchrnul+0x12>
 23ff7fc:	4620      	mov	r0, r4
 23ff7fe:	f7fa ffcf 	bl	23fa7a0 <strlen>
 23ff802:	4420      	add	r0, r4
 23ff804:	bd10      	pop	{r4, pc}

023ff806 <strcpy>:
 23ff806:	4603      	mov	r3, r0
 23ff808:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff80c:	f803 2b01 	strb.w	r2, [r3], #1
 23ff810:	2a00      	cmp	r2, #0
 23ff812:	d1f9      	bne.n	23ff808 <strcpy+0x2>
 23ff814:	4770      	bx	lr
	...

023ff818 <strdup>:
 23ff818:	4b02      	ldr	r3, [pc, #8]	; (23ff824 <strdup+0xc>)
 23ff81a:	4601      	mov	r1, r0
 23ff81c:	6818      	ldr	r0, [r3, #0]
 23ff81e:	f000 b803 	b.w	23ff828 <_strdup_r>
 23ff822:	bf00      	nop
 23ff824:	1007adb4 	.word	0x1007adb4

023ff828 <_strdup_r>:
 23ff828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff82a:	4604      	mov	r4, r0
 23ff82c:	4608      	mov	r0, r1
 23ff82e:	460d      	mov	r5, r1
 23ff830:	f7fa ffb6 	bl	23fa7a0 <strlen>
 23ff834:	1c42      	adds	r2, r0, #1
 23ff836:	4620      	mov	r0, r4
 23ff838:	4611      	mov	r1, r2
 23ff83a:	9201      	str	r2, [sp, #4]
 23ff83c:	f7fc f80e 	bl	23fb85c <_malloc_r>
 23ff840:	4604      	mov	r4, r0
 23ff842:	b118      	cbz	r0, 23ff84c <_strdup_r+0x24>
 23ff844:	9a01      	ldr	r2, [sp, #4]
 23ff846:	4629      	mov	r1, r5
 23ff848:	f7ff ff68 	bl	23ff71c <memcpy>
 23ff84c:	4620      	mov	r0, r4
 23ff84e:	b003      	add	sp, #12
 23ff850:	bd30      	pop	{r4, r5, pc}

023ff852 <strncmp>:
 23ff852:	b510      	push	{r4, lr}
 23ff854:	b17a      	cbz	r2, 23ff876 <strncmp+0x24>
 23ff856:	4603      	mov	r3, r0
 23ff858:	3901      	subs	r1, #1
 23ff85a:	1884      	adds	r4, r0, r2
 23ff85c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff860:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff864:	4290      	cmp	r0, r2
 23ff866:	d101      	bne.n	23ff86c <strncmp+0x1a>
 23ff868:	42a3      	cmp	r3, r4
 23ff86a:	d101      	bne.n	23ff870 <strncmp+0x1e>
 23ff86c:	1a80      	subs	r0, r0, r2
 23ff86e:	bd10      	pop	{r4, pc}
 23ff870:	2800      	cmp	r0, #0
 23ff872:	d1f3      	bne.n	23ff85c <strncmp+0xa>
 23ff874:	e7fa      	b.n	23ff86c <strncmp+0x1a>
 23ff876:	4610      	mov	r0, r2
 23ff878:	e7f9      	b.n	23ff86e <strncmp+0x1c>

023ff87a <strrchr>:
 23ff87a:	b538      	push	{r3, r4, r5, lr}
 23ff87c:	4603      	mov	r3, r0
 23ff87e:	460c      	mov	r4, r1
 23ff880:	b969      	cbnz	r1, 23ff89e <strrchr+0x24>
 23ff882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff886:	f7ff bfa7 	b.w	23ff7d8 <strchr>
 23ff88a:	1c43      	adds	r3, r0, #1
 23ff88c:	4605      	mov	r5, r0
 23ff88e:	4621      	mov	r1, r4
 23ff890:	4618      	mov	r0, r3
 23ff892:	f7ff ffa1 	bl	23ff7d8 <strchr>
 23ff896:	2800      	cmp	r0, #0
 23ff898:	d1f7      	bne.n	23ff88a <strrchr+0x10>
 23ff89a:	4628      	mov	r0, r5
 23ff89c:	bd38      	pop	{r3, r4, r5, pc}
 23ff89e:	2500      	movs	r5, #0
 23ff8a0:	e7f5      	b.n	23ff88e <strrchr+0x14>
	...

023ff8a4 <_strtol_l.constprop.0>:
 23ff8a4:	2b01      	cmp	r3, #1
 23ff8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff8aa:	d001      	beq.n	23ff8b0 <_strtol_l.constprop.0+0xc>
 23ff8ac:	2b24      	cmp	r3, #36	; 0x24
 23ff8ae:	d906      	bls.n	23ff8be <_strtol_l.constprop.0+0x1a>
 23ff8b0:	f7fb ffe2 	bl	23fb878 <__errno>
 23ff8b4:	2316      	movs	r3, #22
 23ff8b6:	6003      	str	r3, [r0, #0]
 23ff8b8:	2000      	movs	r0, #0
 23ff8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff8be:	460d      	mov	r5, r1
 23ff8c0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff9a4 <_strtol_l.constprop.0+0x100>
 23ff8c4:	462e      	mov	r6, r5
 23ff8c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff8ca:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff8ce:	f017 0708 	ands.w	r7, r7, #8
 23ff8d2:	d1f7      	bne.n	23ff8c4 <_strtol_l.constprop.0+0x20>
 23ff8d4:	2c2d      	cmp	r4, #45	; 0x2d
 23ff8d6:	d132      	bne.n	23ff93e <_strtol_l.constprop.0+0x9a>
 23ff8d8:	782c      	ldrb	r4, [r5, #0]
 23ff8da:	2701      	movs	r7, #1
 23ff8dc:	1cb5      	adds	r5, r6, #2
 23ff8de:	2b00      	cmp	r3, #0
 23ff8e0:	d05b      	beq.n	23ff99a <_strtol_l.constprop.0+0xf6>
 23ff8e2:	2b10      	cmp	r3, #16
 23ff8e4:	d109      	bne.n	23ff8fa <_strtol_l.constprop.0+0x56>
 23ff8e6:	2c30      	cmp	r4, #48	; 0x30
 23ff8e8:	d107      	bne.n	23ff8fa <_strtol_l.constprop.0+0x56>
 23ff8ea:	782c      	ldrb	r4, [r5, #0]
 23ff8ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff8f0:	2c58      	cmp	r4, #88	; 0x58
 23ff8f2:	d14d      	bne.n	23ff990 <_strtol_l.constprop.0+0xec>
 23ff8f4:	786c      	ldrb	r4, [r5, #1]
 23ff8f6:	2310      	movs	r3, #16
 23ff8f8:	3502      	adds	r5, #2
 23ff8fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff8fe:	f04f 0c00 	mov.w	ip, #0
 23ff902:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff906:	4666      	mov	r6, ip
 23ff908:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff90c:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff910:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff914:	f1be 0f09 	cmp.w	lr, #9
 23ff918:	d816      	bhi.n	23ff948 <_strtol_l.constprop.0+0xa4>
 23ff91a:	4674      	mov	r4, lr
 23ff91c:	42a3      	cmp	r3, r4
 23ff91e:	dd24      	ble.n	23ff96a <_strtol_l.constprop.0+0xc6>
 23ff920:	f1bc 0f00 	cmp.w	ip, #0
 23ff924:	db1e      	blt.n	23ff964 <_strtol_l.constprop.0+0xc0>
 23ff926:	45b1      	cmp	r9, r6
 23ff928:	d31c      	bcc.n	23ff964 <_strtol_l.constprop.0+0xc0>
 23ff92a:	d101      	bne.n	23ff930 <_strtol_l.constprop.0+0x8c>
 23ff92c:	45a2      	cmp	sl, r4
 23ff92e:	db19      	blt.n	23ff964 <_strtol_l.constprop.0+0xc0>
 23ff930:	fb06 4603 	mla	r6, r6, r3, r4
 23ff934:	f04f 0c01 	mov.w	ip, #1
 23ff938:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff93c:	e7e8      	b.n	23ff910 <_strtol_l.constprop.0+0x6c>
 23ff93e:	2c2b      	cmp	r4, #43	; 0x2b
 23ff940:	bf04      	itt	eq
 23ff942:	782c      	ldrbeq	r4, [r5, #0]
 23ff944:	1cb5      	addeq	r5, r6, #2
 23ff946:	e7ca      	b.n	23ff8de <_strtol_l.constprop.0+0x3a>
 23ff948:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff94c:	f1be 0f19 	cmp.w	lr, #25
 23ff950:	d801      	bhi.n	23ff956 <_strtol_l.constprop.0+0xb2>
 23ff952:	3c37      	subs	r4, #55	; 0x37
 23ff954:	e7e2      	b.n	23ff91c <_strtol_l.constprop.0+0x78>
 23ff956:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff95a:	f1be 0f19 	cmp.w	lr, #25
 23ff95e:	d804      	bhi.n	23ff96a <_strtol_l.constprop.0+0xc6>
 23ff960:	3c57      	subs	r4, #87	; 0x57
 23ff962:	e7db      	b.n	23ff91c <_strtol_l.constprop.0+0x78>
 23ff964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff968:	e7e6      	b.n	23ff938 <_strtol_l.constprop.0+0x94>
 23ff96a:	f1bc 0f00 	cmp.w	ip, #0
 23ff96e:	da05      	bge.n	23ff97c <_strtol_l.constprop.0+0xd8>
 23ff970:	2322      	movs	r3, #34	; 0x22
 23ff972:	4646      	mov	r6, r8
 23ff974:	6003      	str	r3, [r0, #0]
 23ff976:	b942      	cbnz	r2, 23ff98a <_strtol_l.constprop.0+0xe6>
 23ff978:	4630      	mov	r0, r6
 23ff97a:	e79e      	b.n	23ff8ba <_strtol_l.constprop.0+0x16>
 23ff97c:	b107      	cbz	r7, 23ff980 <_strtol_l.constprop.0+0xdc>
 23ff97e:	4276      	negs	r6, r6
 23ff980:	2a00      	cmp	r2, #0
 23ff982:	d0f9      	beq.n	23ff978 <_strtol_l.constprop.0+0xd4>
 23ff984:	f1bc 0f00 	cmp.w	ip, #0
 23ff988:	d000      	beq.n	23ff98c <_strtol_l.constprop.0+0xe8>
 23ff98a:	1e69      	subs	r1, r5, #1
 23ff98c:	6011      	str	r1, [r2, #0]
 23ff98e:	e7f3      	b.n	23ff978 <_strtol_l.constprop.0+0xd4>
 23ff990:	2430      	movs	r4, #48	; 0x30
 23ff992:	2b00      	cmp	r3, #0
 23ff994:	d1b1      	bne.n	23ff8fa <_strtol_l.constprop.0+0x56>
 23ff996:	2308      	movs	r3, #8
 23ff998:	e7af      	b.n	23ff8fa <_strtol_l.constprop.0+0x56>
 23ff99a:	2c30      	cmp	r4, #48	; 0x30
 23ff99c:	d0a5      	beq.n	23ff8ea <_strtol_l.constprop.0+0x46>
 23ff99e:	230a      	movs	r3, #10
 23ff9a0:	e7ab      	b.n	23ff8fa <_strtol_l.constprop.0+0x56>
 23ff9a2:	bf00      	nop
 23ff9a4:	023ffec9 	.word	0x023ffec9

023ff9a8 <strtol>:
 23ff9a8:	4613      	mov	r3, r2
 23ff9aa:	460a      	mov	r2, r1
 23ff9ac:	4601      	mov	r1, r0
 23ff9ae:	4802      	ldr	r0, [pc, #8]	; (23ff9b8 <strtol+0x10>)
 23ff9b0:	6800      	ldr	r0, [r0, #0]
 23ff9b2:	f7ff bf77 	b.w	23ff8a4 <_strtol_l.constprop.0>
 23ff9b6:	bf00      	nop
 23ff9b8:	1007adb4 	.word	0x1007adb4

023ff9bc <__register_exitproc>:
 23ff9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff9c0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffa80 <__register_exitproc+0xc4>
 23ff9c4:	4606      	mov	r6, r0
 23ff9c6:	461f      	mov	r7, r3
 23ff9c8:	460d      	mov	r5, r1
 23ff9ca:	f8d8 0000 	ldr.w	r0, [r8]
 23ff9ce:	4691      	mov	r9, r2
 23ff9d0:	f000 f858 	bl	23ffa84 <__retarget_lock_acquire_recursive>
 23ff9d4:	4b26      	ldr	r3, [pc, #152]	; (23ffa70 <__register_exitproc+0xb4>)
 23ff9d6:	681c      	ldr	r4, [r3, #0]
 23ff9d8:	b934      	cbnz	r4, 23ff9e8 <__register_exitproc+0x2c>
 23ff9da:	4c26      	ldr	r4, [pc, #152]	; (23ffa74 <__register_exitproc+0xb8>)
 23ff9dc:	601c      	str	r4, [r3, #0]
 23ff9de:	4b26      	ldr	r3, [pc, #152]	; (23ffa78 <__register_exitproc+0xbc>)
 23ff9e0:	b113      	cbz	r3, 23ff9e8 <__register_exitproc+0x2c>
 23ff9e2:	681b      	ldr	r3, [r3, #0]
 23ff9e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff9e8:	6863      	ldr	r3, [r4, #4]
 23ff9ea:	2b1f      	cmp	r3, #31
 23ff9ec:	dd07      	ble.n	23ff9fe <__register_exitproc+0x42>
 23ff9ee:	f8d8 0000 	ldr.w	r0, [r8]
 23ff9f2:	f000 f849 	bl	23ffa88 <__retarget_lock_release_recursive>
 23ff9f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff9fe:	b35e      	cbz	r6, 23ffa58 <__register_exitproc+0x9c>
 23ffa00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffa04:	b988      	cbnz	r0, 23ffa2a <__register_exitproc+0x6e>
 23ffa06:	4b1d      	ldr	r3, [pc, #116]	; (23ffa7c <__register_exitproc+0xc0>)
 23ffa08:	b923      	cbnz	r3, 23ffa14 <__register_exitproc+0x58>
 23ffa0a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa0e:	f000 f83a 	bl	23ffa86 <__retarget_lock_release>
 23ffa12:	e7f0      	b.n	23ff9f6 <__register_exitproc+0x3a>
 23ffa14:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffa18:	f7fb feda 	bl	23fb7d0 <malloc>
 23ffa1c:	2800      	cmp	r0, #0
 23ffa1e:	d0f4      	beq.n	23ffa0a <__register_exitproc+0x4e>
 23ffa20:	2300      	movs	r3, #0
 23ffa22:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffa26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffa2a:	6863      	ldr	r3, [r4, #4]
 23ffa2c:	2201      	movs	r2, #1
 23ffa2e:	2e02      	cmp	r6, #2
 23ffa30:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffa34:	fa02 f203 	lsl.w	r2, r2, r3
 23ffa38:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffa3c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffa40:	ea43 0302 	orr.w	r3, r3, r2
 23ffa44:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffa48:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffa4c:	bf02      	ittt	eq
 23ffa4e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffa52:	4313      	orreq	r3, r2
 23ffa54:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffa58:	6863      	ldr	r3, [r4, #4]
 23ffa5a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa5e:	1c5a      	adds	r2, r3, #1
 23ffa60:	3302      	adds	r3, #2
 23ffa62:	6062      	str	r2, [r4, #4]
 23ffa64:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffa68:	f000 f80e 	bl	23ffa88 <__retarget_lock_release_recursive>
 23ffa6c:	2000      	movs	r0, #0
 23ffa6e:	e7c4      	b.n	23ff9fa <__register_exitproc+0x3e>
 23ffa70:	1007afe0 	.word	0x1007afe0
 23ffa74:	1007af54 	.word	0x1007af54
 23ffa78:	00000000 	.word	0x00000000
 23ffa7c:	023fb7d1 	.word	0x023fb7d1
 23ffa80:	1007ae18 	.word	0x1007ae18

023ffa84 <__retarget_lock_acquire_recursive>:
 23ffa84:	4770      	bx	lr

023ffa86 <__retarget_lock_release>:
 23ffa86:	4770      	bx	lr

023ffa88 <__retarget_lock_release_recursive>:
 23ffa88:	4770      	bx	lr
	...

023ffa8c <dynalib_user>:
 23ffa8c:	a7b1 023f a7d9 023f a7dd 023f 0000 0000     ..?...?...?.....
 23ffa9c:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffaac:	7574 6c61 5300 7265 6169 206c 6f63 6e6e     tual.Serial conn
 23ffabc:	6365 6574 2064 726f 7420 6d69 6465 6f20     ected or timed o
 23ffacc:	7475 0021 202c 5000 6275 696c 6873 6620     ut!., .Publish f
 23ffadc:	6961 656c 2164 5920 756f 6d20 6769 7468     ailed! You might
 23ffaec:	6e20 746f 6220 2065 6f63 6e6e 6365 6574      not be connecte
 23ffafc:	2064 6f74 5720 4669 2069 726f 7420 6568     d to WiFi or the
 23ffb0c:	5020 7261 6974 6c63 2065 6c43 756f 2e64      Particle Cloud.
 23ffb1c:	0000 0000                                   ....

023ffb20 <_ZTVN5spark10LogHandlerE>:
	...
 23ffb30:	a7f9 023f a821 023f                         ..?.!.?.

023ffb38 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffb40:	a825 023f a859 023f d0b9 023f d261 023f     %.?.Y.?...?.a.?.

023ffb50 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffb58:	b9b9 023f b9bf 023f b9fd 023f b9cd 023f     ..?...?...?...?.
 23ffb68:	b9bb 023f                                   ..?.

023ffb6c <_ZTVN5spark13EthernetClassE>:
	...
 23ffb74:	bf43 023f bf39 023f bf2f 023f bf25 023f     C.?.9.?./.?.%.?.
 23ffb84:	bf19 023f bf0d 023f d44d 023f d455 023f     ..?...?.M.?.U.?.
 23ffb94:	bf01 023f bef9 023f beef 023f bee5 023f     ..?...?...?...?.
 23ffba4:	d485 023f                                   ..?.

023ffba8 <_ZTV7TwoWire>:
	...
 23ffbb0:	bf61 023f bfab 023f bf83 023f bf63 023f     a.?...?...?.c.?.
 23ffbc0:	bf8b 023f bf93 023f bf9b 023f bfa3 023f     ..?...?...?...?.

023ffbd0 <_ZTV9IPAddress>:
	...
 23ffbd8:	c005 023f bff5 023f bff7 023f 6425 2500     ..?...?...?.%d.%
 23ffbe8:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 23ffbf8:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
 23ffc08:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 23ffc18:	6100 7070 2500 3130 7530 0020 205d 2800     .app.%010u .] .(
 23ffc28:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 23ffc38:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 23ffc48:	006d 0066 6e6c 6600 006e 0074 6f63 6564     m.f.ln.fn.t.code
 23ffc58:	6400 7465 6961 006c                         .detail.

023ffc60 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc68:	c4b1 023f c4d7 023f c495 023f c113 023f     ..?...?...?...?.

023ffc78 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc80:	c965 023f c97d 023f d0b9 023f d261 023f     e.?.}.?...?.a.?.

023ffc90 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc98:	c991 023f c9a5 023f d299 023f c49d 023f     ..?...?...?...?.

023ffca8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcb0:	c4af 023f c4e5 023f d01d 023f c49f 023f     ..?...?...?...?.

023ffcc0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcc8:	c4ad 023f c4f3 023f c8cd 023f c515 023f     ..?...?...?...?.

023ffcd8 <_ZTVN5spark12NetworkClassE>:
	...
 23ffce0:	d40d 023f d417 023f d421 023f d42b 023f     ..?...?.!.?.+.?.
 23ffcf0:	d435 023f d441 023f d44d 023f d455 023f     5.?.A.?.M.?.U.?.
 23ffd00:	d45d 023f d469 023f d471 023f d47b 023f     ].?.i.?.q.?.{.?.
 23ffd10:	d485 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffd20:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffd30 <_ZTV11USARTSerial>:
	...
 23ffd38:	d991 023f d9fd 023f d9d5 023f d571 023f     ..?...?...?.q.?.
 23ffd48:	d9a5 023f d9c1 023f d9b3 023f d9cf 023f     ..?...?...?...?.
 23ffd58:	d993 023f d997 023f                         ..?...?.

023ffd60 <_ZTV9USBSerial>:
	...
 23ffd68:	da55 023f dabd 023f da93 023f d571 023f     U.?...?...?.q.?.
 23ffd78:	da85 023f da57 023f da67 023f dab7 023f     ..?.W.?.g.?...?.
 23ffd88:	da77 023f da4f 023f                         w.?.O.?.

023ffd90 <_ZTVN5spark9WiFiClassE>:
	...
 23ffd98:	dbbf 023f dbb5 023f dbab 023f db61 023f     ..?...?...?.a.?.
 23ffda8:	db9f 023f db93 023f d44d 023f d455 023f     ..?...?.M.?.U.?.
 23ffdb8:	db87 023f db7f 023f db75 023f db6b 023f     ..?...?.u.?.k.?.
 23ffdc8:	d485 023f                                   ..?.

023ffdcc <_ZSt7nothrow>:
 23ffdcc:	0000 0000                                   ....

023ffdd0 <CSWTCH.8>:
 23ffdd0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
 23ffde0:	21d2 7f33 d97c c002                         .!3.|...

023ffde8 <CSWTCH.9>:
 23ffde8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
 23ffdf8:	2d18 5444 21fb c009 0000 0000 0000 0000     .-DT.!..........

023ffe08 <atanhi>:
 23ffe08:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 23ffe18:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

023ffe28 <atanlo>:
 23ffe28:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 23ffe38:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

023ffe48 <TWO52>:
 23ffe48:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
 23ffe58:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 23ffe68:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
 23ffe78:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
 23ffe88:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
 23ffe98:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
 23ffea8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
 23ffeb8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

023ffec8 <_ctype_>:
 23ffec8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffed8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffee8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffef8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff08:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff18:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff28:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff38:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fabd9 	.word	0x023fabd9
 23fffd0:	023fb9a9 	.word	0x023fb9a9
 23fffd4:	023fbf4d 	.word	0x023fbf4d
 23fffd8:	023fd0a9 	.word	0x023fd0a9
 23fffdc:	023fd55d 	.word	0x023fd55d
 23fffe0:	023fd605 	.word	0x023fd605
 23fffe4:	023fd959 	.word	0x023fd959
 23fffe8:	023fd97d 	.word	0x023fd97d
 23fffec:	023fdbc9 	.word	0x023fdbc9
