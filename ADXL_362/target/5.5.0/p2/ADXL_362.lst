
/Users/lingxiu/Documents/0-documents/2023-2024-MDes/TDF/ADXL_362/target/5.5.0/p2/ADXL_362.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fc1d0  085fc0a8  0000c1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00003e18  023fc1d8  085fc0b0  0000c1d8  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007adac  085ffec8  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c4  1007ae24  1007ae24  0002ae24  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085fff40  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000074  085fff44  085fff44  0001ff44  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001ff44  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0013e39d  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014425  00000000  00000000  0015e39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000401de  00000000  00000000  001727c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ff8  00000000  00000000  001b29a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000bbd8  00000000  00000000  001b5998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000249e2  00000000  00000000  001c1570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00040ffb  00000000  00000000  001e5f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d0a1f  00000000  00000000  00226f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008ab4  00000000  00000000  002f796c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	4813      	ldr	r0, [pc, #76]	; (85fc068 <module_user_pre_init+0x50>)
 85fc01a:	4914      	ldr	r1, [pc, #80]	; (85fc06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a13      	ldr	r2, [pc, #76]	; (85fc070 <module_user_pre_init+0x58>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b12      	ldr	r3, [pc, #72]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	4812      	ldr	r0, [pc, #72]	; (85fc078 <module_user_pre_init+0x60>)
 85fc030:	4a12      	ldr	r2, [pc, #72]	; (85fc07c <module_user_pre_init+0x64>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b12      	ldr	r3, [pc, #72]	; (85fc080 <module_user_pre_init+0x68>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fc03a:	4812      	ldr	r0, [pc, #72]	; (85fc084 <module_user_pre_init+0x6c>)
 85fc03c:	4912      	ldr	r1, [pc, #72]	; (85fc088 <module_user_pre_init+0x70>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a12      	ldr	r2, [pc, #72]	; (85fc08c <module_user_pre_init+0x74>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fc048:	4b0a      	ldr	r3, [pc, #40]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc04e:	4810      	ldr	r0, [pc, #64]	; (85fc090 <module_user_pre_init+0x78>)
 85fc050:	4910      	ldr	r1, [pc, #64]	; (85fc094 <module_user_pre_init+0x7c>)
 85fc052:	4288      	cmp	r0, r1
 85fc054:	d005      	beq.n	85fc062 <module_user_pre_init+0x4a>
 85fc056:	4a10      	ldr	r2, [pc, #64]	; (85fc098 <module_user_pre_init+0x80>)
 85fc058:	4282      	cmp	r2, r0
 85fc05a:	d002      	beq.n	85fc062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc05c:	4b05      	ldr	r3, [pc, #20]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc05e:	1a12      	subs	r2, r2, r0
 85fc060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc062:	4801      	ldr	r0, [pc, #4]	; (85fc068 <module_user_pre_init+0x50>)
 85fc064:	bd08      	pop	{r3, pc}
 85fc066:	bf00      	nop
 85fc068:	1007adac 	.word	0x1007adac
 85fc06c:	085ffec8 	.word	0x085ffec8
 85fc070:	1007ae24 	.word	0x1007ae24
 85fc074:	10110d2d 	.word	0x10110d2d
 85fc078:	1007ae24 	.word	0x1007ae24
 85fc07c:	1007afe8 	.word	0x1007afe8
 85fc080:	10110ea1 	.word	0x10110ea1
 85fc084:	023fc1d0 	.word	0x023fc1d0
 85fc088:	085fc0a8 	.word	0x085fc0a8
 85fc08c:	023fc1d8 	.word	0x023fc1d8
 85fc090:	023fc1d8 	.word	0x023fc1d8
 85fc094:	085fc0b0 	.word	0x085fc0b0
 85fc098:	023ffff0 	.word	0x023ffff0

085fc09c <dynalib_preinit>:
 85fc09c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fc1d8 <__aeabi_drsub>:
 23fc1d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fc1dc:	e002      	b.n	23fc1e4 <__adddf3>
 23fc1de:	bf00      	nop

023fc1e0 <__aeabi_dsub>:
 23fc1e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fc1e4 <__adddf3>:
 23fc1e4:	b530      	push	{r4, r5, lr}
 23fc1e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fc1ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fc1ee:	ea94 0f05 	teq	r4, r5
 23fc1f2:	bf08      	it	eq
 23fc1f4:	ea90 0f02 	teqeq	r0, r2
 23fc1f8:	bf1f      	itttt	ne
 23fc1fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fc1fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fc202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fc206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fc20a:	f000 80e2 	beq.w	23fc3d2 <__adddf3+0x1ee>
 23fc20e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fc212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fc216:	bfb8      	it	lt
 23fc218:	426d      	neglt	r5, r5
 23fc21a:	dd0c      	ble.n	23fc236 <__adddf3+0x52>
 23fc21c:	442c      	add	r4, r5
 23fc21e:	ea80 0202 	eor.w	r2, r0, r2
 23fc222:	ea81 0303 	eor.w	r3, r1, r3
 23fc226:	ea82 0000 	eor.w	r0, r2, r0
 23fc22a:	ea83 0101 	eor.w	r1, r3, r1
 23fc22e:	ea80 0202 	eor.w	r2, r0, r2
 23fc232:	ea81 0303 	eor.w	r3, r1, r3
 23fc236:	2d36      	cmp	r5, #54	; 0x36
 23fc238:	bf88      	it	hi
 23fc23a:	bd30      	pophi	{r4, r5, pc}
 23fc23c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fc240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fc244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fc248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fc24c:	d002      	beq.n	23fc254 <__adddf3+0x70>
 23fc24e:	4240      	negs	r0, r0
 23fc250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fc254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fc258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fc25c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fc260:	d002      	beq.n	23fc268 <__adddf3+0x84>
 23fc262:	4252      	negs	r2, r2
 23fc264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fc268:	ea94 0f05 	teq	r4, r5
 23fc26c:	f000 80a7 	beq.w	23fc3be <__adddf3+0x1da>
 23fc270:	f1a4 0401 	sub.w	r4, r4, #1
 23fc274:	f1d5 0e20 	rsbs	lr, r5, #32
 23fc278:	db0d      	blt.n	23fc296 <__adddf3+0xb2>
 23fc27a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fc27e:	fa22 f205 	lsr.w	r2, r2, r5
 23fc282:	1880      	adds	r0, r0, r2
 23fc284:	f141 0100 	adc.w	r1, r1, #0
 23fc288:	fa03 f20e 	lsl.w	r2, r3, lr
 23fc28c:	1880      	adds	r0, r0, r2
 23fc28e:	fa43 f305 	asr.w	r3, r3, r5
 23fc292:	4159      	adcs	r1, r3
 23fc294:	e00e      	b.n	23fc2b4 <__adddf3+0xd0>
 23fc296:	f1a5 0520 	sub.w	r5, r5, #32
 23fc29a:	f10e 0e20 	add.w	lr, lr, #32
 23fc29e:	2a01      	cmp	r2, #1
 23fc2a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fc2a4:	bf28      	it	cs
 23fc2a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fc2aa:	fa43 f305 	asr.w	r3, r3, r5
 23fc2ae:	18c0      	adds	r0, r0, r3
 23fc2b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fc2b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc2b8:	d507      	bpl.n	23fc2ca <__adddf3+0xe6>
 23fc2ba:	f04f 0e00 	mov.w	lr, #0
 23fc2be:	f1dc 0c00 	rsbs	ip, ip, #0
 23fc2c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fc2c6:	eb6e 0101 	sbc.w	r1, lr, r1
 23fc2ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fc2ce:	d31b      	bcc.n	23fc308 <__adddf3+0x124>
 23fc2d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fc2d4:	d30c      	bcc.n	23fc2f0 <__adddf3+0x10c>
 23fc2d6:	0849      	lsrs	r1, r1, #1
 23fc2d8:	ea5f 0030 	movs.w	r0, r0, rrx
 23fc2dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fc2e0:	f104 0401 	add.w	r4, r4, #1
 23fc2e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fc2e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fc2ec:	f080 809a 	bcs.w	23fc424 <__adddf3+0x240>
 23fc2f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fc2f4:	bf08      	it	eq
 23fc2f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fc2fa:	f150 0000 	adcs.w	r0, r0, #0
 23fc2fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc302:	ea41 0105 	orr.w	r1, r1, r5
 23fc306:	bd30      	pop	{r4, r5, pc}
 23fc308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fc30c:	4140      	adcs	r0, r0
 23fc30e:	eb41 0101 	adc.w	r1, r1, r1
 23fc312:	3c01      	subs	r4, #1
 23fc314:	bf28      	it	cs
 23fc316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fc31a:	d2e9      	bcs.n	23fc2f0 <__adddf3+0x10c>
 23fc31c:	f091 0f00 	teq	r1, #0
 23fc320:	bf04      	itt	eq
 23fc322:	4601      	moveq	r1, r0
 23fc324:	2000      	moveq	r0, #0
 23fc326:	fab1 f381 	clz	r3, r1
 23fc32a:	bf08      	it	eq
 23fc32c:	3320      	addeq	r3, #32
 23fc32e:	f1a3 030b 	sub.w	r3, r3, #11
 23fc332:	f1b3 0220 	subs.w	r2, r3, #32
 23fc336:	da0c      	bge.n	23fc352 <__adddf3+0x16e>
 23fc338:	320c      	adds	r2, #12
 23fc33a:	dd08      	ble.n	23fc34e <__adddf3+0x16a>
 23fc33c:	f102 0c14 	add.w	ip, r2, #20
 23fc340:	f1c2 020c 	rsb	r2, r2, #12
 23fc344:	fa01 f00c 	lsl.w	r0, r1, ip
 23fc348:	fa21 f102 	lsr.w	r1, r1, r2
 23fc34c:	e00c      	b.n	23fc368 <__adddf3+0x184>
 23fc34e:	f102 0214 	add.w	r2, r2, #20
 23fc352:	bfd8      	it	le
 23fc354:	f1c2 0c20 	rsble	ip, r2, #32
 23fc358:	fa01 f102 	lsl.w	r1, r1, r2
 23fc35c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fc360:	bfdc      	itt	le
 23fc362:	ea41 010c 	orrle.w	r1, r1, ip
 23fc366:	4090      	lslle	r0, r2
 23fc368:	1ae4      	subs	r4, r4, r3
 23fc36a:	bfa2      	ittt	ge
 23fc36c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fc370:	4329      	orrge	r1, r5
 23fc372:	bd30      	popge	{r4, r5, pc}
 23fc374:	ea6f 0404 	mvn.w	r4, r4
 23fc378:	3c1f      	subs	r4, #31
 23fc37a:	da1c      	bge.n	23fc3b6 <__adddf3+0x1d2>
 23fc37c:	340c      	adds	r4, #12
 23fc37e:	dc0e      	bgt.n	23fc39e <__adddf3+0x1ba>
 23fc380:	f104 0414 	add.w	r4, r4, #20
 23fc384:	f1c4 0220 	rsb	r2, r4, #32
 23fc388:	fa20 f004 	lsr.w	r0, r0, r4
 23fc38c:	fa01 f302 	lsl.w	r3, r1, r2
 23fc390:	ea40 0003 	orr.w	r0, r0, r3
 23fc394:	fa21 f304 	lsr.w	r3, r1, r4
 23fc398:	ea45 0103 	orr.w	r1, r5, r3
 23fc39c:	bd30      	pop	{r4, r5, pc}
 23fc39e:	f1c4 040c 	rsb	r4, r4, #12
 23fc3a2:	f1c4 0220 	rsb	r2, r4, #32
 23fc3a6:	fa20 f002 	lsr.w	r0, r0, r2
 23fc3aa:	fa01 f304 	lsl.w	r3, r1, r4
 23fc3ae:	ea40 0003 	orr.w	r0, r0, r3
 23fc3b2:	4629      	mov	r1, r5
 23fc3b4:	bd30      	pop	{r4, r5, pc}
 23fc3b6:	fa21 f004 	lsr.w	r0, r1, r4
 23fc3ba:	4629      	mov	r1, r5
 23fc3bc:	bd30      	pop	{r4, r5, pc}
 23fc3be:	f094 0f00 	teq	r4, #0
 23fc3c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fc3c6:	bf06      	itte	eq
 23fc3c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fc3cc:	3401      	addeq	r4, #1
 23fc3ce:	3d01      	subne	r5, #1
 23fc3d0:	e74e      	b.n	23fc270 <__adddf3+0x8c>
 23fc3d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fc3d6:	bf18      	it	ne
 23fc3d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fc3dc:	d029      	beq.n	23fc432 <__adddf3+0x24e>
 23fc3de:	ea94 0f05 	teq	r4, r5
 23fc3e2:	bf08      	it	eq
 23fc3e4:	ea90 0f02 	teqeq	r0, r2
 23fc3e8:	d005      	beq.n	23fc3f6 <__adddf3+0x212>
 23fc3ea:	ea54 0c00 	orrs.w	ip, r4, r0
 23fc3ee:	bf04      	itt	eq
 23fc3f0:	4619      	moveq	r1, r3
 23fc3f2:	4610      	moveq	r0, r2
 23fc3f4:	bd30      	pop	{r4, r5, pc}
 23fc3f6:	ea91 0f03 	teq	r1, r3
 23fc3fa:	bf1e      	ittt	ne
 23fc3fc:	2100      	movne	r1, #0
 23fc3fe:	2000      	movne	r0, #0
 23fc400:	bd30      	popne	{r4, r5, pc}
 23fc402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fc406:	d105      	bne.n	23fc414 <__adddf3+0x230>
 23fc408:	0040      	lsls	r0, r0, #1
 23fc40a:	4149      	adcs	r1, r1
 23fc40c:	bf28      	it	cs
 23fc40e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fc412:	bd30      	pop	{r4, r5, pc}
 23fc414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fc418:	bf3c      	itt	cc
 23fc41a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fc41e:	bd30      	popcc	{r4, r5, pc}
 23fc420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fc428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fc42c:	f04f 0000 	mov.w	r0, #0
 23fc430:	bd30      	pop	{r4, r5, pc}
 23fc432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fc436:	bf1a      	itte	ne
 23fc438:	4619      	movne	r1, r3
 23fc43a:	4610      	movne	r0, r2
 23fc43c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fc440:	bf1c      	itt	ne
 23fc442:	460b      	movne	r3, r1
 23fc444:	4602      	movne	r2, r0
 23fc446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fc44a:	bf06      	itte	eq
 23fc44c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fc450:	ea91 0f03 	teqeq	r1, r3
 23fc454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fc458:	bd30      	pop	{r4, r5, pc}
 23fc45a:	bf00      	nop

023fc45c <__aeabi_ui2d>:
 23fc45c:	f090 0f00 	teq	r0, #0
 23fc460:	bf04      	itt	eq
 23fc462:	2100      	moveq	r1, #0
 23fc464:	4770      	bxeq	lr
 23fc466:	b530      	push	{r4, r5, lr}
 23fc468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc46c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc470:	f04f 0500 	mov.w	r5, #0
 23fc474:	f04f 0100 	mov.w	r1, #0
 23fc478:	e750      	b.n	23fc31c <__adddf3+0x138>
 23fc47a:	bf00      	nop

023fc47c <__aeabi_i2d>:
 23fc47c:	f090 0f00 	teq	r0, #0
 23fc480:	bf04      	itt	eq
 23fc482:	2100      	moveq	r1, #0
 23fc484:	4770      	bxeq	lr
 23fc486:	b530      	push	{r4, r5, lr}
 23fc488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc48c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fc494:	bf48      	it	mi
 23fc496:	4240      	negmi	r0, r0
 23fc498:	f04f 0100 	mov.w	r1, #0
 23fc49c:	e73e      	b.n	23fc31c <__adddf3+0x138>
 23fc49e:	bf00      	nop

023fc4a0 <__aeabi_f2d>:
 23fc4a0:	0042      	lsls	r2, r0, #1
 23fc4a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fc4a6:	ea4f 0131 	mov.w	r1, r1, rrx
 23fc4aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fc4ae:	bf1f      	itttt	ne
 23fc4b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fc4b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fc4b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fc4bc:	4770      	bxne	lr
 23fc4be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fc4c2:	bf08      	it	eq
 23fc4c4:	4770      	bxeq	lr
 23fc4c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fc4ca:	bf04      	itt	eq
 23fc4cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fc4d0:	4770      	bxeq	lr
 23fc4d2:	b530      	push	{r4, r5, lr}
 23fc4d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fc4d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc4dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc4e0:	e71c      	b.n	23fc31c <__adddf3+0x138>
 23fc4e2:	bf00      	nop

023fc4e4 <__aeabi_ul2d>:
 23fc4e4:	ea50 0201 	orrs.w	r2, r0, r1
 23fc4e8:	bf08      	it	eq
 23fc4ea:	4770      	bxeq	lr
 23fc4ec:	b530      	push	{r4, r5, lr}
 23fc4ee:	f04f 0500 	mov.w	r5, #0
 23fc4f2:	e00a      	b.n	23fc50a <__aeabi_l2d+0x16>

023fc4f4 <__aeabi_l2d>:
 23fc4f4:	ea50 0201 	orrs.w	r2, r0, r1
 23fc4f8:	bf08      	it	eq
 23fc4fa:	4770      	bxeq	lr
 23fc4fc:	b530      	push	{r4, r5, lr}
 23fc4fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fc502:	d502      	bpl.n	23fc50a <__aeabi_l2d+0x16>
 23fc504:	4240      	negs	r0, r0
 23fc506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fc50a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc50e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fc516:	f43f aed8 	beq.w	23fc2ca <__adddf3+0xe6>
 23fc51a:	f04f 0203 	mov.w	r2, #3
 23fc51e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fc522:	bf18      	it	ne
 23fc524:	3203      	addne	r2, #3
 23fc526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fc52a:	bf18      	it	ne
 23fc52c:	3203      	addne	r2, #3
 23fc52e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fc532:	f1c2 0320 	rsb	r3, r2, #32
 23fc536:	fa00 fc03 	lsl.w	ip, r0, r3
 23fc53a:	fa20 f002 	lsr.w	r0, r0, r2
 23fc53e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fc542:	ea40 000e 	orr.w	r0, r0, lr
 23fc546:	fa21 f102 	lsr.w	r1, r1, r2
 23fc54a:	4414      	add	r4, r2
 23fc54c:	e6bd      	b.n	23fc2ca <__adddf3+0xe6>
 23fc54e:	bf00      	nop

023fc550 <__aeabi_dmul>:
 23fc550:	b570      	push	{r4, r5, r6, lr}
 23fc552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fc556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fc55a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fc55e:	bf1d      	ittte	ne
 23fc560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fc564:	ea94 0f0c 	teqne	r4, ip
 23fc568:	ea95 0f0c 	teqne	r5, ip
 23fc56c:	f000 f8de 	bleq	23fc72c <__aeabi_dmul+0x1dc>
 23fc570:	442c      	add	r4, r5
 23fc572:	ea81 0603 	eor.w	r6, r1, r3
 23fc576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fc57a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fc57e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fc582:	bf18      	it	ne
 23fc584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fc588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc58c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fc590:	d038      	beq.n	23fc604 <__aeabi_dmul+0xb4>
 23fc592:	fba0 ce02 	umull	ip, lr, r0, r2
 23fc596:	f04f 0500 	mov.w	r5, #0
 23fc59a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fc59e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fc5a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fc5a6:	f04f 0600 	mov.w	r6, #0
 23fc5aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fc5ae:	f09c 0f00 	teq	ip, #0
 23fc5b2:	bf18      	it	ne
 23fc5b4:	f04e 0e01 	orrne.w	lr, lr, #1
 23fc5b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fc5bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fc5c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fc5c4:	d204      	bcs.n	23fc5d0 <__aeabi_dmul+0x80>
 23fc5c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fc5ca:	416d      	adcs	r5, r5
 23fc5cc:	eb46 0606 	adc.w	r6, r6, r6
 23fc5d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fc5d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fc5d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fc5dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fc5e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fc5e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fc5e8:	bf88      	it	hi
 23fc5ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fc5ee:	d81e      	bhi.n	23fc62e <__aeabi_dmul+0xde>
 23fc5f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fc5f4:	bf08      	it	eq
 23fc5f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fc5fa:	f150 0000 	adcs.w	r0, r0, #0
 23fc5fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc602:	bd70      	pop	{r4, r5, r6, pc}
 23fc604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fc608:	ea46 0101 	orr.w	r1, r6, r1
 23fc60c:	ea40 0002 	orr.w	r0, r0, r2
 23fc610:	ea81 0103 	eor.w	r1, r1, r3
 23fc614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fc618:	bfc2      	ittt	gt
 23fc61a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fc61e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fc622:	bd70      	popgt	{r4, r5, r6, pc}
 23fc624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc628:	f04f 0e00 	mov.w	lr, #0
 23fc62c:	3c01      	subs	r4, #1
 23fc62e:	f300 80ab 	bgt.w	23fc788 <__aeabi_dmul+0x238>
 23fc632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fc636:	bfde      	ittt	le
 23fc638:	2000      	movle	r0, #0
 23fc63a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fc63e:	bd70      	pople	{r4, r5, r6, pc}
 23fc640:	f1c4 0400 	rsb	r4, r4, #0
 23fc644:	3c20      	subs	r4, #32
 23fc646:	da35      	bge.n	23fc6b4 <__aeabi_dmul+0x164>
 23fc648:	340c      	adds	r4, #12
 23fc64a:	dc1b      	bgt.n	23fc684 <__aeabi_dmul+0x134>
 23fc64c:	f104 0414 	add.w	r4, r4, #20
 23fc650:	f1c4 0520 	rsb	r5, r4, #32
 23fc654:	fa00 f305 	lsl.w	r3, r0, r5
 23fc658:	fa20 f004 	lsr.w	r0, r0, r4
 23fc65c:	fa01 f205 	lsl.w	r2, r1, r5
 23fc660:	ea40 0002 	orr.w	r0, r0, r2
 23fc664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fc668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc66c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fc670:	fa21 f604 	lsr.w	r6, r1, r4
 23fc674:	eb42 0106 	adc.w	r1, r2, r6
 23fc678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fc67c:	bf08      	it	eq
 23fc67e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fc682:	bd70      	pop	{r4, r5, r6, pc}
 23fc684:	f1c4 040c 	rsb	r4, r4, #12
 23fc688:	f1c4 0520 	rsb	r5, r4, #32
 23fc68c:	fa00 f304 	lsl.w	r3, r0, r4
 23fc690:	fa20 f005 	lsr.w	r0, r0, r5
 23fc694:	fa01 f204 	lsl.w	r2, r1, r4
 23fc698:	ea40 0002 	orr.w	r0, r0, r2
 23fc69c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc6a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fc6a4:	f141 0100 	adc.w	r1, r1, #0
 23fc6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fc6ac:	bf08      	it	eq
 23fc6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fc6b2:	bd70      	pop	{r4, r5, r6, pc}
 23fc6b4:	f1c4 0520 	rsb	r5, r4, #32
 23fc6b8:	fa00 f205 	lsl.w	r2, r0, r5
 23fc6bc:	ea4e 0e02 	orr.w	lr, lr, r2
 23fc6c0:	fa20 f304 	lsr.w	r3, r0, r4
 23fc6c4:	fa01 f205 	lsl.w	r2, r1, r5
 23fc6c8:	ea43 0302 	orr.w	r3, r3, r2
 23fc6cc:	fa21 f004 	lsr.w	r0, r1, r4
 23fc6d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc6d4:	fa21 f204 	lsr.w	r2, r1, r4
 23fc6d8:	ea20 0002 	bic.w	r0, r0, r2
 23fc6dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fc6e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fc6e4:	bf08      	it	eq
 23fc6e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fc6ea:	bd70      	pop	{r4, r5, r6, pc}
 23fc6ec:	f094 0f00 	teq	r4, #0
 23fc6f0:	d10f      	bne.n	23fc712 <__aeabi_dmul+0x1c2>
 23fc6f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fc6f6:	0040      	lsls	r0, r0, #1
 23fc6f8:	eb41 0101 	adc.w	r1, r1, r1
 23fc6fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc700:	bf08      	it	eq
 23fc702:	3c01      	subeq	r4, #1
 23fc704:	d0f7      	beq.n	23fc6f6 <__aeabi_dmul+0x1a6>
 23fc706:	ea41 0106 	orr.w	r1, r1, r6
 23fc70a:	f095 0f00 	teq	r5, #0
 23fc70e:	bf18      	it	ne
 23fc710:	4770      	bxne	lr
 23fc712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fc716:	0052      	lsls	r2, r2, #1
 23fc718:	eb43 0303 	adc.w	r3, r3, r3
 23fc71c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fc720:	bf08      	it	eq
 23fc722:	3d01      	subeq	r5, #1
 23fc724:	d0f7      	beq.n	23fc716 <__aeabi_dmul+0x1c6>
 23fc726:	ea43 0306 	orr.w	r3, r3, r6
 23fc72a:	4770      	bx	lr
 23fc72c:	ea94 0f0c 	teq	r4, ip
 23fc730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fc734:	bf18      	it	ne
 23fc736:	ea95 0f0c 	teqne	r5, ip
 23fc73a:	d00c      	beq.n	23fc756 <__aeabi_dmul+0x206>
 23fc73c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc740:	bf18      	it	ne
 23fc742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc746:	d1d1      	bne.n	23fc6ec <__aeabi_dmul+0x19c>
 23fc748:	ea81 0103 	eor.w	r1, r1, r3
 23fc74c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc750:	f04f 0000 	mov.w	r0, #0
 23fc754:	bd70      	pop	{r4, r5, r6, pc}
 23fc756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc75a:	bf06      	itte	eq
 23fc75c:	4610      	moveq	r0, r2
 23fc75e:	4619      	moveq	r1, r3
 23fc760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc764:	d019      	beq.n	23fc79a <__aeabi_dmul+0x24a>
 23fc766:	ea94 0f0c 	teq	r4, ip
 23fc76a:	d102      	bne.n	23fc772 <__aeabi_dmul+0x222>
 23fc76c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fc770:	d113      	bne.n	23fc79a <__aeabi_dmul+0x24a>
 23fc772:	ea95 0f0c 	teq	r5, ip
 23fc776:	d105      	bne.n	23fc784 <__aeabi_dmul+0x234>
 23fc778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fc77c:	bf1c      	itt	ne
 23fc77e:	4610      	movne	r0, r2
 23fc780:	4619      	movne	r1, r3
 23fc782:	d10a      	bne.n	23fc79a <__aeabi_dmul+0x24a>
 23fc784:	ea81 0103 	eor.w	r1, r1, r3
 23fc788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc78c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fc790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fc794:	f04f 0000 	mov.w	r0, #0
 23fc798:	bd70      	pop	{r4, r5, r6, pc}
 23fc79a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fc79e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fc7a2:	bd70      	pop	{r4, r5, r6, pc}

023fc7a4 <__aeabi_ddiv>:
 23fc7a4:	b570      	push	{r4, r5, r6, lr}
 23fc7a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fc7aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fc7ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fc7b2:	bf1d      	ittte	ne
 23fc7b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fc7b8:	ea94 0f0c 	teqne	r4, ip
 23fc7bc:	ea95 0f0c 	teqne	r5, ip
 23fc7c0:	f000 f8a7 	bleq	23fc912 <__aeabi_ddiv+0x16e>
 23fc7c4:	eba4 0405 	sub.w	r4, r4, r5
 23fc7c8:	ea81 0e03 	eor.w	lr, r1, r3
 23fc7cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fc7d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fc7d4:	f000 8088 	beq.w	23fc8e8 <__aeabi_ddiv+0x144>
 23fc7d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fc7dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fc7e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fc7e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fc7e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fc7ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fc7f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fc7f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fc7f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fc7fc:	429d      	cmp	r5, r3
 23fc7fe:	bf08      	it	eq
 23fc800:	4296      	cmpeq	r6, r2
 23fc802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fc806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fc80a:	d202      	bcs.n	23fc812 <__aeabi_ddiv+0x6e>
 23fc80c:	085b      	lsrs	r3, r3, #1
 23fc80e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc812:	1ab6      	subs	r6, r6, r2
 23fc814:	eb65 0503 	sbc.w	r5, r5, r3
 23fc818:	085b      	lsrs	r3, r3, #1
 23fc81a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc81e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fc822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fc826:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc82a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc82e:	bf22      	ittt	cs
 23fc830:	1ab6      	subcs	r6, r6, r2
 23fc832:	4675      	movcs	r5, lr
 23fc834:	ea40 000c 	orrcs.w	r0, r0, ip
 23fc838:	085b      	lsrs	r3, r3, #1
 23fc83a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc83e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc842:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc846:	bf22      	ittt	cs
 23fc848:	1ab6      	subcs	r6, r6, r2
 23fc84a:	4675      	movcs	r5, lr
 23fc84c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fc850:	085b      	lsrs	r3, r3, #1
 23fc852:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc856:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc85a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc85e:	bf22      	ittt	cs
 23fc860:	1ab6      	subcs	r6, r6, r2
 23fc862:	4675      	movcs	r5, lr
 23fc864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fc868:	085b      	lsrs	r3, r3, #1
 23fc86a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc86e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc872:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc876:	bf22      	ittt	cs
 23fc878:	1ab6      	subcs	r6, r6, r2
 23fc87a:	4675      	movcs	r5, lr
 23fc87c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fc880:	ea55 0e06 	orrs.w	lr, r5, r6
 23fc884:	d018      	beq.n	23fc8b8 <__aeabi_ddiv+0x114>
 23fc886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fc88a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fc88e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fc892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fc896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fc89a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fc89e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fc8a2:	d1c0      	bne.n	23fc826 <__aeabi_ddiv+0x82>
 23fc8a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc8a8:	d10b      	bne.n	23fc8c2 <__aeabi_ddiv+0x11e>
 23fc8aa:	ea41 0100 	orr.w	r1, r1, r0
 23fc8ae:	f04f 0000 	mov.w	r0, #0
 23fc8b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fc8b6:	e7b6      	b.n	23fc826 <__aeabi_ddiv+0x82>
 23fc8b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc8bc:	bf04      	itt	eq
 23fc8be:	4301      	orreq	r1, r0
 23fc8c0:	2000      	moveq	r0, #0
 23fc8c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fc8c6:	bf88      	it	hi
 23fc8c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fc8cc:	f63f aeaf 	bhi.w	23fc62e <__aeabi_dmul+0xde>
 23fc8d0:	ebb5 0c03 	subs.w	ip, r5, r3
 23fc8d4:	bf04      	itt	eq
 23fc8d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fc8da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fc8de:	f150 0000 	adcs.w	r0, r0, #0
 23fc8e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc8e6:	bd70      	pop	{r4, r5, r6, pc}
 23fc8e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fc8ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fc8f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fc8f4:	bfc2      	ittt	gt
 23fc8f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fc8fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fc8fe:	bd70      	popgt	{r4, r5, r6, pc}
 23fc900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc904:	f04f 0e00 	mov.w	lr, #0
 23fc908:	3c01      	subs	r4, #1
 23fc90a:	e690      	b.n	23fc62e <__aeabi_dmul+0xde>
 23fc90c:	ea45 0e06 	orr.w	lr, r5, r6
 23fc910:	e68d      	b.n	23fc62e <__aeabi_dmul+0xde>
 23fc912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fc916:	ea94 0f0c 	teq	r4, ip
 23fc91a:	bf08      	it	eq
 23fc91c:	ea95 0f0c 	teqeq	r5, ip
 23fc920:	f43f af3b 	beq.w	23fc79a <__aeabi_dmul+0x24a>
 23fc924:	ea94 0f0c 	teq	r4, ip
 23fc928:	d10a      	bne.n	23fc940 <__aeabi_ddiv+0x19c>
 23fc92a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fc92e:	f47f af34 	bne.w	23fc79a <__aeabi_dmul+0x24a>
 23fc932:	ea95 0f0c 	teq	r5, ip
 23fc936:	f47f af25 	bne.w	23fc784 <__aeabi_dmul+0x234>
 23fc93a:	4610      	mov	r0, r2
 23fc93c:	4619      	mov	r1, r3
 23fc93e:	e72c      	b.n	23fc79a <__aeabi_dmul+0x24a>
 23fc940:	ea95 0f0c 	teq	r5, ip
 23fc944:	d106      	bne.n	23fc954 <__aeabi_ddiv+0x1b0>
 23fc946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fc94a:	f43f aefd 	beq.w	23fc748 <__aeabi_dmul+0x1f8>
 23fc94e:	4610      	mov	r0, r2
 23fc950:	4619      	mov	r1, r3
 23fc952:	e722      	b.n	23fc79a <__aeabi_dmul+0x24a>
 23fc954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc958:	bf18      	it	ne
 23fc95a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc95e:	f47f aec5 	bne.w	23fc6ec <__aeabi_dmul+0x19c>
 23fc962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fc966:	f47f af0d 	bne.w	23fc784 <__aeabi_dmul+0x234>
 23fc96a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fc96e:	f47f aeeb 	bne.w	23fc748 <__aeabi_dmul+0x1f8>
 23fc972:	e712      	b.n	23fc79a <__aeabi_dmul+0x24a>

023fc974 <__aeabi_d2f>:
 23fc974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fc978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fc97c:	bf24      	itt	cs
 23fc97e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fc982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fc986:	d90d      	bls.n	23fc9a4 <__aeabi_d2f+0x30>
 23fc988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fc98c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fc990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fc994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fc998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fc99c:	bf08      	it	eq
 23fc99e:	f020 0001 	biceq.w	r0, r0, #1
 23fc9a2:	4770      	bx	lr
 23fc9a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fc9a8:	d121      	bne.n	23fc9ee <__aeabi_d2f+0x7a>
 23fc9aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fc9ae:	bfbc      	itt	lt
 23fc9b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fc9b4:	4770      	bxlt	lr
 23fc9b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc9ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fc9be:	f1c2 0218 	rsb	r2, r2, #24
 23fc9c2:	f1c2 0c20 	rsb	ip, r2, #32
 23fc9c6:	fa10 f30c 	lsls.w	r3, r0, ip
 23fc9ca:	fa20 f002 	lsr.w	r0, r0, r2
 23fc9ce:	bf18      	it	ne
 23fc9d0:	f040 0001 	orrne.w	r0, r0, #1
 23fc9d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fc9d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fc9dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fc9e0:	ea40 000c 	orr.w	r0, r0, ip
 23fc9e4:	fa23 f302 	lsr.w	r3, r3, r2
 23fc9e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fc9ec:	e7cc      	b.n	23fc988 <__aeabi_d2f+0x14>
 23fc9ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fc9f2:	d107      	bne.n	23fca04 <__aeabi_d2f+0x90>
 23fc9f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fc9f8:	bf1e      	ittt	ne
 23fc9fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fc9fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fca02:	4770      	bxne	lr
 23fca04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fca08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fca0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fca10:	4770      	bx	lr
 23fca12:	bf00      	nop

023fca14 <strcmp>:
 23fca14:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fca18:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fca1c:	2a01      	cmp	r2, #1
 23fca1e:	bf28      	it	cs
 23fca20:	429a      	cmpcs	r2, r3
 23fca22:	d0f7      	beq.n	23fca14 <strcmp>
 23fca24:	1ad0      	subs	r0, r2, r3
 23fca26:	4770      	bx	lr

023fca28 <strlen>:
 23fca28:	4603      	mov	r3, r0
 23fca2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fca2e:	2a00      	cmp	r2, #0
 23fca30:	d1fb      	bne.n	23fca2a <strlen+0x2>
 23fca32:	1a18      	subs	r0, r3, r0
 23fca34:	3801      	subs	r0, #1
 23fca36:	4770      	bx	lr

023fca38 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fca38:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fca3a:	f002 fd4f 	bl	23ff4dc <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fca3e:	2500      	movs	r5, #0
 23fca40:	4e05      	ldr	r6, [pc, #20]	; (23fca58 <module_user_init+0x20>)
 23fca42:	4c06      	ldr	r4, [pc, #24]	; (23fca5c <module_user_init+0x24>)
 23fca44:	1ba4      	subs	r4, r4, r6
 23fca46:	08a4      	lsrs	r4, r4, #2
 23fca48:	42ac      	cmp	r4, r5
 23fca4a:	d100      	bne.n	23fca4e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fca4c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fca4e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fca52:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fca54:	3501      	adds	r5, #1
 23fca56:	e7f7      	b.n	23fca48 <module_user_init+0x10>
 23fca58:	023fffcc 	.word	0x023fffcc
 23fca5c:	023ffff0 	.word	0x023ffff0

023fca60 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fca60:	f000 b860 	b.w	23fcb24 <setup>

023fca64 <module_user_loop>:
}

void module_user_loop() {
 23fca64:	b508      	push	{r3, lr}
    loop();
 23fca66:	f000 f893 	bl	23fcb90 <loop>
    _post_loop();
}
 23fca6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fca6e:	f002 bced 	b.w	23ff44c <_post_loop>

023fca72 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fca72:	f000 be6f 	b.w	23fd754 <malloc>

023fca76 <_Znaj>:
 23fca76:	f000 be6d 	b.w	23fd754 <malloc>

023fca7a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fca7a:	f000 be79 	b.w	23fd770 <free>
	...

023fca80 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fca80:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fca82:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fca84:	4a02      	ldr	r2, [pc, #8]	; (23fca90 <__cxa_pure_virtual+0x10>)
 23fca86:	4903      	ldr	r1, [pc, #12]	; (23fca94 <__cxa_pure_virtual+0x14>)
 23fca88:	f000 fd30 	bl	23fd4ec <panic_>
  while (1);
 23fca8c:	e7fe      	b.n	23fca8c <__cxa_pure_virtual+0xc>
 23fca8e:	bf00      	nop
 23fca90:	023fd055 	.word	0x023fd055
 23fca94:	023ffb78 	.word	0x023ffb78

023fca98 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fca98:	7800      	ldrb	r0, [r0, #0]
 23fca9a:	fab0 f080 	clz	r0, r0
 23fca9e:	0940      	lsrs	r0, r0, #5
 23fcaa0:	4770      	bx	lr

023fcaa2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fcaa2:	2301      	movs	r3, #1
 23fcaa4:	7003      	strb	r3, [r0, #0]
 23fcaa6:	4770      	bx	lr

023fcaa8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fcaa8:	4770      	bx	lr
	...

023fcaac <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fcaac:	b510      	push	{r4, lr}
 23fcaae:	4604      	mov	r4, r0
 23fcab0:	4b09      	ldr	r3, [pc, #36]	; (23fcad8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fcab2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fcab4:	f001 fb58 	bl	23fe168 <_ZN5spark10LogManager8instanceEv>
 23fcab8:	4621      	mov	r1, r4
 23fcaba:	f001 fd8f 	bl	23fe5dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fcabe:	f002 fc35 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fcac2:	f002 fc25 	bl	23ff310 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fcac6:	4620      	mov	r0, r4
 23fcac8:	4b04      	ldr	r3, [pc, #16]	; (23fcadc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fcaca:	f840 3b04 	str.w	r3, [r0], #4
 23fcace:	f001 fc21 	bl	23fe314 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fcad2:	4620      	mov	r0, r4
 23fcad4:	bd10      	pop	{r4, pc}
 23fcad6:	bf00      	nop
 23fcad8:	023ffbe8 	.word	0x023ffbe8
 23fcadc:	023ffbd0 	.word	0x023ffbd0

023fcae0 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fcae0:	b510      	push	{r4, lr}
 23fcae2:	4604      	mov	r4, r0
    }
 23fcae4:	f7ff ffe2 	bl	23fcaac <_ZN5spark16SerialLogHandlerD1Ev>
 23fcae8:	4620      	mov	r0, r4
 23fcaea:	2124      	movs	r1, #36	; 0x24
 23fcaec:	f7ff ffc5 	bl	23fca7a <_ZdlPvj>
 23fcaf0:	4620      	mov	r0, r4
 23fcaf2:	bd10      	pop	{r4, pc}

023fcaf4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fcaf4:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fcaf6:	f04f 0c20 	mov.w	ip, #32
 23fcafa:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fcafc:	b500      	push	{lr}
 23fcafe:	b08c      	sub	sp, #48	; 0x30
 23fcb00:	aa0d      	add	r2, sp, #52	; 0x34
 23fcb02:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fcb06:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fcb0a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fcb0e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fcb10:	6801      	ldr	r1, [r0, #0]
 23fcb12:	aa04      	add	r2, sp, #16
 23fcb14:	201e      	movs	r0, #30
 23fcb16:	f000 fcf7 	bl	23fd508 <log_message_v>
}
 23fcb1a:	b00c      	add	sp, #48	; 0x30
 23fcb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fcb20:	b003      	add	sp, #12
 23fcb22:	4770      	bx	lr

023fcb24 <setup>:
SerialLogHandler logHandler;
#include "ADXL362.h"
ADXL362 adxl362;

void setup() {
 23fcb24:	b538      	push	{r3, r4, r5, lr}
  //DEBUGGING
  Serial.begin(9600);
 23fcb26:	f002 fc01 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fcb2a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fcb2e:	f002 fbeb 	bl	23ff308 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fcb32:	2000      	movs	r0, #0
 23fcb34:	f000 faaa 	bl	23fd08c <hal_timer_millis>
        while (_while() && !_condition()) {
 23fcb38:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23fcb3c:	4604      	mov	r4, r0
 23fcb3e:	2000      	movs	r0, #0
 23fcb40:	f000 faa4 	bl	23fd08c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fcb44:	1b00      	subs	r0, r0, r4
 23fcb46:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fcb4a:	42a8      	cmp	r0, r5
 23fcb4c:	f171 0300 	sbcs.w	r3, r1, #0
 23fcb50:	d207      	bcs.n	23fcb62 <setup+0x3e>
  waitFor(Serial.isConnected, 15000);
 23fcb52:	f002 fbeb 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fcb56:	f002 fbde 	bl	23ff316 <_ZN9USBSerial11isConnectedEv>
 23fcb5a:	b910      	cbnz	r0, 23fcb62 <setup+0x3e>
            spark_process();
 23fcb5c:	f000 fd36 	bl	23fd5cc <spark_process>
        while (_while() && !_condition()) {
 23fcb60:	e7ed      	b.n	23fcb3e <setup+0x1a>
 23fcb62:	f002 fbe3 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fcb66:	f002 fbd6 	bl	23ff316 <_ZN9USBSerial11isConnectedEv>
  Log.info("Serial connected or timed out!");
 23fcb6a:	4906      	ldr	r1, [pc, #24]	; (23fcb84 <setup+0x60>)
 23fcb6c:	4806      	ldr	r0, [pc, #24]	; (23fcb88 <setup+0x64>)
 23fcb6e:	f7ff ffc1 	bl	23fcaf4 <_ZNK5spark6Logger4infoEPKcz>

  adxl362.begin();
 23fcb72:	4806      	ldr	r0, [pc, #24]	; (23fcb8c <setup+0x68>)
 23fcb74:	f000 fa08 	bl	23fcf88 <_ZN7ADXL3625beginEv>
  adxl362.beginMeasure(); //NECESSARY - starts measurement
}
 23fcb78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  adxl362.beginMeasure(); //NECESSARY - starts measurement
 23fcb7c:	4803      	ldr	r0, [pc, #12]	; (23fcb8c <setup+0x68>)
 23fcb7e:	f000 b94f 	b.w	23fce20 <_ZN7ADXL36212beginMeasureEv>
 23fcb82:	bf00      	nop
 23fcb84:	023ffb8d 	.word	0x023ffb8d
 23fcb88:	1007ae70 	.word	0x1007ae70
 23fcb8c:	1007ae24 	.word	0x1007ae24

023fcb90 <loop>:


void loop() {
 23fcb90:	b500      	push	{lr}
 23fcb92:	b08d      	sub	sp, #52	; 0x34
  int x1, y1, z1;
  short x, y, z;
  float t;

  adxl362.readXYZmg(x1, y1, z1); //burst read of axes - REQUIRED to guarantee all measurements correspond to same sample time 
 23fcb94:	ab0a      	add	r3, sp, #40	; 0x28
 23fcb96:	aa09      	add	r2, sp, #36	; 0x24
 23fcb98:	a908      	add	r1, sp, #32
 23fcb9a:	4814      	ldr	r0, [pc, #80]	; (23fcbec <loop+0x5c>)
 23fcb9c:	f000 f952 	bl	23fce44 <_ZN7ADXL3629readXYZmgERiS0_S0_>
  adxl362.readXYZTData(x, y, z, t); //burst read of all registers - REQUIRED to guarantee all measurements correspond to same sample time
 23fcba0:	ab0b      	add	r3, sp, #44	; 0x2c
 23fcba2:	9300      	str	r3, [sp, #0]
 23fcba4:	aa07      	add	r2, sp, #28
 23fcba6:	f10d 031e 	add.w	r3, sp, #30
 23fcbaa:	f10d 011a 	add.w	r1, sp, #26
 23fcbae:	480f      	ldr	r0, [pc, #60]	; (23fcbec <loop+0x5c>)
 23fcbb0:	f000 f98e 	bl	23fced0 <_ZN7ADXL36212readXYZTDataERsS0_S0_Rf>

  Log.info("x: %d, y: %d, z: %d, t: %d", x, y, z, t);
 23fcbb4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 23fcbb8:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 23fcbbc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23fcbbe:	9305      	str	r3, [sp, #20]
 23fcbc0:	9204      	str	r2, [sp, #16]
 23fcbc2:	f7ff fc6d 	bl	23fc4a0 <__aeabi_f2d>
 23fcbc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23fcbca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23fcbce:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 23fcbd2:	4807      	ldr	r0, [pc, #28]	; (23fcbf0 <loop+0x60>)
 23fcbd4:	9100      	str	r1, [sp, #0]
 23fcbd6:	4907      	ldr	r1, [pc, #28]	; (23fcbf4 <loop+0x64>)
 23fcbd8:	f7ff ff8c 	bl	23fcaf4 <_ZNK5spark6Logger4infoEPKcz>
  delay(500);
 23fcbdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fcbe0:	f000 fe1a 	bl	23fd818 <delay>
 23fcbe4:	b00d      	add	sp, #52	; 0x34
 23fcbe6:	f85d fb04 	ldr.w	pc, [sp], #4
 23fcbea:	bf00      	nop
 23fcbec:	1007ae24 	.word	0x1007ae24
 23fcbf0:	1007ae70 	.word	0x1007ae70
 23fcbf4:	023ffbac 	.word	0x023ffbac

023fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcbf8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fcbfa:	2614      	movs	r6, #20
 23fcbfc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcc00:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcc02:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcc06:	42ae      	cmp	r6, r5
 23fcc08:	d004      	beq.n	23fcc14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fcc0a:	4628      	mov	r0, r5
 23fcc0c:	f002 fa20 	bl	23ff050 <_ZN6StringD1Ev>
 23fcc10:	3514      	adds	r5, #20
 23fcc12:	e7f8      	b.n	23fcc06 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fcc14:	6820      	ldr	r0, [r4, #0]
 23fcc16:	f000 fdab 	bl	23fd770 <free>
    AllocatorT::free(data_);
}
 23fcc1a:	4620      	mov	r0, r4
 23fcc1c:	bd70      	pop	{r4, r5, r6, pc}

023fcc1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fcc1e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcc22:	4604      	mov	r4, r0
 23fcc24:	460d      	mov	r5, r1
 23fcc26:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcc28:	d916      	bls.n	23fcc58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fcc2a:	4290      	cmp	r0, r2
 23fcc2c:	d215      	bcs.n	23fcc5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fcc2e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fcc32:	1a75      	subs	r5, r6, r1
 23fcc34:	f1a1 0714 	sub.w	r7, r1, #20
 23fcc38:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcc3a:	42b7      	cmp	r7, r6
 23fcc3c:	d01c      	beq.n	23fcc78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fcc3e:	b12c      	cbz	r4, 23fcc4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fcc40:	4631      	mov	r1, r6
 23fcc42:	4620      	mov	r0, r4
 23fcc44:	f002 fa6d 	bl	23ff122 <_ZN6StringC1EOS_>
 23fcc48:	7c33      	ldrb	r3, [r6, #16]
 23fcc4a:	7423      	strb	r3, [r4, #16]
 23fcc4c:	4630      	mov	r0, r6
 23fcc4e:	f002 f9ff 	bl	23ff050 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fcc52:	3e14      	subs	r6, #20
 23fcc54:	3c14      	subs	r4, #20
 23fcc56:	e7f0      	b.n	23fcc3a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fcc58:	d00e      	beq.n	23fcc78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fcc5a:	42b5      	cmp	r5, r6
 23fcc5c:	d00c      	beq.n	23fcc78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fcc5e:	b12c      	cbz	r4, 23fcc6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fcc60:	4629      	mov	r1, r5
 23fcc62:	4620      	mov	r0, r4
 23fcc64:	f002 fa5d 	bl	23ff122 <_ZN6StringC1EOS_>
 23fcc68:	7c2b      	ldrb	r3, [r5, #16]
 23fcc6a:	7423      	strb	r3, [r4, #16]
 23fcc6c:	4628      	mov	r0, r5
 23fcc6e:	f002 f9ef 	bl	23ff050 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcc72:	3514      	adds	r5, #20
 23fcc74:	3414      	adds	r4, #20
 23fcc76:	e7f0      	b.n	23fcc5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fcc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcc7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fcc7a:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fcc80:	e9c0 3300 	strd	r3, r3, [r0]
 23fcc84:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc86:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc88:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc8a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc8c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc8e:	dd24      	ble.n	23fccda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fcc90:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fcc94:	fb08 f007 	mul.w	r0, r8, r7
 23fcc98:	f000 fd5c 	bl	23fd754 <malloc>
            if (!d) {
 23fcc9c:	4605      	mov	r5, r0
 23fcc9e:	b1e0      	cbz	r0, 23fccda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fcca0:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fcca4:	fb08 1202 	mla	r2, r8, r2, r1
 23fcca8:	f7ff ffb9 	bl	23fcc1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fccac:	6820      	ldr	r0, [r4, #0]
 23fccae:	f000 fd5f 	bl	23fd770 <free>
        data_ = d;
 23fccb2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fccb4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fccb6:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fccba:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fccbe:	45b8      	cmp	r8, r7
 23fccc0:	d009      	beq.n	23fccd6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fccc2:	4639      	mov	r1, r7
 23fccc4:	4628      	mov	r0, r5
 23fccc6:	f002 fa46 	bl	23ff156 <_ZN6StringC1ERKS_>
 23fccca:	7c3b      	ldrb	r3, [r7, #16]
 23fcccc:	3514      	adds	r5, #20
 23fccce:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fccd2:	3714      	adds	r7, #20
 23fccd4:	e7f3      	b.n	23fccbe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fccd6:	6873      	ldr	r3, [r6, #4]
 23fccd8:	6063      	str	r3, [r4, #4]
}
 23fccda:	4620      	mov	r0, r4
 23fccdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcce0 <_GLOBAL__sub_I_logHandler>:
        capacity_(0) {
 23fcce0:	2300      	movs	r3, #0
 23fcce2:	b570      	push	{r4, r5, r6, lr}
 23fcce4:	b08c      	sub	sp, #48	; 0x30
 23fcce6:	e9cd 3300 	strd	r3, r3, [sp]
 23fccea:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fccec:	f002 fb1e 	bl	23ff32c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fccf0:	4c1c      	ldr	r4, [pc, #112]	; (23fcd64 <_GLOBAL__sub_I_logHandler+0x84>)
 23fccf2:	4605      	mov	r5, r0
 23fccf4:	4626      	mov	r6, r4
 23fccf6:	4669      	mov	r1, sp
 23fccf8:	a803      	add	r0, sp, #12
 23fccfa:	f7ff ffbe 	bl	23fcc7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fccfe:	a903      	add	r1, sp, #12
 23fcd00:	a806      	add	r0, sp, #24
 23fcd02:	f7ff ffba 	bl	23fcc7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fcd06:	4b18      	ldr	r3, [pc, #96]	; (23fcd68 <_GLOBAL__sub_I_logHandler+0x88>)
 23fcd08:	a906      	add	r1, sp, #24
 23fcd0a:	f846 3b04 	str.w	r3, [r6], #4
 23fcd0e:	a809      	add	r0, sp, #36	; 0x24
 23fcd10:	f7ff ffb3 	bl	23fcc7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fcd14:	aa09      	add	r2, sp, #36	; 0x24
 23fcd16:	211e      	movs	r1, #30
 23fcd18:	4630      	mov	r0, r6
 23fcd1a:	f001 fd41 	bl	23fe7a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcd1e:	a809      	add	r0, sp, #36	; 0x24
 23fcd20:	f7ff ff6a 	bl	23fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fcd24:	a806      	add	r0, sp, #24
 23fcd26:	f7ff ff67 	bl	23fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fcd2a:	4b10      	ldr	r3, [pc, #64]	; (23fcd6c <_GLOBAL__sub_I_logHandler+0x8c>)
 23fcd2c:	a803      	add	r0, sp, #12
 23fcd2e:	6023      	str	r3, [r4, #0]
 23fcd30:	6225      	str	r5, [r4, #32]
 23fcd32:	f7ff ff61 	bl	23fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fcd36:	4b0e      	ldr	r3, [pc, #56]	; (23fcd70 <_GLOBAL__sub_I_logHandler+0x90>)
 23fcd38:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fcd3a:	f002 faf7 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fcd3e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fcd42:	f002 fae1 	bl	23ff308 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fcd46:	f001 fa0f 	bl	23fe168 <_ZN5spark10LogManager8instanceEv>
 23fcd4a:	4621      	mov	r1, r4
 23fcd4c:	f001 fc00 	bl	23fe550 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 23fcd50:	4668      	mov	r0, sp
 23fcd52:	f7ff ff51 	bl	23fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
ADXL362 adxl362;
 23fcd56:	2112      	movs	r1, #18
 23fcd58:	4806      	ldr	r0, [pc, #24]	; (23fcd74 <_GLOBAL__sub_I_logHandler+0x94>)
 23fcd5a:	b00c      	add	sp, #48	; 0x30
 23fcd5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ADXL362 adxl362;
 23fcd60:	f000 b80a 	b.w	23fcd78 <_ZN7ADXL362C1Ei>
 23fcd64:	1007ae28 	.word	0x1007ae28
 23fcd68:	023ffbd0 	.word	0x023ffbd0
 23fcd6c:	023ffd0c 	.word	0x023ffd0c
 23fcd70:	023ffbe8 	.word	0x023ffbe8
 23fcd74:	1007ae24 	.word	0x1007ae24

023fcd78 <_ZN7ADXL362C1Ei>:
#define XL362_FILTER_CTL    0x2C
#define XL362_POWER_CTL     0x2D
#define XL362_SELF_TEST     0x2E


ADXL362::ADXL362(int slaveSelectPin) : slaveSelectPin(uint16_t(slaveSelectPin)) {}
 23fcd78:	8041      	strh	r1, [r0, #2]
 23fcd7a:	4770      	bx	lr

023fcd7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fcd7c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fcd7e:	4c0a      	ldr	r4, [pc, #40]	; (23fcda8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fcd80:	e8d4 1f8f 	ldab	r1, [r4]
 23fcd84:	f011 0101 	ands.w	r1, r1, #1
 23fcd88:	d10b      	bne.n	23fcda2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fcd8a:	4620      	mov	r0, r4
 23fcd8c:	9101      	str	r1, [sp, #4]
 23fcd8e:	f7ff fe83 	bl	23fca98 <__cxa_guard_acquire>
 23fcd92:	9901      	ldr	r1, [sp, #4]
 23fcd94:	b128      	cbz	r0, 23fcda2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fcd96:	4805      	ldr	r0, [pc, #20]	; (23fcdac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fcd98:	f002 f922 	bl	23fefe0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fcd9c:	4620      	mov	r0, r4
 23fcd9e:	f7ff fe80 	bl	23fcaa2 <__cxa_guard_release>
        return instance;
    }
 23fcda2:	4802      	ldr	r0, [pc, #8]	; (23fcdac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fcda4:	b002      	add	sp, #8
 23fcda6:	bd10      	pop	{r4, pc}
 23fcda8:	1007ae4c 	.word	0x1007ae4c
 23fcdac:	1007ae50 	.word	0x1007ae50

023fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 23fcdb0:	b507      	push	{r0, r1, r2, lr}
 23fcdb2:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
 23fcdb4:	f7ff ffe2 	bl	23fcd7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcdb8:	9901      	ldr	r1, [sp, #4]
    }
 23fcdba:	b003      	add	sp, #12
 23fcdbc:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
 23fcdc0:	f002 b940 	b.w	23ff044 <_ZN8SPIClass8transferEh>

023fcdc4 <_ZN7ADXL36219SPIwriteOneRegisterEhh>:
  digitalWrite(slaveSelectPin, HIGH);

  return regValue;
}

void ADXL362::SPIwriteOneRegister(uint8_t regAddress, uint8_t regValue){
 23fcdc4:	b570      	push	{r4, r5, r6, lr}
 23fcdc6:	460e      	mov	r6, r1
 23fcdc8:	4615      	mov	r5, r2
 23fcdca:	4604      	mov	r4, r0

  digitalWrite(slaveSelectPin, LOW);
 23fcdcc:	2100      	movs	r1, #0
 23fcdce:	8840      	ldrh	r0, [r0, #2]
 23fcdd0:	f002 fc05 	bl	23ff5de <digitalWrite>
  SPI.transfer(0x0A);  // write instruction
 23fcdd4:	200a      	movs	r0, #10
 23fcdd6:	f7ff ffeb 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fcdda:	4630      	mov	r0, r6
 23fcddc:	f7ff ffe8 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regValue);
 23fcde0:	4628      	mov	r0, r5
 23fcde2:	f7ff ffe5 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  digitalWrite(slaveSelectPin, HIGH);
 23fcde6:	8860      	ldrh	r0, [r4, #2]
 23fcde8:	2101      	movs	r1, #1
}
 23fcdea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(slaveSelectPin, HIGH);
 23fcdee:	f002 bbf6 	b.w	23ff5de <digitalWrite>

023fcdf2 <_ZN7ADXL36218SPIreadOneRegisterEh>:
uint8_t ADXL362::SPIreadOneRegister(uint8_t regAddress){
 23fcdf2:	b538      	push	{r3, r4, r5, lr}
 23fcdf4:	460d      	mov	r5, r1
 23fcdf6:	4604      	mov	r4, r0
  digitalWrite(slaveSelectPin, LOW);
 23fcdf8:	2100      	movs	r1, #0
 23fcdfa:	8840      	ldrh	r0, [r0, #2]
 23fcdfc:	f002 fbef 	bl	23ff5de <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fce00:	200b      	movs	r0, #11
 23fce02:	f7ff ffd5 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fce06:	4628      	mov	r0, r5
 23fce08:	f7ff ffd2 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  regValue = SPI.transfer(0x00);
 23fce0c:	2000      	movs	r0, #0
 23fce0e:	f7ff ffcf 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fce12:	4605      	mov	r5, r0
  digitalWrite(slaveSelectPin, HIGH);
 23fce14:	2101      	movs	r1, #1
 23fce16:	8860      	ldrh	r0, [r4, #2]
 23fce18:	f002 fbe1 	bl	23ff5de <digitalWrite>
}
 23fce1c:	4628      	mov	r0, r5
 23fce1e:	bd38      	pop	{r3, r4, r5, pc}

023fce20 <_ZN7ADXL36212beginMeasureEv>:
void ADXL362::beginMeasure() {
 23fce20:	b510      	push	{r4, lr}
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23fce22:	212d      	movs	r1, #45	; 0x2d
void ADXL362::beginMeasure() {
 23fce24:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23fce26:	f7ff ffe4 	bl	23fcdf2 <_ZN7ADXL36218SPIreadOneRegisterEh>
  temp = (temp & 0b11111100) | XL362_POWER_FLAG_MEASURE_RUNING;     // turn on measurement bit in Reg XL362_POWER_CTL
 23fce2a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  SPIwriteOneRegister(XL362_POWER_CTL, temp); // Write to XL362_POWER_CTL, Measurement Mode
 23fce2e:	f040 0202 	orr.w	r2, r0, #2
 23fce32:	212d      	movs	r1, #45	; 0x2d
 23fce34:	4620      	mov	r0, r4
 23fce36:	f7ff ffc5 	bl	23fcdc4 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23fce3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23fce3e:	200a      	movs	r0, #10
 23fce40:	f000 bcea 	b.w	23fd818 <delay>

023fce44 <_ZN7ADXL3629readXYZmgERiS0_S0_>:
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23fce44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fce48:	4604      	mov	r4, r0
 23fce4a:	468b      	mov	fp, r1
  digitalWrite(slaveSelectPin, LOW);
 23fce4c:	8840      	ldrh	r0, [r0, #2]
 23fce4e:	2100      	movs	r1, #0
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23fce50:	4691      	mov	r9, r2
 23fce52:	4698      	mov	r8, r3
  digitalWrite(slaveSelectPin, LOW);
 23fce54:	f002 fbc3 	bl	23ff5de <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fce58:	200b      	movs	r0, #11
 23fce5a:	f7ff ffa9 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(XL362_XDATA_L);  // Start at XData Reg
 23fce5e:	200e      	movs	r0, #14
 23fce60:	f7ff ffa6 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  short XData = SPI.transfer(0x00);
 23fce64:	2000      	movs	r0, #0
 23fce66:	f7ff ffa3 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fce6a:	4607      	mov	r7, r0
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fce6c:	2000      	movs	r0, #0
 23fce6e:	f7ff ff9f 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fce72:	9001      	str	r0, [sp, #4]
  short YData = SPI.transfer(0x00);
 23fce74:	2000      	movs	r0, #0
 23fce76:	f7ff ff9b 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fce7a:	4606      	mov	r6, r0
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fce7c:	2000      	movs	r0, #0
 23fce7e:	f7ff ff97 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fce82:	9000      	str	r0, [sp, #0]
  short ZData = SPI.transfer(0x00);
 23fce84:	2000      	movs	r0, #0
 23fce86:	f7ff ff93 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fce8a:	4605      	mov	r5, r0
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23fce8c:	2000      	movs	r0, #0
 23fce8e:	f7ff ff8f 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fce92:	4682      	mov	sl, r0
  digitalWrite(slaveSelectPin, HIGH);
 23fce94:	2101      	movs	r1, #1
 23fce96:	8860      	ldrh	r0, [r4, #2]
 23fce98:	f002 fba1 	bl	23ff5de <digitalWrite>
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fce9c:	9a01      	ldr	r2, [sp, #4]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fce9e:	9b00      	ldr	r3, [sp, #0]
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fcea0:	eb07 2702 	add.w	r7, r7, r2, lsl #8
  X = (int)XData * mgperLSB;
 23fcea4:	7822      	ldrb	r2, [r4, #0]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fcea6:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  X = (int)XData * mgperLSB;
 23fceaa:	fb12 f707 	smulbb	r7, r2, r7
 23fceae:	f8cb 7000 	str.w	r7, [fp]
  Y = (int)YData * mgperLSB;
 23fceb2:	7823      	ldrb	r3, [r4, #0]
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23fceb4:	eb05 250a 	add.w	r5, r5, sl, lsl #8
  Y = (int)YData * mgperLSB;
 23fceb8:	fb13 f606 	smulbb	r6, r3, r6
 23fcebc:	f8c9 6000 	str.w	r6, [r9]
  Z = (int)ZData * mgperLSB;
 23fcec0:	7822      	ldrb	r2, [r4, #0]
 23fcec2:	fb12 f505 	smulbb	r5, r2, r5
 23fcec6:	f8c8 5000 	str.w	r5, [r8]
}
 23fceca:	b003      	add	sp, #12
 23fcecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fced0 <_ZN7ADXL36212readXYZTDataERsS0_S0_Rf>:
void ADXL362::readXYZTData(short &XData, short &YData, short &ZData, float &Temperature){
 23fced0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fced4:	4689      	mov	r9, r1
 23fced6:	4605      	mov	r5, r0
  digitalWrite(slaveSelectPin, LOW);
 23fced8:	2100      	movs	r1, #0
 23fceda:	8840      	ldrh	r0, [r0, #2]
void ADXL362::readXYZTData(short &XData, short &YData, short &ZData, float &Temperature){
 23fcedc:	4690      	mov	r8, r2
 23fcede:	461f      	mov	r7, r3
 23fcee0:	9e08      	ldr	r6, [sp, #32]
  digitalWrite(slaveSelectPin, LOW);
 23fcee2:	f002 fb7c 	bl	23ff5de <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fcee6:	200b      	movs	r0, #11
 23fcee8:	f7ff ff62 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(XL362_XDATA_L);  // Start at XData Reg
 23fceec:	200e      	movs	r0, #14
 23fceee:	f7ff ff5f 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  XData = SPI.transfer(0x00);
 23fcef2:	2000      	movs	r0, #0
 23fcef4:	f7ff ff5c 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcef8:	4604      	mov	r4, r0
 23fcefa:	f8a9 0000 	strh.w	r0, [r9]
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fcefe:	2000      	movs	r0, #0
 23fcf00:	f7ff ff56 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcf04:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 23fcf08:	f8a9 0000 	strh.w	r0, [r9]
  YData = SPI.transfer(0x00);
 23fcf0c:	2000      	movs	r0, #0
 23fcf0e:	f7ff ff4f 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcf12:	4604      	mov	r4, r0
 23fcf14:	f8a8 0000 	strh.w	r0, [r8]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fcf18:	2000      	movs	r0, #0
 23fcf1a:	f7ff ff49 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcf1e:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 23fcf22:	f8a8 0000 	strh.w	r0, [r8]
  ZData = SPI.transfer(0x00);
 23fcf26:	2000      	movs	r0, #0
 23fcf28:	f7ff ff42 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcf2c:	8038      	strh	r0, [r7, #0]
 23fcf2e:	4604      	mov	r4, r0
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23fcf30:	2000      	movs	r0, #0
 23fcf32:	f7ff ff3d 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcf36:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 23fcf3a:	803c      	strh	r4, [r7, #0]
  short RawTemperature = SPI.transfer(0x00);
 23fcf3c:	2000      	movs	r0, #0
 23fcf3e:	f7ff ff37 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcf42:	4604      	mov	r4, r0
  RawTemperature = RawTemperature + ((short)SPI.transfer(0x00) << 8);
 23fcf44:	2000      	movs	r0, #0
 23fcf46:	f7ff ff33 	bl	23fcdb0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fcf4a:	eb04 2400 	add.w	r4, r4, r0, lsl #8
  Temperature = (float)RawTemperature * 0.065;
 23fcf4e:	b220      	sxth	r0, r4
 23fcf50:	ee07 0a90 	vmov	s15, r0
 23fcf54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fcf58:	ee17 0a90 	vmov	r0, s15
 23fcf5c:	f7ff faa0 	bl	23fc4a0 <__aeabi_f2d>
 23fcf60:	a307      	add	r3, pc, #28	; (adr r3, 23fcf80 <_ZN7ADXL36212readXYZTDataERsS0_S0_Rf+0xb0>)
 23fcf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcf66:	f7ff faf3 	bl	23fc550 <__aeabi_dmul>
 23fcf6a:	f7ff fd03 	bl	23fc974 <__aeabi_d2f>
 23fcf6e:	6030      	str	r0, [r6, #0]
  digitalWrite(slaveSelectPin, HIGH);
 23fcf70:	8868      	ldrh	r0, [r5, #2]
 23fcf72:	2101      	movs	r1, #1
}
 23fcf74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  digitalWrite(slaveSelectPin, HIGH);
 23fcf78:	f002 bb31 	b.w	23ff5de <digitalWrite>
 23fcf7c:	f3af 8000 	nop.w
 23fcf80:	0a3d70a4 	.word	0x0a3d70a4
 23fcf84:	3fb0a3d7 	.word	0x3fb0a3d7

023fcf88 <_ZN7ADXL3625beginEv>:
void ADXL362::begin() {
 23fcf88:	b510      	push	{r4, lr}
  pinMode(slaveSelectPin, OUTPUT);
 23fcf8a:	2101      	movs	r1, #1
void ADXL362::begin() {
 23fcf8c:	4604      	mov	r4, r0
  pinMode(slaveSelectPin, OUTPUT);
 23fcf8e:	8840      	ldrh	r0, [r0, #2]
 23fcf90:	f002 fb14 	bl	23ff5bc <pinMode>
        instance().begin();
 23fcf94:	f7ff fef2 	bl	23fcd7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcf98:	f002 f82c 	bl	23feff4 <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
 23fcf9c:	f7ff feee 	bl	23fcd7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcfa0:	2100      	movs	r1, #0
 23fcfa2:	f002 f83b 	bl	23ff01c <_ZN8SPIClass11setDataModeEh>
  delay(500);
 23fcfa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fcfaa:	f000 fc35 	bl	23fd818 <delay>
  mgperLSB = 1;
 23fcfae:	2301      	movs	r3, #1
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fcfb0:	4620      	mov	r0, r4
  mgperLSB = 1;
 23fcfb2:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fcfb4:	2252      	movs	r2, #82	; 0x52
 23fcfb6:	211f      	movs	r1, #31
 23fcfb8:	f7ff ff04 	bl	23fcdc4 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
 }
 23fcfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23fcfc0:	200a      	movs	r0, #10
 23fcfc2:	f000 bc29 	b.w	23fd818 <delay>
	...

023fcfc8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcfc8:	b509      	push	{r0, r3, lr}
 23fcfca:	4804      	ldr	r0, [pc, #16]	; (23fcfdc <os_mutex_recursive_create+0x14>)
 23fcfcc:	6800      	ldr	r0, [r0, #0]
 23fcfce:	4b04      	ldr	r3, [pc, #16]	; (23fcfe0 <os_mutex_recursive_create+0x18>)
 23fcfd0:	4403      	add	r3, r0
 23fcfd2:	681b      	ldr	r3, [r3, #0]
 23fcfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcfd6:	9302      	str	r3, [sp, #8]
 23fcfd8:	bd09      	pop	{r0, r3, pc}
 23fcfda:	0000      	.short	0x0000
 23fcfdc:	1007adac 	.word	0x1007adac
 23fcfe0:	00000030 	.word	0x00000030

023fcfe4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fcfe4:	b509      	push	{r0, r3, lr}
 23fcfe6:	4804      	ldr	r0, [pc, #16]	; (23fcff8 <os_mutex_recursive_destroy+0x14>)
 23fcfe8:	6800      	ldr	r0, [r0, #0]
 23fcfea:	4b04      	ldr	r3, [pc, #16]	; (23fcffc <os_mutex_recursive_destroy+0x18>)
 23fcfec:	4403      	add	r3, r0
 23fcfee:	681b      	ldr	r3, [r3, #0]
 23fcff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fcff2:	9302      	str	r3, [sp, #8]
 23fcff4:	bd09      	pop	{r0, r3, pc}
 23fcff6:	0000      	.short	0x0000
 23fcff8:	1007adac 	.word	0x1007adac
 23fcffc:	00000030 	.word	0x00000030

023fd000 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fd000:	b509      	push	{r0, r3, lr}
 23fd002:	4804      	ldr	r0, [pc, #16]	; (23fd014 <os_mutex_recursive_lock+0x14>)
 23fd004:	6800      	ldr	r0, [r0, #0]
 23fd006:	4b04      	ldr	r3, [pc, #16]	; (23fd018 <os_mutex_recursive_lock+0x18>)
 23fd008:	4403      	add	r3, r0
 23fd00a:	681b      	ldr	r3, [r3, #0]
 23fd00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fd00e:	9302      	str	r3, [sp, #8]
 23fd010:	bd09      	pop	{r0, r3, pc}
 23fd012:	0000      	.short	0x0000
 23fd014:	1007adac 	.word	0x1007adac
 23fd018:	00000030 	.word	0x00000030

023fd01c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fd01c:	b509      	push	{r0, r3, lr}
 23fd01e:	4804      	ldr	r0, [pc, #16]	; (23fd030 <os_mutex_recursive_unlock+0x14>)
 23fd020:	6800      	ldr	r0, [r0, #0]
 23fd022:	4b04      	ldr	r3, [pc, #16]	; (23fd034 <os_mutex_recursive_unlock+0x18>)
 23fd024:	4403      	add	r3, r0
 23fd026:	681b      	ldr	r3, [r3, #0]
 23fd028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd02a:	9302      	str	r3, [sp, #8]
 23fd02c:	bd09      	pop	{r0, r3, pc}
 23fd02e:	0000      	.short	0x0000
 23fd030:	1007adac 	.word	0x1007adac
 23fd034:	00000030 	.word	0x00000030

023fd038 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fd038:	b509      	push	{r0, r3, lr}
 23fd03a:	4804      	ldr	r0, [pc, #16]	; (23fd04c <HAL_RNG_GetRandomNumber+0x14>)
 23fd03c:	6800      	ldr	r0, [r0, #0]
 23fd03e:	4b04      	ldr	r3, [pc, #16]	; (23fd050 <HAL_RNG_GetRandomNumber+0x18>)
 23fd040:	4403      	add	r3, r0
 23fd042:	681b      	ldr	r3, [r3, #0]
 23fd044:	685b      	ldr	r3, [r3, #4]
 23fd046:	9302      	str	r3, [sp, #8]
 23fd048:	bd09      	pop	{r0, r3, pc}
 23fd04a:	0000      	.short	0x0000
 23fd04c:	1007adac 	.word	0x1007adac
 23fd050:	00000000 	.word	0x00000000

023fd054 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fd054:	b509      	push	{r0, r3, lr}
 23fd056:	4804      	ldr	r0, [pc, #16]	; (23fd068 <HAL_Delay_Microseconds+0x14>)
 23fd058:	6800      	ldr	r0, [r0, #0]
 23fd05a:	4b04      	ldr	r3, [pc, #16]	; (23fd06c <HAL_Delay_Microseconds+0x18>)
 23fd05c:	4403      	add	r3, r0
 23fd05e:	681b      	ldr	r3, [r3, #0]
 23fd060:	68db      	ldr	r3, [r3, #12]
 23fd062:	9302      	str	r3, [sp, #8]
 23fd064:	bd09      	pop	{r0, r3, pc}
 23fd066:	0000      	.short	0x0000
 23fd068:	1007adac 	.word	0x1007adac
 23fd06c:	00000000 	.word	0x00000000

023fd070 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fd070:	b509      	push	{r0, r3, lr}
 23fd072:	4804      	ldr	r0, [pc, #16]	; (23fd084 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fd074:	6800      	ldr	r0, [r0, #0]
 23fd076:	4b04      	ldr	r3, [pc, #16]	; (23fd088 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fd078:	4403      	add	r3, r0
 23fd07a:	681b      	ldr	r3, [r3, #0]
 23fd07c:	695b      	ldr	r3, [r3, #20]
 23fd07e:	9302      	str	r3, [sp, #8]
 23fd080:	bd09      	pop	{r0, r3, pc}
 23fd082:	0000      	.short	0x0000
 23fd084:	1007adac 	.word	0x1007adac
 23fd088:	00000000 	.word	0x00000000

023fd08c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fd08c:	b509      	push	{r0, r3, lr}
 23fd08e:	4804      	ldr	r0, [pc, #16]	; (23fd0a0 <hal_timer_millis+0x14>)
 23fd090:	6800      	ldr	r0, [r0, #0]
 23fd092:	4b04      	ldr	r3, [pc, #16]	; (23fd0a4 <hal_timer_millis+0x18>)
 23fd094:	4403      	add	r3, r0
 23fd096:	681b      	ldr	r3, [r3, #0]
 23fd098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fd09a:	9302      	str	r3, [sp, #8]
 23fd09c:	bd09      	pop	{r0, r3, pc}
 23fd09e:	0000      	.short	0x0000
 23fd0a0:	1007adac 	.word	0x1007adac
 23fd0a4:	00000000 	.word	0x00000000

023fd0a8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fd0a8:	b509      	push	{r0, r3, lr}
 23fd0aa:	4804      	ldr	r0, [pc, #16]	; (23fd0bc <hal_gpio_mode+0x14>)
 23fd0ac:	6800      	ldr	r0, [r0, #0]
 23fd0ae:	4b04      	ldr	r3, [pc, #16]	; (23fd0c0 <hal_gpio_mode+0x18>)
 23fd0b0:	4403      	add	r3, r0
 23fd0b2:	681b      	ldr	r3, [r3, #0]
 23fd0b4:	689b      	ldr	r3, [r3, #8]
 23fd0b6:	9302      	str	r3, [sp, #8]
 23fd0b8:	bd09      	pop	{r0, r3, pc}
 23fd0ba:	0000      	.short	0x0000
 23fd0bc:	1007adac 	.word	0x1007adac
 23fd0c0:	00000014 	.word	0x00000014

023fd0c4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fd0c4:	b509      	push	{r0, r3, lr}
 23fd0c6:	4804      	ldr	r0, [pc, #16]	; (23fd0d8 <hal_gpio_get_mode+0x14>)
 23fd0c8:	6800      	ldr	r0, [r0, #0]
 23fd0ca:	4b04      	ldr	r3, [pc, #16]	; (23fd0dc <hal_gpio_get_mode+0x18>)
 23fd0cc:	4403      	add	r3, r0
 23fd0ce:	681b      	ldr	r3, [r3, #0]
 23fd0d0:	68db      	ldr	r3, [r3, #12]
 23fd0d2:	9302      	str	r3, [sp, #8]
 23fd0d4:	bd09      	pop	{r0, r3, pc}
 23fd0d6:	0000      	.short	0x0000
 23fd0d8:	1007adac 	.word	0x1007adac
 23fd0dc:	00000014 	.word	0x00000014

023fd0e0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fd0e0:	b509      	push	{r0, r3, lr}
 23fd0e2:	4804      	ldr	r0, [pc, #16]	; (23fd0f4 <hal_gpio_write+0x14>)
 23fd0e4:	6800      	ldr	r0, [r0, #0]
 23fd0e6:	4b04      	ldr	r3, [pc, #16]	; (23fd0f8 <hal_gpio_write+0x18>)
 23fd0e8:	4403      	add	r3, r0
 23fd0ea:	681b      	ldr	r3, [r3, #0]
 23fd0ec:	691b      	ldr	r3, [r3, #16]
 23fd0ee:	9302      	str	r3, [sp, #8]
 23fd0f0:	bd09      	pop	{r0, r3, pc}
 23fd0f2:	0000      	.short	0x0000
 23fd0f4:	1007adac 	.word	0x1007adac
 23fd0f8:	00000014 	.word	0x00000014

023fd0fc <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fd0fc:	b509      	push	{r0, r3, lr}
 23fd0fe:	4804      	ldr	r0, [pc, #16]	; (23fd110 <hal_i2c_write+0x14>)
 23fd100:	6800      	ldr	r0, [r0, #0]
 23fd102:	4b04      	ldr	r3, [pc, #16]	; (23fd114 <hal_i2c_write+0x18>)
 23fd104:	4403      	add	r3, r0
 23fd106:	681b      	ldr	r3, [r3, #0]
 23fd108:	6a1b      	ldr	r3, [r3, #32]
 23fd10a:	9302      	str	r3, [sp, #8]
 23fd10c:	bd09      	pop	{r0, r3, pc}
 23fd10e:	0000      	.short	0x0000
 23fd110:	1007adac 	.word	0x1007adac
 23fd114:	00000010 	.word	0x00000010

023fd118 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fd118:	b509      	push	{r0, r3, lr}
 23fd11a:	4804      	ldr	r0, [pc, #16]	; (23fd12c <hal_i2c_available+0x14>)
 23fd11c:	6800      	ldr	r0, [r0, #0]
 23fd11e:	4b04      	ldr	r3, [pc, #16]	; (23fd130 <hal_i2c_available+0x18>)
 23fd120:	4403      	add	r3, r0
 23fd122:	681b      	ldr	r3, [r3, #0]
 23fd124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd126:	9302      	str	r3, [sp, #8]
 23fd128:	bd09      	pop	{r0, r3, pc}
 23fd12a:	0000      	.short	0x0000
 23fd12c:	1007adac 	.word	0x1007adac
 23fd130:	00000010 	.word	0x00000010

023fd134 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fd134:	b509      	push	{r0, r3, lr}
 23fd136:	4804      	ldr	r0, [pc, #16]	; (23fd148 <hal_i2c_read+0x14>)
 23fd138:	6800      	ldr	r0, [r0, #0]
 23fd13a:	4b04      	ldr	r3, [pc, #16]	; (23fd14c <hal_i2c_read+0x18>)
 23fd13c:	4403      	add	r3, r0
 23fd13e:	681b      	ldr	r3, [r3, #0]
 23fd140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd142:	9302      	str	r3, [sp, #8]
 23fd144:	bd09      	pop	{r0, r3, pc}
 23fd146:	0000      	.short	0x0000
 23fd148:	1007adac 	.word	0x1007adac
 23fd14c:	00000010 	.word	0x00000010

023fd150 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fd150:	b509      	push	{r0, r3, lr}
 23fd152:	4804      	ldr	r0, [pc, #16]	; (23fd164 <hal_i2c_peek+0x14>)
 23fd154:	6800      	ldr	r0, [r0, #0]
 23fd156:	4b04      	ldr	r3, [pc, #16]	; (23fd168 <hal_i2c_peek+0x18>)
 23fd158:	4403      	add	r3, r0
 23fd15a:	681b      	ldr	r3, [r3, #0]
 23fd15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd15e:	9302      	str	r3, [sp, #8]
 23fd160:	bd09      	pop	{r0, r3, pc}
 23fd162:	0000      	.short	0x0000
 23fd164:	1007adac 	.word	0x1007adac
 23fd168:	00000010 	.word	0x00000010

023fd16c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fd16c:	b509      	push	{r0, r3, lr}
 23fd16e:	4804      	ldr	r0, [pc, #16]	; (23fd180 <hal_i2c_flush+0x14>)
 23fd170:	6800      	ldr	r0, [r0, #0]
 23fd172:	4b04      	ldr	r3, [pc, #16]	; (23fd184 <hal_i2c_flush+0x18>)
 23fd174:	4403      	add	r3, r0
 23fd176:	681b      	ldr	r3, [r3, #0]
 23fd178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd17a:	9302      	str	r3, [sp, #8]
 23fd17c:	bd09      	pop	{r0, r3, pc}
 23fd17e:	0000      	.short	0x0000
 23fd180:	1007adac 	.word	0x1007adac
 23fd184:	00000010 	.word	0x00000010

023fd188 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fd188:	b509      	push	{r0, r3, lr}
 23fd18a:	4804      	ldr	r0, [pc, #16]	; (23fd19c <hal_i2c_is_enabled+0x14>)
 23fd18c:	6800      	ldr	r0, [r0, #0]
 23fd18e:	4b04      	ldr	r3, [pc, #16]	; (23fd1a0 <hal_i2c_is_enabled+0x18>)
 23fd190:	4403      	add	r3, r0
 23fd192:	681b      	ldr	r3, [r3, #0]
 23fd194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd196:	9302      	str	r3, [sp, #8]
 23fd198:	bd09      	pop	{r0, r3, pc}
 23fd19a:	0000      	.short	0x0000
 23fd19c:	1007adac 	.word	0x1007adac
 23fd1a0:	00000010 	.word	0x00000010

023fd1a4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fd1a4:	b509      	push	{r0, r3, lr}
 23fd1a6:	4804      	ldr	r0, [pc, #16]	; (23fd1b8 <hal_i2c_init+0x14>)
 23fd1a8:	6800      	ldr	r0, [r0, #0]
 23fd1aa:	4b04      	ldr	r3, [pc, #16]	; (23fd1bc <hal_i2c_init+0x18>)
 23fd1ac:	4403      	add	r3, r0
 23fd1ae:	681b      	ldr	r3, [r3, #0]
 23fd1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd1b2:	9302      	str	r3, [sp, #8]
 23fd1b4:	bd09      	pop	{r0, r3, pc}
 23fd1b6:	0000      	.short	0x0000
 23fd1b8:	1007adac 	.word	0x1007adac
 23fd1bc:	00000010 	.word	0x00000010

023fd1c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fd1c0:	b509      	push	{r0, r3, lr}
 23fd1c2:	4804      	ldr	r0, [pc, #16]	; (23fd1d4 <inet_inet_ntop+0x14>)
 23fd1c4:	6800      	ldr	r0, [r0, #0]
 23fd1c6:	4b04      	ldr	r3, [pc, #16]	; (23fd1d8 <inet_inet_ntop+0x18>)
 23fd1c8:	4403      	add	r3, r0
 23fd1ca:	681b      	ldr	r3, [r3, #0]
 23fd1cc:	695b      	ldr	r3, [r3, #20]
 23fd1ce:	9302      	str	r3, [sp, #8]
 23fd1d0:	bd09      	pop	{r0, r3, pc}
 23fd1d2:	0000      	.short	0x0000
 23fd1d4:	1007adac 	.word	0x1007adac
 23fd1d8:	0000004c 	.word	0x0000004c

023fd1dc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fd1dc:	b509      	push	{r0, r3, lr}
 23fd1de:	4804      	ldr	r0, [pc, #16]	; (23fd1f0 <netdb_freeaddrinfo+0x14>)
 23fd1e0:	6800      	ldr	r0, [r0, #0]
 23fd1e2:	4b04      	ldr	r3, [pc, #16]	; (23fd1f4 <netdb_freeaddrinfo+0x18>)
 23fd1e4:	4403      	add	r3, r0
 23fd1e6:	681b      	ldr	r3, [r3, #0]
 23fd1e8:	689b      	ldr	r3, [r3, #8]
 23fd1ea:	9302      	str	r3, [sp, #8]
 23fd1ec:	bd09      	pop	{r0, r3, pc}
 23fd1ee:	0000      	.short	0x0000
 23fd1f0:	1007adac 	.word	0x1007adac
 23fd1f4:	00000050 	.word	0x00000050

023fd1f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fd1f8:	b509      	push	{r0, r3, lr}
 23fd1fa:	4804      	ldr	r0, [pc, #16]	; (23fd20c <netdb_getaddrinfo+0x14>)
 23fd1fc:	6800      	ldr	r0, [r0, #0]
 23fd1fe:	4b04      	ldr	r3, [pc, #16]	; (23fd210 <netdb_getaddrinfo+0x18>)
 23fd200:	4403      	add	r3, r0
 23fd202:	681b      	ldr	r3, [r3, #0]
 23fd204:	68db      	ldr	r3, [r3, #12]
 23fd206:	9302      	str	r3, [sp, #8]
 23fd208:	bd09      	pop	{r0, r3, pc}
 23fd20a:	0000      	.short	0x0000
 23fd20c:	1007adac 	.word	0x1007adac
 23fd210:	00000050 	.word	0x00000050

023fd214 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fd214:	b509      	push	{r0, r3, lr}
 23fd216:	4804      	ldr	r0, [pc, #16]	; (23fd228 <hal_spi_begin+0x14>)
 23fd218:	6800      	ldr	r0, [r0, #0]
 23fd21a:	4b04      	ldr	r3, [pc, #16]	; (23fd22c <hal_spi_begin+0x18>)
 23fd21c:	4403      	add	r3, r0
 23fd21e:	681b      	ldr	r3, [r3, #0]
 23fd220:	681b      	ldr	r3, [r3, #0]
 23fd222:	9302      	str	r3, [sp, #8]
 23fd224:	bd09      	pop	{r0, r3, pc}
 23fd226:	0000      	.short	0x0000
 23fd228:	1007adac 	.word	0x1007adac
 23fd22c:	00000018 	.word	0x00000018

023fd230 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fd230:	b509      	push	{r0, r3, lr}
 23fd232:	4804      	ldr	r0, [pc, #16]	; (23fd244 <hal_spi_set_data_mode+0x14>)
 23fd234:	6800      	ldr	r0, [r0, #0]
 23fd236:	4b04      	ldr	r3, [pc, #16]	; (23fd248 <hal_spi_set_data_mode+0x18>)
 23fd238:	4403      	add	r3, r0
 23fd23a:	681b      	ldr	r3, [r3, #0]
 23fd23c:	68db      	ldr	r3, [r3, #12]
 23fd23e:	9302      	str	r3, [sp, #8]
 23fd240:	bd09      	pop	{r0, r3, pc}
 23fd242:	0000      	.short	0x0000
 23fd244:	1007adac 	.word	0x1007adac
 23fd248:	00000018 	.word	0x00000018

023fd24c <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fd24c:	b509      	push	{r0, r3, lr}
 23fd24e:	4804      	ldr	r0, [pc, #16]	; (23fd260 <hal_spi_transfer+0x14>)
 23fd250:	6800      	ldr	r0, [r0, #0]
 23fd252:	4b04      	ldr	r3, [pc, #16]	; (23fd264 <hal_spi_transfer+0x18>)
 23fd254:	4403      	add	r3, r0
 23fd256:	681b      	ldr	r3, [r3, #0]
 23fd258:	695b      	ldr	r3, [r3, #20]
 23fd25a:	9302      	str	r3, [sp, #8]
 23fd25c:	bd09      	pop	{r0, r3, pc}
 23fd25e:	0000      	.short	0x0000
 23fd260:	1007adac 	.word	0x1007adac
 23fd264:	00000018 	.word	0x00000018

023fd268 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fd268:	b509      	push	{r0, r3, lr}
 23fd26a:	4804      	ldr	r0, [pc, #16]	; (23fd27c <hal_spi_init+0x14>)
 23fd26c:	6800      	ldr	r0, [r0, #0]
 23fd26e:	4b04      	ldr	r3, [pc, #16]	; (23fd280 <hal_spi_init+0x18>)
 23fd270:	4403      	add	r3, r0
 23fd272:	681b      	ldr	r3, [r3, #0]
 23fd274:	69db      	ldr	r3, [r3, #28]
 23fd276:	9302      	str	r3, [sp, #8]
 23fd278:	bd09      	pop	{r0, r3, pc}
 23fd27a:	0000      	.short	0x0000
 23fd27c:	1007adac 	.word	0x1007adac
 23fd280:	00000018 	.word	0x00000018

023fd284 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fd284:	b509      	push	{r0, r3, lr}
 23fd286:	4804      	ldr	r0, [pc, #16]	; (23fd298 <hal_spi_is_enabled+0x14>)
 23fd288:	6800      	ldr	r0, [r0, #0]
 23fd28a:	4b04      	ldr	r3, [pc, #16]	; (23fd29c <hal_spi_is_enabled+0x18>)
 23fd28c:	4403      	add	r3, r0
 23fd28e:	681b      	ldr	r3, [r3, #0]
 23fd290:	6a1b      	ldr	r3, [r3, #32]
 23fd292:	9302      	str	r3, [sp, #8]
 23fd294:	bd09      	pop	{r0, r3, pc}
 23fd296:	0000      	.short	0x0000
 23fd298:	1007adac 	.word	0x1007adac
 23fd29c:	00000018 	.word	0x00000018

023fd2a0 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fd2a0:	b509      	push	{r0, r3, lr}
 23fd2a2:	4804      	ldr	r0, [pc, #16]	; (23fd2b4 <hal_spi_acquire+0x14>)
 23fd2a4:	6800      	ldr	r0, [r0, #0]
 23fd2a6:	4b04      	ldr	r3, [pc, #16]	; (23fd2b8 <hal_spi_acquire+0x18>)
 23fd2a8:	4403      	add	r3, r0
 23fd2aa:	681b      	ldr	r3, [r3, #0]
 23fd2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd2ae:	9302      	str	r3, [sp, #8]
 23fd2b0:	bd09      	pop	{r0, r3, pc}
 23fd2b2:	0000      	.short	0x0000
 23fd2b4:	1007adac 	.word	0x1007adac
 23fd2b8:	00000018 	.word	0x00000018

023fd2bc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fd2bc:	b509      	push	{r0, r3, lr}
 23fd2be:	4804      	ldr	r0, [pc, #16]	; (23fd2d0 <hal_spi_release+0x14>)
 23fd2c0:	6800      	ldr	r0, [r0, #0]
 23fd2c2:	4b04      	ldr	r3, [pc, #16]	; (23fd2d4 <hal_spi_release+0x18>)
 23fd2c4:	4403      	add	r3, r0
 23fd2c6:	681b      	ldr	r3, [r3, #0]
 23fd2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd2ca:	9302      	str	r3, [sp, #8]
 23fd2cc:	bd09      	pop	{r0, r3, pc}
 23fd2ce:	0000      	.short	0x0000
 23fd2d0:	1007adac 	.word	0x1007adac
 23fd2d4:	00000018 	.word	0x00000018

023fd2d8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fd2d8:	b509      	push	{r0, r3, lr}
 23fd2da:	4804      	ldr	r0, [pc, #16]	; (23fd2ec <hal_usart_end+0x14>)
 23fd2dc:	6800      	ldr	r0, [r0, #0]
 23fd2de:	4b04      	ldr	r3, [pc, #16]	; (23fd2f0 <hal_usart_end+0x18>)
 23fd2e0:	4403      	add	r3, r0
 23fd2e2:	681b      	ldr	r3, [r3, #0]
 23fd2e4:	689b      	ldr	r3, [r3, #8]
 23fd2e6:	9302      	str	r3, [sp, #8]
 23fd2e8:	bd09      	pop	{r0, r3, pc}
 23fd2ea:	0000      	.short	0x0000
 23fd2ec:	1007adac 	.word	0x1007adac
 23fd2f0:	00000024 	.word	0x00000024

023fd2f4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fd2f4:	b509      	push	{r0, r3, lr}
 23fd2f6:	4804      	ldr	r0, [pc, #16]	; (23fd308 <hal_usart_write+0x14>)
 23fd2f8:	6800      	ldr	r0, [r0, #0]
 23fd2fa:	4b04      	ldr	r3, [pc, #16]	; (23fd30c <hal_usart_write+0x18>)
 23fd2fc:	4403      	add	r3, r0
 23fd2fe:	681b      	ldr	r3, [r3, #0]
 23fd300:	68db      	ldr	r3, [r3, #12]
 23fd302:	9302      	str	r3, [sp, #8]
 23fd304:	bd09      	pop	{r0, r3, pc}
 23fd306:	0000      	.short	0x0000
 23fd308:	1007adac 	.word	0x1007adac
 23fd30c:	00000024 	.word	0x00000024

023fd310 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fd310:	b509      	push	{r0, r3, lr}
 23fd312:	4804      	ldr	r0, [pc, #16]	; (23fd324 <hal_usart_available+0x14>)
 23fd314:	6800      	ldr	r0, [r0, #0]
 23fd316:	4b04      	ldr	r3, [pc, #16]	; (23fd328 <hal_usart_available+0x18>)
 23fd318:	4403      	add	r3, r0
 23fd31a:	681b      	ldr	r3, [r3, #0]
 23fd31c:	691b      	ldr	r3, [r3, #16]
 23fd31e:	9302      	str	r3, [sp, #8]
 23fd320:	bd09      	pop	{r0, r3, pc}
 23fd322:	0000      	.short	0x0000
 23fd324:	1007adac 	.word	0x1007adac
 23fd328:	00000024 	.word	0x00000024

023fd32c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fd32c:	b509      	push	{r0, r3, lr}
 23fd32e:	4804      	ldr	r0, [pc, #16]	; (23fd340 <hal_usart_read+0x14>)
 23fd330:	6800      	ldr	r0, [r0, #0]
 23fd332:	4b04      	ldr	r3, [pc, #16]	; (23fd344 <hal_usart_read+0x18>)
 23fd334:	4403      	add	r3, r0
 23fd336:	681b      	ldr	r3, [r3, #0]
 23fd338:	695b      	ldr	r3, [r3, #20]
 23fd33a:	9302      	str	r3, [sp, #8]
 23fd33c:	bd09      	pop	{r0, r3, pc}
 23fd33e:	0000      	.short	0x0000
 23fd340:	1007adac 	.word	0x1007adac
 23fd344:	00000024 	.word	0x00000024

023fd348 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fd348:	b509      	push	{r0, r3, lr}
 23fd34a:	4804      	ldr	r0, [pc, #16]	; (23fd35c <hal_usart_peek+0x14>)
 23fd34c:	6800      	ldr	r0, [r0, #0]
 23fd34e:	4b04      	ldr	r3, [pc, #16]	; (23fd360 <hal_usart_peek+0x18>)
 23fd350:	4403      	add	r3, r0
 23fd352:	681b      	ldr	r3, [r3, #0]
 23fd354:	699b      	ldr	r3, [r3, #24]
 23fd356:	9302      	str	r3, [sp, #8]
 23fd358:	bd09      	pop	{r0, r3, pc}
 23fd35a:	0000      	.short	0x0000
 23fd35c:	1007adac 	.word	0x1007adac
 23fd360:	00000024 	.word	0x00000024

023fd364 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fd364:	b509      	push	{r0, r3, lr}
 23fd366:	4804      	ldr	r0, [pc, #16]	; (23fd378 <hal_usart_flush+0x14>)
 23fd368:	6800      	ldr	r0, [r0, #0]
 23fd36a:	4b04      	ldr	r3, [pc, #16]	; (23fd37c <hal_usart_flush+0x18>)
 23fd36c:	4403      	add	r3, r0
 23fd36e:	681b      	ldr	r3, [r3, #0]
 23fd370:	69db      	ldr	r3, [r3, #28]
 23fd372:	9302      	str	r3, [sp, #8]
 23fd374:	bd09      	pop	{r0, r3, pc}
 23fd376:	0000      	.short	0x0000
 23fd378:	1007adac 	.word	0x1007adac
 23fd37c:	00000024 	.word	0x00000024

023fd380 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fd380:	b509      	push	{r0, r3, lr}
 23fd382:	4804      	ldr	r0, [pc, #16]	; (23fd394 <hal_usart_is_enabled+0x14>)
 23fd384:	6800      	ldr	r0, [r0, #0]
 23fd386:	4b04      	ldr	r3, [pc, #16]	; (23fd398 <hal_usart_is_enabled+0x18>)
 23fd388:	4403      	add	r3, r0
 23fd38a:	681b      	ldr	r3, [r3, #0]
 23fd38c:	6a1b      	ldr	r3, [r3, #32]
 23fd38e:	9302      	str	r3, [sp, #8]
 23fd390:	bd09      	pop	{r0, r3, pc}
 23fd392:	0000      	.short	0x0000
 23fd394:	1007adac 	.word	0x1007adac
 23fd398:	00000024 	.word	0x00000024

023fd39c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fd39c:	b509      	push	{r0, r3, lr}
 23fd39e:	4804      	ldr	r0, [pc, #16]	; (23fd3b0 <hal_usart_available_data_for_write+0x14>)
 23fd3a0:	6800      	ldr	r0, [r0, #0]
 23fd3a2:	4b04      	ldr	r3, [pc, #16]	; (23fd3b4 <hal_usart_available_data_for_write+0x18>)
 23fd3a4:	4403      	add	r3, r0
 23fd3a6:	681b      	ldr	r3, [r3, #0]
 23fd3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd3aa:	9302      	str	r3, [sp, #8]
 23fd3ac:	bd09      	pop	{r0, r3, pc}
 23fd3ae:	0000      	.short	0x0000
 23fd3b0:	1007adac 	.word	0x1007adac
 23fd3b4:	00000024 	.word	0x00000024

023fd3b8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fd3b8:	b509      	push	{r0, r3, lr}
 23fd3ba:	4804      	ldr	r0, [pc, #16]	; (23fd3cc <hal_usart_begin_config+0x14>)
 23fd3bc:	6800      	ldr	r0, [r0, #0]
 23fd3be:	4b04      	ldr	r3, [pc, #16]	; (23fd3d0 <hal_usart_begin_config+0x18>)
 23fd3c0:	4403      	add	r3, r0
 23fd3c2:	681b      	ldr	r3, [r3, #0]
 23fd3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd3c6:	9302      	str	r3, [sp, #8]
 23fd3c8:	bd09      	pop	{r0, r3, pc}
 23fd3ca:	0000      	.short	0x0000
 23fd3cc:	1007adac 	.word	0x1007adac
 23fd3d0:	00000024 	.word	0x00000024

023fd3d4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fd3d4:	b509      	push	{r0, r3, lr}
 23fd3d6:	4804      	ldr	r0, [pc, #16]	; (23fd3e8 <hal_usart_init_ex+0x14>)
 23fd3d8:	6800      	ldr	r0, [r0, #0]
 23fd3da:	4b04      	ldr	r3, [pc, #16]	; (23fd3ec <hal_usart_init_ex+0x18>)
 23fd3dc:	4403      	add	r3, r0
 23fd3de:	681b      	ldr	r3, [r3, #0]
 23fd3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd3e2:	9302      	str	r3, [sp, #8]
 23fd3e4:	bd09      	pop	{r0, r3, pc}
 23fd3e6:	0000      	.short	0x0000
 23fd3e8:	1007adac 	.word	0x1007adac
 23fd3ec:	00000024 	.word	0x00000024

023fd3f0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fd3f0:	b509      	push	{r0, r3, lr}
 23fd3f2:	4804      	ldr	r0, [pc, #16]	; (23fd404 <HAL_USB_USART_Init+0x14>)
 23fd3f4:	6800      	ldr	r0, [r0, #0]
 23fd3f6:	4b04      	ldr	r3, [pc, #16]	; (23fd408 <HAL_USB_USART_Init+0x18>)
 23fd3f8:	4403      	add	r3, r0
 23fd3fa:	681b      	ldr	r3, [r3, #0]
 23fd3fc:	681b      	ldr	r3, [r3, #0]
 23fd3fe:	9302      	str	r3, [sp, #8]
 23fd400:	bd09      	pop	{r0, r3, pc}
 23fd402:	0000      	.short	0x0000
 23fd404:	1007adac 	.word	0x1007adac
 23fd408:	00000034 	.word	0x00000034

023fd40c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fd40c:	b509      	push	{r0, r3, lr}
 23fd40e:	4804      	ldr	r0, [pc, #16]	; (23fd420 <HAL_USB_USART_Begin+0x14>)
 23fd410:	6800      	ldr	r0, [r0, #0]
 23fd412:	4b04      	ldr	r3, [pc, #16]	; (23fd424 <HAL_USB_USART_Begin+0x18>)
 23fd414:	4403      	add	r3, r0
 23fd416:	681b      	ldr	r3, [r3, #0]
 23fd418:	685b      	ldr	r3, [r3, #4]
 23fd41a:	9302      	str	r3, [sp, #8]
 23fd41c:	bd09      	pop	{r0, r3, pc}
 23fd41e:	0000      	.short	0x0000
 23fd420:	1007adac 	.word	0x1007adac
 23fd424:	00000034 	.word	0x00000034

023fd428 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fd428:	b509      	push	{r0, r3, lr}
 23fd42a:	4804      	ldr	r0, [pc, #16]	; (23fd43c <HAL_USB_USART_End+0x14>)
 23fd42c:	6800      	ldr	r0, [r0, #0]
 23fd42e:	4b04      	ldr	r3, [pc, #16]	; (23fd440 <HAL_USB_USART_End+0x18>)
 23fd430:	4403      	add	r3, r0
 23fd432:	681b      	ldr	r3, [r3, #0]
 23fd434:	689b      	ldr	r3, [r3, #8]
 23fd436:	9302      	str	r3, [sp, #8]
 23fd438:	bd09      	pop	{r0, r3, pc}
 23fd43a:	0000      	.short	0x0000
 23fd43c:	1007adac 	.word	0x1007adac
 23fd440:	00000034 	.word	0x00000034

023fd444 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fd444:	b509      	push	{r0, r3, lr}
 23fd446:	4804      	ldr	r0, [pc, #16]	; (23fd458 <HAL_USB_USART_Available_Data+0x14>)
 23fd448:	6800      	ldr	r0, [r0, #0]
 23fd44a:	4b04      	ldr	r3, [pc, #16]	; (23fd45c <HAL_USB_USART_Available_Data+0x18>)
 23fd44c:	4403      	add	r3, r0
 23fd44e:	681b      	ldr	r3, [r3, #0]
 23fd450:	691b      	ldr	r3, [r3, #16]
 23fd452:	9302      	str	r3, [sp, #8]
 23fd454:	bd09      	pop	{r0, r3, pc}
 23fd456:	0000      	.short	0x0000
 23fd458:	1007adac 	.word	0x1007adac
 23fd45c:	00000034 	.word	0x00000034

023fd460 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fd460:	b509      	push	{r0, r3, lr}
 23fd462:	4804      	ldr	r0, [pc, #16]	; (23fd474 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd464:	6800      	ldr	r0, [r0, #0]
 23fd466:	4b04      	ldr	r3, [pc, #16]	; (23fd478 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd468:	4403      	add	r3, r0
 23fd46a:	681b      	ldr	r3, [r3, #0]
 23fd46c:	695b      	ldr	r3, [r3, #20]
 23fd46e:	9302      	str	r3, [sp, #8]
 23fd470:	bd09      	pop	{r0, r3, pc}
 23fd472:	0000      	.short	0x0000
 23fd474:	1007adac 	.word	0x1007adac
 23fd478:	00000034 	.word	0x00000034

023fd47c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd47c:	b509      	push	{r0, r3, lr}
 23fd47e:	4804      	ldr	r0, [pc, #16]	; (23fd490 <HAL_USB_USART_Receive_Data+0x14>)
 23fd480:	6800      	ldr	r0, [r0, #0]
 23fd482:	4b04      	ldr	r3, [pc, #16]	; (23fd494 <HAL_USB_USART_Receive_Data+0x18>)
 23fd484:	4403      	add	r3, r0
 23fd486:	681b      	ldr	r3, [r3, #0]
 23fd488:	699b      	ldr	r3, [r3, #24]
 23fd48a:	9302      	str	r3, [sp, #8]
 23fd48c:	bd09      	pop	{r0, r3, pc}
 23fd48e:	0000      	.short	0x0000
 23fd490:	1007adac 	.word	0x1007adac
 23fd494:	00000034 	.word	0x00000034

023fd498 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd498:	b509      	push	{r0, r3, lr}
 23fd49a:	4804      	ldr	r0, [pc, #16]	; (23fd4ac <HAL_USB_USART_Send_Data+0x14>)
 23fd49c:	6800      	ldr	r0, [r0, #0]
 23fd49e:	4b04      	ldr	r3, [pc, #16]	; (23fd4b0 <HAL_USB_USART_Send_Data+0x18>)
 23fd4a0:	4403      	add	r3, r0
 23fd4a2:	681b      	ldr	r3, [r3, #0]
 23fd4a4:	69db      	ldr	r3, [r3, #28]
 23fd4a6:	9302      	str	r3, [sp, #8]
 23fd4a8:	bd09      	pop	{r0, r3, pc}
 23fd4aa:	0000      	.short	0x0000
 23fd4ac:	1007adac 	.word	0x1007adac
 23fd4b0:	00000034 	.word	0x00000034

023fd4b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fd4b4:	b509      	push	{r0, r3, lr}
 23fd4b6:	4804      	ldr	r0, [pc, #16]	; (23fd4c8 <HAL_USB_USART_Flush_Data+0x14>)
 23fd4b8:	6800      	ldr	r0, [r0, #0]
 23fd4ba:	4b04      	ldr	r3, [pc, #16]	; (23fd4cc <HAL_USB_USART_Flush_Data+0x18>)
 23fd4bc:	4403      	add	r3, r0
 23fd4be:	681b      	ldr	r3, [r3, #0]
 23fd4c0:	6a1b      	ldr	r3, [r3, #32]
 23fd4c2:	9302      	str	r3, [sp, #8]
 23fd4c4:	bd09      	pop	{r0, r3, pc}
 23fd4c6:	0000      	.short	0x0000
 23fd4c8:	1007adac 	.word	0x1007adac
 23fd4cc:	00000034 	.word	0x00000034

023fd4d0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fd4d0:	b509      	push	{r0, r3, lr}
 23fd4d2:	4804      	ldr	r0, [pc, #16]	; (23fd4e4 <HAL_USB_USART_Is_Connected+0x14>)
 23fd4d4:	6800      	ldr	r0, [r0, #0]
 23fd4d6:	4b04      	ldr	r3, [pc, #16]	; (23fd4e8 <HAL_USB_USART_Is_Connected+0x18>)
 23fd4d8:	4403      	add	r3, r0
 23fd4da:	681b      	ldr	r3, [r3, #0]
 23fd4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd4de:	9302      	str	r3, [sp, #8]
 23fd4e0:	bd09      	pop	{r0, r3, pc}
 23fd4e2:	0000      	.short	0x0000
 23fd4e4:	1007adac 	.word	0x1007adac
 23fd4e8:	00000034 	.word	0x00000034

023fd4ec <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd4ec:	b509      	push	{r0, r3, lr}
 23fd4ee:	4804      	ldr	r0, [pc, #16]	; (23fd500 <panic_+0x14>)
 23fd4f0:	6800      	ldr	r0, [r0, #0]
 23fd4f2:	4b04      	ldr	r3, [pc, #16]	; (23fd504 <panic_+0x18>)
 23fd4f4:	4403      	add	r3, r0
 23fd4f6:	681b      	ldr	r3, [r3, #0]
 23fd4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd4fa:	9302      	str	r3, [sp, #8]
 23fd4fc:	bd09      	pop	{r0, r3, pc}
 23fd4fe:	0000      	.short	0x0000
 23fd500:	1007adac 	.word	0x1007adac
 23fd504:	00000048 	.word	0x00000048

023fd508 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fd508:	b509      	push	{r0, r3, lr}
 23fd50a:	4804      	ldr	r0, [pc, #16]	; (23fd51c <log_message_v+0x14>)
 23fd50c:	6800      	ldr	r0, [r0, #0]
 23fd50e:	4b04      	ldr	r3, [pc, #16]	; (23fd520 <log_message_v+0x18>)
 23fd510:	4403      	add	r3, r0
 23fd512:	681b      	ldr	r3, [r3, #0]
 23fd514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd516:	9302      	str	r3, [sp, #8]
 23fd518:	bd09      	pop	{r0, r3, pc}
 23fd51a:	0000      	.short	0x0000
 23fd51c:	1007adac 	.word	0x1007adac
 23fd520:	00000048 	.word	0x00000048

023fd524 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fd524:	b509      	push	{r0, r3, lr}
 23fd526:	4804      	ldr	r0, [pc, #16]	; (23fd538 <log_level_name+0x14>)
 23fd528:	6800      	ldr	r0, [r0, #0]
 23fd52a:	4b04      	ldr	r3, [pc, #16]	; (23fd53c <log_level_name+0x18>)
 23fd52c:	4403      	add	r3, r0
 23fd52e:	681b      	ldr	r3, [r3, #0]
 23fd530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fd532:	9302      	str	r3, [sp, #8]
 23fd534:	bd09      	pop	{r0, r3, pc}
 23fd536:	0000      	.short	0x0000
 23fd538:	1007adac 	.word	0x1007adac
 23fd53c:	00000048 	.word	0x00000048

023fd540 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fd540:	b509      	push	{r0, r3, lr}
 23fd542:	4804      	ldr	r0, [pc, #16]	; (23fd554 <log_set_callbacks+0x14>)
 23fd544:	6800      	ldr	r0, [r0, #0]
 23fd546:	4b04      	ldr	r3, [pc, #16]	; (23fd558 <log_set_callbacks+0x18>)
 23fd548:	4403      	add	r3, r0
 23fd54a:	681b      	ldr	r3, [r3, #0]
 23fd54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fd54e:	9302      	str	r3, [sp, #8]
 23fd550:	bd09      	pop	{r0, r3, pc}
 23fd552:	0000      	.short	0x0000
 23fd554:	1007adac 	.word	0x1007adac
 23fd558:	00000048 	.word	0x00000048

023fd55c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd55c:	b509      	push	{r0, r3, lr}
 23fd55e:	4804      	ldr	r0, [pc, #16]	; (23fd570 <set_system_mode+0x14>)
 23fd560:	6800      	ldr	r0, [r0, #0]
 23fd562:	4b04      	ldr	r3, [pc, #16]	; (23fd574 <set_system_mode+0x18>)
 23fd564:	4403      	add	r3, r0
 23fd566:	681b      	ldr	r3, [r3, #0]
 23fd568:	685b      	ldr	r3, [r3, #4]
 23fd56a:	9302      	str	r3, [sp, #8]
 23fd56c:	bd09      	pop	{r0, r3, pc}
 23fd56e:	0000      	.short	0x0000
 23fd570:	1007adac 	.word	0x1007adac
 23fd574:	00000008 	.word	0x00000008

023fd578 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fd578:	b509      	push	{r0, r3, lr}
 23fd57a:	4804      	ldr	r0, [pc, #16]	; (23fd58c <system_delay_ms+0x14>)
 23fd57c:	6800      	ldr	r0, [r0, #0]
 23fd57e:	4b04      	ldr	r3, [pc, #16]	; (23fd590 <system_delay_ms+0x18>)
 23fd580:	4403      	add	r3, r0
 23fd582:	681b      	ldr	r3, [r3, #0]
 23fd584:	695b      	ldr	r3, [r3, #20]
 23fd586:	9302      	str	r3, [sp, #8]
 23fd588:	bd09      	pop	{r0, r3, pc}
 23fd58a:	0000      	.short	0x0000
 23fd58c:	1007adac 	.word	0x1007adac
 23fd590:	00000008 	.word	0x00000008

023fd594 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd594:	b509      	push	{r0, r3, lr}
 23fd596:	4804      	ldr	r0, [pc, #16]	; (23fd5a8 <system_ctrl_set_app_request_handler+0x14>)
 23fd598:	6800      	ldr	r0, [r0, #0]
 23fd59a:	4b04      	ldr	r3, [pc, #16]	; (23fd5ac <system_ctrl_set_app_request_handler+0x18>)
 23fd59c:	4403      	add	r3, r0
 23fd59e:	681b      	ldr	r3, [r3, #0]
 23fd5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd5a4:	9302      	str	r3, [sp, #8]
 23fd5a6:	bd09      	pop	{r0, r3, pc}
 23fd5a8:	1007adac 	.word	0x1007adac
 23fd5ac:	00000008 	.word	0x00000008

023fd5b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd5b0:	b509      	push	{r0, r3, lr}
 23fd5b2:	4804      	ldr	r0, [pc, #16]	; (23fd5c4 <system_ctrl_set_result+0x14>)
 23fd5b4:	6800      	ldr	r0, [r0, #0]
 23fd5b6:	4b04      	ldr	r3, [pc, #16]	; (23fd5c8 <system_ctrl_set_result+0x18>)
 23fd5b8:	4403      	add	r3, r0
 23fd5ba:	681b      	ldr	r3, [r3, #0]
 23fd5bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd5c0:	9302      	str	r3, [sp, #8]
 23fd5c2:	bd09      	pop	{r0, r3, pc}
 23fd5c4:	1007adac 	.word	0x1007adac
 23fd5c8:	00000008 	.word	0x00000008

023fd5cc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fd5cc:	b509      	push	{r0, r3, lr}
 23fd5ce:	4804      	ldr	r0, [pc, #16]	; (23fd5e0 <spark_process+0x14>)
 23fd5d0:	6800      	ldr	r0, [r0, #0]
 23fd5d2:	4b04      	ldr	r3, [pc, #16]	; (23fd5e4 <spark_process+0x18>)
 23fd5d4:	4403      	add	r3, r0
 23fd5d6:	681b      	ldr	r3, [r3, #0]
 23fd5d8:	689b      	ldr	r3, [r3, #8]
 23fd5da:	9302      	str	r3, [sp, #8]
 23fd5dc:	bd09      	pop	{r0, r3, pc}
 23fd5de:	0000      	.short	0x0000
 23fd5e0:	1007adac 	.word	0x1007adac
 23fd5e4:	0000002c 	.word	0x0000002c

023fd5e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd5e8:	b509      	push	{r0, r3, lr}
 23fd5ea:	4804      	ldr	r0, [pc, #16]	; (23fd5fc <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd5ec:	6800      	ldr	r0, [r0, #0]
 23fd5ee:	4b04      	ldr	r3, [pc, #16]	; (23fd600 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd5f0:	4403      	add	r3, r0
 23fd5f2:	681b      	ldr	r3, [r3, #0]
 23fd5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd5f6:	9302      	str	r3, [sp, #8]
 23fd5f8:	bd09      	pop	{r0, r3, pc}
 23fd5fa:	0000      	.short	0x0000
 23fd5fc:	1007adac 	.word	0x1007adac
 23fd600:	0000002c 	.word	0x0000002c

023fd604 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd604:	b509      	push	{r0, r3, lr}
 23fd606:	4804      	ldr	r0, [pc, #16]	; (23fd618 <network_connect+0x14>)
 23fd608:	6800      	ldr	r0, [r0, #0]
 23fd60a:	4b04      	ldr	r3, [pc, #16]	; (23fd61c <network_connect+0x18>)
 23fd60c:	4403      	add	r3, r0
 23fd60e:	681b      	ldr	r3, [r3, #0]
 23fd610:	685b      	ldr	r3, [r3, #4]
 23fd612:	9302      	str	r3, [sp, #8]
 23fd614:	bd09      	pop	{r0, r3, pc}
 23fd616:	0000      	.short	0x0000
 23fd618:	1007adac 	.word	0x1007adac
 23fd61c:	00000028 	.word	0x00000028

023fd620 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd620:	b509      	push	{r0, r3, lr}
 23fd622:	4804      	ldr	r0, [pc, #16]	; (23fd634 <network_connecting+0x14>)
 23fd624:	6800      	ldr	r0, [r0, #0]
 23fd626:	4b04      	ldr	r3, [pc, #16]	; (23fd638 <network_connecting+0x18>)
 23fd628:	4403      	add	r3, r0
 23fd62a:	681b      	ldr	r3, [r3, #0]
 23fd62c:	689b      	ldr	r3, [r3, #8]
 23fd62e:	9302      	str	r3, [sp, #8]
 23fd630:	bd09      	pop	{r0, r3, pc}
 23fd632:	0000      	.short	0x0000
 23fd634:	1007adac 	.word	0x1007adac
 23fd638:	00000028 	.word	0x00000028

023fd63c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd63c:	b509      	push	{r0, r3, lr}
 23fd63e:	4804      	ldr	r0, [pc, #16]	; (23fd650 <network_disconnect+0x14>)
 23fd640:	6800      	ldr	r0, [r0, #0]
 23fd642:	4b04      	ldr	r3, [pc, #16]	; (23fd654 <network_disconnect+0x18>)
 23fd644:	4403      	add	r3, r0
 23fd646:	681b      	ldr	r3, [r3, #0]
 23fd648:	68db      	ldr	r3, [r3, #12]
 23fd64a:	9302      	str	r3, [sp, #8]
 23fd64c:	bd09      	pop	{r0, r3, pc}
 23fd64e:	0000      	.short	0x0000
 23fd650:	1007adac 	.word	0x1007adac
 23fd654:	00000028 	.word	0x00000028

023fd658 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd658:	b509      	push	{r0, r3, lr}
 23fd65a:	4804      	ldr	r0, [pc, #16]	; (23fd66c <network_ready+0x14>)
 23fd65c:	6800      	ldr	r0, [r0, #0]
 23fd65e:	4b04      	ldr	r3, [pc, #16]	; (23fd670 <network_ready+0x18>)
 23fd660:	4403      	add	r3, r0
 23fd662:	681b      	ldr	r3, [r3, #0]
 23fd664:	691b      	ldr	r3, [r3, #16]
 23fd666:	9302      	str	r3, [sp, #8]
 23fd668:	bd09      	pop	{r0, r3, pc}
 23fd66a:	0000      	.short	0x0000
 23fd66c:	1007adac 	.word	0x1007adac
 23fd670:	00000028 	.word	0x00000028

023fd674 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd674:	b509      	push	{r0, r3, lr}
 23fd676:	4804      	ldr	r0, [pc, #16]	; (23fd688 <network_on+0x14>)
 23fd678:	6800      	ldr	r0, [r0, #0]
 23fd67a:	4b04      	ldr	r3, [pc, #16]	; (23fd68c <network_on+0x18>)
 23fd67c:	4403      	add	r3, r0
 23fd67e:	681b      	ldr	r3, [r3, #0]
 23fd680:	695b      	ldr	r3, [r3, #20]
 23fd682:	9302      	str	r3, [sp, #8]
 23fd684:	bd09      	pop	{r0, r3, pc}
 23fd686:	0000      	.short	0x0000
 23fd688:	1007adac 	.word	0x1007adac
 23fd68c:	00000028 	.word	0x00000028

023fd690 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd690:	b509      	push	{r0, r3, lr}
 23fd692:	4804      	ldr	r0, [pc, #16]	; (23fd6a4 <network_off+0x14>)
 23fd694:	6800      	ldr	r0, [r0, #0]
 23fd696:	4b04      	ldr	r3, [pc, #16]	; (23fd6a8 <network_off+0x18>)
 23fd698:	4403      	add	r3, r0
 23fd69a:	681b      	ldr	r3, [r3, #0]
 23fd69c:	699b      	ldr	r3, [r3, #24]
 23fd69e:	9302      	str	r3, [sp, #8]
 23fd6a0:	bd09      	pop	{r0, r3, pc}
 23fd6a2:	0000      	.short	0x0000
 23fd6a4:	1007adac 	.word	0x1007adac
 23fd6a8:	00000028 	.word	0x00000028

023fd6ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd6ac:	b509      	push	{r0, r3, lr}
 23fd6ae:	4804      	ldr	r0, [pc, #16]	; (23fd6c0 <network_listen+0x14>)
 23fd6b0:	6800      	ldr	r0, [r0, #0]
 23fd6b2:	4b04      	ldr	r3, [pc, #16]	; (23fd6c4 <network_listen+0x18>)
 23fd6b4:	4403      	add	r3, r0
 23fd6b6:	681b      	ldr	r3, [r3, #0]
 23fd6b8:	69db      	ldr	r3, [r3, #28]
 23fd6ba:	9302      	str	r3, [sp, #8]
 23fd6bc:	bd09      	pop	{r0, r3, pc}
 23fd6be:	0000      	.short	0x0000
 23fd6c0:	1007adac 	.word	0x1007adac
 23fd6c4:	00000028 	.word	0x00000028

023fd6c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd6c8:	b509      	push	{r0, r3, lr}
 23fd6ca:	4804      	ldr	r0, [pc, #16]	; (23fd6dc <network_listening+0x14>)
 23fd6cc:	6800      	ldr	r0, [r0, #0]
 23fd6ce:	4b04      	ldr	r3, [pc, #16]	; (23fd6e0 <network_listening+0x18>)
 23fd6d0:	4403      	add	r3, r0
 23fd6d2:	681b      	ldr	r3, [r3, #0]
 23fd6d4:	6a1b      	ldr	r3, [r3, #32]
 23fd6d6:	9302      	str	r3, [sp, #8]
 23fd6d8:	bd09      	pop	{r0, r3, pc}
 23fd6da:	0000      	.short	0x0000
 23fd6dc:	1007adac 	.word	0x1007adac
 23fd6e0:	00000028 	.word	0x00000028

023fd6e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd6e4:	b509      	push	{r0, r3, lr}
 23fd6e6:	4804      	ldr	r0, [pc, #16]	; (23fd6f8 <network_set_listen_timeout+0x14>)
 23fd6e8:	6800      	ldr	r0, [r0, #0]
 23fd6ea:	4b04      	ldr	r3, [pc, #16]	; (23fd6fc <network_set_listen_timeout+0x18>)
 23fd6ec:	4403      	add	r3, r0
 23fd6ee:	681b      	ldr	r3, [r3, #0]
 23fd6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd6f2:	9302      	str	r3, [sp, #8]
 23fd6f4:	bd09      	pop	{r0, r3, pc}
 23fd6f6:	0000      	.short	0x0000
 23fd6f8:	1007adac 	.word	0x1007adac
 23fd6fc:	00000028 	.word	0x00000028

023fd700 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd700:	b509      	push	{r0, r3, lr}
 23fd702:	4804      	ldr	r0, [pc, #16]	; (23fd714 <network_get_listen_timeout+0x14>)
 23fd704:	6800      	ldr	r0, [r0, #0]
 23fd706:	4b04      	ldr	r3, [pc, #16]	; (23fd718 <network_get_listen_timeout+0x18>)
 23fd708:	4403      	add	r3, r0
 23fd70a:	681b      	ldr	r3, [r3, #0]
 23fd70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd70e:	9302      	str	r3, [sp, #8]
 23fd710:	bd09      	pop	{r0, r3, pc}
 23fd712:	0000      	.short	0x0000
 23fd714:	1007adac 	.word	0x1007adac
 23fd718:	00000028 	.word	0x00000028

023fd71c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd71c:	b509      	push	{r0, r3, lr}
 23fd71e:	4804      	ldr	r0, [pc, #16]	; (23fd730 <network_is_on+0x14>)
 23fd720:	6800      	ldr	r0, [r0, #0]
 23fd722:	4b04      	ldr	r3, [pc, #16]	; (23fd734 <network_is_on+0x18>)
 23fd724:	4403      	add	r3, r0
 23fd726:	681b      	ldr	r3, [r3, #0]
 23fd728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd72a:	9302      	str	r3, [sp, #8]
 23fd72c:	bd09      	pop	{r0, r3, pc}
 23fd72e:	0000      	.short	0x0000
 23fd730:	1007adac 	.word	0x1007adac
 23fd734:	00000028 	.word	0x00000028

023fd738 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd738:	b509      	push	{r0, r3, lr}
 23fd73a:	4804      	ldr	r0, [pc, #16]	; (23fd74c <network_is_off+0x14>)
 23fd73c:	6800      	ldr	r0, [r0, #0]
 23fd73e:	4b04      	ldr	r3, [pc, #16]	; (23fd750 <network_is_off+0x18>)
 23fd740:	4403      	add	r3, r0
 23fd742:	681b      	ldr	r3, [r3, #0]
 23fd744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd746:	9302      	str	r3, [sp, #8]
 23fd748:	bd09      	pop	{r0, r3, pc}
 23fd74a:	0000      	.short	0x0000
 23fd74c:	1007adac 	.word	0x1007adac
 23fd750:	00000028 	.word	0x00000028

023fd754 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd754:	b509      	push	{r0, r3, lr}
 23fd756:	4804      	ldr	r0, [pc, #16]	; (23fd768 <malloc+0x14>)
 23fd758:	6800      	ldr	r0, [r0, #0]
 23fd75a:	4b04      	ldr	r3, [pc, #16]	; (23fd76c <malloc+0x18>)
 23fd75c:	4403      	add	r3, r0
 23fd75e:	681b      	ldr	r3, [r3, #0]
 23fd760:	681b      	ldr	r3, [r3, #0]
 23fd762:	9302      	str	r3, [sp, #8]
 23fd764:	bd09      	pop	{r0, r3, pc}
 23fd766:	0000      	.short	0x0000
 23fd768:	1007adac 	.word	0x1007adac
 23fd76c:	00000004 	.word	0x00000004

023fd770 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd770:	b509      	push	{r0, r3, lr}
 23fd772:	4804      	ldr	r0, [pc, #16]	; (23fd784 <free+0x14>)
 23fd774:	6800      	ldr	r0, [r0, #0]
 23fd776:	4b04      	ldr	r3, [pc, #16]	; (23fd788 <free+0x18>)
 23fd778:	4403      	add	r3, r0
 23fd77a:	681b      	ldr	r3, [r3, #0]
 23fd77c:	685b      	ldr	r3, [r3, #4]
 23fd77e:	9302      	str	r3, [sp, #8]
 23fd780:	bd09      	pop	{r0, r3, pc}
 23fd782:	0000      	.short	0x0000
 23fd784:	1007adac 	.word	0x1007adac
 23fd788:	00000004 	.word	0x00000004

023fd78c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd78c:	b509      	push	{r0, r3, lr}
 23fd78e:	4804      	ldr	r0, [pc, #16]	; (23fd7a0 <realloc+0x14>)
 23fd790:	6800      	ldr	r0, [r0, #0]
 23fd792:	4b04      	ldr	r3, [pc, #16]	; (23fd7a4 <realloc+0x18>)
 23fd794:	4403      	add	r3, r0
 23fd796:	681b      	ldr	r3, [r3, #0]
 23fd798:	689b      	ldr	r3, [r3, #8]
 23fd79a:	9302      	str	r3, [sp, #8]
 23fd79c:	bd09      	pop	{r0, r3, pc}
 23fd79e:	0000      	.short	0x0000
 23fd7a0:	1007adac 	.word	0x1007adac
 23fd7a4:	00000004 	.word	0x00000004

023fd7a8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd7a8:	b509      	push	{r0, r3, lr}
 23fd7aa:	4804      	ldr	r0, [pc, #16]	; (23fd7bc <vsnprintf+0x14>)
 23fd7ac:	6800      	ldr	r0, [r0, #0]
 23fd7ae:	4b04      	ldr	r3, [pc, #16]	; (23fd7c0 <vsnprintf+0x18>)
 23fd7b0:	4403      	add	r3, r0
 23fd7b2:	681b      	ldr	r3, [r3, #0]
 23fd7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd7b6:	9302      	str	r3, [sp, #8]
 23fd7b8:	bd09      	pop	{r0, r3, pc}
 23fd7ba:	0000      	.short	0x0000
 23fd7bc:	1007adac 	.word	0x1007adac
 23fd7c0:	00000004 	.word	0x00000004

023fd7c4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd7c4:	b509      	push	{r0, r3, lr}
 23fd7c6:	4804      	ldr	r0, [pc, #16]	; (23fd7d8 <__errno+0x14>)
 23fd7c8:	6800      	ldr	r0, [r0, #0]
 23fd7ca:	4b04      	ldr	r3, [pc, #16]	; (23fd7dc <__errno+0x18>)
 23fd7cc:	4403      	add	r3, r0
 23fd7ce:	681b      	ldr	r3, [r3, #0]
 23fd7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd7d2:	9302      	str	r3, [sp, #8]
 23fd7d4:	bd09      	pop	{r0, r3, pc}
 23fd7d6:	0000      	.short	0x0000
 23fd7d8:	1007adac 	.word	0x1007adac
 23fd7dc:	00000004 	.word	0x00000004

023fd7e0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd7e0:	b509      	push	{r0, r3, lr}
 23fd7e2:	4804      	ldr	r0, [pc, #16]	; (23fd7f4 <__assert_func+0x14>)
 23fd7e4:	6800      	ldr	r0, [r0, #0]
 23fd7e6:	4b04      	ldr	r3, [pc, #16]	; (23fd7f8 <__assert_func+0x18>)
 23fd7e8:	4403      	add	r3, r0
 23fd7ea:	681b      	ldr	r3, [r3, #0]
 23fd7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd7ee:	9302      	str	r3, [sp, #8]
 23fd7f0:	bd09      	pop	{r0, r3, pc}
 23fd7f2:	0000      	.short	0x0000
 23fd7f4:	1007adac 	.word	0x1007adac
 23fd7f8:	00000004 	.word	0x00000004

023fd7fc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd7fc:	b509      	push	{r0, r3, lr}
 23fd7fe:	4804      	ldr	r0, [pc, #16]	; (23fd810 <newlib_impure_ptr_callback+0x14>)
 23fd800:	6800      	ldr	r0, [r0, #0]
 23fd802:	4b04      	ldr	r3, [pc, #16]	; (23fd814 <newlib_impure_ptr_callback+0x18>)
 23fd804:	4403      	add	r3, r0
 23fd806:	681b      	ldr	r3, [r3, #0]
 23fd808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd80a:	9302      	str	r3, [sp, #8]
 23fd80c:	bd09      	pop	{r0, r3, pc}
 23fd80e:	0000      	.short	0x0000
 23fd810:	1007adac 	.word	0x1007adac
 23fd814:	00000004 	.word	0x00000004

023fd818 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd818:	2100      	movs	r1, #0
 23fd81a:	f7ff bead 	b.w	23fd578 <system_delay_ms>

023fd81e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fd81e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fd820:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fd822:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fd824:	b17c      	cbz	r4, 23fd846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fd826:	6863      	ldr	r3, [r4, #4]
 23fd828:	3b01      	subs	r3, #1
 23fd82a:	6063      	str	r3, [r4, #4]
 23fd82c:	b95b      	cbnz	r3, 23fd846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fd82e:	6823      	ldr	r3, [r4, #0]
 23fd830:	4620      	mov	r0, r4
 23fd832:	689b      	ldr	r3, [r3, #8]
 23fd834:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd836:	68a3      	ldr	r3, [r4, #8]
 23fd838:	3b01      	subs	r3, #1
 23fd83a:	60a3      	str	r3, [r4, #8]
 23fd83c:	b91b      	cbnz	r3, 23fd846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fd83e:	6823      	ldr	r3, [r4, #0]
 23fd840:	4620      	mov	r0, r4
 23fd842:	68db      	ldr	r3, [r3, #12]
 23fd844:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fd846:	4628      	mov	r0, r5
 23fd848:	bd38      	pop	{r3, r4, r5, pc}

023fd84a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fd84a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd84c:	6843      	ldr	r3, [r0, #4]
    {
 23fd84e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd850:	3b01      	subs	r3, #1
 23fd852:	6043      	str	r3, [r0, #4]
 23fd854:	b963      	cbnz	r3, 23fd870 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fd856:	6803      	ldr	r3, [r0, #0]
 23fd858:	689b      	ldr	r3, [r3, #8]
 23fd85a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd85c:	68a3      	ldr	r3, [r4, #8]
 23fd85e:	3b01      	subs	r3, #1
 23fd860:	60a3      	str	r3, [r4, #8]
 23fd862:	b92b      	cbnz	r3, 23fd870 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd864:	6823      	ldr	r3, [r4, #0]
 23fd866:	4620      	mov	r0, r4
    }
 23fd868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd86c:	68db      	ldr	r3, [r3, #12]
 23fd86e:	4718      	bx	r3
    }
 23fd870:	bd10      	pop	{r4, pc}

023fd872 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd872:	b570      	push	{r4, r5, r6, lr}
 23fd874:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd876:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd87a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd87e:	42ae      	cmp	r6, r5
 23fd880:	d004      	beq.n	23fd88c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd882:	4628      	mov	r0, r5
 23fd884:	f001 fbe4 	bl	23ff050 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd888:	3510      	adds	r5, #16
 23fd88a:	e7f8      	b.n	23fd87e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd88c:	6820      	ldr	r0, [r4, #0]
 23fd88e:	f7ff ff6f 	bl	23fd770 <free>
    AllocatorT::free(data_);
}
 23fd892:	4620      	mov	r0, r4
 23fd894:	bd70      	pop	{r4, r5, r6, pc}
	...

023fd898 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd898:	2300      	movs	r3, #0
 23fd89a:	4802      	ldr	r0, [pc, #8]	; (23fd8a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd89c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd89e:	f7ff bb93 	b.w	23fcfc8 <os_mutex_recursive_create>
 23fd8a2:	bf00      	nop
 23fd8a4:	1007ae58 	.word	0x1007ae58

023fd8a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd8a8:	2200      	movs	r2, #0
 23fd8aa:	6840      	ldr	r0, [r0, #4]
 23fd8ac:	4611      	mov	r1, r2
 23fd8ae:	f7ff bf0b 	b.w	23fd6c8 <network_listening>

023fd8b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd8b2:	2200      	movs	r2, #0
 23fd8b4:	6840      	ldr	r0, [r0, #4]
 23fd8b6:	4611      	mov	r1, r2
 23fd8b8:	f7ff bf22 	b.w	23fd700 <network_get_listen_timeout>

023fd8bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd8bc:	2200      	movs	r2, #0
 23fd8be:	6840      	ldr	r0, [r0, #4]
 23fd8c0:	f7ff bf10 	b.w	23fd6e4 <network_set_listen_timeout>

023fd8c4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd8c4:	2200      	movs	r2, #0
 23fd8c6:	6840      	ldr	r0, [r0, #4]
 23fd8c8:	f081 0101 	eor.w	r1, r1, #1
 23fd8cc:	f7ff beee 	b.w	23fd6ac <network_listen>

023fd8d0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd8d0:	2300      	movs	r3, #0
 23fd8d2:	6840      	ldr	r0, [r0, #4]
 23fd8d4:	461a      	mov	r2, r3
 23fd8d6:	4619      	mov	r1, r3
 23fd8d8:	f7ff beda 	b.w	23fd690 <network_off>

023fd8dc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd8dc:	2300      	movs	r3, #0
 23fd8de:	6840      	ldr	r0, [r0, #4]
 23fd8e0:	461a      	mov	r2, r3
 23fd8e2:	4619      	mov	r1, r3
 23fd8e4:	f7ff bec6 	b.w	23fd674 <network_on>

023fd8e8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd8e8:	2200      	movs	r2, #0
 23fd8ea:	6840      	ldr	r0, [r0, #4]
 23fd8ec:	4611      	mov	r1, r2
 23fd8ee:	f7ff beb3 	b.w	23fd658 <network_ready>

023fd8f2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd8f2:	2200      	movs	r2, #0
 23fd8f4:	6840      	ldr	r0, [r0, #4]
 23fd8f6:	4611      	mov	r1, r2
 23fd8f8:	f7ff be92 	b.w	23fd620 <network_connecting>

023fd8fc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd8fc:	2200      	movs	r2, #0
 23fd8fe:	2102      	movs	r1, #2
 23fd900:	6840      	ldr	r0, [r0, #4]
 23fd902:	f7ff be9b 	b.w	23fd63c <network_disconnect>

023fd906 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd906:	2300      	movs	r3, #0
 23fd908:	6840      	ldr	r0, [r0, #4]
 23fd90a:	461a      	mov	r2, r3
 23fd90c:	f7ff be7a 	b.w	23fd604 <network_connect>

023fd910 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd910:	2203      	movs	r2, #3
 23fd912:	4b02      	ldr	r3, [pc, #8]	; (23fd91c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd914:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd916:	4a02      	ldr	r2, [pc, #8]	; (23fd920 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd918:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd91a:	4770      	bx	lr
 23fd91c:	1007ae5c 	.word	0x1007ae5c
 23fd920:	023ffc00 	.word	0x023ffc00

023fd924 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd924:	4770      	bx	lr

023fd926 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd928:	4606      	mov	r6, r0
 23fd92a:	4615      	mov	r5, r2
 23fd92c:	460c      	mov	r4, r1
 23fd92e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd930:	42bc      	cmp	r4, r7
 23fd932:	d006      	beq.n	23fd942 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd934:	6833      	ldr	r3, [r6, #0]
 23fd936:	4630      	mov	r0, r6
 23fd938:	689b      	ldr	r3, [r3, #8]
 23fd93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd93e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd940:	e7f6      	b.n	23fd930 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd942:	4628      	mov	r0, r5
 23fd944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd946 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd946:	2200      	movs	r2, #0
 23fd948:	7c00      	ldrb	r0, [r0, #16]
 23fd94a:	f7ff bbd7 	b.w	23fd0fc <hal_i2c_write>

023fd94e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd94e:	2100      	movs	r1, #0
 23fd950:	7c00      	ldrb	r0, [r0, #16]
 23fd952:	f7ff bbe1 	b.w	23fd118 <hal_i2c_available>

023fd956 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd956:	2100      	movs	r1, #0
 23fd958:	7c00      	ldrb	r0, [r0, #16]
 23fd95a:	f7ff bbeb 	b.w	23fd134 <hal_i2c_read>

023fd95e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd95e:	2100      	movs	r1, #0
 23fd960:	7c00      	ldrb	r0, [r0, #16]
 23fd962:	f7ff bbf5 	b.w	23fd150 <hal_i2c_peek>

023fd966 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd966:	2100      	movs	r1, #0
 23fd968:	7c00      	ldrb	r0, [r0, #16]
 23fd96a:	f7ff bbff 	b.w	23fd16c <hal_i2c_flush>

023fd96e <_ZN7TwoWireD0Ev>:
 23fd96e:	b510      	push	{r4, lr}
 23fd970:	4604      	mov	r4, r0
 23fd972:	2114      	movs	r1, #20
 23fd974:	f7ff f881 	bl	23fca7a <_ZdlPvj>
 23fd978:	4620      	mov	r0, r4
 23fd97a:	bd10      	pop	{r4, pc}

023fd97c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd97c:	b538      	push	{r3, r4, r5, lr}
 23fd97e:	4604      	mov	r4, r0
 23fd980:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd986:	2200      	movs	r2, #0
 23fd988:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd98c:	4b09      	ldr	r3, [pc, #36]	; (23fd9b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd98e:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd990:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd992:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd994:	4629      	mov	r1, r5
 23fd996:	f7ff fc05 	bl	23fd1a4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd99a:	30bf      	adds	r0, #191	; 0xbf
 23fd99c:	d108      	bne.n	23fd9b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd99e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd9a0:	07db      	lsls	r3, r3, #31
 23fd9a2:	d505      	bpl.n	23fd9b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd9a4:	6868      	ldr	r0, [r5, #4]
 23fd9a6:	f7ff fee3 	bl	23fd770 <free>
    free(conf.tx_buffer);
 23fd9aa:	68e8      	ldr	r0, [r5, #12]
 23fd9ac:	f7ff fee0 	bl	23fd770 <free>
}
 23fd9b0:	4620      	mov	r0, r4
 23fd9b2:	bd38      	pop	{r3, r4, r5, pc}
 23fd9b4:	023ffc3c 	.word	0x023ffc3c

023fd9b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd9b8:	4770      	bx	lr

023fd9ba <_ZN9IPAddressD0Ev>:
 23fd9ba:	b510      	push	{r4, lr}
 23fd9bc:	4604      	mov	r4, r0
 23fd9be:	2118      	movs	r1, #24
 23fd9c0:	f7ff f85b 	bl	23fca7a <_ZdlPvj>
 23fd9c4:	4620      	mov	r0, r4
 23fd9c6:	bd10      	pop	{r4, pc}

023fd9c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd9ca:	7d03      	ldrb	r3, [r0, #20]
{
 23fd9cc:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd9ce:	2b06      	cmp	r3, #6
 23fd9d0:	f04f 0400 	mov.w	r4, #0
{
 23fd9d4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd9d6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd9da:	d012      	beq.n	23fda02 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd9dc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd9e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd9e4:	220a      	movs	r2, #10
 23fd9e6:	4630      	mov	r0, r6
 23fd9e8:	f001 facf 	bl	23fef8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd9ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd9ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd9f0:	d019      	beq.n	23fda26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd9f2:	2c00      	cmp	r4, #0
 23fd9f4:	d0f4      	beq.n	23fd9e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd9f6:	212e      	movs	r1, #46	; 0x2e
 23fd9f8:	4630      	mov	r0, r6
 23fd9fa:	f001 fac3 	bl	23fef84 <_ZN5Print5printEc>
 23fd9fe:	4404      	add	r4, r0
 23fda00:	e7ee      	b.n	23fd9e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fda02:	232f      	movs	r3, #47	; 0x2f
 23fda04:	466a      	mov	r2, sp
 23fda06:	4639      	mov	r1, r7
 23fda08:	200a      	movs	r0, #10
		buf[0] = 0;
 23fda0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fda0e:	f7ff fbd7 	bl	23fd1c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fda12:	4668      	mov	r0, sp
 23fda14:	f7ff f808 	bl	23fca28 <strlen>
 23fda18:	6833      	ldr	r3, [r6, #0]
 23fda1a:	4602      	mov	r2, r0
 23fda1c:	4669      	mov	r1, sp
 23fda1e:	4630      	mov	r0, r6
 23fda20:	68db      	ldr	r3, [r3, #12]
 23fda22:	4798      	blx	r3
 23fda24:	4604      	mov	r4, r0
    }
    return n;
}
 23fda26:	4620      	mov	r0, r4
 23fda28:	b00d      	add	sp, #52	; 0x34
 23fda2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fda2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fda2c:	b510      	push	{r4, lr}
 23fda2e:	4604      	mov	r4, r0
 23fda30:	4b04      	ldr	r3, [pc, #16]	; (23fda44 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fda32:	2211      	movs	r2, #17
 23fda34:	2100      	movs	r1, #0
 23fda36:	f840 3b04 	str.w	r3, [r0], #4
 23fda3a:	f001 ff22 	bl	23ff882 <memset>
}
 23fda3e:	4620      	mov	r0, r4
 23fda40:	bd10      	pop	{r4, pc}
 23fda42:	bf00      	nop
 23fda44:	023ffc64 	.word	0x023ffc64

023fda48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fda48:	4603      	mov	r3, r0
 23fda4a:	4a07      	ldr	r2, [pc, #28]	; (23fda68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fda4c:	b510      	push	{r4, lr}
 23fda4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fda52:	f101 0210 	add.w	r2, r1, #16
 23fda56:	f851 4b04 	ldr.w	r4, [r1], #4
 23fda5a:	4291      	cmp	r1, r2
 23fda5c:	f843 4b04 	str.w	r4, [r3], #4
 23fda60:	d1f9      	bne.n	23fda56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fda62:	780a      	ldrb	r2, [r1, #0]
 23fda64:	701a      	strb	r2, [r3, #0]
}
 23fda66:	bd10      	pop	{r4, pc}
 23fda68:	023ffc64 	.word	0x023ffc64

023fda6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fda6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fda6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fda72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fda76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fda7a:	2304      	movs	r3, #4
 23fda7c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fda80:	6041      	str	r1, [r0, #4]
 23fda82:	7503      	strb	r3, [r0, #20]
}
 23fda84:	bd10      	pop	{r4, pc}
	...

023fda88 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fda88:	b507      	push	{r0, r1, r2, lr}
 23fda8a:	4b06      	ldr	r3, [pc, #24]	; (23fdaa4 <_ZN9IPAddressC1EPKh+0x1c>)
 23fda8c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fda8e:	78cb      	ldrb	r3, [r1, #3]
 23fda90:	9300      	str	r3, [sp, #0]
 23fda92:	788b      	ldrb	r3, [r1, #2]
 23fda94:	784a      	ldrb	r2, [r1, #1]
 23fda96:	7809      	ldrb	r1, [r1, #0]
 23fda98:	f7ff ffe8 	bl	23fda6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fda9c:	b003      	add	sp, #12
 23fda9e:	f85d fb04 	ldr.w	pc, [sp], #4
 23fdaa2:	bf00      	nop
 23fdaa4:	023ffc64 	.word	0x023ffc64

023fdaa8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fdaa8:	2201      	movs	r2, #1
 23fdaaa:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fdaae:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fdab2:	4618      	mov	r0, r3
 23fdab4:	2901      	cmp	r1, #1
 23fdab6:	d108      	bne.n	23fdaca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fdab8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fdabc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fdac0:	3a01      	subs	r2, #1
 23fdac2:	f103 0310 	add.w	r3, r3, #16
 23fdac6:	d1f2      	bne.n	23fdaae <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fdac8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fdaca:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fdacc:	bf04      	itt	eq
 23fdace:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fdad2:	1852      	addeq	r2, r2, r1
 23fdad4:	e7f4      	b.n	23fdac0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fdad6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fdad6:	b40e      	push	{r1, r2, r3}
 23fdad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdada:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdadc:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fdade:	af00      	add	r7, sp, #0
 23fdae0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fdae4:	f855 2b04 	ldr.w	r2, [r5], #4
 23fdae8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdaea:	462b      	mov	r3, r5
 23fdaec:	1878      	adds	r0, r7, r1
 23fdaee:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fdaf0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdaf2:	f7ff fe59 	bl	23fd7a8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fdaf6:	280f      	cmp	r0, #15
 23fdaf8:	687a      	ldr	r2, [r7, #4]
 23fdafa:	d91a      	bls.n	23fdb32 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fdafc:	f100 0308 	add.w	r3, r0, #8
 23fdb00:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fdb04:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fdb06:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdb0a:	1c41      	adds	r1, r0, #1
 23fdb0c:	462b      	mov	r3, r5
 23fdb0e:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fdb10:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdb12:	f7ff fe49 	bl	23fd7a8 <vsnprintf>
        if (n > 0) {
 23fdb16:	1e02      	subs	r2, r0, #0
 23fdb18:	dd04      	ble.n	23fdb24 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fdb1a:	6823      	ldr	r3, [r4, #0]
 23fdb1c:	4669      	mov	r1, sp
 23fdb1e:	4620      	mov	r0, r4
 23fdb20:	689b      	ldr	r3, [r3, #8]
 23fdb22:	4798      	blx	r3
 23fdb24:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fdb26:	3720      	adds	r7, #32
 23fdb28:	46bd      	mov	sp, r7
 23fdb2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdb2e:	b003      	add	sp, #12
 23fdb30:	4770      	bx	lr
    } else if (n > 0) {
 23fdb32:	2800      	cmp	r0, #0
 23fdb34:	d0f7      	beq.n	23fdb26 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fdb36:	6823      	ldr	r3, [r4, #0]
 23fdb38:	4602      	mov	r2, r0
 23fdb3a:	689b      	ldr	r3, [r3, #8]
 23fdb3c:	4620      	mov	r0, r4
 23fdb3e:	f107 0110 	add.w	r1, r7, #16
 23fdb42:	4798      	blx	r3
}
 23fdb44:	e7ef      	b.n	23fdb26 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fdb46 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fdb46:	b538      	push	{r3, r4, r5, lr}
 23fdb48:	680b      	ldr	r3, [r1, #0]
 23fdb4a:	4604      	mov	r4, r0
 23fdb4c:	6003      	str	r3, [r0, #0]
 23fdb4e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fdb50:	6843      	ldr	r3, [r0, #4]
 23fdb52:	429d      	cmp	r5, r3
 23fdb54:	d008      	beq.n	23fdb68 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fdb56:	b115      	cbz	r5, 23fdb5e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fdb58:	686b      	ldr	r3, [r5, #4]
 23fdb5a:	3301      	adds	r3, #1
 23fdb5c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fdb5e:	6860      	ldr	r0, [r4, #4]
 23fdb60:	b108      	cbz	r0, 23fdb66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fdb62:	f7ff fe72 	bl	23fd84a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fdb66:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fdb68:	bd38      	pop	{r3, r4, r5, pc}

023fdb6a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fdb6a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fdb6c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fdb6e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fdb72:	2201      	movs	r2, #1
 23fdb74:	689b      	ldr	r3, [r3, #8]
 23fdb76:	f10d 0107 	add.w	r1, sp, #7
 23fdb7a:	4798      	blx	r3
}
 23fdb7c:	b003      	add	sp, #12
 23fdb7e:	f85d fb04 	ldr.w	pc, [sp], #4

023fdb82 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdb82:	460b      	mov	r3, r1
 23fdb84:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fdb86:	2200      	movs	r2, #0
 23fdb88:	b510      	push	{r4, lr}
 23fdb8a:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdb8c:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fdb90:	6083      	str	r3, [r0, #8]
    if (t) {
 23fdb92:	b90b      	cbnz	r3, 23fdb98 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fdb94:	4620      	mov	r0, r4
 23fdb96:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fdb98:	f7ff ffd5 	bl	23fdb46 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fdb9c:	e7fa      	b.n	23fdb94 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fdb9e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fdb9e:	6883      	ldr	r3, [r0, #8]
 23fdba0:	b1eb      	cbz	r3, 23fdbde <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fdba2:	781a      	ldrb	r2, [r3, #0]
 23fdba4:	2a03      	cmp	r2, #3
 23fdba6:	d81a      	bhi.n	23fdbde <_ZNK5spark9JSONValue4typeEv+0x40>
 23fdba8:	e8df f002 	tbb	[pc, r2]
 23fdbac:	1b021704 	.word	0x1b021704
 23fdbb0:	2005      	movs	r0, #5
 23fdbb2:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fdbb4:	6802      	ldr	r2, [r0, #0]
 23fdbb6:	685b      	ldr	r3, [r3, #4]
 23fdbb8:	6852      	ldr	r2, [r2, #4]
 23fdbba:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fdbbc:	282d      	cmp	r0, #45	; 0x2d
 23fdbbe:	d012      	beq.n	23fdbe6 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fdbc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fdbc4:	2b09      	cmp	r3, #9
 23fdbc6:	d90e      	bls.n	23fdbe6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fdbc8:	2874      	cmp	r0, #116	; 0x74
 23fdbca:	d00e      	beq.n	23fdbea <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fdbcc:	2866      	cmp	r0, #102	; 0x66
 23fdbce:	d00c      	beq.n	23fdbea <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fdbd0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fdbd4:	4258      	negs	r0, r3
 23fdbd6:	4158      	adcs	r0, r3
 23fdbd8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fdbda:	2006      	movs	r0, #6
 23fdbdc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fdbde:	2000      	movs	r0, #0
 23fdbe0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fdbe2:	2004      	movs	r0, #4
 23fdbe4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fdbe6:	2003      	movs	r0, #3
 23fdbe8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fdbea:	2002      	movs	r0, #2
}
 23fdbec:	4770      	bx	lr

023fdbee <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fdbee:	b510      	push	{r4, lr}
 23fdbf0:	4604      	mov	r4, r0
    switch (type()) {
 23fdbf2:	f7ff ffd4 	bl	23fdb9e <_ZNK5spark9JSONValue4typeEv>
 23fdbf6:	2802      	cmp	r0, #2
 23fdbf8:	d00e      	beq.n	23fdc18 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fdbfa:	1ec3      	subs	r3, r0, #3
 23fdbfc:	b2db      	uxtb	r3, r3
 23fdbfe:	2b01      	cmp	r3, #1
 23fdc00:	d814      	bhi.n	23fdc2c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fdc02:	6822      	ldr	r2, [r4, #0]
 23fdc04:	68a3      	ldr	r3, [r4, #8]
 23fdc06:	6850      	ldr	r0, [r2, #4]
 23fdc08:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fdc0a:	220a      	movs	r2, #10
}
 23fdc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fdc10:	2100      	movs	r1, #0
 23fdc12:	4418      	add	r0, r3
 23fdc14:	f001 bf36 	b.w	23ffa84 <strtol>
        const char* const s = d_->json + t_->start;
 23fdc18:	6822      	ldr	r2, [r4, #0]
 23fdc1a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fdc1c:	6852      	ldr	r2, [r2, #4]
 23fdc1e:	685b      	ldr	r3, [r3, #4]
 23fdc20:	5cd0      	ldrb	r0, [r2, r3]
 23fdc22:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fdc26:	4258      	negs	r0, r3
 23fdc28:	4158      	adcs	r0, r3
}
 23fdc2a:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fdc2c:	2000      	movs	r0, #0
 23fdc2e:	e7fc      	b.n	23fdc2a <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fdc30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdc30:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdc32:	2300      	movs	r3, #0
 23fdc34:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdc36:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fdc3a:	480e      	ldr	r0, [pc, #56]	; (23fdc74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fdc3c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fdc40:	b1a9      	cbz	r1, 23fdc6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fdc42:	780b      	ldrb	r3, [r1, #0]
 23fdc44:	2b03      	cmp	r3, #3
 23fdc46:	d006      	beq.n	23fdc56 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fdc48:	b98b      	cbnz	r3, 23fdc6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fdc4a:	6813      	ldr	r3, [r2, #0]
 23fdc4c:	6858      	ldr	r0, [r3, #4]
 23fdc4e:	684b      	ldr	r3, [r1, #4]
 23fdc50:	5cc3      	ldrb	r3, [r0, r3]
 23fdc52:	2b6e      	cmp	r3, #110	; 0x6e
 23fdc54:	d007      	beq.n	23fdc66 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fdc56:	6813      	ldr	r3, [r2, #0]
 23fdc58:	684d      	ldr	r5, [r1, #4]
 23fdc5a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fdc5c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fdc5e:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fdc60:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fdc62:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fdc64:	60e3      	str	r3, [r4, #12]
 23fdc66:	4611      	mov	r1, r2
 23fdc68:	4620      	mov	r0, r4
 23fdc6a:	f7ff ff6c 	bl	23fdb46 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdc6e:	4620      	mov	r0, r4
 23fdc70:	bd38      	pop	{r3, r4, r5, pc}
 23fdc72:	bf00      	nop
 23fdc74:	023ffcd3 	.word	0x023ffcd3

023fdc78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdc78:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdc7a:	2500      	movs	r5, #0
 23fdc7c:	460b      	mov	r3, r1
 23fdc7e:	4604      	mov	r4, r0
 23fdc80:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdc82:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fdc86:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fdc8a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fdc8e:	b14b      	cbz	r3, 23fdca4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fdc90:	781a      	ldrb	r2, [r3, #0]
 23fdc92:	2a01      	cmp	r2, #1
 23fdc94:	d106      	bne.n	23fdca4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fdc96:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fdc9a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fdc9c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fdc9e:	6143      	str	r3, [r0, #20]
 23fdca0:	f7ff ff51 	bl	23fdb46 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdca4:	4620      	mov	r0, r4
 23fdca6:	bd38      	pop	{r3, r4, r5, pc}

023fdca8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fdca8:	b510      	push	{r4, lr}
    if (!n_) {
 23fdcaa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fdcac:	4604      	mov	r4, r0
    if (!n_) {
 23fdcae:	b163      	cbz	r3, 23fdcca <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fdcb0:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fdcb2:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fdcb4:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fdcb6:	3010      	adds	r0, #16
 23fdcb8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fdcba:	6120      	str	r0, [r4, #16]
    --n_;
 23fdcbc:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fdcbe:	b113      	cbz	r3, 23fdcc6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fdcc0:	f7ff fef2 	bl	23fdaa8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fdcc4:	60a0      	str	r0, [r4, #8]
    return true;
 23fdcc6:	2001      	movs	r0, #1
 23fdcc8:	e000      	b.n	23fdccc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fdcca:	4618      	mov	r0, r3
}
 23fdccc:	bd10      	pop	{r4, pc}

023fdcce <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdcce:	b510      	push	{r4, lr}
    write('}');
 23fdcd0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdcd2:	4604      	mov	r4, r0
    write('}');
 23fdcd4:	f7ff ff49 	bl	23fdb6a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fdcd8:	2301      	movs	r3, #1
}
 23fdcda:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdcdc:	7123      	strb	r3, [r4, #4]
}
 23fdcde:	bd10      	pop	{r4, pc}

023fdce0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fdce0:	b508      	push	{r3, lr}
    switch (state_) {
 23fdce2:	7903      	ldrb	r3, [r0, #4]
 23fdce4:	2b01      	cmp	r3, #1
 23fdce6:	d002      	beq.n	23fdcee <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fdce8:	2b02      	cmp	r3, #2
 23fdcea:	d004      	beq.n	23fdcf6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fdcec:	bd08      	pop	{r3, pc}
        write(',');
 23fdcee:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fdcf0:	f7ff ff3b 	bl	23fdb6a <_ZN5spark10JSONWriter5writeEc>
}
 23fdcf4:	e7fa      	b.n	23fdcec <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fdcf6:	213a      	movs	r1, #58	; 0x3a
 23fdcf8:	e7fa      	b.n	23fdcf0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fdcfa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fdcfa:	b510      	push	{r4, lr}
 23fdcfc:	4604      	mov	r4, r0
    writeSeparator();
 23fdcfe:	f7ff ffef 	bl	23fdce0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fdd02:	4620      	mov	r0, r4
 23fdd04:	217b      	movs	r1, #123	; 0x7b
 23fdd06:	f7ff ff30 	bl	23fdb6a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fdd0a:	2300      	movs	r3, #0
}
 23fdd0c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fdd0e:	7123      	strb	r3, [r4, #4]
}
 23fdd10:	bd10      	pop	{r4, pc}
	...

023fdd14 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fdd14:	b513      	push	{r0, r1, r4, lr}
 23fdd16:	4604      	mov	r4, r0
 23fdd18:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fdd1a:	f7ff ffe1 	bl	23fdce0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fdd1e:	6823      	ldr	r3, [r4, #0]
 23fdd20:	4620      	mov	r0, r4
 23fdd22:	68db      	ldr	r3, [r3, #12]
 23fdd24:	9a01      	ldr	r2, [sp, #4]
 23fdd26:	4903      	ldr	r1, [pc, #12]	; (23fdd34 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fdd28:	4798      	blx	r3
    state_ = NEXT;
 23fdd2a:	2301      	movs	r3, #1
}
 23fdd2c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdd2e:	7123      	strb	r3, [r4, #4]
}
 23fdd30:	b002      	add	sp, #8
 23fdd32:	bd10      	pop	{r4, pc}
 23fdd34:	023ffbc4 	.word	0x023ffbc4

023fdd38 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fdd38:	b513      	push	{r0, r1, r4, lr}
 23fdd3a:	4604      	mov	r4, r0
 23fdd3c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fdd3e:	f7ff ffcf 	bl	23fdce0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fdd42:	6823      	ldr	r3, [r4, #0]
 23fdd44:	4620      	mov	r0, r4
 23fdd46:	68db      	ldr	r3, [r3, #12]
 23fdd48:	9a01      	ldr	r2, [sp, #4]
 23fdd4a:	4903      	ldr	r1, [pc, #12]	; (23fdd58 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fdd4c:	4798      	blx	r3
    state_ = NEXT;
 23fdd4e:	2301      	movs	r3, #1
}
 23fdd50:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdd52:	7123      	strb	r3, [r4, #4]
}
 23fdd54:	b002      	add	sp, #8
 23fdd56:	bd10      	pop	{r4, pc}
 23fdd58:	023ffc70 	.word	0x023ffc70

023fdd5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fdd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdd60:	460d      	mov	r5, r1
 23fdd62:	4690      	mov	r8, r2
    write('"');
 23fdd64:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fdd66:	4604      	mov	r4, r0
 23fdd68:	462f      	mov	r7, r5
    write('"');
 23fdd6a:	f7ff fefe 	bl	23fdb6a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fdd6e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fde14 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fdd72:	44a8      	add	r8, r5
    while (s != end) {
 23fdd74:	4547      	cmp	r7, r8
 23fdd76:	46ba      	mov	sl, r7
 23fdd78:	d03d      	beq.n	23fddf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fdd7a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fdd7e:	2e22      	cmp	r6, #34	; 0x22
 23fdd80:	d006      	beq.n	23fdd90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fdd82:	2e5c      	cmp	r6, #92	; 0x5c
 23fdd84:	d004      	beq.n	23fdd90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fdd86:	4630      	mov	r0, r6
 23fdd88:	f001 fd4c 	bl	23ff824 <isprint>
 23fdd8c:	2800      	cmp	r0, #0
 23fdd8e:	d1f1      	bne.n	23fdd74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fdd90:	6823      	ldr	r3, [r4, #0]
 23fdd92:	4629      	mov	r1, r5
 23fdd94:	4620      	mov	r0, r4
 23fdd96:	689b      	ldr	r3, [r3, #8]
 23fdd98:	ebaa 0205 	sub.w	r2, sl, r5
 23fdd9c:	4798      	blx	r3
            write('\\');
 23fdd9e:	215c      	movs	r1, #92	; 0x5c
 23fdda0:	4620      	mov	r0, r4
 23fdda2:	f7ff fee2 	bl	23fdb6a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fdda6:	2e0d      	cmp	r6, #13
 23fdda8:	d80a      	bhi.n	23fddc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fddaa:	2e07      	cmp	r6, #7
 23fddac:	d91c      	bls.n	23fdde8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fddae:	f1a6 0308 	sub.w	r3, r6, #8
 23fddb2:	2b05      	cmp	r3, #5
 23fddb4:	d818      	bhi.n	23fdde8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fddb6:	e8df f003 	tbb	[pc, r3]
 23fddba:	0f0d      	.short	0x0f0d
 23fddbc:	15131711 	.word	0x15131711
 23fddc0:	2e22      	cmp	r6, #34	; 0x22
 23fddc2:	d001      	beq.n	23fddc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fddc4:	2e5c      	cmp	r6, #92	; 0x5c
 23fddc6:	d10f      	bne.n	23fdde8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fddc8:	4631      	mov	r1, r6
                write('b');
 23fddca:	4620      	mov	r0, r4
 23fddcc:	f7ff fecd 	bl	23fdb6a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fddd0:	463d      	mov	r5, r7
    while (s != end) {
 23fddd2:	e7cf      	b.n	23fdd74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fddd4:	2162      	movs	r1, #98	; 0x62
 23fddd6:	e7f8      	b.n	23fddca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fddd8:	2174      	movs	r1, #116	; 0x74
 23fddda:	e7f6      	b.n	23fddca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fdddc:	216e      	movs	r1, #110	; 0x6e
 23fddde:	e7f4      	b.n	23fddca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fdde0:	2166      	movs	r1, #102	; 0x66
 23fdde2:	e7f2      	b.n	23fddca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fdde4:	2172      	movs	r1, #114	; 0x72
 23fdde6:	e7f0      	b.n	23fddca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fdde8:	6823      	ldr	r3, [r4, #0]
 23fddea:	4632      	mov	r2, r6
 23fddec:	4649      	mov	r1, r9
 23fddee:	4620      	mov	r0, r4
 23fddf0:	68db      	ldr	r3, [r3, #12]
 23fddf2:	4798      	blx	r3
                break;
 23fddf4:	e7ec      	b.n	23fddd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fddf6:	42bd      	cmp	r5, r7
 23fddf8:	d005      	beq.n	23fde06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fddfa:	6823      	ldr	r3, [r4, #0]
 23fddfc:	4629      	mov	r1, r5
 23fddfe:	4620      	mov	r0, r4
 23fde00:	689b      	ldr	r3, [r3, #8]
 23fde02:	1b7a      	subs	r2, r7, r5
 23fde04:	4798      	blx	r3
    }
    write('"');
 23fde06:	2122      	movs	r1, #34	; 0x22
 23fde08:	4620      	mov	r0, r4
 23fde0a:	f7ff feae 	bl	23fdb6a <_ZN5spark10JSONWriter5writeEc>
}
 23fde0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fde12:	bf00      	nop
 23fde14:	023ffc73 	.word	0x023ffc73

023fde18 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fde18:	b513      	push	{r0, r1, r4, lr}
 23fde1a:	4604      	mov	r4, r0
 23fde1c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fde20:	f7ff ff5e 	bl	23fdce0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fde24:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fde28:	4620      	mov	r0, r4
 23fde2a:	f7ff ff97 	bl	23fdd5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fde2e:	2302      	movs	r3, #2
}
 23fde30:	4620      	mov	r0, r4
    state_ = VALUE;
 23fde32:	7123      	strb	r3, [r4, #4]
}
 23fde34:	b002      	add	sp, #8
 23fde36:	bd10      	pop	{r4, pc}

023fde38 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fde38:	b513      	push	{r0, r1, r4, lr}
 23fde3a:	4604      	mov	r4, r0
 23fde3c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fde40:	f7ff ff4e 	bl	23fdce0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fde44:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fde48:	4620      	mov	r0, r4
 23fde4a:	f7ff ff87 	bl	23fdd5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fde4e:	2301      	movs	r3, #1
}
 23fde50:	4620      	mov	r0, r4
    state_ = NEXT;
 23fde52:	7123      	strb	r3, [r4, #4]
}
 23fde54:	b002      	add	sp, #8
 23fde56:	bd10      	pop	{r4, pc}

023fde58 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fde58:	6880      	ldr	r0, [r0, #8]
 23fde5a:	6803      	ldr	r3, [r0, #0]
 23fde5c:	68db      	ldr	r3, [r3, #12]
 23fde5e:	4718      	bx	r3

023fde60 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fde60:	4770      	bx	lr

023fde62 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fde62:	4608      	mov	r0, r1
 23fde64:	b111      	cbz	r1, 23fde6c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fde66:	680b      	ldr	r3, [r1, #0]
 23fde68:	685b      	ldr	r3, [r3, #4]
 23fde6a:	4718      	bx	r3
}
 23fde6c:	4770      	bx	lr

023fde6e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fde6e:	4770      	bx	lr

023fde70 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fde70:	4770      	bx	lr

023fde72 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fde72:	4770      	bx	lr

023fde74 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fde74:	4770      	bx	lr

023fde76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fde76:	b538      	push	{r3, r4, r5, lr}
 23fde78:	4604      	mov	r4, r0
 23fde7a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fde7c:	6800      	ldr	r0, [r0, #0]
 23fde7e:	212e      	movs	r1, #46	; 0x2e
 23fde80:	f001 fd43 	bl	23ff90a <strchrnul>
    size = s - category;
 23fde84:	6823      	ldr	r3, [r4, #0]
 23fde86:	1ac3      	subs	r3, r0, r3
 23fde88:	602b      	str	r3, [r5, #0]
    if (size) {
 23fde8a:	b123      	cbz	r3, 23fde96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fde8c:	7803      	ldrb	r3, [r0, #0]
 23fde8e:	b103      	cbz	r3, 23fde92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fde90:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fde92:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde94:	6020      	str	r0, [r4, #0]
}
 23fde96:	4618      	mov	r0, r3
 23fde98:	bd38      	pop	{r3, r4, r5, pc}

023fde9a <_ZN5spark16JSONStreamWriterD0Ev>:
 23fde9a:	b510      	push	{r4, lr}
 23fde9c:	4604      	mov	r4, r0
 23fde9e:	210c      	movs	r1, #12
 23fdea0:	f7fe fdeb 	bl	23fca7a <_ZdlPvj>
 23fdea4:	4620      	mov	r0, r4
 23fdea6:	bd10      	pop	{r4, pc}

023fdea8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fdea8:	b510      	push	{r4, lr}
 23fdeaa:	4604      	mov	r4, r0
 23fdeac:	2104      	movs	r1, #4
 23fdeae:	f7fe fde4 	bl	23fca7a <_ZdlPvj>
 23fdeb2:	4620      	mov	r0, r4
 23fdeb4:	bd10      	pop	{r4, pc}

023fdeb6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdeb6:	b510      	push	{r4, lr}
 23fdeb8:	4604      	mov	r4, r0
 23fdeba:	2104      	movs	r1, #4
 23fdebc:	f7fe fddd 	bl	23fca7a <_ZdlPvj>
 23fdec0:	4620      	mov	r0, r4
 23fdec2:	bd10      	pop	{r4, pc}

023fdec4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fdec4:	f7ff b89c 	b.w	23fd000 <os_mutex_recursive_lock>

023fdec8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fdec8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fdeca:	f7fe fda3 	bl	23fca14 <strcmp>
}
 23fdece:	fab0 f080 	clz	r0, r0
 23fded2:	0940      	lsrs	r0, r0, #5
 23fded4:	bd08      	pop	{r3, pc}

023fded6 <__tcf_1>:
 23fded6:	4770      	bx	lr

023fded8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fded8:	b510      	push	{r4, lr}
 23fdeda:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fdedc:	f001 fa26 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fdee0:	4284      	cmp	r4, r0
 23fdee2:	d105      	bne.n	23fdef0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fdee4:	f001 fa22 	bl	23ff32c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fdee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fdeec:	f001 ba10 	b.w	23ff310 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fdef0:	f001 fbfe 	bl	23ff6f0 <_Z22__fetch_global_Serial1v>
 23fdef4:	4284      	cmp	r4, r0
 23fdef6:	d105      	bne.n	23fdf04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fdef8:	f001 fbfa 	bl	23ff6f0 <_Z22__fetch_global_Serial1v>
}
 23fdefc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fdf00:	f001 b9a9 	b.w	23ff256 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fdf04:	b12c      	cbz	r4, 23fdf12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fdf06:	6823      	ldr	r3, [r4, #0]
 23fdf08:	4620      	mov	r0, r4
}
 23fdf0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fdf0e:	685b      	ldr	r3, [r3, #4]
 23fdf10:	4718      	bx	r3
 23fdf12:	bd10      	pop	{r4, pc}

023fdf14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fdf14:	680b      	ldr	r3, [r1, #0]
 23fdf16:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fdf18:	684b      	ldr	r3, [r1, #4]
 23fdf1a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fdf1c:	b113      	cbz	r3, 23fdf24 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fdf1e:	685a      	ldr	r2, [r3, #4]
 23fdf20:	3201      	adds	r2, #1
 23fdf22:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fdf24:	4770      	bx	lr

023fdf26 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fdf26:	b513      	push	{r0, r1, r4, lr}
 23fdf28:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fdf2a:	4608      	mov	r0, r1
 23fdf2c:	9101      	str	r1, [sp, #4]
 23fdf2e:	f7fe fd7b 	bl	23fca28 <strlen>
 23fdf32:	4602      	mov	r2, r0
 23fdf34:	4620      	mov	r0, r4
 23fdf36:	9901      	ldr	r1, [sp, #4]
}
 23fdf38:	b002      	add	sp, #8
 23fdf3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fdf3e:	f7ff bf7b 	b.w	23fde38 <_ZN5spark10JSONWriter5valueEPKcj>

023fdf42 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fdf42:	b513      	push	{r0, r1, r4, lr}
 23fdf44:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fdf46:	4608      	mov	r0, r1
 23fdf48:	9101      	str	r1, [sp, #4]
 23fdf4a:	f7fe fd6d 	bl	23fca28 <strlen>
 23fdf4e:	4602      	mov	r2, r0
 23fdf50:	4620      	mov	r0, r4
 23fdf52:	6823      	ldr	r3, [r4, #0]
 23fdf54:	9901      	ldr	r1, [sp, #4]
 23fdf56:	68db      	ldr	r3, [r3, #12]
}
 23fdf58:	b002      	add	sp, #8
 23fdf5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fdf5e:	4718      	bx	r3

023fdf60 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fdf60:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fdf62:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fdf64:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fdf68:	2201      	movs	r2, #1
 23fdf6a:	68db      	ldr	r3, [r3, #12]
 23fdf6c:	f10d 0107 	add.w	r1, sp, #7
 23fdf70:	4798      	blx	r3
}
 23fdf72:	b003      	add	sp, #12
 23fdf74:	f85d fb04 	ldr.w	pc, [sp], #4

023fdf78 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fdf78:	680a      	ldr	r2, [r1, #0]
 23fdf7a:	b510      	push	{r4, lr}
 23fdf7c:	6002      	str	r2, [r0, #0]
 23fdf7e:	684a      	ldr	r2, [r1, #4]
 23fdf80:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fdf82:	2200      	movs	r2, #0
 23fdf84:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fdf88:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdf8a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf8c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdf8e:	6084      	str	r4, [r0, #8]
 23fdf90:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf92:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fdf94:	60c4      	str	r4, [r0, #12]
 23fdf96:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf98:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdf9a:	6104      	str	r4, [r0, #16]
 23fdf9c:	bd10      	pop	{r4, pc}
	...

023fdfa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdfa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fdfa4:	f04f 0a14 	mov.w	sl, #20
 23fdfa8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fdfac:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fdfae:	4645      	mov	r5, r8
 23fdfb0:	fb0a f404 	mul.w	r4, sl, r4
 23fdfb4:	9300      	str	r3, [sp, #0]
 23fdfb6:	4b17      	ldr	r3, [pc, #92]	; (23fe014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdfb8:	10a4      	asrs	r4, r4, #2
 23fdfba:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fdfbc:	2c00      	cmp	r4, #0
 23fdfbe:	dd21      	ble.n	23fe004 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fdfc0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fdfc2:	fb0a f006 	mul.w	r0, sl, r6
 23fdfc6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fdfca:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fdfce:	463a      	mov	r2, r7
 23fdfd0:	455f      	cmp	r7, fp
 23fdfd2:	bf28      	it	cs
 23fdfd4:	465a      	movcs	r2, fp
 23fdfd6:	5828      	ldr	r0, [r5, r0]
 23fdfd8:	9101      	str	r1, [sp, #4]
 23fdfda:	f001 fca8 	bl	23ff92e <strncmp>
                if (cmp == 0) {
 23fdfde:	2800      	cmp	r0, #0
 23fdfe0:	f04f 0301 	mov.w	r3, #1
 23fdfe4:	9901      	ldr	r1, [sp, #4]
 23fdfe6:	d10b      	bne.n	23fe000 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fdfe8:	455f      	cmp	r7, fp
 23fdfea:	d103      	bne.n	23fdff4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fdfec:	9a00      	ldr	r2, [sp, #0]
 23fdfee:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdff0:	4634      	mov	r4, r6
 23fdff2:	e7e3      	b.n	23fdfbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fdff4:	d9fc      	bls.n	23fdff0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fdff6:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fdff8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fdffc:	3e01      	subs	r6, #1
 23fdffe:	e7f7      	b.n	23fdff0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fe000:	dbf9      	blt.n	23fdff6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fe002:	e7f5      	b.n	23fdff0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fe004:	eba5 0508 	sub.w	r5, r5, r8
}
 23fe008:	4802      	ldr	r0, [pc, #8]	; (23fe014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fe00a:	10ad      	asrs	r5, r5, #2
 23fe00c:	4368      	muls	r0, r5
 23fe00e:	b003      	add	sp, #12
 23fe010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe014:	cccccccd 	.word	0xcccccccd

023fe018 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fe018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fe01a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fe01c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fe01e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fe020:	b303      	cbz	r3, 23fe064 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fe022:	b1f9      	cbz	r1, 23fe064 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fe024:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fe026:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fe02a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fe02c:	a903      	add	r1, sp, #12
 23fe02e:	a801      	add	r0, sp, #4
 23fe030:	f7ff ff21 	bl	23fde76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe034:	4601      	mov	r1, r0
 23fe036:	b1a8      	cbz	r0, 23fe064 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe038:	f10d 030b 	add.w	r3, sp, #11
 23fe03c:	4620      	mov	r0, r4
 23fe03e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fe040:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe044:	f7ff ffac 	bl	23fdfa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fe048:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fe04c:	b153      	cbz	r3, 23fe064 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fe04e:	6823      	ldr	r3, [r4, #0]
 23fe050:	2414      	movs	r4, #20
 23fe052:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fe056:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fe05a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fe05c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fe05e:	bfa8      	it	ge
 23fe060:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fe062:	e7e3      	b.n	23fe02c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fe064:	4628      	mov	r0, r5
 23fe066:	b004      	add	sp, #16
 23fe068:	bd70      	pop	{r4, r5, r6, pc}

023fe06a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fe06a:	b40e      	push	{r1, r2, r3}
 23fe06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe06e:	b08c      	sub	sp, #48	; 0x30
 23fe070:	af00      	add	r7, sp, #0
 23fe072:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fe076:	f855 2b04 	ldr.w	r2, [r5], #4
 23fe07a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe07c:	462b      	mov	r3, r5
 23fe07e:	2120      	movs	r1, #32
 23fe080:	f107 0010 	add.w	r0, r7, #16
 23fe084:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fe086:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe088:	f7ff fb8e 	bl	23fd7a8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fe08c:	281f      	cmp	r0, #31
 23fe08e:	687a      	ldr	r2, [r7, #4]
 23fe090:	d91a      	bls.n	23fe0c8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fe092:	f100 0308 	add.w	r3, r0, #8
 23fe096:	f023 0307 	bic.w	r3, r3, #7
        }
 23fe09a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fe09c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe0a0:	1c41      	adds	r1, r0, #1
 23fe0a2:	462b      	mov	r3, r5
 23fe0a4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fe0a6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe0a8:	f7ff fb7e 	bl	23fd7a8 <vsnprintf>
        if (n > 0) {
 23fe0ac:	1e02      	subs	r2, r0, #0
 23fe0ae:	dd04      	ble.n	23fe0ba <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fe0b0:	6823      	ldr	r3, [r4, #0]
 23fe0b2:	4669      	mov	r1, sp
 23fe0b4:	4620      	mov	r0, r4
 23fe0b6:	68db      	ldr	r3, [r3, #12]
 23fe0b8:	4798      	blx	r3
 23fe0ba:	46b5      	mov	sp, r6
}
 23fe0bc:	3730      	adds	r7, #48	; 0x30
 23fe0be:	46bd      	mov	sp, r7
 23fe0c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fe0c4:	b003      	add	sp, #12
 23fe0c6:	4770      	bx	lr
    } else if (n > 0) {
 23fe0c8:	2800      	cmp	r0, #0
 23fe0ca:	d0f7      	beq.n	23fe0bc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fe0cc:	6823      	ldr	r3, [r4, #0]
 23fe0ce:	4602      	mov	r2, r0
 23fe0d0:	68db      	ldr	r3, [r3, #12]
 23fe0d2:	4620      	mov	r0, r4
 23fe0d4:	f107 0110 	add.w	r1, r7, #16
 23fe0d8:	4798      	blx	r3
}
 23fe0da:	e7ef      	b.n	23fe0bc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fe0dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fe0dc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fe0de:	4c08      	ldr	r4, [pc, #32]	; (23fe100 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fe0e0:	e8d4 3f8f 	ldab	r3, [r4]
 23fe0e4:	07db      	lsls	r3, r3, #31
 23fe0e6:	d409      	bmi.n	23fe0fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fe0e8:	4620      	mov	r0, r4
 23fe0ea:	f7fe fcd5 	bl	23fca98 <__cxa_guard_acquire>
 23fe0ee:	b128      	cbz	r0, 23fe0fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fe0f0:	4620      	mov	r0, r4
 23fe0f2:	f7fe fcd6 	bl	23fcaa2 <__cxa_guard_release>
 23fe0f6:	4803      	ldr	r0, [pc, #12]	; (23fe104 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fe0f8:	f001 fb8e 	bl	23ff818 <atexit>
}
 23fe0fc:	4802      	ldr	r0, [pc, #8]	; (23fe108 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fe0fe:	bd10      	pop	{r4, pc}
 23fe100:	1007ae68 	.word	0x1007ae68
 23fe104:	023fde6f 	.word	0x023fde6f
 23fe108:	1007adb0 	.word	0x1007adb0

023fe10c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fe10c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fe10e:	4c08      	ldr	r4, [pc, #32]	; (23fe130 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fe110:	e8d4 3f8f 	ldab	r3, [r4]
 23fe114:	07db      	lsls	r3, r3, #31
 23fe116:	d409      	bmi.n	23fe12c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fe118:	4620      	mov	r0, r4
 23fe11a:	f7fe fcbd 	bl	23fca98 <__cxa_guard_acquire>
 23fe11e:	b128      	cbz	r0, 23fe12c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fe120:	4620      	mov	r0, r4
 23fe122:	f7fe fcbe 	bl	23fcaa2 <__cxa_guard_release>
 23fe126:	4803      	ldr	r0, [pc, #12]	; (23fe134 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fe128:	f001 fb76 	bl	23ff818 <atexit>
    return &factory;
}
 23fe12c:	4802      	ldr	r0, [pc, #8]	; (23fe138 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fe12e:	bd10      	pop	{r4, pc}
 23fe130:	1007ae6c 	.word	0x1007ae6c
 23fe134:	023fded7 	.word	0x023fded7
 23fe138:	1007adb4 	.word	0x1007adb4

023fe13c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fe13c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fe13e:	2500      	movs	r5, #0
 23fe140:	4604      	mov	r4, r0
 23fe142:	e9c0 5500 	strd	r5, r5, [r0]
 23fe146:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fe14a:	6085      	str	r5, [r0, #8]
 23fe14c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fe14e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fe152:	f7fe ff39 	bl	23fcfc8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fe156:	f7ff ffc1 	bl	23fe0dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fe15a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fe15c:	f7ff ffd6 	bl	23fe10c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fe160:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fe162:	6220      	str	r0, [r4, #32]
}
 23fe164:	4620      	mov	r0, r4
 23fe166:	bd38      	pop	{r3, r4, r5, pc}

023fe168 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fe168:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fe16a:	4c0a      	ldr	r4, [pc, #40]	; (23fe194 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fe16c:	e8d4 3f8f 	ldab	r3, [r4]
 23fe170:	07db      	lsls	r3, r3, #31
 23fe172:	d40c      	bmi.n	23fe18e <_ZN5spark10LogManager8instanceEv+0x26>
 23fe174:	4620      	mov	r0, r4
 23fe176:	f7fe fc8f 	bl	23fca98 <__cxa_guard_acquire>
 23fe17a:	b140      	cbz	r0, 23fe18e <_ZN5spark10LogManager8instanceEv+0x26>
 23fe17c:	4806      	ldr	r0, [pc, #24]	; (23fe198 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fe17e:	f7ff ffdd 	bl	23fe13c <_ZN5spark10LogManagerC1Ev>
 23fe182:	4620      	mov	r0, r4
 23fe184:	f7fe fc8d 	bl	23fcaa2 <__cxa_guard_release>
 23fe188:	4804      	ldr	r0, [pc, #16]	; (23fe19c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fe18a:	f001 fb45 	bl	23ff818 <atexit>
    return &mgr;
}
 23fe18e:	4802      	ldr	r0, [pc, #8]	; (23fe198 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fe190:	bd10      	pop	{r4, pc}
 23fe192:	bf00      	nop
 23fe194:	1007ae64 	.word	0x1007ae64
 23fe198:	1007ae74 	.word	0x1007ae74
 23fe19c:	023fe6b9 	.word	0x023fe6b9

023fe1a0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fe1a0:	2300      	movs	r3, #0
 23fe1a2:	4a02      	ldr	r2, [pc, #8]	; (23fe1ac <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fe1a4:	4902      	ldr	r1, [pc, #8]	; (23fe1b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fe1a6:	4803      	ldr	r0, [pc, #12]	; (23fe1b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fe1a8:	f7ff b9ca 	b.w	23fd540 <log_set_callbacks>
 23fe1ac:	023fe4a1 	.word	0x023fe4a1
 23fe1b0:	023fe42d 	.word	0x023fe42d
 23fe1b4:	023fe3ad 	.word	0x023fe3ad

023fe1b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fe1b8:	2300      	movs	r3, #0
 23fe1ba:	461a      	mov	r2, r3
 23fe1bc:	4619      	mov	r1, r3
 23fe1be:	4618      	mov	r0, r3
 23fe1c0:	f7ff b9be 	b.w	23fd540 <log_set_callbacks>

023fe1c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fe1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe1c6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fe1c8:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fe1ca:	4668      	mov	r0, sp
 23fe1cc:	f7ff fea2 	bl	23fdf14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe1d0:	466a      	mov	r2, sp
 23fe1d2:	4629      	mov	r1, r5
 23fe1d4:	4620      	mov	r0, r4
 23fe1d6:	f7ff fd4f 	bl	23fdc78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fe1da:	a801      	add	r0, sp, #4
 23fe1dc:	f7ff fb1f 	bl	23fd81e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe1e0:	4620      	mov	r0, r4
 23fe1e2:	b003      	add	sp, #12
 23fe1e4:	bd30      	pop	{r4, r5, pc}

023fe1e6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fe1e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe1e8:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fe1ea:	68cd      	ldr	r5, [r1, #12]
 23fe1ec:	4668      	mov	r0, sp
 23fe1ee:	f7ff fe91 	bl	23fdf14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe1f2:	466a      	mov	r2, sp
 23fe1f4:	4629      	mov	r1, r5
 23fe1f6:	4620      	mov	r0, r4
 23fe1f8:	f7ff fd1a 	bl	23fdc30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe1fc:	a801      	add	r0, sp, #4
 23fe1fe:	f7ff fb0e 	bl	23fd81e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe202:	4620      	mov	r0, r4
 23fe204:	b003      	add	sp, #12
 23fe206:	bd30      	pop	{r4, r5, pc}

023fe208 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fe208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe20a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fe20c:	690d      	ldr	r5, [r1, #16]
 23fe20e:	4668      	mov	r0, sp
 23fe210:	f7ff fe80 	bl	23fdf14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe214:	466a      	mov	r2, sp
 23fe216:	4629      	mov	r1, r5
 23fe218:	4620      	mov	r0, r4
 23fe21a:	f7ff fcb2 	bl	23fdb82 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe21e:	a801      	add	r0, sp, #4
 23fe220:	f7ff fafd 	bl	23fd81e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe224:	4620      	mov	r0, r4
 23fe226:	b003      	add	sp, #12
 23fe228:	bd30      	pop	{r4, r5, pc}
	...

023fe22c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fe22c:	b570      	push	{r4, r5, r6, lr}
 23fe22e:	b08a      	sub	sp, #40	; 0x28
 23fe230:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fe232:	4601      	mov	r1, r0
 23fe234:	a804      	add	r0, sp, #16
 23fe236:	f7ff ffc5 	bl	23fe1c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fe23a:	4e14      	ldr	r6, [pc, #80]	; (23fe28c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fe23c:	a804      	add	r0, sp, #16
 23fe23e:	f7ff fd33 	bl	23fdca8 <_ZN5spark18JSONObjectIterator4nextEv>
 23fe242:	b1e8      	cbz	r0, 23fe280 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fe244:	4668      	mov	r0, sp
 23fe246:	a904      	add	r1, sp, #16
 23fe248:	f7ff ffcd 	bl	23fe1e6 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fe24c:	4631      	mov	r1, r6
 23fe24e:	9802      	ldr	r0, [sp, #8]
 23fe250:	f7ff fe3a 	bl	23fdec8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fe254:	4604      	mov	r4, r0
 23fe256:	b110      	cbz	r0, 23fe25e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fe258:	1e2c      	subs	r4, r5, #0
 23fe25a:	bf18      	it	ne
 23fe25c:	2401      	movne	r4, #1
 23fe25e:	a801      	add	r0, sp, #4
 23fe260:	f7ff fadd 	bl	23fd81e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe264:	2c00      	cmp	r4, #0
 23fe266:	d0e9      	beq.n	23fe23c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fe268:	4668      	mov	r0, sp
 23fe26a:	a904      	add	r1, sp, #16
 23fe26c:	f7ff ffcc 	bl	23fe208 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fe270:	4668      	mov	r0, sp
 23fe272:	f7ff fcbc 	bl	23fdbee <_ZNK5spark9JSONValue5toIntEv>
 23fe276:	6028      	str	r0, [r5, #0]
 23fe278:	a801      	add	r0, sp, #4
 23fe27a:	f7ff fad0 	bl	23fd81e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe27e:	e7dd      	b.n	23fe23c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fe280:	a805      	add	r0, sp, #20
 23fe282:	f7ff facc 	bl	23fd81e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe286:	b00a      	add	sp, #40	; 0x28
 23fe288:	bd70      	pop	{r4, r5, r6, pc}
 23fe28a:	bf00      	nop
 23fe28c:	023ffc79 	.word	0x023ffc79

023fe290 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe292:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fe294:	4913      	ldr	r1, [pc, #76]	; (23fe2e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fe296:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe298:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fe29a:	f7fe fbbb 	bl	23fca14 <strcmp>
 23fe29e:	b950      	cbnz	r0, 23fe2b6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fe2a0:	f001 f844 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fe2a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe2a8:	f001 f82e 	bl	23ff308 <_ZN9USBSerial5beginEl>
}
 23fe2ac:	b003      	add	sp, #12
 23fe2ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fe2b2:	f001 b83b 	b.w	23ff32c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fe2b6:	4620      	mov	r0, r4
 23fe2b8:	490b      	ldr	r1, [pc, #44]	; (23fe2e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fe2ba:	f7fe fbab 	bl	23fca14 <strcmp>
 23fe2be:	b978      	cbnz	r0, 23fe2e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fe2c0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fe2c4:	a901      	add	r1, sp, #4
 23fe2c6:	4628      	mov	r0, r5
        int baud = 9600;
 23fe2c8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fe2ca:	f7ff ffaf 	bl	23fe22c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fe2ce:	f001 fa0f 	bl	23ff6f0 <_Z22__fetch_global_Serial1v>
 23fe2d2:	9901      	ldr	r1, [sp, #4]
 23fe2d4:	f000 ffbc 	bl	23ff250 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fe2d8:	f001 fa0a 	bl	23ff6f0 <_Z22__fetch_global_Serial1v>
}
 23fe2dc:	b003      	add	sp, #12
 23fe2de:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fe2e0:	2000      	movs	r0, #0
 23fe2e2:	e7fb      	b.n	23fe2dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fe2e4:	023ffc7e 	.word	0x023ffc7e
 23fe2e8:	023ffc85 	.word	0x023ffc85

023fe2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe2ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fe2ee:	2614      	movs	r6, #20
 23fe2f0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe2f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe2f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe2fa:	42ae      	cmp	r6, r5
 23fe2fc:	d005      	beq.n	23fe30a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fe2fe:	f105 0008 	add.w	r0, r5, #8
 23fe302:	f7ff fff3 	bl	23fe2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe306:	3514      	adds	r5, #20
 23fe308:	e7f7      	b.n	23fe2fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fe30a:	6820      	ldr	r0, [r4, #0]
 23fe30c:	f7ff fa30 	bl	23fd770 <free>
}
 23fe310:	4620      	mov	r0, r4
 23fe312:	bd70      	pop	{r4, r5, r6, pc}

023fe314 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fe314:	b510      	push	{r4, lr}
 23fe316:	4604      	mov	r4, r0
 23fe318:	300c      	adds	r0, #12
 23fe31a:	f7ff ffe7 	bl	23fe2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe31e:	4620      	mov	r0, r4
 23fe320:	f7ff faa7 	bl	23fd872 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe324:	4620      	mov	r0, r4
 23fe326:	bd10      	pop	{r4, pc}

023fe328 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fe328:	b510      	push	{r4, lr}
 23fe32a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fe32c:	4b03      	ldr	r3, [pc, #12]	; (23fe33c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fe32e:	f840 3b04 	str.w	r3, [r0], #4
 23fe332:	f7ff ffef 	bl	23fe314 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fe336:	4620      	mov	r0, r4
 23fe338:	bd10      	pop	{r4, pc}
 23fe33a:	bf00      	nop
 23fe33c:	023ffbd0 	.word	0x023ffbd0

023fe340 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fe340:	b510      	push	{r4, lr}
 23fe342:	4604      	mov	r4, r0
 23fe344:	f7ff fff0 	bl	23fe328 <_ZN5spark16StreamLogHandlerD1Ev>
 23fe348:	4620      	mov	r0, r4
 23fe34a:	2124      	movs	r1, #36	; 0x24
 23fe34c:	f7fe fb95 	bl	23fca7a <_ZdlPvj>
 23fe350:	4620      	mov	r0, r4
 23fe352:	bd10      	pop	{r4, pc}

023fe354 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fe354:	b510      	push	{r4, lr}
 23fe356:	4604      	mov	r4, r0
 23fe358:	4b02      	ldr	r3, [pc, #8]	; (23fe364 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fe35a:	6003      	str	r3, [r0, #0]
 23fe35c:	f7ff ffe4 	bl	23fe328 <_ZN5spark16StreamLogHandlerD1Ev>
 23fe360:	4620      	mov	r0, r4
 23fe362:	bd10      	pop	{r4, pc}
 23fe364:	023ffd24 	.word	0x023ffd24

023fe368 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fe368:	b510      	push	{r4, lr}
 23fe36a:	4604      	mov	r4, r0
 23fe36c:	f7ff fff2 	bl	23fe354 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fe370:	4620      	mov	r0, r4
 23fe372:	2124      	movs	r1, #36	; 0x24
 23fe374:	f7fe fb81 	bl	23fca7a <_ZdlPvj>
 23fe378:	4620      	mov	r0, r4
 23fe37a:	bd10      	pop	{r4, pc}

023fe37c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fe37c:	2200      	movs	r2, #0
 23fe37e:	e9c0 2200 	strd	r2, r2, [r0]
 23fe382:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fe384:	b510      	push	{r4, lr}
 23fe386:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe388:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe38a:	6004      	str	r4, [r0, #0]
 23fe38c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe38e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe390:	6044      	str	r4, [r0, #4]
 23fe392:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe394:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe396:	6084      	str	r4, [r0, #8]
}
 23fe398:	bd10      	pop	{r4, pc}

023fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fe39a:	b510      	push	{r4, lr}
 23fe39c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fe39e:	6803      	ldr	r3, [r0, #0]
 23fe3a0:	6818      	ldr	r0, [r3, #0]
 23fe3a2:	f7fe fe3b 	bl	23fd01c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fe3a6:	4620      	mov	r0, r4
 23fe3a8:	bd10      	pop	{r4, pc}
	...

023fe3ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fe3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe3b0:	b087      	sub	sp, #28
 23fe3b2:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fe3b4:	4b1c      	ldr	r3, [pc, #112]	; (23fe428 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fe3b6:	4680      	mov	r8, r0
 23fe3b8:	685b      	ldr	r3, [r3, #4]
 23fe3ba:	4689      	mov	r9, r1
 23fe3bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe3c0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fe3c2:	b96b      	cbnz	r3, 23fe3e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fe3c4:	f7ff fed0 	bl	23fe168 <_ZN5spark10LogManager8instanceEv>
 23fe3c8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe3ca:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fe3ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe3d0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fe3d2:	f7ff fd77 	bl	23fdec4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fe3d6:	7b23      	ldrb	r3, [r4, #12]
 23fe3d8:	b12b      	cbz	r3, 23fe3e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fe3da:	a805      	add	r0, sp, #20
 23fe3dc:	f7ff ffdd 	bl	23fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fe3e0:	b007      	add	sp, #28
 23fe3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fe3e6:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fe3e8:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fe3ec:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fe3ee:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe3f2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe3f6:	45aa      	cmp	sl, r5
 23fe3f8:	d012      	beq.n	23fe420 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fe3fa:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fe3fe:	4631      	mov	r1, r6
 23fe400:	1d38      	adds	r0, r7, #4
 23fe402:	f7ff fe09 	bl	23fe018 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe406:	4581      	cmp	r9, r0
 23fe408:	d3f5      	bcc.n	23fe3f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fe40a:	9a03      	ldr	r2, [sp, #12]
 23fe40c:	683b      	ldr	r3, [r7, #0]
 23fe40e:	9200      	str	r2, [sp, #0]
 23fe410:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fe414:	464a      	mov	r2, r9
 23fe416:	4633      	mov	r3, r6
 23fe418:	4641      	mov	r1, r8
 23fe41a:	4638      	mov	r0, r7
 23fe41c:	47d8      	blx	fp
 23fe41e:	e7ea      	b.n	23fe3f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fe420:	2300      	movs	r3, #0
 23fe422:	7323      	strb	r3, [r4, #12]
 23fe424:	e7d9      	b.n	23fe3da <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fe426:	bf00      	nop
 23fe428:	e000ed00 	.word	0xe000ed00

023fe42c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fe42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe430:	469b      	mov	fp, r3
 23fe432:	4b1a      	ldr	r3, [pc, #104]	; (23fe49c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fe434:	4680      	mov	r8, r0
 23fe436:	685b      	ldr	r3, [r3, #4]
 23fe438:	4689      	mov	r9, r1
 23fe43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe43e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fe440:	b96b      	cbnz	r3, 23fe45e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fe442:	f7ff fe91 	bl	23fe168 <_ZN5spark10LogManager8instanceEv>
 23fe446:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe448:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe44c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe44e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe450:	f7ff fd38 	bl	23fdec4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fe454:	7b23      	ldrb	r3, [r4, #12]
 23fe456:	b12b      	cbz	r3, 23fe464 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fe458:	a801      	add	r0, sp, #4
 23fe45a:	f7ff ff9e 	bl	23fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe45e:	b003      	add	sp, #12
 23fe460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fe464:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fe466:	b2f6      	uxtb	r6, r6
 23fe468:	7323      	strb	r3, [r4, #12]
 23fe46a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe46e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe472:	4555      	cmp	r5, sl
 23fe474:	d00e      	beq.n	23fe494 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fe476:	f855 7b04 	ldr.w	r7, [r5], #4
 23fe47a:	4659      	mov	r1, fp
 23fe47c:	1d38      	adds	r0, r7, #4
 23fe47e:	f7ff fdcb 	bl	23fe018 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe482:	4286      	cmp	r6, r0
 23fe484:	d3f5      	bcc.n	23fe472 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fe486:	683b      	ldr	r3, [r7, #0]
 23fe488:	464a      	mov	r2, r9
 23fe48a:	4641      	mov	r1, r8
 23fe48c:	4638      	mov	r0, r7
 23fe48e:	68db      	ldr	r3, [r3, #12]
 23fe490:	4798      	blx	r3
 23fe492:	e7ee      	b.n	23fe472 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fe494:	2300      	movs	r3, #0
 23fe496:	7323      	strb	r3, [r4, #12]
 23fe498:	e7de      	b.n	23fe458 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fe49a:	bf00      	nop
 23fe49c:	e000ed00 	.word	0xe000ed00

023fe4a0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fe4a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fe4a4:	4b16      	ldr	r3, [pc, #88]	; (23fe500 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fe4a6:	4605      	mov	r5, r0
 23fe4a8:	685b      	ldr	r3, [r3, #4]
 23fe4aa:	460f      	mov	r7, r1
 23fe4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fe4b0:	bb1b      	cbnz	r3, 23fe4fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fe4b2:	f7ff fe59 	bl	23fe168 <_ZN5spark10LogManager8instanceEv>
 23fe4b6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe4b8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe4bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe4be:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe4c0:	f7ff fd00 	bl	23fdec4 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fe4c4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fe4c8:	2446      	movs	r4, #70	; 0x46
 23fe4ca:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe4ce:	45b0      	cmp	r8, r6
 23fe4d0:	d109      	bne.n	23fe4e6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fe4d2:	a801      	add	r0, sp, #4
 23fe4d4:	f7ff ff61 	bl	23fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fe4d8:	42a5      	cmp	r5, r4
 23fe4da:	bfb4      	ite	lt
 23fe4dc:	2000      	movlt	r0, #0
 23fe4de:	2001      	movge	r0, #1
}
 23fe4e0:	b002      	add	sp, #8
 23fe4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fe4e6:	f856 0b04 	ldr.w	r0, [r6], #4
 23fe4ea:	4639      	mov	r1, r7
 23fe4ec:	3004      	adds	r0, #4
 23fe4ee:	f7ff fd93 	bl	23fe018 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fe4f2:	4284      	cmp	r4, r0
 23fe4f4:	bfa8      	it	ge
 23fe4f6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fe4f8:	e7e9      	b.n	23fe4ce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fe4fa:	2000      	movs	r0, #0
 23fe4fc:	e7f0      	b.n	23fe4e0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fe4fe:	bf00      	nop
 23fe500:	e000ed00 	.word	0xe000ed00

023fe504 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe506:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fe50a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe50c:	4604      	mov	r4, r0
 23fe50e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe510:	db0d      	blt.n	23fe52e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fe512:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fe514:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe516:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe518:	dd04      	ble.n	23fe524 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fe51a:	00b9      	lsls	r1, r7, #2
 23fe51c:	f7ff f936 	bl	23fd78c <realloc>
            if (!d) {
 23fe520:	b918      	cbnz	r0, 23fe52a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fe522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fe524:	f7ff f924 	bl	23fd770 <free>
        T* d = nullptr;
 23fe528:	2000      	movs	r0, #0
        data_ = d;
 23fe52a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe52c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe52e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe530:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe532:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fe536:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe538:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fe53c:	1d08      	adds	r0, r1, #4
 23fe53e:	f001 f986 	bl	23ff84e <memmove>
    new(p) T(std::move(value));
 23fe542:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fe546:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe548:	2001      	movs	r0, #1
    ++size_;
 23fe54a:	3301      	adds	r3, #1
 23fe54c:	6063      	str	r3, [r4, #4]
    return true;
 23fe54e:	e7e8      	b.n	23fe522 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fe550 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe552:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe554:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe558:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe55a:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe55c:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fe55e:	f7ff fcb1 	bl	23fdec4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fe562:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fe566:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fe56a:	4293      	cmp	r3, r2
 23fe56c:	4619      	mov	r1, r3
 23fe56e:	d00a      	beq.n	23fe586 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fe570:	6809      	ldr	r1, [r1, #0]
 23fe572:	3304      	adds	r3, #4
 23fe574:	42a9      	cmp	r1, r5
 23fe576:	d1f8      	bne.n	23fe56a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fe578:	a801      	add	r0, sp, #4
 23fe57a:	f7ff ff0e 	bl	23fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe57e:	2500      	movs	r5, #0
}
 23fe580:	4628      	mov	r0, r5
 23fe582:	b003      	add	sp, #12
 23fe584:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fe586:	4629      	mov	r1, r5
 23fe588:	4620      	mov	r0, r4
 23fe58a:	f7ff ffbb 	bl	23fe504 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fe58e:	4605      	mov	r5, r0
 23fe590:	2800      	cmp	r0, #0
 23fe592:	d0f1      	beq.n	23fe578 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fe594:	6863      	ldr	r3, [r4, #4]
 23fe596:	2b01      	cmp	r3, #1
 23fe598:	d101      	bne.n	23fe59e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fe59a:	f7ff fe01 	bl	23fe1a0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe59e:	a801      	add	r0, sp, #4
 23fe5a0:	f7ff fefb 	bl	23fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe5a4:	e7ec      	b.n	23fe580 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fe5a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe5a6:	460b      	mov	r3, r1
 23fe5a8:	b570      	push	{r4, r5, r6, lr}
 23fe5aa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fe5ac:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fe5b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fe5b4:	4282      	cmp	r2, r0
 23fe5b6:	d00f      	beq.n	23fe5d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fe5b8:	4601      	mov	r1, r0
            if (*p == value) {
 23fe5ba:	681d      	ldr	r5, [r3, #0]
 23fe5bc:	f851 6b04 	ldr.w	r6, [r1], #4
 23fe5c0:	42ae      	cmp	r6, r5
 23fe5c2:	d107      	bne.n	23fe5d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe5c4:	1a52      	subs	r2, r2, r1
 23fe5c6:	f001 f942 	bl	23ff84e <memmove>
    return true;
 23fe5ca:	2001      	movs	r0, #1
    --size_;
 23fe5cc:	6863      	ldr	r3, [r4, #4]
 23fe5ce:	3b01      	subs	r3, #1
 23fe5d0:	6063      	str	r3, [r4, #4]
}
 23fe5d2:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fe5d4:	4608      	mov	r0, r1
 23fe5d6:	e7ed      	b.n	23fe5b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fe5d8:	2000      	movs	r0, #0
 23fe5da:	e7fa      	b.n	23fe5d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fe5dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe5de:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe5e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe5e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe5e6:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe5e8:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fe5ea:	f7ff fc6b 	bl	23fdec4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fe5ee:	4620      	mov	r0, r4
 23fe5f0:	a901      	add	r1, sp, #4
 23fe5f2:	f7ff ffd8 	bl	23fe5a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fe5f6:	b118      	cbz	r0, 23fe600 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fe5f8:	6863      	ldr	r3, [r4, #4]
 23fe5fa:	b90b      	cbnz	r3, 23fe600 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fe5fc:	f7ff fddc 	bl	23fe1b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe600:	a803      	add	r0, sp, #12
 23fe602:	f7ff feca 	bl	23fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe606:	b004      	add	sp, #16
 23fe608:	bd10      	pop	{r4, pc}

023fe60a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fe60a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fe60c:	b570      	push	{r4, r5, r6, lr}
 23fe60e:	4604      	mov	r4, r0
 23fe610:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fe614:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe618:	42ae      	cmp	r6, r5
 23fe61a:	d015      	beq.n	23fe648 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fe61c:	4620      	mov	r0, r4
 23fe61e:	f105 0110 	add.w	r1, r5, #16
 23fe622:	f7ff ffc0 	bl	23fe5a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fe626:	6863      	ldr	r3, [r4, #4]
 23fe628:	b90b      	cbnz	r3, 23fe62e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fe62a:	f7ff fdc5 	bl	23fe1b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fe62e:	69e0      	ldr	r0, [r4, #28]
 23fe630:	6929      	ldr	r1, [r5, #16]
 23fe632:	6803      	ldr	r3, [r0, #0]
 23fe634:	68db      	ldr	r3, [r3, #12]
 23fe636:	4798      	blx	r3
        if (h.stream) {
 23fe638:	6969      	ldr	r1, [r5, #20]
 23fe63a:	b119      	cbz	r1, 23fe644 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fe63c:	6a20      	ldr	r0, [r4, #32]
 23fe63e:	6803      	ldr	r3, [r0, #0]
 23fe640:	68db      	ldr	r3, [r3, #12]
 23fe642:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe644:	3518      	adds	r5, #24
 23fe646:	e7e7      	b.n	23fe618 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fe648:	2618      	movs	r6, #24
 23fe64a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe64e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe652:	42ae      	cmp	r6, r5
 23fe654:	d004      	beq.n	23fe660 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fe656:	4628      	mov	r0, r5
 23fe658:	f000 fcfa 	bl	23ff050 <_ZN6StringD1Ev>
 23fe65c:	3518      	adds	r5, #24
 23fe65e:	e7f8      	b.n	23fe652 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fe660:	2300      	movs	r3, #0
 23fe662:	6163      	str	r3, [r4, #20]
}
 23fe664:	bd70      	pop	{r4, r5, r6, pc}

023fe666 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fe666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe668:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fe66a:	f7ff fda5 	bl	23fe1b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe66e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fe672:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe674:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe676:	f7ff fc25 	bl	23fdec4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fe67a:	4620      	mov	r0, r4
 23fe67c:	f7ff ffc5 	bl	23fe60a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fe680:	a801      	add	r0, sp, #4
 23fe682:	f7ff fe8a 	bl	23fe39a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fe686:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe688:	b108      	cbz	r0, 23fe68e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fe68a:	f7fe fcab 	bl	23fcfe4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fe68e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe692:	2618      	movs	r6, #24
 23fe694:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe698:	42ae      	cmp	r6, r5
 23fe69a:	d004      	beq.n	23fe6a6 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fe69c:	4628      	mov	r0, r5
 23fe69e:	f000 fcd7 	bl	23ff050 <_ZN6StringD1Ev>
 23fe6a2:	3518      	adds	r5, #24
 23fe6a4:	e7f8      	b.n	23fe698 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fe6a6:	6920      	ldr	r0, [r4, #16]
 23fe6a8:	f7ff f862 	bl	23fd770 <free>
 23fe6ac:	6820      	ldr	r0, [r4, #0]
 23fe6ae:	f7ff f85f 	bl	23fd770 <free>
}
 23fe6b2:	4620      	mov	r0, r4
 23fe6b4:	b002      	add	sp, #8
 23fe6b6:	bd70      	pop	{r4, r5, r6, pc}

023fe6b8 <__tcf_2>:
    static LogManager mgr;
 23fe6b8:	4801      	ldr	r0, [pc, #4]	; (23fe6c0 <__tcf_2+0x8>)
 23fe6ba:	f7ff bfd4 	b.w	23fe666 <_ZN5spark10LogManagerD1Ev>
 23fe6be:	bf00      	nop
 23fe6c0:	1007ae74 	.word	0x1007ae74

023fe6c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe6c4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe6c8:	4604      	mov	r4, r0
 23fe6ca:	460d      	mov	r5, r1
 23fe6cc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe6ce:	d915      	bls.n	23fe6fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe6d0:	4290      	cmp	r0, r2
 23fe6d2:	d214      	bcs.n	23fe6fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe6d4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe6d8:	1a75      	subs	r5, r6, r1
 23fe6da:	f1a1 0714 	sub.w	r7, r1, #20
 23fe6de:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe6e0:	42b7      	cmp	r7, r6
 23fe6e2:	d01a      	beq.n	23fe71a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe6e4:	b11c      	cbz	r4, 23fe6ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe6e6:	4631      	mov	r1, r6
 23fe6e8:	4620      	mov	r0, r4
 23fe6ea:	f7ff fc45 	bl	23fdf78 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe6ee:	f106 0008 	add.w	r0, r6, #8
 23fe6f2:	f7ff fdfb 	bl	23fe2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe6f6:	3e14      	subs	r6, #20
 23fe6f8:	3c14      	subs	r4, #20
 23fe6fa:	e7f1      	b.n	23fe6e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe6fc:	d00d      	beq.n	23fe71a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe6fe:	42b5      	cmp	r5, r6
 23fe700:	d00b      	beq.n	23fe71a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe702:	b11c      	cbz	r4, 23fe70c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe704:	4629      	mov	r1, r5
 23fe706:	4620      	mov	r0, r4
 23fe708:	f7ff fc36 	bl	23fdf78 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe70c:	f105 0008 	add.w	r0, r5, #8
 23fe710:	f7ff fdec 	bl	23fe2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe714:	3514      	adds	r5, #20
 23fe716:	3414      	adds	r4, #20
 23fe718:	e7f1      	b.n	23fe6fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe71c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe71c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe720:	4604      	mov	r4, r0
 23fe722:	460d      	mov	r5, r1
 23fe724:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe726:	d914      	bls.n	23fe752 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe728:	4290      	cmp	r0, r2
 23fe72a:	d213      	bcs.n	23fe754 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe72c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe730:	1a75      	subs	r5, r6, r1
 23fe732:	f1a1 0710 	sub.w	r7, r1, #16
 23fe736:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe738:	42b7      	cmp	r7, r6
 23fe73a:	d018      	beq.n	23fe76e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe73c:	b11c      	cbz	r4, 23fe746 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe73e:	4631      	mov	r1, r6
 23fe740:	4620      	mov	r0, r4
 23fe742:	f000 fcee 	bl	23ff122 <_ZN6StringC1EOS_>
                end->~T();
 23fe746:	4630      	mov	r0, r6
 23fe748:	f000 fc82 	bl	23ff050 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe74c:	3e10      	subs	r6, #16
 23fe74e:	3c10      	subs	r4, #16
 23fe750:	e7f2      	b.n	23fe738 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe752:	d00c      	beq.n	23fe76e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe754:	42b5      	cmp	r5, r6
 23fe756:	d00a      	beq.n	23fe76e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe758:	b11c      	cbz	r4, 23fe762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe75a:	4629      	mov	r1, r5
 23fe75c:	4620      	mov	r0, r4
 23fe75e:	f000 fce0 	bl	23ff122 <_ZN6StringC1EOS_>
                p->~T();
 23fe762:	4628      	mov	r0, r5
 23fe764:	f000 fc74 	bl	23ff050 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe768:	3510      	adds	r5, #16
 23fe76a:	3410      	adds	r4, #16
 23fe76c:	e7f2      	b.n	23fe754 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe770:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe772:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe774:	4605      	mov	r5, r0
        if (n > 0) {
 23fe776:	dd11      	ble.n	23fe79c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe778:	0130      	lsls	r0, r6, #4
 23fe77a:	f7fe ffeb 	bl	23fd754 <malloc>
            if (!d) {
 23fe77e:	4604      	mov	r4, r0
 23fe780:	b158      	cbz	r0, 23fe79a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe782:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe786:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe78a:	f7ff ffc7 	bl	23fe71c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe78e:	6828      	ldr	r0, [r5, #0]
 23fe790:	f7fe ffee 	bl	23fd770 <free>
        return true;
 23fe794:	2001      	movs	r0, #1
        data_ = d;
 23fe796:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe798:	60ae      	str	r6, [r5, #8]
    }
 23fe79a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe79c:	2400      	movs	r4, #0
 23fe79e:	e7f6      	b.n	23fe78e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe7a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe7a4:	4690      	mov	r8, r2
        capacity_(0) {
 23fe7a6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe7a8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe7aa:	b095      	sub	sp, #84	; 0x54
 23fe7ac:	9103      	str	r1, [sp, #12]
    return size_;
 23fe7ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe7b2:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe7b4:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe7b6:	e9c0 3300 	strd	r3, r3, [r0]
 23fe7ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe7be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe7c2:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe7c6:	7602      	strb	r2, [r0, #24]
 23fe7c8:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe7ca:	dc23      	bgt.n	23fe814 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe7cc:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe7d0:	2314      	movs	r3, #20
 23fe7d2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe7d6:	42af      	cmp	r7, r5
 23fe7d8:	d03b      	beq.n	23fe852 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe7da:	4629      	mov	r1, r5
 23fe7dc:	a80b      	add	r0, sp, #44	; 0x2c
 23fe7de:	f000 fca0 	bl	23ff122 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe7e2:	a90b      	add	r1, sp, #44	; 0x2c
 23fe7e4:	a80f      	add	r0, sp, #60	; 0x3c
 23fe7e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe7e8:	f000 fc9b 	bl	23ff122 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe7ec:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe7f0:	4299      	cmp	r1, r3
 23fe7f2:	da1b      	bge.n	23fe82c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe7f4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe7f8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe7fc:	4631      	mov	r1, r6
 23fe7fe:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe802:	f106 0010 	add.w	r0, r6, #16
 23fe806:	f7ff ff89 	bl	23fe71c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe80a:	b9ee      	cbnz	r6, 23fe848 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe80e:	3301      	adds	r3, #1
 23fe810:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe812:	e011      	b.n	23fe838 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe814:	a808      	add	r0, sp, #32
 23fe816:	f7ff ffab 	bl	23fe770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe81a:	2800      	cmp	r0, #0
 23fe81c:	d1d6      	bne.n	23fe7cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe81e:	a808      	add	r0, sp, #32
 23fe820:	f7ff f827 	bl	23fd872 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe824:	4620      	mov	r0, r4
 23fe826:	b015      	add	sp, #84	; 0x54
 23fe828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe82c:	3101      	adds	r1, #1
 23fe82e:	a808      	add	r0, sp, #32
 23fe830:	f7ff ff9e 	bl	23fe770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe834:	2800      	cmp	r0, #0
 23fe836:	d1dd      	bne.n	23fe7f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe838:	a80f      	add	r0, sp, #60	; 0x3c
 23fe83a:	f000 fc09 	bl	23ff050 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe83e:	a80b      	add	r0, sp, #44	; 0x2c
 23fe840:	f000 fc06 	bl	23ff050 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe844:	3514      	adds	r5, #20
 23fe846:	e7c6      	b.n	23fe7d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe848:	4630      	mov	r0, r6
 23fe84a:	a90f      	add	r1, sp, #60	; 0x3c
 23fe84c:	f000 fc69 	bl	23ff122 <_ZN6StringC1EOS_>
 23fe850:	e7dc      	b.n	23fe80c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe852:	2600      	movs	r6, #0
 23fe854:	f04f 0914 	mov.w	r9, #20
 23fe858:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe85c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe85e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe862:	429e      	cmp	r6, r3
 23fe864:	da7c      	bge.n	23fe960 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fe866:	0133      	lsls	r3, r6, #4
 23fe868:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe86a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe86c:	b90b      	cbnz	r3, 23fe872 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe86e:	3601      	adds	r6, #1
 23fe870:	e7f5      	b.n	23fe85e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe872:	2300      	movs	r3, #0
 23fe874:	9307      	str	r3, [sp, #28]
 23fe876:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe87a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe87c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe87e:	a907      	add	r1, sp, #28
 23fe880:	a806      	add	r0, sp, #24
 23fe882:	f7ff faf8 	bl	23fde76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe886:	4682      	mov	sl, r0
 23fe888:	2800      	cmp	r0, #0
 23fe88a:	d0f0      	beq.n	23fe86e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe88c:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe890:	4601      	mov	r1, r0
            bool found = false;
 23fe892:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe896:	4628      	mov	r0, r5
 23fe898:	9a07      	ldr	r2, [sp, #28]
 23fe89a:	f10d 0317 	add.w	r3, sp, #23
 23fe89e:	f7ff fb7f 	bl	23fdfa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe8a2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe8a6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe8a8:	2f00      	cmp	r7, #0
 23fe8aa:	d14a      	bne.n	23fe942 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe8ac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe8b0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe8b4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe8b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe8bc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe8c0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe8c4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe8c6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe8ca:	4293      	cmp	r3, r2
 23fe8cc:	db17      	blt.n	23fe8fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe8ce:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe8d2:	f1ba 0f00 	cmp.w	sl, #0
 23fe8d6:	dd30      	ble.n	23fe93a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe8d8:	fb09 f00a 	mul.w	r0, r9, sl
 23fe8dc:	f7fe ff3a 	bl	23fd754 <malloc>
            if (!d) {
 23fe8e0:	4683      	mov	fp, r0
 23fe8e2:	b360      	cbz	r0, 23fe93e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe8e4:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe8e8:	fb09 1202 	mla	r2, r9, r2, r1
 23fe8ec:	f7ff feea 	bl	23fe6c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe8f0:	6828      	ldr	r0, [r5, #0]
 23fe8f2:	f7fe ff3d 	bl	23fd770 <free>
        data_ = d;
 23fe8f6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe8fa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe8fe:	682b      	ldr	r3, [r5, #0]
 23fe900:	9a01      	ldr	r2, [sp, #4]
 23fe902:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe906:	686a      	ldr	r2, [r5, #4]
 23fe908:	4651      	mov	r1, sl
 23fe90a:	fb09 3202 	mla	r2, r9, r2, r3
 23fe90e:	f10a 0014 	add.w	r0, sl, #20
 23fe912:	f7ff fed7 	bl	23fe6c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe916:	f1ba 0f00 	cmp.w	sl, #0
 23fe91a:	d003      	beq.n	23fe924 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe91c:	4650      	mov	r0, sl
 23fe91e:	a90f      	add	r1, sp, #60	; 0x3c
 23fe920:	f7ff fb2a 	bl	23fdf78 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe924:	686b      	ldr	r3, [r5, #4]
 23fe926:	3301      	adds	r3, #1
 23fe928:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe92a:	a811      	add	r0, sp, #68	; 0x44
 23fe92c:	f7ff fcde 	bl	23fe2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe930:	b13f      	cbz	r7, 23fe942 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe932:	a80b      	add	r0, sp, #44	; 0x2c
 23fe934:	f7ff fcda 	bl	23fe2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe938:	e771      	b.n	23fe81e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe93a:	46bb      	mov	fp, r7
 23fe93c:	e7d8      	b.n	23fe8f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe93e:	2701      	movs	r7, #1
 23fe940:	e7f3      	b.n	23fe92a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe942:	9b01      	ldr	r3, [sp, #4]
 23fe944:	682d      	ldr	r5, [r5, #0]
 23fe946:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe94a:	9b06      	ldr	r3, [sp, #24]
 23fe94c:	781b      	ldrb	r3, [r3, #0]
 23fe94e:	b92b      	cbnz	r3, 23fe95c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe950:	f8d8 3000 	ldr.w	r3, [r8]
 23fe954:	9a02      	ldr	r2, [sp, #8]
 23fe956:	4413      	add	r3, r2
 23fe958:	7c1b      	ldrb	r3, [r3, #16]
 23fe95a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe95c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe95e:	e78e      	b.n	23fe87e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe960:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe962:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe964:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe966:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe968:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe96a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe96e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe970:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe972:	60a2      	str	r2, [r4, #8]
 23fe974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe976:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe978:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe97a:	60e2      	str	r2, [r4, #12]
 23fe97c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe97e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe980:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe982:	6122      	str	r2, [r4, #16]
 23fe984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe986:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe988:	9b03      	ldr	r3, [sp, #12]
 23fe98a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe98c:	6162      	str	r2, [r4, #20]
 23fe98e:	7623      	strb	r3, [r4, #24]
 23fe990:	e7cf      	b.n	23fe932 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe994 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe994:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe996:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe998:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe99a:	4617      	mov	r7, r2
 23fe99c:	b087      	sub	sp, #28
 23fe99e:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe9a0:	4668      	mov	r0, sp
 23fe9a2:	4619      	mov	r1, r3
 23fe9a4:	f7fe f969 	bl	23fcc7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe9a8:	4b0b      	ldr	r3, [pc, #44]	; (23fe9d8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe9aa:	4669      	mov	r1, sp
 23fe9ac:	f846 3b04 	str.w	r3, [r6], #4
 23fe9b0:	a803      	add	r0, sp, #12
 23fe9b2:	f7fe f962 	bl	23fcc7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe9b6:	4639      	mov	r1, r7
 23fe9b8:	aa03      	add	r2, sp, #12
 23fe9ba:	4630      	mov	r0, r6
 23fe9bc:	f7ff fef0 	bl	23fe7a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe9c0:	a803      	add	r0, sp, #12
 23fe9c2:	f7fe f919 	bl	23fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe9c6:	4668      	mov	r0, sp
 23fe9c8:	f7fe f916 	bl	23fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe9cc:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe9ce:	4b03      	ldr	r3, [pc, #12]	; (23fe9dc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe9d0:	6225      	str	r5, [r4, #32]
 23fe9d2:	6023      	str	r3, [r4, #0]
}
 23fe9d4:	b007      	add	sp, #28
 23fe9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe9d8:	023ffbd0 	.word	0x023ffbd0
 23fe9dc:	023ffd0c 	.word	0x023ffd0c

023fe9e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe9e2:	460f      	mov	r7, r1
 23fe9e4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe9e6:	4638      	mov	r0, r7
 23fe9e8:	491c      	ldr	r1, [pc, #112]	; (23fea5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe9ea:	4616      	mov	r6, r2
 23fe9ec:	461d      	mov	r5, r3
 23fe9ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe9f0:	f7fe f810 	bl	23fca14 <strcmp>
 23fe9f4:	b9c0      	cbnz	r0, 23fea28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe9f6:	b1a4      	cbz	r4, 23fea22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe9f8:	4629      	mov	r1, r5
 23fe9fa:	a801      	add	r0, sp, #4
 23fe9fc:	f7ff fcbe 	bl	23fe37c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fea00:	2024      	movs	r0, #36	; 0x24
 23fea02:	4917      	ldr	r1, [pc, #92]	; (23fea60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fea04:	f000 ff04 	bl	23ff810 <_ZnwjRKSt9nothrow_t>
 23fea08:	4605      	mov	r5, r0
 23fea0a:	b130      	cbz	r0, 23fea1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fea0c:	ab01      	add	r3, sp, #4
 23fea0e:	4632      	mov	r2, r6
 23fea10:	4621      	mov	r1, r4
 23fea12:	f7ff ffbf 	bl	23fe994 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fea16:	4b13      	ldr	r3, [pc, #76]	; (23fea64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fea18:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fea1a:	a801      	add	r0, sp, #4
 23fea1c:	f7fe f8ec 	bl	23fcbf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fea20:	462c      	mov	r4, r5
}
 23fea22:	4620      	mov	r0, r4
 23fea24:	b005      	add	sp, #20
 23fea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fea28:	4638      	mov	r0, r7
 23fea2a:	490f      	ldr	r1, [pc, #60]	; (23fea68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fea2c:	f7fd fff2 	bl	23fca14 <strcmp>
 23fea30:	b990      	cbnz	r0, 23fea58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fea32:	2c00      	cmp	r4, #0
 23fea34:	d0f5      	beq.n	23fea22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fea36:	4629      	mov	r1, r5
 23fea38:	a801      	add	r0, sp, #4
 23fea3a:	f7ff fc9f 	bl	23fe37c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fea3e:	2024      	movs	r0, #36	; 0x24
 23fea40:	4907      	ldr	r1, [pc, #28]	; (23fea60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fea42:	f000 fee5 	bl	23ff810 <_ZnwjRKSt9nothrow_t>
 23fea46:	4605      	mov	r5, r0
 23fea48:	2800      	cmp	r0, #0
 23fea4a:	d0e6      	beq.n	23fea1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fea4c:	4632      	mov	r2, r6
 23fea4e:	4621      	mov	r1, r4
 23fea50:	ab01      	add	r3, sp, #4
 23fea52:	f7ff ff9f 	bl	23fe994 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fea56:	e7e0      	b.n	23fea1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fea58:	2400      	movs	r4, #0
 23fea5a:	e7e2      	b.n	23fea22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fea5c:	023ffc8d 	.word	0x023ffc8d
 23fea60:	023ffe58 	.word	0x023ffe58
 23fea64:	023ffd24 	.word	0x023ffd24
 23fea68:	023ffc91 	.word	0x023ffc91

023fea6c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fea6c:	4b01      	ldr	r3, [pc, #4]	; (23fea74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fea6e:	4a02      	ldr	r2, [pc, #8]	; (23fea78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fea70:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fea72:	4770      	bx	lr
 23fea74:	1007ae70 	.word	0x1007ae70
 23fea78:	023ffca2 	.word	0x023ffca2

023fea7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fea7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fea80:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fea82:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fea86:	4604      	mov	r4, r0
 23fea88:	460e      	mov	r6, r1
 23fea8a:	4617      	mov	r7, r2
 23fea8c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fea8e:	f000 fc4d 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fea92:	4581      	cmp	r9, r0
 23fea94:	d04d      	beq.n	23feb32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fea96:	792b      	ldrb	r3, [r5, #4]
 23fea98:	0719      	lsls	r1, r3, #28
 23fea9a:	d504      	bpl.n	23feaa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fea9c:	4620      	mov	r0, r4
 23fea9e:	696a      	ldr	r2, [r5, #20]
 23feaa0:	4954      	ldr	r1, [pc, #336]	; (23febf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23feaa2:	f7ff fae2 	bl	23fe06a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23feaa6:	f1b8 0f00 	cmp.w	r8, #0
 23feaaa:	d00d      	beq.n	23feac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23feaac:	215b      	movs	r1, #91	; 0x5b
 23feaae:	4620      	mov	r0, r4
 23feab0:	f7ff fa56 	bl	23fdf60 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23feab4:	4641      	mov	r1, r8
 23feab6:	4620      	mov	r0, r4
 23feab8:	f7ff fa43 	bl	23fdf42 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23feabc:	6823      	ldr	r3, [r4, #0]
 23feabe:	2202      	movs	r2, #2
 23feac0:	4620      	mov	r0, r4
 23feac2:	68db      	ldr	r3, [r3, #12]
 23feac4:	494c      	ldr	r1, [pc, #304]	; (23febf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23feac6:	4798      	blx	r3
    if (attr.has_file) {
 23feac8:	792b      	ldrb	r3, [r5, #4]
 23feaca:	07da      	lsls	r2, r3, #31
 23feacc:	d524      	bpl.n	23feb18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23feace:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fead2:	212f      	movs	r1, #47	; 0x2f
 23fead4:	4640      	mov	r0, r8
 23fead6:	f000 ff3e 	bl	23ff956 <strrchr>
    if (s1) {
 23feada:	b108      	cbz	r0, 23feae0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23feadc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23feae0:	4641      	mov	r1, r8
 23feae2:	4620      	mov	r0, r4
 23feae4:	f7ff fa2d 	bl	23fdf42 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23feae8:	792b      	ldrb	r3, [r5, #4]
 23feaea:	079b      	lsls	r3, r3, #30
 23feaec:	d508      	bpl.n	23feb00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23feaee:	213a      	movs	r1, #58	; 0x3a
 23feaf0:	4620      	mov	r0, r4
 23feaf2:	f7ff fa35 	bl	23fdf60 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23feaf6:	4620      	mov	r0, r4
 23feaf8:	68ea      	ldr	r2, [r5, #12]
 23feafa:	4940      	ldr	r1, [pc, #256]	; (23febfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23feafc:	f7ff fab5 	bl	23fe06a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23feb00:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23feb02:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23feb04:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23feb08:	4620      	mov	r0, r4
            write(", ", 2);
 23feb0a:	f04f 0202 	mov.w	r2, #2
 23feb0e:	68db      	ldr	r3, [r3, #12]
 23feb10:	bf14      	ite	ne
 23feb12:	493b      	ldrne	r1, [pc, #236]	; (23fec00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23feb14:	493b      	ldreq	r1, [pc, #236]	; (23fec04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23feb16:	4798      	blx	r3
    if (attr.has_function) {
 23feb18:	792b      	ldrb	r3, [r5, #4]
 23feb1a:	0758      	lsls	r0, r3, #29
 23feb1c:	d51d      	bpl.n	23feb5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23feb1e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23feb20:	460b      	mov	r3, r1
 23feb22:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23feb24:	f813 0b01 	ldrb.w	r0, [r3], #1
 23feb28:	b160      	cbz	r0, 23feb44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23feb2a:	2820      	cmp	r0, #32
 23feb2c:	d108      	bne.n	23feb40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23feb2e:	4619      	mov	r1, r3
 23feb30:	e7f7      	b.n	23feb22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23feb32:	4835      	ldr	r0, [pc, #212]	; (23fec08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23feb34:	f000 f983 	bl	23fee3e <_ZN5spark12NetworkClass9listeningEv>
 23feb38:	2800      	cmp	r0, #0
 23feb3a:	d0ac      	beq.n	23fea96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23feb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23feb40:	2828      	cmp	r0, #40	; 0x28
 23feb42:	d1ee      	bne.n	23feb22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23feb44:	6823      	ldr	r3, [r4, #0]
 23feb46:	1a52      	subs	r2, r2, r1
 23feb48:	4620      	mov	r0, r4
 23feb4a:	68db      	ldr	r3, [r3, #12]
 23feb4c:	4798      	blx	r3
        write("(): ", 4);
 23feb4e:	6823      	ldr	r3, [r4, #0]
 23feb50:	2204      	movs	r2, #4
 23feb52:	4620      	mov	r0, r4
 23feb54:	68db      	ldr	r3, [r3, #12]
 23feb56:	492d      	ldr	r1, [pc, #180]	; (23fec0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23feb58:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23feb5a:	2100      	movs	r1, #0
 23feb5c:	4638      	mov	r0, r7
 23feb5e:	f7fe fce1 	bl	23fd524 <log_level_name>
 23feb62:	4601      	mov	r1, r0
    write(s);
 23feb64:	4620      	mov	r0, r4
 23feb66:	f7ff f9ec 	bl	23fdf42 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23feb6a:	6823      	ldr	r3, [r4, #0]
 23feb6c:	2202      	movs	r2, #2
 23feb6e:	4620      	mov	r0, r4
 23feb70:	68db      	ldr	r3, [r3, #12]
 23feb72:	4924      	ldr	r1, [pc, #144]	; (23fec04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23feb74:	4798      	blx	r3
    if (msg) {
 23feb76:	b11e      	cbz	r6, 23feb80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23feb78:	4631      	mov	r1, r6
 23feb7a:	4620      	mov	r0, r4
 23feb7c:	f7ff f9e1 	bl	23fdf42 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23feb80:	792b      	ldrb	r3, [r5, #4]
 23feb82:	f013 0f30 	tst.w	r3, #48	; 0x30
 23feb86:	d02c      	beq.n	23febe2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23feb88:	6823      	ldr	r3, [r4, #0]
 23feb8a:	4921      	ldr	r1, [pc, #132]	; (23fec10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23feb8c:	68db      	ldr	r3, [r3, #12]
 23feb8e:	2202      	movs	r2, #2
 23feb90:	4620      	mov	r0, r4
 23feb92:	4798      	blx	r3
        if (attr.has_code) {
 23feb94:	792b      	ldrb	r3, [r5, #4]
 23feb96:	06d9      	lsls	r1, r3, #27
 23feb98:	d50a      	bpl.n	23febb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23feb9a:	6823      	ldr	r3, [r4, #0]
 23feb9c:	2207      	movs	r2, #7
 23feb9e:	4620      	mov	r0, r4
 23feba0:	491c      	ldr	r1, [pc, #112]	; (23fec14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23feba2:	68db      	ldr	r3, [r3, #12]
 23feba4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23feba6:	4620      	mov	r0, r4
 23feba8:	69aa      	ldr	r2, [r5, #24]
 23febaa:	491b      	ldr	r1, [pc, #108]	; (23fec18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23febac:	f7ff fa5d 	bl	23fe06a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23febb0:	792b      	ldrb	r3, [r5, #4]
 23febb2:	069a      	lsls	r2, r3, #26
 23febb4:	d511      	bpl.n	23febda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23febb6:	06db      	lsls	r3, r3, #27
 23febb8:	d505      	bpl.n	23febc6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23febba:	6823      	ldr	r3, [r4, #0]
 23febbc:	2202      	movs	r2, #2
 23febbe:	4620      	mov	r0, r4
 23febc0:	68db      	ldr	r3, [r3, #12]
 23febc2:	490f      	ldr	r1, [pc, #60]	; (23fec00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23febc4:	4798      	blx	r3
            write("details = ", 10);
 23febc6:	6823      	ldr	r3, [r4, #0]
 23febc8:	4620      	mov	r0, r4
 23febca:	4914      	ldr	r1, [pc, #80]	; (23fec1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23febcc:	220a      	movs	r2, #10
 23febce:	68db      	ldr	r3, [r3, #12]
 23febd0:	4798      	blx	r3
            write(attr.details);
 23febd2:	4620      	mov	r0, r4
 23febd4:	69e9      	ldr	r1, [r5, #28]
 23febd6:	f7ff f9b4 	bl	23fdf42 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23febda:	215d      	movs	r1, #93	; 0x5d
 23febdc:	4620      	mov	r0, r4
 23febde:	f7ff f9bf 	bl	23fdf60 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23febe2:	6823      	ldr	r3, [r4, #0]
 23febe4:	4620      	mov	r0, r4
}
 23febe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23febea:	2202      	movs	r2, #2
 23febec:	68db      	ldr	r3, [r3, #12]
 23febee:	490c      	ldr	r1, [pc, #48]	; (23fec20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23febf0:	4718      	bx	r3
 23febf2:	bf00      	nop
 23febf4:	023ffca6 	.word	0x023ffca6
 23febf8:	023ffcad 	.word	0x023ffcad
 23febfc:	023ffbc4 	.word	0x023ffbc4
 23fec00:	023ffcb0 	.word	0x023ffcb0
 23fec04:	023ffcb5 	.word	0x023ffcb5
 23fec08:	1007ae9c 	.word	0x1007ae9c
 23fec0c:	023ffcb3 	.word	0x023ffcb3
 23fec10:	023ffcb8 	.word	0x023ffcb8
 23fec14:	023ffcbb 	.word	0x023ffcbb
 23fec18:	023ffcc3 	.word	0x023ffcc3
 23fec1c:	023ffcc6 	.word	0x023ffcc6
 23fec20:	023ffcd1 	.word	0x023ffcd1

023fec24 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fec24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fec28:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fec2a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fec2c:	460d      	mov	r5, r1
 23fec2e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fec30:	f000 fb7c 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fec34:	4287      	cmp	r7, r0
 23fec36:	d007      	beq.n	23fec48 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fec38:	6a20      	ldr	r0, [r4, #32]
 23fec3a:	4632      	mov	r2, r6
 23fec3c:	6803      	ldr	r3, [r0, #0]
 23fec3e:	4629      	mov	r1, r5
}
 23fec40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fec44:	68db      	ldr	r3, [r3, #12]
 23fec46:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fec48:	4803      	ldr	r0, [pc, #12]	; (23fec58 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fec4a:	f000 f8f8 	bl	23fee3e <_ZN5spark12NetworkClass9listeningEv>
 23fec4e:	2800      	cmp	r0, #0
 23fec50:	d0f2      	beq.n	23fec38 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fec52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fec56:	bf00      	nop
 23fec58:	1007ae9c 	.word	0x1007ae9c

023fec5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fec5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fec60:	b085      	sub	sp, #20
    return stream_;
 23fec62:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fec66:	4605      	mov	r5, r0
 23fec68:	460f      	mov	r7, r1
 23fec6a:	4690      	mov	r8, r2
 23fec6c:	461e      	mov	r6, r3
 23fec6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fec70:	f000 fb5c 	bl	23ff32c <_Z16_fetch_usbserialv>
 23fec74:	4581      	cmp	r9, r0
 23fec76:	d105      	bne.n	23fec84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fec78:	4849      	ldr	r0, [pc, #292]	; (23feda0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fec7a:	f000 f8e0 	bl	23fee3e <_ZN5spark12NetworkClass9listeningEv>
 23fec7e:	2800      	cmp	r0, #0
 23fec80:	f040 808a 	bne.w	23fed98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fec84:	f04f 0900 	mov.w	r9, #0
 23fec88:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fec8a:	4a46      	ldr	r2, [pc, #280]	; (23feda4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fec8c:	a801      	add	r0, sp, #4
 23fec8e:	9201      	str	r2, [sp, #4]
 23fec90:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fec92:	f88d 9008 	strb.w	r9, [sp, #8]
 23fec96:	f7ff f830 	bl	23fdcfa <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fec9a:	4649      	mov	r1, r9
 23fec9c:	4640      	mov	r0, r8
 23fec9e:	f7fe fc41 	bl	23fd524 <log_level_name>
 23feca2:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23feca4:	4940      	ldr	r1, [pc, #256]	; (23feda8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23feca6:	2201      	movs	r2, #1
 23feca8:	a801      	add	r0, sp, #4
 23fecaa:	f7ff f8b5 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fecae:	4641      	mov	r1, r8
 23fecb0:	f7ff f939 	bl	23fdf26 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fecb4:	b13f      	cbz	r7, 23fecc6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fecb6:	493d      	ldr	r1, [pc, #244]	; (23fedac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fecb8:	2201      	movs	r2, #1
 23fecba:	a801      	add	r0, sp, #4
 23fecbc:	f7ff f8ac 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fecc0:	4639      	mov	r1, r7
 23fecc2:	f7ff f930 	bl	23fdf26 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fecc6:	b13e      	cbz	r6, 23fecd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fecc8:	4939      	ldr	r1, [pc, #228]	; (23fedb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fecca:	2201      	movs	r2, #1
 23feccc:	a801      	add	r0, sp, #4
 23fecce:	f7ff f8a3 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fecd2:	4631      	mov	r1, r6
 23fecd4:	f7ff f927 	bl	23fdf26 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fecd8:	7923      	ldrb	r3, [r4, #4]
 23fecda:	07df      	lsls	r7, r3, #31
 23fecdc:	d50e      	bpl.n	23fecfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fecde:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fece0:	212f      	movs	r1, #47	; 0x2f
 23fece2:	4630      	mov	r0, r6
 23fece4:	f000 fe37 	bl	23ff956 <strrchr>
    if (s1) {
 23fece8:	b100      	cbz	r0, 23fecec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fecea:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fecec:	4931      	ldr	r1, [pc, #196]	; (23fedb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fecee:	2201      	movs	r2, #1
 23fecf0:	a801      	add	r0, sp, #4
 23fecf2:	f7ff f891 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fecf6:	4631      	mov	r1, r6
 23fecf8:	f7ff f915 	bl	23fdf26 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fecfc:	7923      	ldrb	r3, [r4, #4]
 23fecfe:	079e      	lsls	r6, r3, #30
 23fed00:	d507      	bpl.n	23fed12 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fed02:	492d      	ldr	r1, [pc, #180]	; (23fedb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fed04:	2202      	movs	r2, #2
 23fed06:	a801      	add	r0, sp, #4
 23fed08:	f7ff f886 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fed0c:	68e1      	ldr	r1, [r4, #12]
 23fed0e:	f7ff f801 	bl	23fdd14 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fed12:	7923      	ldrb	r3, [r4, #4]
 23fed14:	0758      	lsls	r0, r3, #29
 23fed16:	d514      	bpl.n	23fed42 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fed18:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fed1a:	4633      	mov	r3, r6
 23fed1c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fed1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fed22:	b12a      	cbz	r2, 23fed30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fed24:	2a20      	cmp	r2, #32
 23fed26:	d101      	bne.n	23fed2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fed28:	461e      	mov	r6, r3
 23fed2a:	e7f7      	b.n	23fed1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fed2c:	2a28      	cmp	r2, #40	; 0x28
 23fed2e:	d1f5      	bne.n	23fed1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fed30:	2202      	movs	r2, #2
 23fed32:	4922      	ldr	r1, [pc, #136]	; (23fedbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fed34:	a801      	add	r0, sp, #4
 23fed36:	f7ff f86f 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fed3a:	4631      	mov	r1, r6
 23fed3c:	1bba      	subs	r2, r7, r6
 23fed3e:	f7ff f87b 	bl	23fde38 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fed42:	7923      	ldrb	r3, [r4, #4]
 23fed44:	0719      	lsls	r1, r3, #28
 23fed46:	d507      	bpl.n	23fed58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fed48:	491d      	ldr	r1, [pc, #116]	; (23fedc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fed4a:	2201      	movs	r2, #1
 23fed4c:	a801      	add	r0, sp, #4
 23fed4e:	f7ff f863 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fed52:	6961      	ldr	r1, [r4, #20]
 23fed54:	f7fe fff0 	bl	23fdd38 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fed58:	7923      	ldrb	r3, [r4, #4]
 23fed5a:	06da      	lsls	r2, r3, #27
 23fed5c:	d508      	bpl.n	23fed70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fed5e:	2204      	movs	r2, #4
 23fed60:	4918      	ldr	r1, [pc, #96]	; (23fedc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fed62:	eb0d 0002 	add.w	r0, sp, r2
 23fed66:	f7ff f857 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fed6a:	69a1      	ldr	r1, [r4, #24]
 23fed6c:	f7fe ffd2 	bl	23fdd14 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fed70:	7923      	ldrb	r3, [r4, #4]
 23fed72:	069b      	lsls	r3, r3, #26
 23fed74:	d507      	bpl.n	23fed86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fed76:	4914      	ldr	r1, [pc, #80]	; (23fedc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fed78:	2206      	movs	r2, #6
 23fed7a:	a801      	add	r0, sp, #4
 23fed7c:	f7ff f84c 	bl	23fde18 <_ZN5spark10JSONWriter4nameEPKcj>
 23fed80:	69e1      	ldr	r1, [r4, #28]
 23fed82:	f7ff f8d0 	bl	23fdf26 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fed86:	a801      	add	r0, sp, #4
 23fed88:	f7fe ffa1 	bl	23fdcce <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fed8c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fed8e:	2202      	movs	r2, #2
 23fed90:	6803      	ldr	r3, [r0, #0]
 23fed92:	490e      	ldr	r1, [pc, #56]	; (23fedcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fed94:	68db      	ldr	r3, [r3, #12]
 23fed96:	4798      	blx	r3
}
 23fed98:	b005      	add	sp, #20
 23fed9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fed9e:	bf00      	nop
 23feda0:	1007ae9c 	.word	0x1007ae9c
 23feda4:	023ffcf4 	.word	0x023ffcf4
 23feda8:	023ffc83 	.word	0x023ffc83
 23fedac:	023ffcd4 	.word	0x023ffcd4
 23fedb0:	023ffec7 	.word	0x023ffec7
 23fedb4:	023ffcd6 	.word	0x023ffcd6
 23fedb8:	023ffcd8 	.word	0x023ffcd8
 23fedbc:	023ffcdb 	.word	0x023ffcdb
 23fedc0:	023ffcde 	.word	0x023ffcde
 23fedc4:	023ffce0 	.word	0x023ffce0
 23fedc8:	023ffce5 	.word	0x023ffce5
 23fedcc:	023ffcd1 	.word	0x023ffcd1

023fedd0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fedd0:	2300      	movs	r3, #0
 23fedd2:	6840      	ldr	r0, [r0, #4]
 23fedd4:	461a      	mov	r2, r3
 23fedd6:	f7fe bc15 	b.w	23fd604 <network_connect>

023fedda <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fedda:	2200      	movs	r2, #0
 23feddc:	2102      	movs	r1, #2
 23fedde:	6840      	ldr	r0, [r0, #4]
 23fede0:	f7fe bc2c 	b.w	23fd63c <network_disconnect>

023fede4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fede4:	2200      	movs	r2, #0
 23fede6:	6840      	ldr	r0, [r0, #4]
 23fede8:	4611      	mov	r1, r2
 23fedea:	f7fe bc19 	b.w	23fd620 <network_connecting>

023fedee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fedee:	2200      	movs	r2, #0
 23fedf0:	6840      	ldr	r0, [r0, #4]
 23fedf2:	4611      	mov	r1, r2
 23fedf4:	f7fe bc30 	b.w	23fd658 <network_ready>

023fedf8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fedf8:	2300      	movs	r3, #0
 23fedfa:	6840      	ldr	r0, [r0, #4]
 23fedfc:	461a      	mov	r2, r3
 23fedfe:	4619      	mov	r1, r3
 23fee00:	f7fe bc38 	b.w	23fd674 <network_on>

023fee04 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fee04:	2300      	movs	r3, #0
 23fee06:	6840      	ldr	r0, [r0, #4]
 23fee08:	461a      	mov	r2, r3
 23fee0a:	4619      	mov	r1, r3
 23fee0c:	f7fe bc40 	b.w	23fd690 <network_off>

023fee10 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fee10:	2100      	movs	r1, #0
 23fee12:	6840      	ldr	r0, [r0, #4]
 23fee14:	f7fe bc82 	b.w	23fd71c <network_is_on>

023fee18 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fee18:	2100      	movs	r1, #0
 23fee1a:	6840      	ldr	r0, [r0, #4]
 23fee1c:	f7fe bc8c 	b.w	23fd738 <network_is_off>

023fee20 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fee20:	2200      	movs	r2, #0
 23fee22:	6840      	ldr	r0, [r0, #4]
 23fee24:	f081 0101 	eor.w	r1, r1, #1
 23fee28:	f7fe bc40 	b.w	23fd6ac <network_listen>

023fee2c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fee2c:	2200      	movs	r2, #0
 23fee2e:	6840      	ldr	r0, [r0, #4]
 23fee30:	f7fe bc58 	b.w	23fd6e4 <network_set_listen_timeout>

023fee34 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fee34:	2200      	movs	r2, #0
 23fee36:	6840      	ldr	r0, [r0, #4]
 23fee38:	4611      	mov	r1, r2
 23fee3a:	f7fe bc61 	b.w	23fd700 <network_get_listen_timeout>

023fee3e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fee3e:	2200      	movs	r2, #0
 23fee40:	6840      	ldr	r0, [r0, #4]
 23fee42:	4611      	mov	r1, r2
 23fee44:	f7fe bc40 	b.w	23fd6c8 <network_listening>

023fee48 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fee48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fee4c:	b095      	sub	sp, #84	; 0x54
 23fee4e:	4614      	mov	r4, r2
 23fee50:	460d      	mov	r5, r1
 23fee52:	4607      	mov	r7, r0
    IPAddress addr;
 23fee54:	f7fe fdea 	bl	23fda2c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fee58:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fee5a:	221c      	movs	r2, #28
 23fee5c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fee5e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fee60:	f000 fd0f 	bl	23ff882 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fee64:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fee66:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fee68:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fee6a:	2100      	movs	r1, #0
 23fee6c:	466b      	mov	r3, sp
 23fee6e:	aa0c      	add	r2, sp, #48	; 0x30
 23fee70:	f7fe f9c2 	bl	23fd1f8 <netdb_getaddrinfo>
    if (!r) {
 23fee74:	4604      	mov	r4, r0
 23fee76:	2800      	cmp	r0, #0
 23fee78:	d14b      	bne.n	23fef12 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fee7a:	4602      	mov	r2, r0
 23fee7c:	2101      	movs	r1, #1
 23fee7e:	6868      	ldr	r0, [r5, #4]
 23fee80:	f7fe fbea 	bl	23fd658 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fee84:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fee86:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fee88:	4622      	mov	r2, r4
 23fee8a:	6868      	ldr	r0, [r5, #4]
 23fee8c:	f7fe fbe4 	bl	23fd658 <network_ready>
        bool ok = false;
 23fee90:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fee92:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fee94:	9e00      	ldr	r6, [sp, #0]
 23fee96:	2e00      	cmp	r6, #0
 23fee98:	d03b      	beq.n	23fef12 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fee9a:	2900      	cmp	r1, #0
 23fee9c:	d139      	bne.n	23fef12 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fee9e:	6873      	ldr	r3, [r6, #4]
 23feea0:	2b02      	cmp	r3, #2
 23feea2:	d003      	beq.n	23feeac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23feea4:	2b0a      	cmp	r3, #10
 23feea6:	d011      	beq.n	23feecc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23feea8:	69f6      	ldr	r6, [r6, #28]
 23feeaa:	e7f4      	b.n	23fee96 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23feeac:	f1b8 0f00 	cmp.w	r8, #0
 23feeb0:	d0fa      	beq.n	23feea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23feeb2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23feeb4:	a806      	add	r0, sp, #24
 23feeb6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23feeb8:	1d3c      	adds	r4, r7, #4
 23feeba:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23feebc:	f7fe fde4 	bl	23fda88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23feec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23feec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23feec4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23feec6:	4641      	mov	r1, r8
 23feec8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23feeca:	e7ed      	b.n	23feea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23feecc:	f1b9 0f00 	cmp.w	r9, #0
 23feed0:	d0ea      	beq.n	23feea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23feed2:	2210      	movs	r2, #16
 23feed4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23feed6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23feed8:	f000 fcd3 	bl	23ff882 <memset>
                    a.v = 6;
 23feedc:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23feede:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23feee0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23feee4:	f104 0308 	add.w	r3, r4, #8
 23feee8:	3418      	adds	r4, #24
 23feeea:	462a      	mov	r2, r5
 23feeec:	6818      	ldr	r0, [r3, #0]
 23feeee:	6859      	ldr	r1, [r3, #4]
 23feef0:	3308      	adds	r3, #8
 23feef2:	c203      	stmia	r2!, {r0, r1}
 23feef4:	42a3      	cmp	r3, r4
 23feef6:	4615      	mov	r5, r2
 23feef8:	d1f7      	bne.n	23feeea <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23feefa:	a901      	add	r1, sp, #4
 23feefc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23feefe:	1d3c      	adds	r4, r7, #4
 23fef00:	ad07      	add	r5, sp, #28
 23fef02:	f7fe fda1 	bl	23fda48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fef06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fef08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fef0a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fef0c:	4649      	mov	r1, r9
 23fef0e:	7023      	strb	r3, [r4, #0]
                    break;
 23fef10:	e7ca      	b.n	23feea8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fef12:	9800      	ldr	r0, [sp, #0]
 23fef14:	f7fe f962 	bl	23fd1dc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fef18:	4638      	mov	r0, r7
 23fef1a:	b015      	add	sp, #84	; 0x54
 23fef1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fef20 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fef20:	4b02      	ldr	r3, [pc, #8]	; (23fef2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fef22:	4a03      	ldr	r2, [pc, #12]	; (23fef30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fef24:	601a      	str	r2, [r3, #0]
 23fef26:	2200      	movs	r2, #0
 23fef28:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fef2a:	4770      	bx	lr
 23fef2c:	1007ae9c 	.word	0x1007ae9c
 23fef30:	023ffd6c 	.word	0x023ffd6c

023fef34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fef34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fef36:	4606      	mov	r6, r0
 23fef38:	460d      	mov	r5, r1
  size_t n = 0;
 23fef3a:	2400      	movs	r4, #0
 23fef3c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fef3e:	42bd      	cmp	r5, r7
 23fef40:	d00c      	beq.n	23fef5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fef42:	6833      	ldr	r3, [r6, #0]
 23fef44:	4630      	mov	r0, r6
 23fef46:	689b      	ldr	r3, [r3, #8]
 23fef48:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fef4c:	4798      	blx	r3
     if (chunk>=0)
 23fef4e:	1e03      	subs	r3, r0, #0
 23fef50:	db01      	blt.n	23fef56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fef52:	441c      	add	r4, r3
  while (size--) {
 23fef54:	e7f3      	b.n	23fef3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fef56:	2c00      	cmp	r4, #0
 23fef58:	bf08      	it	eq
 23fef5a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fef5c:	4620      	mov	r0, r4
 23fef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fef60 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fef60:	b513      	push	{r0, r1, r4, lr}
 23fef62:	4604      	mov	r4, r0
    }
 23fef64:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fef66:	b159      	cbz	r1, 23fef80 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fef68:	9101      	str	r1, [sp, #4]
 23fef6a:	f7fd fd5d 	bl	23fca28 <strlen>
 23fef6e:	4602      	mov	r2, r0
 23fef70:	4620      	mov	r0, r4
 23fef72:	6823      	ldr	r3, [r4, #0]
 23fef74:	9901      	ldr	r1, [sp, #4]
 23fef76:	68db      	ldr	r3, [r3, #12]
    }
 23fef78:	b002      	add	sp, #8
 23fef7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fef7e:	4718      	bx	r3
    }
 23fef80:	b002      	add	sp, #8
 23fef82:	bd10      	pop	{r4, pc}

023fef84 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fef84:	6803      	ldr	r3, [r0, #0]
 23fef86:	689b      	ldr	r3, [r3, #8]
 23fef88:	4718      	bx	r3

023fef8a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fef8a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fef8c:	2a01      	cmp	r2, #1
 23fef8e:	bf98      	it	ls
 23fef90:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fef92:	b530      	push	{r4, r5, lr}
 23fef94:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fef96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fef9a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fef9c:	460d      	mov	r5, r1
 23fef9e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fefa2:	fb01 5312 	mls	r3, r1, r2, r5
 23fefa6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fefaa:	2b09      	cmp	r3, #9
 23fefac:	bf94      	ite	ls
 23fefae:	3330      	addls	r3, #48	; 0x30
 23fefb0:	3337      	addhi	r3, #55	; 0x37
 23fefb2:	b2db      	uxtb	r3, r3
  } while(n);
 23fefb4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fefb6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fefba:	d9ef      	bls.n	23fef9c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fefbc:	4621      	mov	r1, r4
 23fefbe:	f7ff ffcf 	bl	23fef60 <_ZN5Print5writeEPKc>
}
 23fefc2:	b00b      	add	sp, #44	; 0x2c
 23fefc4:	bd30      	pop	{r4, r5, pc}
	...

023fefc8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fefc8:	2200      	movs	r2, #0
 23fefca:	4b01      	ldr	r3, [pc, #4]	; (23fefd0 <_GLOBAL__sub_I_RGB+0x8>)
 23fefcc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fefce:	4770      	bx	lr
 23fefd0:	1007aea4 	.word	0x1007aea4

023fefd4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fefd4:	2100      	movs	r1, #0
 23fefd6:	f7fe b971 	b.w	23fd2bc <hal_spi_release>

023fefda <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fefda:	2100      	movs	r1, #0
 23fefdc:	f7fe b960 	b.w	23fd2a0 <hal_spi_acquire>

023fefe0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fefe0:	b510      	push	{r4, lr}
 23fefe2:	4604      	mov	r4, r0
 23fefe4:	4608      	mov	r0, r1
{
    _spi = spi;
 23fefe6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fefe8:	f7fe f93e 	bl	23fd268 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fefec:	2300      	movs	r3, #0
}
 23fefee:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23feff0:	6063      	str	r3, [r4, #4]
}
 23feff2:	bd10      	pop	{r4, pc}

023feff4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23feff4:	b513      	push	{r0, r1, r4, lr}
 23feff6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23feff8:	7800      	ldrb	r0, [r0, #0]
 23feffa:	f7ff ffee 	bl	23fefda <_ZN8SPIClass4lockEv.isra.0>
 23feffe:	b958      	cbnz	r0, 23ff018 <_ZN8SPIClass5beginEv+0x24>
 23ff000:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23ff002:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23ff006:	9001      	str	r0, [sp, #4]
 23ff008:	f7fe f904 	bl	23fd214 <hal_spi_begin>
        unlock();
 23ff00c:	9801      	ldr	r0, [sp, #4]
    }
}
 23ff00e:	b002      	add	sp, #8
 23ff010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23ff014:	f7ff bfde 	b.w	23fefd4 <_ZN8SPIClass6unlockEv.isra.0>
 23ff018:	b002      	add	sp, #8
 23ff01a:	bd10      	pop	{r4, pc}

023ff01c <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23ff01c:	b513      	push	{r0, r1, r4, lr}
 23ff01e:	4604      	mov	r4, r0
    if (!lock())
 23ff020:	7800      	ldrb	r0, [r0, #0]
{
 23ff022:	9101      	str	r1, [sp, #4]
    if (!lock())
 23ff024:	f7ff ffd9 	bl	23fefda <_ZN8SPIClass4lockEv.isra.0>
 23ff028:	9901      	ldr	r1, [sp, #4]
 23ff02a:	b948      	cbnz	r0, 23ff040 <_ZN8SPIClass11setDataModeEh+0x24>
 23ff02c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23ff02e:	9001      	str	r0, [sp, #4]
 23ff030:	f7fe f8fe 	bl	23fd230 <hal_spi_set_data_mode>
        unlock();
 23ff034:	9801      	ldr	r0, [sp, #4]
    }
}
 23ff036:	b002      	add	sp, #8
 23ff038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23ff03c:	f7ff bfca 	b.w	23fefd4 <_ZN8SPIClass6unlockEv.isra.0>
 23ff040:	b002      	add	sp, #8
 23ff042:	bd10      	pop	{r4, pc}

023ff044 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23ff044:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23ff046:	7800      	ldrb	r0, [r0, #0]
 23ff048:	f7fe f900 	bl	23fd24c <hal_spi_transfer>
}
 23ff04c:	b2c0      	uxtb	r0, r0
 23ff04e:	bd08      	pop	{r3, pc}

023ff050 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff050:	b510      	push	{r4, lr}
 23ff052:	4604      	mov	r4, r0
{
	free(buffer);
 23ff054:	6800      	ldr	r0, [r0, #0]
 23ff056:	f7fe fb8b 	bl	23fd770 <free>
}
 23ff05a:	4620      	mov	r0, r4
 23ff05c:	bd10      	pop	{r4, pc}

023ff05e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff05e:	b510      	push	{r4, lr}
 23ff060:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff062:	6800      	ldr	r0, [r0, #0]
 23ff064:	b108      	cbz	r0, 23ff06a <_ZN6String10invalidateEv+0xc>
 23ff066:	f7fe fb83 	bl	23fd770 <free>
	buffer = NULL;
 23ff06a:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff06c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff070:	6023      	str	r3, [r4, #0]
}
 23ff072:	bd10      	pop	{r4, pc}

023ff074 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff074:	b538      	push	{r3, r4, r5, lr}
 23ff076:	4604      	mov	r4, r0
 23ff078:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff07a:	6800      	ldr	r0, [r0, #0]
 23ff07c:	3101      	adds	r1, #1
 23ff07e:	f7fe fb85 	bl	23fd78c <realloc>
	if (newbuffer) {
 23ff082:	b110      	cbz	r0, 23ff08a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff084:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff088:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff08a:	bd38      	pop	{r3, r4, r5, pc}

023ff08c <_ZN6String7reserveEj>:
{
 23ff08c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff08e:	6803      	ldr	r3, [r0, #0]
{
 23ff090:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff092:	b123      	cbz	r3, 23ff09e <_ZN6String7reserveEj+0x12>
 23ff094:	6843      	ldr	r3, [r0, #4]
 23ff096:	428b      	cmp	r3, r1
 23ff098:	d301      	bcc.n	23ff09e <_ZN6String7reserveEj+0x12>
 23ff09a:	2001      	movs	r0, #1
}
 23ff09c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff09e:	4620      	mov	r0, r4
 23ff0a0:	f7ff ffe8 	bl	23ff074 <_ZN6String12changeBufferEj>
 23ff0a4:	2800      	cmp	r0, #0
 23ff0a6:	d0f9      	beq.n	23ff09c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff0a8:	68a3      	ldr	r3, [r4, #8]
 23ff0aa:	2b00      	cmp	r3, #0
 23ff0ac:	d1f5      	bne.n	23ff09a <_ZN6String7reserveEj+0xe>
 23ff0ae:	6822      	ldr	r2, [r4, #0]
 23ff0b0:	7013      	strb	r3, [r2, #0]
 23ff0b2:	e7f2      	b.n	23ff09a <_ZN6String7reserveEj+0xe>

023ff0b4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff0b6:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff0b8:	4611      	mov	r1, r2
 23ff0ba:	9201      	str	r2, [sp, #4]
{
 23ff0bc:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff0be:	f7ff ffe5 	bl	23ff08c <_ZN6String7reserveEj>
 23ff0c2:	9a01      	ldr	r2, [sp, #4]
 23ff0c4:	b928      	cbnz	r0, 23ff0d2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff0c6:	4620      	mov	r0, r4
 23ff0c8:	f7ff ffc9 	bl	23ff05e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff0cc:	4620      	mov	r0, r4
 23ff0ce:	b003      	add	sp, #12
 23ff0d0:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff0d2:	4629      	mov	r1, r5
	len = length;
 23ff0d4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff0d6:	6820      	ldr	r0, [r4, #0]
 23ff0d8:	f000 fbac 	bl	23ff834 <memcpy>
	buffer[len] = 0;
 23ff0dc:	2100      	movs	r1, #0
 23ff0de:	6822      	ldr	r2, [r4, #0]
 23ff0e0:	68a3      	ldr	r3, [r4, #8]
 23ff0e2:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff0e4:	e7f2      	b.n	23ff0cc <_ZN6String4copyEPKcj+0x18>

023ff0e6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23ff0e6:	b538      	push	{r3, r4, r5, lr}
 23ff0e8:	4605      	mov	r5, r0
	if (buffer) {
 23ff0ea:	6800      	ldr	r0, [r0, #0]
{
 23ff0ec:	460c      	mov	r4, r1
	if (buffer) {
 23ff0ee:	b170      	cbz	r0, 23ff10e <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23ff0f0:	686a      	ldr	r2, [r5, #4]
 23ff0f2:	688b      	ldr	r3, [r1, #8]
 23ff0f4:	429a      	cmp	r2, r3
 23ff0f6:	d308      	bcc.n	23ff10a <_ZN6String4moveERS_+0x24>
 23ff0f8:	6809      	ldr	r1, [r1, #0]
 23ff0fa:	b131      	cbz	r1, 23ff10a <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23ff0fc:	f000 fc0f 	bl	23ff91e <strcpy>
			len = rhs.len;
 23ff100:	68a3      	ldr	r3, [r4, #8]
 23ff102:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23ff104:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23ff106:	60a3      	str	r3, [r4, #8]
}
 23ff108:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23ff10a:	f7fe fb31 	bl	23fd770 <free>
	buffer = rhs.buffer;
 23ff10e:	6823      	ldr	r3, [r4, #0]
 23ff110:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23ff112:	6863      	ldr	r3, [r4, #4]
 23ff114:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23ff116:	68a3      	ldr	r3, [r4, #8]
 23ff118:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23ff11a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23ff11c:	e9c4 3300 	strd	r3, r3, [r4]
 23ff120:	e7f1      	b.n	23ff106 <_ZN6String4moveERS_+0x20>

023ff122 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23ff122:	2300      	movs	r3, #0
String::String(String &&rval)
 23ff124:	b510      	push	{r4, lr}
 23ff126:	4604      	mov	r4, r0
	capacity = 0;
 23ff128:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff12c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff12e:	7303      	strb	r3, [r0, #12]
	move(rval);
 23ff130:	f7ff ffd9 	bl	23ff0e6 <_ZN6String4moveERS_>
}
 23ff134:	4620      	mov	r0, r4
 23ff136:	bd10      	pop	{r4, pc}

023ff138 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff138:	4288      	cmp	r0, r1
{
 23ff13a:	b510      	push	{r4, lr}
 23ff13c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff13e:	d005      	beq.n	23ff14c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff140:	680b      	ldr	r3, [r1, #0]
 23ff142:	b12b      	cbz	r3, 23ff150 <_ZN6StringaSERKS_+0x18>
 23ff144:	688a      	ldr	r2, [r1, #8]
 23ff146:	4619      	mov	r1, r3
 23ff148:	f7ff ffb4 	bl	23ff0b4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff14c:	4620      	mov	r0, r4
 23ff14e:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff150:	f7ff ff85 	bl	23ff05e <_ZN6String10invalidateEv>
 23ff154:	e7fa      	b.n	23ff14c <_ZN6StringaSERKS_+0x14>

023ff156 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff156:	2300      	movs	r3, #0
String::String(const String &value)
 23ff158:	b510      	push	{r4, lr}
 23ff15a:	4604      	mov	r4, r0
	capacity = 0;
 23ff15c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff160:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff162:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff164:	f7ff ffe8 	bl	23ff138 <_ZN6StringaSERKS_>
}
 23ff168:	4620      	mov	r0, r4
 23ff16a:	bd10      	pop	{r4, pc}

023ff16c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff16c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff16e:	2000      	movs	r0, #0
 23ff170:	4b04      	ldr	r3, [pc, #16]	; (23ff184 <_GLOBAL__sub_I_System+0x18>)
 23ff172:	601a      	str	r2, [r3, #0]
 23ff174:	4b04      	ldr	r3, [pc, #16]	; (23ff188 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff176:	4a05      	ldr	r2, [pc, #20]	; (23ff18c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff178:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff17c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff17e:	f7fe b9ed 	b.w	23fd55c <set_system_mode>
 23ff182:	bf00      	nop
 23ff184:	1007aec0 	.word	0x1007aec0
 23ff188:	1007aeb4 	.word	0x1007aeb4
 23ff18c:	ffff0000 	.word	0xffff0000

023ff190 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff190:	4b02      	ldr	r3, [pc, #8]	; (23ff19c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff192:	681a      	ldr	r2, [r3, #0]
 23ff194:	4b02      	ldr	r3, [pc, #8]	; (23ff1a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff196:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff198:	4770      	bx	lr
 23ff19a:	bf00      	nop
 23ff19c:	1007adb8 	.word	0x1007adb8
 23ff1a0:	1007aec4 	.word	0x1007aec4

023ff1a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff1a4:	4770      	bx	lr

023ff1a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff1a6:	7441      	strb	r1, [r0, #17]
}
 23ff1a8:	4770      	bx	lr

023ff1aa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff1aa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff1ac:	7c00      	ldrb	r0, [r0, #16]
 23ff1ae:	f7fe f8f5 	bl	23fd39c <hal_usart_available_data_for_write>
}
 23ff1b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff1b6:	bd08      	pop	{r3, pc}

023ff1b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff1b8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff1ba:	7c00      	ldrb	r0, [r0, #16]
 23ff1bc:	f7fe f8a8 	bl	23fd310 <hal_usart_available>
}
 23ff1c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff1c4:	bd08      	pop	{r3, pc}

023ff1c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff1c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff1c8:	7c00      	ldrb	r0, [r0, #16]
 23ff1ca:	f7fe f8bd 	bl	23fd348 <hal_usart_peek>
}
 23ff1ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff1d2:	bd08      	pop	{r3, pc}

023ff1d4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff1d4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff1d6:	7c00      	ldrb	r0, [r0, #16]
 23ff1d8:	f7fe f8a8 	bl	23fd32c <hal_usart_read>
}
 23ff1dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff1e0:	bd08      	pop	{r3, pc}

023ff1e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff1e2:	7c00      	ldrb	r0, [r0, #16]
 23ff1e4:	f7fe b8be 	b.w	23fd364 <hal_usart_flush>

023ff1e8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff1ea:	7c45      	ldrb	r5, [r0, #17]
{
 23ff1ec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff1ee:	b12d      	cbz	r5, 23ff1fc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff1f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff1f2:	b003      	add	sp, #12
 23ff1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff1f8:	f7fe b87c 	b.w	23fd2f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff1fc:	7c00      	ldrb	r0, [r0, #16]
 23ff1fe:	9101      	str	r1, [sp, #4]
 23ff200:	f7fe f8cc 	bl	23fd39c <hal_usart_available_data_for_write>
 23ff204:	2800      	cmp	r0, #0
 23ff206:	9901      	ldr	r1, [sp, #4]
 23ff208:	dcf2      	bgt.n	23ff1f0 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff20a:	4628      	mov	r0, r5
 23ff20c:	b003      	add	sp, #12
 23ff20e:	bd30      	pop	{r4, r5, pc}

023ff210 <_ZN11USARTSerialD0Ev>:
 23ff210:	b510      	push	{r4, lr}
 23ff212:	4604      	mov	r4, r0
 23ff214:	2114      	movs	r1, #20
 23ff216:	f7fd fc30 	bl	23fca7a <_ZdlPvj>
 23ff21a:	4620      	mov	r0, r4
 23ff21c:	bd10      	pop	{r4, pc}
	...

023ff220 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff220:	b510      	push	{r4, lr}
 23ff222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff226:	4604      	mov	r4, r0
 23ff228:	4608      	mov	r0, r1
 23ff22a:	4611      	mov	r1, r2
 23ff22c:	2200      	movs	r2, #0
 23ff22e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff232:	4b04      	ldr	r3, [pc, #16]	; (23ff244 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff234:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff236:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff238:	2301      	movs	r3, #1
 23ff23a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff23c:	f7fe f8ca 	bl	23fd3d4 <hal_usart_init_ex>
}
 23ff240:	4620      	mov	r0, r4
 23ff242:	bd10      	pop	{r4, pc}
 23ff244:	023ffdc4 	.word	0x023ffdc4

023ff248 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23ff248:	2300      	movs	r3, #0
 23ff24a:	7c00      	ldrb	r0, [r0, #16]
 23ff24c:	f7fe b8b4 	b.w	23fd3b8 <hal_usart_begin_config>

023ff250 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23ff250:	2200      	movs	r2, #0
 23ff252:	f7ff bff9 	b.w	23ff248 <_ZN11USARTSerial5beginEmm>

023ff256 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23ff256:	7c00      	ldrb	r0, [r0, #16]
 23ff258:	f7fe b83e 	b.w	23fd2d8 <hal_usart_end>

023ff25c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff25c:	7c00      	ldrb	r0, [r0, #16]
 23ff25e:	f7fe b88f 	b.w	23fd380 <hal_usart_is_enabled>

023ff262 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff262:	7441      	strb	r1, [r0, #17]
}
 23ff264:	4770      	bx	lr

023ff266 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff266:	4770      	bx	lr

023ff268 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff268:	4770      	bx	lr

023ff26a <_ZN9USBSerial4readEv>:
{
 23ff26a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff26c:	2100      	movs	r1, #0
 23ff26e:	7c00      	ldrb	r0, [r0, #16]
 23ff270:	f7fe f904 	bl	23fd47c <HAL_USB_USART_Receive_Data>
}
 23ff274:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff278:	bd08      	pop	{r3, pc}

023ff27a <_ZN9USBSerial4peekEv>:
{
 23ff27a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff27c:	2101      	movs	r1, #1
 23ff27e:	7c00      	ldrb	r0, [r0, #16]
 23ff280:	f7fe f8fc 	bl	23fd47c <HAL_USB_USART_Receive_Data>
}
 23ff284:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff288:	bd08      	pop	{r3, pc}

023ff28a <_ZN9USBSerial17availableForWriteEv>:
{
 23ff28a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff28c:	7c00      	ldrb	r0, [r0, #16]
 23ff28e:	f7fe f8e7 	bl	23fd460 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff292:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff296:	bd08      	pop	{r3, pc}

023ff298 <_ZN9USBSerial9availableEv>:
{
 23ff298:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff29a:	7c00      	ldrb	r0, [r0, #16]
 23ff29c:	f7fe f8d2 	bl	23fd444 <HAL_USB_USART_Available_Data>
}
 23ff2a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff2a4:	bd08      	pop	{r3, pc}

023ff2a6 <_ZN9USBSerial5writeEh>:
{
 23ff2a6:	b513      	push	{r0, r1, r4, lr}
 23ff2a8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff2aa:	7c00      	ldrb	r0, [r0, #16]
{
 23ff2ac:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff2ae:	f7fe f8d7 	bl	23fd460 <HAL_USB_USART_Available_Data_For_Write>
 23ff2b2:	2800      	cmp	r0, #0
 23ff2b4:	9901      	ldr	r1, [sp, #4]
 23ff2b6:	dc01      	bgt.n	23ff2bc <_ZN9USBSerial5writeEh+0x16>
 23ff2b8:	7c60      	ldrb	r0, [r4, #17]
 23ff2ba:	b120      	cbz	r0, 23ff2c6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff2bc:	7c20      	ldrb	r0, [r4, #16]
 23ff2be:	f7fe f8eb 	bl	23fd498 <HAL_USB_USART_Send_Data>
 23ff2c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff2c6:	b002      	add	sp, #8
 23ff2c8:	bd10      	pop	{r4, pc}

023ff2ca <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff2ca:	7c00      	ldrb	r0, [r0, #16]
 23ff2cc:	f7fe b8f2 	b.w	23fd4b4 <HAL_USB_USART_Flush_Data>

023ff2d0 <_ZN9USBSerialD0Ev>:
 23ff2d0:	b510      	push	{r4, lr}
 23ff2d2:	4604      	mov	r4, r0
 23ff2d4:	2114      	movs	r1, #20
 23ff2d6:	f7fd fbd0 	bl	23fca7a <_ZdlPvj>
 23ff2da:	4620      	mov	r0, r4
 23ff2dc:	bd10      	pop	{r4, pc}
	...

023ff2e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff2e0:	b510      	push	{r4, lr}
 23ff2e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff2e6:	4604      	mov	r4, r0
 23ff2e8:	4608      	mov	r0, r1
 23ff2ea:	2100      	movs	r1, #0
 23ff2ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff2f0:	4b04      	ldr	r3, [pc, #16]	; (23ff304 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff2f2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff2f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff2f6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff2f8:	4611      	mov	r1, r2
  _blocking = true;
 23ff2fa:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff2fc:	f7fe f878 	bl	23fd3f0 <HAL_USB_USART_Init>
}
 23ff300:	4620      	mov	r0, r4
 23ff302:	bd10      	pop	{r4, pc}
 23ff304:	023ffdf4 	.word	0x023ffdf4

023ff308 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff308:	2200      	movs	r2, #0
 23ff30a:	7c00      	ldrb	r0, [r0, #16]
 23ff30c:	f7fe b87e 	b.w	23fd40c <HAL_USB_USART_Begin>

023ff310 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23ff310:	7c00      	ldrb	r0, [r0, #16]
 23ff312:	f7fe b889 	b.w	23fd428 <HAL_USB_USART_End>

023ff316 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23ff316:	7c00      	ldrb	r0, [r0, #16]
 23ff318:	f7fe b8da 	b.w	23fd4d0 <HAL_USB_USART_Is_Connected>

023ff31c <_Z19acquireSerialBufferv>:
{
 23ff31c:	b510      	push	{r4, lr}
 23ff31e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff320:	2214      	movs	r2, #20
 23ff322:	2100      	movs	r1, #0
 23ff324:	f000 faad 	bl	23ff882 <memset>
}
 23ff328:	4620      	mov	r0, r4
 23ff32a:	bd10      	pop	{r4, pc}

023ff32c <_Z16_fetch_usbserialv>:
{
 23ff32c:	b510      	push	{r4, lr}
 23ff32e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff330:	a803      	add	r0, sp, #12
 23ff332:	f7ff fff3 	bl	23ff31c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff336:	4c0c      	ldr	r4, [pc, #48]	; (23ff368 <_Z16_fetch_usbserialv+0x3c>)
 23ff338:	e8d4 1f8f 	ldab	r1, [r4]
 23ff33c:	f011 0101 	ands.w	r1, r1, #1
 23ff340:	d10f      	bne.n	23ff362 <_Z16_fetch_usbserialv+0x36>
 23ff342:	4620      	mov	r0, r4
 23ff344:	9101      	str	r1, [sp, #4]
 23ff346:	f7fd fba7 	bl	23fca98 <__cxa_guard_acquire>
 23ff34a:	9901      	ldr	r1, [sp, #4]
 23ff34c:	b148      	cbz	r0, 23ff362 <_Z16_fetch_usbserialv+0x36>
 23ff34e:	aa03      	add	r2, sp, #12
 23ff350:	4806      	ldr	r0, [pc, #24]	; (23ff36c <_Z16_fetch_usbserialv+0x40>)
 23ff352:	f7ff ffc5 	bl	23ff2e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff356:	4620      	mov	r0, r4
 23ff358:	f7fd fba3 	bl	23fcaa2 <__cxa_guard_release>
 23ff35c:	4804      	ldr	r0, [pc, #16]	; (23ff370 <_Z16_fetch_usbserialv+0x44>)
 23ff35e:	f000 fa5b 	bl	23ff818 <atexit>
	return _usbserial;
}
 23ff362:	4802      	ldr	r0, [pc, #8]	; (23ff36c <_Z16_fetch_usbserialv+0x40>)
 23ff364:	b008      	add	sp, #32
 23ff366:	bd10      	pop	{r4, pc}
 23ff368:	1007aec8 	.word	0x1007aec8
 23ff36c:	1007aecc 	.word	0x1007aecc
 23ff370:	023ff267 	.word	0x023ff267

023ff374 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff374:	2200      	movs	r2, #0
 23ff376:	6840      	ldr	r0, [r0, #4]
 23ff378:	4611      	mov	r1, r2
 23ff37a:	f7fe b96d 	b.w	23fd658 <network_ready>

023ff37e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff37e:	2200      	movs	r2, #0
 23ff380:	6840      	ldr	r0, [r0, #4]
 23ff382:	4611      	mov	r1, r2
 23ff384:	f7fe b9a0 	b.w	23fd6c8 <network_listening>

023ff388 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff388:	2200      	movs	r2, #0
 23ff38a:	6840      	ldr	r0, [r0, #4]
 23ff38c:	4611      	mov	r1, r2
 23ff38e:	f7fe b9b7 	b.w	23fd700 <network_get_listen_timeout>

023ff392 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff392:	2200      	movs	r2, #0
 23ff394:	6840      	ldr	r0, [r0, #4]
 23ff396:	f7fe b9a5 	b.w	23fd6e4 <network_set_listen_timeout>

023ff39a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff39a:	2200      	movs	r2, #0
 23ff39c:	6840      	ldr	r0, [r0, #4]
 23ff39e:	f081 0101 	eor.w	r1, r1, #1
 23ff3a2:	f7fe b983 	b.w	23fd6ac <network_listen>

023ff3a6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff3a6:	2300      	movs	r3, #0
 23ff3a8:	6840      	ldr	r0, [r0, #4]
 23ff3aa:	461a      	mov	r2, r3
 23ff3ac:	4619      	mov	r1, r3
 23ff3ae:	f7fe b96f 	b.w	23fd690 <network_off>

023ff3b2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff3b2:	2300      	movs	r3, #0
 23ff3b4:	6840      	ldr	r0, [r0, #4]
 23ff3b6:	461a      	mov	r2, r3
 23ff3b8:	4619      	mov	r1, r3
 23ff3ba:	f7fe b95b 	b.w	23fd674 <network_on>

023ff3be <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff3be:	2200      	movs	r2, #0
 23ff3c0:	6840      	ldr	r0, [r0, #4]
 23ff3c2:	4611      	mov	r1, r2
 23ff3c4:	f7fe b92c 	b.w	23fd620 <network_connecting>

023ff3c8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff3c8:	2200      	movs	r2, #0
 23ff3ca:	2102      	movs	r1, #2
 23ff3cc:	6840      	ldr	r0, [r0, #4]
 23ff3ce:	f7fe b935 	b.w	23fd63c <network_disconnect>

023ff3d2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff3d2:	2300      	movs	r3, #0
 23ff3d4:	6840      	ldr	r0, [r0, #4]
 23ff3d6:	461a      	mov	r2, r3
 23ff3d8:	f7fe b914 	b.w	23fd604 <network_connect>

023ff3dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff3dc:	2204      	movs	r2, #4
 23ff3de:	4b02      	ldr	r3, [pc, #8]	; (23ff3e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff3e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff3e2:	4a02      	ldr	r2, [pc, #8]	; (23ff3ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff3e4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff3e6:	4770      	bx	lr
 23ff3e8:	1007aee0 	.word	0x1007aee0
 23ff3ec:	023ffe24 	.word	0x023ffe24

023ff3f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff3f0:	4b01      	ldr	r3, [pc, #4]	; (23ff3f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff3f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff3f4:	4770      	bx	lr
 23ff3f6:	bf00      	nop
 23ff3f8:	1007adbc 	.word	0x1007adbc

023ff3fc <serialEventRun>:
{
 23ff3fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff3fe:	4b0f      	ldr	r3, [pc, #60]	; (23ff43c <serialEventRun+0x40>)
 23ff400:	b143      	cbz	r3, 23ff414 <serialEventRun+0x18>
 23ff402:	f7ff ff93 	bl	23ff32c <_Z16_fetch_usbserialv>
 23ff406:	6803      	ldr	r3, [r0, #0]
 23ff408:	691b      	ldr	r3, [r3, #16]
 23ff40a:	4798      	blx	r3
 23ff40c:	2800      	cmp	r0, #0
 23ff40e:	dd01      	ble.n	23ff414 <serialEventRun+0x18>
        serialEvent();
 23ff410:	e000      	b.n	23ff414 <serialEventRun+0x18>
 23ff412:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff414:	4b0a      	ldr	r3, [pc, #40]	; (23ff440 <serialEventRun+0x44>)
 23ff416:	b143      	cbz	r3, 23ff42a <serialEventRun+0x2e>
 23ff418:	f000 f96a 	bl	23ff6f0 <_Z22__fetch_global_Serial1v>
 23ff41c:	6803      	ldr	r3, [r0, #0]
 23ff41e:	691b      	ldr	r3, [r3, #16]
 23ff420:	4798      	blx	r3
 23ff422:	2800      	cmp	r0, #0
 23ff424:	dd01      	ble.n	23ff42a <serialEventRun+0x2e>
        serialEvent1();
 23ff426:	e000      	b.n	23ff42a <serialEventRun+0x2e>
 23ff428:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff42a:	4b06      	ldr	r3, [pc, #24]	; (23ff444 <serialEventRun+0x48>)
 23ff42c:	b10b      	cbz	r3, 23ff432 <serialEventRun+0x36>
 23ff42e:	f000 f9a5 	bl	23ff77c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff432:	4b05      	ldr	r3, [pc, #20]	; (23ff448 <serialEventRun+0x4c>)
 23ff434:	b10b      	cbz	r3, 23ff43a <serialEventRun+0x3e>
 23ff436:	f000 f9d7 	bl	23ff7e8 <_Z15serialEventRun3v>
}
 23ff43a:	bd08      	pop	{r3, pc}
	...

023ff44c <_post_loop>:
{
 23ff44c:	b508      	push	{r3, lr}
	serialEventRun();
 23ff44e:	f7ff ffd5 	bl	23ff3fc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff452:	f7fd fe0d 	bl	23fd070 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff456:	4b01      	ldr	r3, [pc, #4]	; (23ff45c <_post_loop+0x10>)
 23ff458:	6018      	str	r0, [r3, #0]
}
 23ff45a:	bd08      	pop	{r3, pc}
 23ff45c:	1007aef0 	.word	0x1007aef0

023ff460 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff460:	4805      	ldr	r0, [pc, #20]	; (23ff478 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff462:	4a06      	ldr	r2, [pc, #24]	; (23ff47c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff464:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff466:	1a12      	subs	r2, r2, r0
 23ff468:	4905      	ldr	r1, [pc, #20]	; (23ff480 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff46a:	f000 f9e3 	bl	23ff834 <memcpy>
    __backup_sram_signature = signature;
 23ff46e:	4b05      	ldr	r3, [pc, #20]	; (23ff484 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff470:	4a05      	ldr	r2, [pc, #20]	; (23ff488 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff472:	601a      	str	r2, [r3, #0]
}
 23ff474:	bd08      	pop	{r3, pc}
 23ff476:	bf00      	nop
 23ff478:	1007b400 	.word	0x1007b400
 23ff47c:	1007b404 	.word	0x1007b404
 23ff480:	085fff40 	.word	0x085fff40
 23ff484:	1007b400 	.word	0x1007b400
 23ff488:	9a271c1e 	.word	0x9a271c1e

023ff48c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff48c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff48e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff490:	461a      	mov	r2, r3
 23ff492:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff496:	9300      	str	r3, [sp, #0]
 23ff498:	f7fe f88a 	bl	23fd5b0 <system_ctrl_set_result>
}
 23ff49c:	b003      	add	sp, #12
 23ff49e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff4a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff4a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff4a6:	8843      	ldrh	r3, [r0, #2]
 23ff4a8:	2b0a      	cmp	r3, #10
 23ff4aa:	d008      	beq.n	23ff4be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff4ac:	2b50      	cmp	r3, #80	; 0x50
 23ff4ae:	d10b      	bne.n	23ff4c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff4b0:	4b09      	ldr	r3, [pc, #36]	; (23ff4d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff4b2:	681b      	ldr	r3, [r3, #0]
 23ff4b4:	b14b      	cbz	r3, 23ff4ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff4b6:	b003      	add	sp, #12
 23ff4b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff4bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff4be:	f7ff ffe5 	bl	23ff48c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff4c2:	b003      	add	sp, #12
 23ff4c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff4c8:	2300      	movs	r3, #0
 23ff4ca:	461a      	mov	r2, r3
 23ff4cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff4d0:	9300      	str	r3, [sp, #0]
 23ff4d2:	f7fe f86d 	bl	23fd5b0 <system_ctrl_set_result>
}
 23ff4d6:	e7f4      	b.n	23ff4c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff4d8:	1007aeec 	.word	0x1007aeec

023ff4dc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff4dc:	2100      	movs	r1, #0
{
 23ff4de:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff4e0:	4811      	ldr	r0, [pc, #68]	; (23ff528 <module_user_init_hook+0x4c>)
 23ff4e2:	f7fe f98b 	bl	23fd7fc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff4e6:	4b11      	ldr	r3, [pc, #68]	; (23ff52c <module_user_init_hook+0x50>)
 23ff4e8:	681a      	ldr	r2, [r3, #0]
 23ff4ea:	4b11      	ldr	r3, [pc, #68]	; (23ff530 <module_user_init_hook+0x54>)
 23ff4ec:	429a      	cmp	r2, r3
 23ff4ee:	bf0c      	ite	eq
 23ff4f0:	2201      	moveq	r2, #1
 23ff4f2:	2200      	movne	r2, #0
 23ff4f4:	4b0f      	ldr	r3, [pc, #60]	; (23ff534 <module_user_init_hook+0x58>)
 23ff4f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff4f8:	d001      	beq.n	23ff4fe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff4fa:	f7ff ffb1 	bl	23ff460 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff4fe:	f7fd fd9b 	bl	23fd038 <HAL_RNG_GetRandomNumber>
 23ff502:	4604      	mov	r4, r0
    srand(seed);
 23ff504:	f000 f9c6 	bl	23ff894 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff508:	4b0b      	ldr	r3, [pc, #44]	; (23ff538 <module_user_init_hook+0x5c>)
 23ff50a:	b113      	cbz	r3, 23ff512 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff50c:	4620      	mov	r0, r4
 23ff50e:	e000      	b.n	23ff512 <module_user_init_hook+0x36>
 23ff510:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff512:	2100      	movs	r1, #0
 23ff514:	4808      	ldr	r0, [pc, #32]	; (23ff538 <module_user_init_hook+0x5c>)
 23ff516:	f7fe f867 	bl	23fd5e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff51e:	2100      	movs	r1, #0
 23ff520:	4806      	ldr	r0, [pc, #24]	; (23ff53c <module_user_init_hook+0x60>)
 23ff522:	f7fe b837 	b.w	23fd594 <system_ctrl_set_app_request_handler>
 23ff526:	bf00      	nop
 23ff528:	023ff3f1 	.word	0x023ff3f1
 23ff52c:	1007b400 	.word	0x1007b400
 23ff530:	9a271c1e 	.word	0x9a271c1e
 23ff534:	1007aee8 	.word	0x1007aee8
 23ff538:	00000000 	.word	0x00000000
 23ff53c:	023ff4a5 	.word	0x023ff4a5

023ff540 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff540:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff542:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff544:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff546:	d902      	bls.n	23ff54e <pinAvailable+0xe>
    return false;
 23ff548:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff54a:	b003      	add	sp, #12
 23ff54c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff54e:	f1a0 030f 	sub.w	r3, r0, #15
 23ff552:	2b02      	cmp	r3, #2
 23ff554:	d90b      	bls.n	23ff56e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff556:	2801      	cmp	r0, #1
 23ff558:	d821      	bhi.n	23ff59e <pinAvailable+0x5e>
 23ff55a:	f000 f875 	bl	23ff648 <_Z19__fetch_global_Wirev>
 23ff55e:	2100      	movs	r1, #0
 23ff560:	7c00      	ldrb	r0, [r0, #16]
 23ff562:	f7fd fe11 	bl	23fd188 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff566:	f080 0001 	eor.w	r0, r0, #1
 23ff56a:	b2c0      	uxtb	r0, r0
 23ff56c:	e7ed      	b.n	23ff54a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff56e:	4d11      	ldr	r5, [pc, #68]	; (23ff5b4 <pinAvailable+0x74>)
 23ff570:	e8d5 1f8f 	ldab	r1, [r5]
 23ff574:	f011 0101 	ands.w	r1, r1, #1
 23ff578:	d10b      	bne.n	23ff592 <pinAvailable+0x52>
 23ff57a:	4628      	mov	r0, r5
 23ff57c:	9101      	str	r1, [sp, #4]
 23ff57e:	f7fd fa8b 	bl	23fca98 <__cxa_guard_acquire>
 23ff582:	9901      	ldr	r1, [sp, #4]
 23ff584:	b128      	cbz	r0, 23ff592 <pinAvailable+0x52>
 23ff586:	480c      	ldr	r0, [pc, #48]	; (23ff5b8 <pinAvailable+0x78>)
 23ff588:	f7ff fd2a 	bl	23fefe0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff58c:	4628      	mov	r0, r5
 23ff58e:	f7fd fa88 	bl	23fcaa2 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff592:	4b09      	ldr	r3, [pc, #36]	; (23ff5b8 <pinAvailable+0x78>)
 23ff594:	7818      	ldrb	r0, [r3, #0]
 23ff596:	f7fd fe75 	bl	23fd284 <hal_spi_is_enabled>
 23ff59a:	2800      	cmp	r0, #0
 23ff59c:	d1d4      	bne.n	23ff548 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff59e:	3c08      	subs	r4, #8
 23ff5a0:	2c01      	cmp	r4, #1
 23ff5a2:	d805      	bhi.n	23ff5b0 <pinAvailable+0x70>
 23ff5a4:	f000 f8a4 	bl	23ff6f0 <_Z22__fetch_global_Serial1v>
 23ff5a8:	7c00      	ldrb	r0, [r0, #16]
 23ff5aa:	f7fd fee9 	bl	23fd380 <hal_usart_is_enabled>
 23ff5ae:	e7da      	b.n	23ff566 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff5b0:	2001      	movs	r0, #1
 23ff5b2:	e7ca      	b.n	23ff54a <pinAvailable+0xa>
 23ff5b4:	1007ae4c 	.word	0x1007ae4c
 23ff5b8:	1007ae50 	.word	0x1007ae50

023ff5bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff5bc:	281b      	cmp	r0, #27
{
 23ff5be:	b538      	push	{r3, r4, r5, lr}
 23ff5c0:	4604      	mov	r4, r0
 23ff5c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff5c4:	d80a      	bhi.n	23ff5dc <pinMode+0x20>
 23ff5c6:	29ff      	cmp	r1, #255	; 0xff
 23ff5c8:	d008      	beq.n	23ff5dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff5ca:	f7ff ffb9 	bl	23ff540 <pinAvailable>
 23ff5ce:	b128      	cbz	r0, 23ff5dc <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff5d0:	4629      	mov	r1, r5
 23ff5d2:	4620      	mov	r0, r4
}
 23ff5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff5d8:	f7fd bd66 	b.w	23fd0a8 <hal_gpio_mode>
}
 23ff5dc:	bd38      	pop	{r3, r4, r5, pc}

023ff5de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff5de:	b538      	push	{r3, r4, r5, lr}
 23ff5e0:	4604      	mov	r4, r0
 23ff5e2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff5e4:	f7fd fd6e 	bl	23fd0c4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff5e8:	28ff      	cmp	r0, #255	; 0xff
 23ff5ea:	d010      	beq.n	23ff60e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff5ec:	2806      	cmp	r0, #6
 23ff5ee:	d804      	bhi.n	23ff5fa <digitalWrite+0x1c>
 23ff5f0:	234d      	movs	r3, #77	; 0x4d
 23ff5f2:	fa23 f000 	lsr.w	r0, r3, r0
 23ff5f6:	07c3      	lsls	r3, r0, #31
 23ff5f8:	d409      	bmi.n	23ff60e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff5fa:	4620      	mov	r0, r4
 23ff5fc:	f7ff ffa0 	bl	23ff540 <pinAvailable>
 23ff600:	b128      	cbz	r0, 23ff60e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff602:	4629      	mov	r1, r5
 23ff604:	4620      	mov	r0, r4
}
 23ff606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff60a:	f7fd bd69 	b.w	23fd0e0 <hal_gpio_write>
}
 23ff60e:	bd38      	pop	{r3, r4, r5, pc}

023ff610 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff610:	4770      	bx	lr
	...

023ff614 <_Z17acquireWireBufferv>:
{
 23ff614:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff616:	4b0a      	ldr	r3, [pc, #40]	; (23ff640 <_Z17acquireWireBufferv+0x2c>)
{
 23ff618:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff61a:	6003      	str	r3, [r0, #0]
 23ff61c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff61e:	4909      	ldr	r1, [pc, #36]	; (23ff644 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff620:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff622:	2020      	movs	r0, #32
 23ff624:	f000 f8f6 	bl	23ff814 <_ZnajRKSt9nothrow_t>
	};
 23ff628:	2520      	movs	r5, #32
 23ff62a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff62c:	4905      	ldr	r1, [pc, #20]	; (23ff644 <_Z17acquireWireBufferv+0x30>)
 23ff62e:	4628      	mov	r0, r5
	};
 23ff630:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff632:	f000 f8ef 	bl	23ff814 <_ZnajRKSt9nothrow_t>
	};
 23ff636:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff63a:	4620      	mov	r0, r4
 23ff63c:	bd38      	pop	{r3, r4, r5, pc}
 23ff63e:	bf00      	nop
 23ff640:	00010018 	.word	0x00010018
 23ff644:	023ffe58 	.word	0x023ffe58

023ff648 <_Z19__fetch_global_Wirev>:
{
 23ff648:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff64a:	4d0e      	ldr	r5, [pc, #56]	; (23ff684 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff64c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff64e:	e8d5 1f8f 	ldab	r1, [r5]
 23ff652:	f011 0401 	ands.w	r4, r1, #1
 23ff656:	d111      	bne.n	23ff67c <_Z19__fetch_global_Wirev+0x34>
 23ff658:	4628      	mov	r0, r5
 23ff65a:	f7fd fa1d 	bl	23fca98 <__cxa_guard_acquire>
 23ff65e:	b168      	cbz	r0, 23ff67c <_Z19__fetch_global_Wirev+0x34>
 23ff660:	4668      	mov	r0, sp
 23ff662:	f7ff ffd7 	bl	23ff614 <_Z17acquireWireBufferv>
 23ff666:	466a      	mov	r2, sp
 23ff668:	4621      	mov	r1, r4
 23ff66a:	4807      	ldr	r0, [pc, #28]	; (23ff688 <_Z19__fetch_global_Wirev+0x40>)
 23ff66c:	f7fe f986 	bl	23fd97c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff670:	4628      	mov	r0, r5
 23ff672:	f7fd fa16 	bl	23fcaa2 <__cxa_guard_release>
 23ff676:	4805      	ldr	r0, [pc, #20]	; (23ff68c <_Z19__fetch_global_Wirev+0x44>)
 23ff678:	f000 f8ce 	bl	23ff818 <atexit>
	return wire;
}
 23ff67c:	4802      	ldr	r0, [pc, #8]	; (23ff688 <_Z19__fetch_global_Wirev+0x40>)
 23ff67e:	b007      	add	sp, #28
 23ff680:	bd30      	pop	{r4, r5, pc}
 23ff682:	bf00      	nop
 23ff684:	1007aef4 	.word	0x1007aef4
 23ff688:	1007aef8 	.word	0x1007aef8
 23ff68c:	023ff611 	.word	0x023ff611

023ff690 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff690:	4770      	bx	lr
	...

023ff694 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff694:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff696:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff698:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff69a:	462a      	mov	r2, r5
 23ff69c:	2100      	movs	r1, #0
 23ff69e:	f000 f8f0 	bl	23ff882 <memset>
 23ff6a2:	8025      	strh	r5, [r4, #0]
 23ff6a4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff6a6:	4907      	ldr	r1, [pc, #28]	; (23ff6c4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff6a8:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff6aa:	8125      	strh	r5, [r4, #8]
 23ff6ac:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff6ae:	f000 f8b1 	bl	23ff814 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff6b2:	4904      	ldr	r1, [pc, #16]	; (23ff6c4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff6b4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff6b6:	4628      	mov	r0, r5
 23ff6b8:	f000 f8ac 	bl	23ff814 <_ZnajRKSt9nothrow_t>
    };
 23ff6bc:	60e0      	str	r0, [r4, #12]
}
 23ff6be:	4620      	mov	r0, r4
 23ff6c0:	bd38      	pop	{r3, r4, r5, pc}
 23ff6c2:	bf00      	nop
 23ff6c4:	023ffe58 	.word	0x023ffe58

023ff6c8 <__tcf_2>:
 23ff6c8:	4770      	bx	lr

023ff6ca <__tcf_1>:
 23ff6ca:	4770      	bx	lr

023ff6cc <_Z20acquireSerial1Bufferv>:
{
 23ff6cc:	b510      	push	{r4, lr}
 23ff6ce:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff6d0:	f7ff ffe0 	bl	23ff694 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff6d4:	4620      	mov	r0, r4
 23ff6d6:	bd10      	pop	{r4, pc}

023ff6d8 <_Z20acquireSerial2Bufferv>:
 23ff6d8:	b510      	push	{r4, lr}
 23ff6da:	4604      	mov	r4, r0
 23ff6dc:	f7ff ffda 	bl	23ff694 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff6e0:	4620      	mov	r0, r4
 23ff6e2:	bd10      	pop	{r4, pc}

023ff6e4 <_Z20acquireSerial3Bufferv>:
 23ff6e4:	b510      	push	{r4, lr}
 23ff6e6:	4604      	mov	r4, r0
 23ff6e8:	f7ff ffd4 	bl	23ff694 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff6ec:	4620      	mov	r0, r4
 23ff6ee:	bd10      	pop	{r4, pc}

023ff6f0 <_Z22__fetch_global_Serial1v>:
{
 23ff6f0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff6f2:	4d0e      	ldr	r5, [pc, #56]	; (23ff72c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff6f4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff6f6:	e8d5 1f8f 	ldab	r1, [r5]
 23ff6fa:	f011 0401 	ands.w	r4, r1, #1
 23ff6fe:	d111      	bne.n	23ff724 <_Z22__fetch_global_Serial1v+0x34>
 23ff700:	4628      	mov	r0, r5
 23ff702:	f7fd f9c9 	bl	23fca98 <__cxa_guard_acquire>
 23ff706:	b168      	cbz	r0, 23ff724 <_Z22__fetch_global_Serial1v+0x34>
 23ff708:	a801      	add	r0, sp, #4
 23ff70a:	f7ff ffdf 	bl	23ff6cc <_Z20acquireSerial1Bufferv>
 23ff70e:	4621      	mov	r1, r4
 23ff710:	aa01      	add	r2, sp, #4
 23ff712:	4807      	ldr	r0, [pc, #28]	; (23ff730 <_Z22__fetch_global_Serial1v+0x40>)
 23ff714:	f7ff fd84 	bl	23ff220 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff718:	4628      	mov	r0, r5
 23ff71a:	f7fd f9c2 	bl	23fcaa2 <__cxa_guard_release>
 23ff71e:	4805      	ldr	r0, [pc, #20]	; (23ff734 <_Z22__fetch_global_Serial1v+0x44>)
 23ff720:	f000 f87a 	bl	23ff818 <atexit>
    return serial1;
}
 23ff724:	4802      	ldr	r0, [pc, #8]	; (23ff730 <_Z22__fetch_global_Serial1v+0x40>)
 23ff726:	b007      	add	sp, #28
 23ff728:	bd30      	pop	{r4, r5, pc}
 23ff72a:	bf00      	nop
 23ff72c:	1007af0c 	.word	0x1007af0c
 23ff730:	1007af18 	.word	0x1007af18
 23ff734:	023ff691 	.word	0x023ff691

023ff738 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff738:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff73a:	4c0d      	ldr	r4, [pc, #52]	; (23ff770 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff73c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff73e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff742:	07db      	lsls	r3, r3, #31
 23ff744:	d411      	bmi.n	23ff76a <_Z22__fetch_global_Serial2v+0x32>
 23ff746:	4620      	mov	r0, r4
 23ff748:	f7fd f9a6 	bl	23fca98 <__cxa_guard_acquire>
 23ff74c:	b168      	cbz	r0, 23ff76a <_Z22__fetch_global_Serial2v+0x32>
 23ff74e:	a801      	add	r0, sp, #4
 23ff750:	f7ff ffc2 	bl	23ff6d8 <_Z20acquireSerial2Bufferv>
 23ff754:	2101      	movs	r1, #1
 23ff756:	aa01      	add	r2, sp, #4
 23ff758:	4806      	ldr	r0, [pc, #24]	; (23ff774 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff75a:	f7ff fd61 	bl	23ff220 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff75e:	4620      	mov	r0, r4
 23ff760:	f7fd f99f 	bl	23fcaa2 <__cxa_guard_release>
 23ff764:	4804      	ldr	r0, [pc, #16]	; (23ff778 <_Z22__fetch_global_Serial2v+0x40>)
 23ff766:	f000 f857 	bl	23ff818 <atexit>
	return serial2;
}
 23ff76a:	4802      	ldr	r0, [pc, #8]	; (23ff774 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff76c:	b006      	add	sp, #24
 23ff76e:	bd10      	pop	{r4, pc}
 23ff770:	1007af10 	.word	0x1007af10
 23ff774:	1007af2c 	.word	0x1007af2c
 23ff778:	023ff6cb 	.word	0x023ff6cb

023ff77c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff77c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff77e:	f7ff ffdb 	bl	23ff738 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff782:	4b07      	ldr	r3, [pc, #28]	; (23ff7a0 <_Z15serialEventRun2v+0x24>)
 23ff784:	4604      	mov	r4, r0
 23ff786:	b153      	cbz	r3, 23ff79e <_Z15serialEventRun2v+0x22>
 23ff788:	f7ff fd68 	bl	23ff25c <_ZN11USARTSerial9isEnabledEv>
 23ff78c:	b138      	cbz	r0, 23ff79e <_Z15serialEventRun2v+0x22>
 23ff78e:	6823      	ldr	r3, [r4, #0]
 23ff790:	4620      	mov	r0, r4
 23ff792:	691b      	ldr	r3, [r3, #16]
 23ff794:	4798      	blx	r3
 23ff796:	2800      	cmp	r0, #0
 23ff798:	dd01      	ble.n	23ff79e <_Z15serialEventRun2v+0x22>
        handler();
 23ff79a:	e000      	b.n	23ff79e <_Z15serialEventRun2v+0x22>
 23ff79c:	bf00      	nop
}
 23ff79e:	bd10      	pop	{r4, pc}
 23ff7a0:	00000000 	.word	0x00000000

023ff7a4 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff7a4:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff7a6:	4c0d      	ldr	r4, [pc, #52]	; (23ff7dc <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff7a8:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff7aa:	e8d4 3f8f 	ldab	r3, [r4]
 23ff7ae:	07db      	lsls	r3, r3, #31
 23ff7b0:	d411      	bmi.n	23ff7d6 <_Z22__fetch_global_Serial3v+0x32>
 23ff7b2:	4620      	mov	r0, r4
 23ff7b4:	f7fd f970 	bl	23fca98 <__cxa_guard_acquire>
 23ff7b8:	b168      	cbz	r0, 23ff7d6 <_Z22__fetch_global_Serial3v+0x32>
 23ff7ba:	a801      	add	r0, sp, #4
 23ff7bc:	f7ff ff92 	bl	23ff6e4 <_Z20acquireSerial3Bufferv>
 23ff7c0:	2102      	movs	r1, #2
 23ff7c2:	aa01      	add	r2, sp, #4
 23ff7c4:	4806      	ldr	r0, [pc, #24]	; (23ff7e0 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff7c6:	f7ff fd2b 	bl	23ff220 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff7ca:	4620      	mov	r0, r4
 23ff7cc:	f7fd f969 	bl	23fcaa2 <__cxa_guard_release>
 23ff7d0:	4804      	ldr	r0, [pc, #16]	; (23ff7e4 <_Z22__fetch_global_Serial3v+0x40>)
 23ff7d2:	f000 f821 	bl	23ff818 <atexit>
	return serial3;
}
 23ff7d6:	4802      	ldr	r0, [pc, #8]	; (23ff7e0 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff7d8:	b006      	add	sp, #24
 23ff7da:	bd10      	pop	{r4, pc}
 23ff7dc:	1007af14 	.word	0x1007af14
 23ff7e0:	1007af40 	.word	0x1007af40
 23ff7e4:	023ff6c9 	.word	0x023ff6c9

023ff7e8 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff7e8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff7ea:	f7ff ffdb 	bl	23ff7a4 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff7ee:	4b07      	ldr	r3, [pc, #28]	; (23ff80c <_Z15serialEventRun3v+0x24>)
 23ff7f0:	4604      	mov	r4, r0
 23ff7f2:	b153      	cbz	r3, 23ff80a <_Z15serialEventRun3v+0x22>
 23ff7f4:	f7ff fd32 	bl	23ff25c <_ZN11USARTSerial9isEnabledEv>
 23ff7f8:	b138      	cbz	r0, 23ff80a <_Z15serialEventRun3v+0x22>
 23ff7fa:	6823      	ldr	r3, [r4, #0]
 23ff7fc:	4620      	mov	r0, r4
 23ff7fe:	691b      	ldr	r3, [r3, #16]
 23ff800:	4798      	blx	r3
 23ff802:	2800      	cmp	r0, #0
 23ff804:	dd01      	ble.n	23ff80a <_Z15serialEventRun3v+0x22>
        handler();
 23ff806:	e000      	b.n	23ff80a <_Z15serialEventRun3v+0x22>
 23ff808:	bf00      	nop
}
 23ff80a:	bd10      	pop	{r4, pc}
 23ff80c:	00000000 	.word	0x00000000

023ff810 <_ZnwjRKSt9nothrow_t>:
 23ff810:	f7fd b92f 	b.w	23fca72 <_Znwj>

023ff814 <_ZnajRKSt9nothrow_t>:
 23ff814:	f7fd b92f 	b.w	23fca76 <_Znaj>

023ff818 <atexit>:
 23ff818:	2300      	movs	r3, #0
 23ff81a:	4601      	mov	r1, r0
 23ff81c:	461a      	mov	r2, r3
 23ff81e:	4618      	mov	r0, r3
 23ff820:	f000 b93a 	b.w	23ffa98 <__register_exitproc>

023ff824 <isprint>:
 23ff824:	4b02      	ldr	r3, [pc, #8]	; (23ff830 <isprint+0xc>)
 23ff826:	4418      	add	r0, r3
 23ff828:	7840      	ldrb	r0, [r0, #1]
 23ff82a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff82e:	4770      	bx	lr
 23ff830:	023ffec9 	.word	0x023ffec9

023ff834 <memcpy>:
 23ff834:	440a      	add	r2, r1
 23ff836:	1e43      	subs	r3, r0, #1
 23ff838:	4291      	cmp	r1, r2
 23ff83a:	d100      	bne.n	23ff83e <memcpy+0xa>
 23ff83c:	4770      	bx	lr
 23ff83e:	b510      	push	{r4, lr}
 23ff840:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff844:	4291      	cmp	r1, r2
 23ff846:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff84a:	d1f9      	bne.n	23ff840 <memcpy+0xc>
 23ff84c:	bd10      	pop	{r4, pc}

023ff84e <memmove>:
 23ff84e:	4288      	cmp	r0, r1
 23ff850:	b510      	push	{r4, lr}
 23ff852:	eb01 0402 	add.w	r4, r1, r2
 23ff856:	d902      	bls.n	23ff85e <memmove+0x10>
 23ff858:	4284      	cmp	r4, r0
 23ff85a:	4623      	mov	r3, r4
 23ff85c:	d807      	bhi.n	23ff86e <memmove+0x20>
 23ff85e:	1e43      	subs	r3, r0, #1
 23ff860:	42a1      	cmp	r1, r4
 23ff862:	d008      	beq.n	23ff876 <memmove+0x28>
 23ff864:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff868:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff86c:	e7f8      	b.n	23ff860 <memmove+0x12>
 23ff86e:	4402      	add	r2, r0
 23ff870:	4601      	mov	r1, r0
 23ff872:	428a      	cmp	r2, r1
 23ff874:	d100      	bne.n	23ff878 <memmove+0x2a>
 23ff876:	bd10      	pop	{r4, pc}
 23ff878:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff87c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff880:	e7f7      	b.n	23ff872 <memmove+0x24>

023ff882 <memset>:
 23ff882:	4402      	add	r2, r0
 23ff884:	4603      	mov	r3, r0
 23ff886:	4293      	cmp	r3, r2
 23ff888:	d100      	bne.n	23ff88c <memset+0xa>
 23ff88a:	4770      	bx	lr
 23ff88c:	f803 1b01 	strb.w	r1, [r3], #1
 23ff890:	e7f9      	b.n	23ff886 <memset+0x4>
	...

023ff894 <srand>:
 23ff894:	b538      	push	{r3, r4, r5, lr}
 23ff896:	4b10      	ldr	r3, [pc, #64]	; (23ff8d8 <srand+0x44>)
 23ff898:	4604      	mov	r4, r0
 23ff89a:	681d      	ldr	r5, [r3, #0]
 23ff89c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff89e:	b9b3      	cbnz	r3, 23ff8ce <srand+0x3a>
 23ff8a0:	2018      	movs	r0, #24
 23ff8a2:	f7fd ff57 	bl	23fd754 <malloc>
 23ff8a6:	4602      	mov	r2, r0
 23ff8a8:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff8aa:	b920      	cbnz	r0, 23ff8b6 <srand+0x22>
 23ff8ac:	4b0b      	ldr	r3, [pc, #44]	; (23ff8dc <srand+0x48>)
 23ff8ae:	2142      	movs	r1, #66	; 0x42
 23ff8b0:	480b      	ldr	r0, [pc, #44]	; (23ff8e0 <srand+0x4c>)
 23ff8b2:	f7fd ff95 	bl	23fd7e0 <__assert_func>
 23ff8b6:	490b      	ldr	r1, [pc, #44]	; (23ff8e4 <srand+0x50>)
 23ff8b8:	4b0b      	ldr	r3, [pc, #44]	; (23ff8e8 <srand+0x54>)
 23ff8ba:	e9c0 1300 	strd	r1, r3, [r0]
 23ff8be:	4b0b      	ldr	r3, [pc, #44]	; (23ff8ec <srand+0x58>)
 23ff8c0:	2100      	movs	r1, #0
 23ff8c2:	6083      	str	r3, [r0, #8]
 23ff8c4:	230b      	movs	r3, #11
 23ff8c6:	8183      	strh	r3, [r0, #12]
 23ff8c8:	2001      	movs	r0, #1
 23ff8ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff8ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff8d0:	2200      	movs	r2, #0
 23ff8d2:	611c      	str	r4, [r3, #16]
 23ff8d4:	615a      	str	r2, [r3, #20]
 23ff8d6:	bd38      	pop	{r3, r4, r5, pc}
 23ff8d8:	1007adbc 	.word	0x1007adbc
 23ff8dc:	023ffe59 	.word	0x023ffe59
 23ff8e0:	023ffe70 	.word	0x023ffe70
 23ff8e4:	abcd330e 	.word	0xabcd330e
 23ff8e8:	e66d1234 	.word	0xe66d1234
 23ff8ec:	0005deec 	.word	0x0005deec

023ff8f0 <strchr>:
 23ff8f0:	b2c9      	uxtb	r1, r1
 23ff8f2:	4603      	mov	r3, r0
 23ff8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff8f8:	b11a      	cbz	r2, 23ff902 <strchr+0x12>
 23ff8fa:	428a      	cmp	r2, r1
 23ff8fc:	d1f9      	bne.n	23ff8f2 <strchr+0x2>
 23ff8fe:	4618      	mov	r0, r3
 23ff900:	4770      	bx	lr
 23ff902:	2900      	cmp	r1, #0
 23ff904:	bf18      	it	ne
 23ff906:	2300      	movne	r3, #0
 23ff908:	e7f9      	b.n	23ff8fe <strchr+0xe>

023ff90a <strchrnul>:
 23ff90a:	b510      	push	{r4, lr}
 23ff90c:	4604      	mov	r4, r0
 23ff90e:	f7ff ffef 	bl	23ff8f0 <strchr>
 23ff912:	b918      	cbnz	r0, 23ff91c <strchrnul+0x12>
 23ff914:	4620      	mov	r0, r4
 23ff916:	f7fd f887 	bl	23fca28 <strlen>
 23ff91a:	4420      	add	r0, r4
 23ff91c:	bd10      	pop	{r4, pc}

023ff91e <strcpy>:
 23ff91e:	4603      	mov	r3, r0
 23ff920:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff924:	f803 2b01 	strb.w	r2, [r3], #1
 23ff928:	2a00      	cmp	r2, #0
 23ff92a:	d1f9      	bne.n	23ff920 <strcpy+0x2>
 23ff92c:	4770      	bx	lr

023ff92e <strncmp>:
 23ff92e:	b510      	push	{r4, lr}
 23ff930:	b17a      	cbz	r2, 23ff952 <strncmp+0x24>
 23ff932:	4603      	mov	r3, r0
 23ff934:	3901      	subs	r1, #1
 23ff936:	1884      	adds	r4, r0, r2
 23ff938:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff93c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff940:	4290      	cmp	r0, r2
 23ff942:	d101      	bne.n	23ff948 <strncmp+0x1a>
 23ff944:	42a3      	cmp	r3, r4
 23ff946:	d101      	bne.n	23ff94c <strncmp+0x1e>
 23ff948:	1a80      	subs	r0, r0, r2
 23ff94a:	bd10      	pop	{r4, pc}
 23ff94c:	2800      	cmp	r0, #0
 23ff94e:	d1f3      	bne.n	23ff938 <strncmp+0xa>
 23ff950:	e7fa      	b.n	23ff948 <strncmp+0x1a>
 23ff952:	4610      	mov	r0, r2
 23ff954:	e7f9      	b.n	23ff94a <strncmp+0x1c>

023ff956 <strrchr>:
 23ff956:	b538      	push	{r3, r4, r5, lr}
 23ff958:	4603      	mov	r3, r0
 23ff95a:	460c      	mov	r4, r1
 23ff95c:	b969      	cbnz	r1, 23ff97a <strrchr+0x24>
 23ff95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff962:	f7ff bfc5 	b.w	23ff8f0 <strchr>
 23ff966:	1c43      	adds	r3, r0, #1
 23ff968:	4605      	mov	r5, r0
 23ff96a:	4621      	mov	r1, r4
 23ff96c:	4618      	mov	r0, r3
 23ff96e:	f7ff ffbf 	bl	23ff8f0 <strchr>
 23ff972:	2800      	cmp	r0, #0
 23ff974:	d1f7      	bne.n	23ff966 <strrchr+0x10>
 23ff976:	4628      	mov	r0, r5
 23ff978:	bd38      	pop	{r3, r4, r5, pc}
 23ff97a:	2500      	movs	r5, #0
 23ff97c:	e7f5      	b.n	23ff96a <strrchr+0x14>
	...

023ff980 <_strtol_l.constprop.0>:
 23ff980:	2b01      	cmp	r3, #1
 23ff982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff986:	d001      	beq.n	23ff98c <_strtol_l.constprop.0+0xc>
 23ff988:	2b24      	cmp	r3, #36	; 0x24
 23ff98a:	d906      	bls.n	23ff99a <_strtol_l.constprop.0+0x1a>
 23ff98c:	f7fd ff1a 	bl	23fd7c4 <__errno>
 23ff990:	2316      	movs	r3, #22
 23ff992:	6003      	str	r3, [r0, #0]
 23ff994:	2000      	movs	r0, #0
 23ff996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff99a:	460d      	mov	r5, r1
 23ff99c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ffa80 <_strtol_l.constprop.0+0x100>
 23ff9a0:	462e      	mov	r6, r5
 23ff9a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff9a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff9aa:	f017 0708 	ands.w	r7, r7, #8
 23ff9ae:	d1f7      	bne.n	23ff9a0 <_strtol_l.constprop.0+0x20>
 23ff9b0:	2c2d      	cmp	r4, #45	; 0x2d
 23ff9b2:	d132      	bne.n	23ffa1a <_strtol_l.constprop.0+0x9a>
 23ff9b4:	782c      	ldrb	r4, [r5, #0]
 23ff9b6:	2701      	movs	r7, #1
 23ff9b8:	1cb5      	adds	r5, r6, #2
 23ff9ba:	2b00      	cmp	r3, #0
 23ff9bc:	d05b      	beq.n	23ffa76 <_strtol_l.constprop.0+0xf6>
 23ff9be:	2b10      	cmp	r3, #16
 23ff9c0:	d109      	bne.n	23ff9d6 <_strtol_l.constprop.0+0x56>
 23ff9c2:	2c30      	cmp	r4, #48	; 0x30
 23ff9c4:	d107      	bne.n	23ff9d6 <_strtol_l.constprop.0+0x56>
 23ff9c6:	782c      	ldrb	r4, [r5, #0]
 23ff9c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff9cc:	2c58      	cmp	r4, #88	; 0x58
 23ff9ce:	d14d      	bne.n	23ffa6c <_strtol_l.constprop.0+0xec>
 23ff9d0:	786c      	ldrb	r4, [r5, #1]
 23ff9d2:	2310      	movs	r3, #16
 23ff9d4:	3502      	adds	r5, #2
 23ff9d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff9da:	f04f 0c00 	mov.w	ip, #0
 23ff9de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff9e2:	4666      	mov	r6, ip
 23ff9e4:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff9e8:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff9ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff9f0:	f1be 0f09 	cmp.w	lr, #9
 23ff9f4:	d816      	bhi.n	23ffa24 <_strtol_l.constprop.0+0xa4>
 23ff9f6:	4674      	mov	r4, lr
 23ff9f8:	42a3      	cmp	r3, r4
 23ff9fa:	dd24      	ble.n	23ffa46 <_strtol_l.constprop.0+0xc6>
 23ff9fc:	f1bc 0f00 	cmp.w	ip, #0
 23ffa00:	db1e      	blt.n	23ffa40 <_strtol_l.constprop.0+0xc0>
 23ffa02:	45b1      	cmp	r9, r6
 23ffa04:	d31c      	bcc.n	23ffa40 <_strtol_l.constprop.0+0xc0>
 23ffa06:	d101      	bne.n	23ffa0c <_strtol_l.constprop.0+0x8c>
 23ffa08:	45a2      	cmp	sl, r4
 23ffa0a:	db19      	blt.n	23ffa40 <_strtol_l.constprop.0+0xc0>
 23ffa0c:	fb06 4603 	mla	r6, r6, r3, r4
 23ffa10:	f04f 0c01 	mov.w	ip, #1
 23ffa14:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ffa18:	e7e8      	b.n	23ff9ec <_strtol_l.constprop.0+0x6c>
 23ffa1a:	2c2b      	cmp	r4, #43	; 0x2b
 23ffa1c:	bf04      	itt	eq
 23ffa1e:	782c      	ldrbeq	r4, [r5, #0]
 23ffa20:	1cb5      	addeq	r5, r6, #2
 23ffa22:	e7ca      	b.n	23ff9ba <_strtol_l.constprop.0+0x3a>
 23ffa24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ffa28:	f1be 0f19 	cmp.w	lr, #25
 23ffa2c:	d801      	bhi.n	23ffa32 <_strtol_l.constprop.0+0xb2>
 23ffa2e:	3c37      	subs	r4, #55	; 0x37
 23ffa30:	e7e2      	b.n	23ff9f8 <_strtol_l.constprop.0+0x78>
 23ffa32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ffa36:	f1be 0f19 	cmp.w	lr, #25
 23ffa3a:	d804      	bhi.n	23ffa46 <_strtol_l.constprop.0+0xc6>
 23ffa3c:	3c57      	subs	r4, #87	; 0x57
 23ffa3e:	e7db      	b.n	23ff9f8 <_strtol_l.constprop.0+0x78>
 23ffa40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ffa44:	e7e6      	b.n	23ffa14 <_strtol_l.constprop.0+0x94>
 23ffa46:	f1bc 0f00 	cmp.w	ip, #0
 23ffa4a:	da05      	bge.n	23ffa58 <_strtol_l.constprop.0+0xd8>
 23ffa4c:	2322      	movs	r3, #34	; 0x22
 23ffa4e:	4646      	mov	r6, r8
 23ffa50:	6003      	str	r3, [r0, #0]
 23ffa52:	b942      	cbnz	r2, 23ffa66 <_strtol_l.constprop.0+0xe6>
 23ffa54:	4630      	mov	r0, r6
 23ffa56:	e79e      	b.n	23ff996 <_strtol_l.constprop.0+0x16>
 23ffa58:	b107      	cbz	r7, 23ffa5c <_strtol_l.constprop.0+0xdc>
 23ffa5a:	4276      	negs	r6, r6
 23ffa5c:	2a00      	cmp	r2, #0
 23ffa5e:	d0f9      	beq.n	23ffa54 <_strtol_l.constprop.0+0xd4>
 23ffa60:	f1bc 0f00 	cmp.w	ip, #0
 23ffa64:	d000      	beq.n	23ffa68 <_strtol_l.constprop.0+0xe8>
 23ffa66:	1e69      	subs	r1, r5, #1
 23ffa68:	6011      	str	r1, [r2, #0]
 23ffa6a:	e7f3      	b.n	23ffa54 <_strtol_l.constprop.0+0xd4>
 23ffa6c:	2430      	movs	r4, #48	; 0x30
 23ffa6e:	2b00      	cmp	r3, #0
 23ffa70:	d1b1      	bne.n	23ff9d6 <_strtol_l.constprop.0+0x56>
 23ffa72:	2308      	movs	r3, #8
 23ffa74:	e7af      	b.n	23ff9d6 <_strtol_l.constprop.0+0x56>
 23ffa76:	2c30      	cmp	r4, #48	; 0x30
 23ffa78:	d0a5      	beq.n	23ff9c6 <_strtol_l.constprop.0+0x46>
 23ffa7a:	230a      	movs	r3, #10
 23ffa7c:	e7ab      	b.n	23ff9d6 <_strtol_l.constprop.0+0x56>
 23ffa7e:	bf00      	nop
 23ffa80:	023ffeca 	.word	0x023ffeca

023ffa84 <strtol>:
 23ffa84:	4613      	mov	r3, r2
 23ffa86:	460a      	mov	r2, r1
 23ffa88:	4601      	mov	r1, r0
 23ffa8a:	4802      	ldr	r0, [pc, #8]	; (23ffa94 <strtol+0x10>)
 23ffa8c:	6800      	ldr	r0, [r0, #0]
 23ffa8e:	f7ff bf77 	b.w	23ff980 <_strtol_l.constprop.0>
 23ffa92:	bf00      	nop
 23ffa94:	1007adbc 	.word	0x1007adbc

023ffa98 <__register_exitproc>:
 23ffa98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffa9c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffb5c <__register_exitproc+0xc4>
 23ffaa0:	4606      	mov	r6, r0
 23ffaa2:	461f      	mov	r7, r3
 23ffaa4:	460d      	mov	r5, r1
 23ffaa6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffaaa:	4691      	mov	r9, r2
 23ffaac:	f000 f858 	bl	23ffb60 <__retarget_lock_acquire_recursive>
 23ffab0:	4b26      	ldr	r3, [pc, #152]	; (23ffb4c <__register_exitproc+0xb4>)
 23ffab2:	681c      	ldr	r4, [r3, #0]
 23ffab4:	b934      	cbnz	r4, 23ffac4 <__register_exitproc+0x2c>
 23ffab6:	4c26      	ldr	r4, [pc, #152]	; (23ffb50 <__register_exitproc+0xb8>)
 23ffab8:	601c      	str	r4, [r3, #0]
 23ffaba:	4b26      	ldr	r3, [pc, #152]	; (23ffb54 <__register_exitproc+0xbc>)
 23ffabc:	b113      	cbz	r3, 23ffac4 <__register_exitproc+0x2c>
 23ffabe:	681b      	ldr	r3, [r3, #0]
 23ffac0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffac4:	6863      	ldr	r3, [r4, #4]
 23ffac6:	2b1f      	cmp	r3, #31
 23ffac8:	dd07      	ble.n	23ffada <__register_exitproc+0x42>
 23ffaca:	f8d8 0000 	ldr.w	r0, [r8]
 23fface:	f000 f849 	bl	23ffb64 <__retarget_lock_release_recursive>
 23ffad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffada:	b35e      	cbz	r6, 23ffb34 <__register_exitproc+0x9c>
 23ffadc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffae0:	b988      	cbnz	r0, 23ffb06 <__register_exitproc+0x6e>
 23ffae2:	4b1d      	ldr	r3, [pc, #116]	; (23ffb58 <__register_exitproc+0xc0>)
 23ffae4:	b923      	cbnz	r3, 23ffaf0 <__register_exitproc+0x58>
 23ffae6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffaea:	f000 f83a 	bl	23ffb62 <__retarget_lock_release>
 23ffaee:	e7f0      	b.n	23ffad2 <__register_exitproc+0x3a>
 23ffaf0:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffaf4:	f7fd fe2e 	bl	23fd754 <malloc>
 23ffaf8:	2800      	cmp	r0, #0
 23ffafa:	d0f4      	beq.n	23ffae6 <__register_exitproc+0x4e>
 23ffafc:	2300      	movs	r3, #0
 23ffafe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffb02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffb06:	6863      	ldr	r3, [r4, #4]
 23ffb08:	2201      	movs	r2, #1
 23ffb0a:	2e02      	cmp	r6, #2
 23ffb0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffb10:	fa02 f203 	lsl.w	r2, r2, r3
 23ffb14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffb18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffb1c:	ea43 0302 	orr.w	r3, r3, r2
 23ffb20:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffb24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffb28:	bf02      	ittt	eq
 23ffb2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffb2e:	4313      	orreq	r3, r2
 23ffb30:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffb34:	6863      	ldr	r3, [r4, #4]
 23ffb36:	f8d8 0000 	ldr.w	r0, [r8]
 23ffb3a:	1c5a      	adds	r2, r3, #1
 23ffb3c:	3302      	adds	r3, #2
 23ffb3e:	6062      	str	r2, [r4, #4]
 23ffb40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffb44:	f000 f80e 	bl	23ffb64 <__retarget_lock_release_recursive>
 23ffb48:	2000      	movs	r0, #0
 23ffb4a:	e7c4      	b.n	23ffad6 <__register_exitproc+0x3e>
 23ffb4c:	1007afe0 	.word	0x1007afe0
 23ffb50:	1007af54 	.word	0x1007af54
 23ffb54:	00000000 	.word	0x00000000
 23ffb58:	023fd755 	.word	0x023fd755
 23ffb5c:	1007ae20 	.word	0x1007ae20

023ffb60 <__retarget_lock_acquire_recursive>:
 23ffb60:	4770      	bx	lr

023ffb62 <__retarget_lock_release>:
 23ffb62:	4770      	bx	lr

023ffb64 <__retarget_lock_release_recursive>:
 23ffb64:	4770      	bx	lr
	...

023ffb68 <dynalib_user>:
 23ffb68:	ca39 023f ca61 023f ca65 023f 0000 0000     9.?.a.?.e.?.....
 23ffb78:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffb88:	7574 6c61 5300 7265 6169 206c 6f63 6e6e     tual.Serial conn
 23ffb98:	6365 6574 2064 726f 7420 6d69 6465 6f20     ected or timed o
 23ffba8:	7475 0021 3a78 2520 2c64 7920 203a 6425     ut!.x: %d, y: %d
 23ffbb8:	202c 3a7a 2520 2c64 7420 203a 6425 0000     , z: %d, t: %d..

023ffbc8 <_ZTVN5spark10LogHandlerE>:
	...
 23ffbd8:	ca81 023f caa9 023f                         ..?...?.

023ffbe0 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffbe8:	caad 023f cae1 023f ea7d 023f ec25 023f     ..?...?.}.?.%.?.

023ffbf8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffc00:	d907 023f d8fd 023f d8f3 023f d8e9 023f     ..?...?...?...?.
 23ffc10:	d8dd 023f d8d1 023f ee11 023f ee19 023f     ..?...?...?...?.
 23ffc20:	d8c5 023f d8bd 023f d8b3 023f d8a9 023f     ..?...?...?...?.
 23ffc30:	ee49 023f                                   I.?.

023ffc34 <_ZTV7TwoWire>:
	...
 23ffc3c:	d925 023f d96f 023f d947 023f d927 023f     %.?.o.?.G.?.'.?.
 23ffc4c:	d94f 023f d957 023f d95f 023f d967 023f     O.?.W.?._.?.g.?.

023ffc5c <_ZTV9IPAddress>:
	...
 23ffc64:	d9c9 023f d9b9 023f d9bb 023f 7525 7500     ..?...?...?.%u.u
 23ffc74:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
 23ffc84:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
 23ffc94:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 23ffca4:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 23ffcb4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 23ffcc4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 23ffcd4:	006d 0066 6e6c 6600 006e 0074 6f63 6564     m.f.ln.fn.t.code
 23ffce4:	6400 7465 6961 006c                         .detail.

023ffcec <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffcf4:	de75 023f de9b 023f de59 023f dad7 023f     u.?...?.Y.?...?.

023ffd04 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffd0c:	e329 023f e341 023f ea7d 023f ec25 023f     ).?.A.?.}.?.%.?.

023ffd1c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffd24:	e355 023f e369 023f ec5d 023f de61 023f     U.?.i.?.].?.a.?.

023ffd34 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffd3c:	de73 023f dea9 023f e9e1 023f de63 023f     s.?...?...?.c.?.

023ffd4c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffd54:	de71 023f deb7 023f e291 023f ded9 023f     q.?...?...?...?.

023ffd64 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd6c:	edd1 023f eddb 023f ede5 023f edef 023f     ..?...?...?...?.
 23ffd7c:	edf9 023f ee05 023f ee11 023f ee19 023f     ..?...?...?...?.
 23ffd8c:	ee21 023f ee2d 023f ee35 023f ee3f 023f     !.?.-.?.5.?.?.?.
 23ffd9c:	ee49 023f 5925 252d 2d6d 6425 2554 3a48     I.?.%Y-%m-%dT%H:
 23ffdac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffdbc <_ZTV11USARTSerial>:
	...
 23ffdc4:	f1a5 023f f211 023f f1e9 023f ef35 023f     ..?...?...?.5.?.
 23ffdd4:	f1b9 023f f1d5 023f f1c7 023f f1e3 023f     ..?...?...?...?.
 23ffde4:	f1a7 023f f1ab 023f                         ..?...?.

023ffdec <_ZTV9USBSerial>:
	...
 23ffdf4:	f269 023f f2d1 023f f2a7 023f ef35 023f     i.?...?...?.5.?.
 23ffe04:	f299 023f f26b 023f f27b 023f f2cb 023f     ..?.k.?.{.?...?.
 23ffe14:	f28b 023f f263 023f                         ..?.c.?.

023ffe1c <_ZTVN5spark9WiFiClassE>:
	...
 23ffe24:	f3d3 023f f3c9 023f f3bf 023f f375 023f     ..?...?...?.u.?.
 23ffe34:	f3b3 023f f3a7 023f ee11 023f ee19 023f     ..?...?...?...?.
 23ffe44:	f39b 023f f393 023f f389 023f f37f 023f     ..?...?...?...?.
 23ffe54:	ee49 023f                                   I.?.

023ffe58 <_ZSt7nothrow>:
 23ffe58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffe78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffe88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffe98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffea8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffeb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023ffec9 <_ctype_>:
 23ffec9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffed9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffee9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffef9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff09:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff19:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff29:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff39:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff49:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffca <link_const_data_end>:
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fcce1 	.word	0x023fcce1
 23fffd0:	023fd899 	.word	0x023fd899
 23fffd4:	023fd911 	.word	0x023fd911
 23fffd8:	023fea6d 	.word	0x023fea6d
 23fffdc:	023fef21 	.word	0x023fef21
 23fffe0:	023fefc9 	.word	0x023fefc9
 23fffe4:	023ff16d 	.word	0x023ff16d
 23fffe8:	023ff191 	.word	0x023ff191
 23fffec:	023ff3dd 	.word	0x023ff3dd
