
/Users/lingxiu/Documents/0-documents/2023-2024-MDes/TDF/tdf-fa23-rocketcrane/ADXL_362/target/5.5.0/p2/ADXL_362.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa808  085fa0a8  0000a808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000057e0  023fa810  085fa0b0  0000a810  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         0000007c  1007ada8  085ff890  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c4  1007ae24  1007ae24  0002ae24  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff90c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000006a8  085ff910  085ff910  0001f910  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f910  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0013e4a7  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014479  00000000  00000000  0015e4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000402c1  00000000  00000000  00172920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003000  00000000  00000000  001b2be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000bbe0  00000000  00000000  001b5be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000249e2  00000000  00000000  001c17c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004109f  00000000  00000000  001e61a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d0a59  00000000  00000000  00227242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008eec  00000000  00000000  002f7c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007ada8 	.word	0x1007ada8
 85fa06c:	085ff890 	.word	0x085ff890
 85fa070:	1007ae24 	.word	0x1007ae24
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007ae24 	.word	0x1007ae24
 85fa07c:	1007afe8 	.word	0x1007afe8
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fa808 	.word	0x023fa808
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fa810 	.word	0x023fa810
 85fa090:	023fa810 	.word	0x023fa810
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff0 	.word	0x023ffff0

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa810 <__aeabi_drsub>:
 23fa810:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fa814:	e002      	b.n	23fa81c <__adddf3>
 23fa816:	bf00      	nop

023fa818 <__aeabi_dsub>:
 23fa818:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fa81c <__adddf3>:
 23fa81c:	b530      	push	{r4, r5, lr}
 23fa81e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fa822:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fa826:	ea94 0f05 	teq	r4, r5
 23fa82a:	bf08      	it	eq
 23fa82c:	ea90 0f02 	teqeq	r0, r2
 23fa830:	bf1f      	itttt	ne
 23fa832:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fa836:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fa83a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fa83e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa842:	f000 80e2 	beq.w	23faa0a <__adddf3+0x1ee>
 23fa846:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fa84a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fa84e:	bfb8      	it	lt
 23fa850:	426d      	neglt	r5, r5
 23fa852:	dd0c      	ble.n	23fa86e <__adddf3+0x52>
 23fa854:	442c      	add	r4, r5
 23fa856:	ea80 0202 	eor.w	r2, r0, r2
 23fa85a:	ea81 0303 	eor.w	r3, r1, r3
 23fa85e:	ea82 0000 	eor.w	r0, r2, r0
 23fa862:	ea83 0101 	eor.w	r1, r3, r1
 23fa866:	ea80 0202 	eor.w	r2, r0, r2
 23fa86a:	ea81 0303 	eor.w	r3, r1, r3
 23fa86e:	2d36      	cmp	r5, #54	; 0x36
 23fa870:	bf88      	it	hi
 23fa872:	bd30      	pophi	{r4, r5, pc}
 23fa874:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fa878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa87c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fa880:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fa884:	d002      	beq.n	23fa88c <__adddf3+0x70>
 23fa886:	4240      	negs	r0, r0
 23fa888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa88c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fa890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa894:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fa898:	d002      	beq.n	23fa8a0 <__adddf3+0x84>
 23fa89a:	4252      	negs	r2, r2
 23fa89c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fa8a0:	ea94 0f05 	teq	r4, r5
 23fa8a4:	f000 80a7 	beq.w	23fa9f6 <__adddf3+0x1da>
 23fa8a8:	f1a4 0401 	sub.w	r4, r4, #1
 23fa8ac:	f1d5 0e20 	rsbs	lr, r5, #32
 23fa8b0:	db0d      	blt.n	23fa8ce <__adddf3+0xb2>
 23fa8b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fa8b6:	fa22 f205 	lsr.w	r2, r2, r5
 23fa8ba:	1880      	adds	r0, r0, r2
 23fa8bc:	f141 0100 	adc.w	r1, r1, #0
 23fa8c0:	fa03 f20e 	lsl.w	r2, r3, lr
 23fa8c4:	1880      	adds	r0, r0, r2
 23fa8c6:	fa43 f305 	asr.w	r3, r3, r5
 23fa8ca:	4159      	adcs	r1, r3
 23fa8cc:	e00e      	b.n	23fa8ec <__adddf3+0xd0>
 23fa8ce:	f1a5 0520 	sub.w	r5, r5, #32
 23fa8d2:	f10e 0e20 	add.w	lr, lr, #32
 23fa8d6:	2a01      	cmp	r2, #1
 23fa8d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fa8dc:	bf28      	it	cs
 23fa8de:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fa8e2:	fa43 f305 	asr.w	r3, r3, r5
 23fa8e6:	18c0      	adds	r0, r0, r3
 23fa8e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fa8ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa8f0:	d507      	bpl.n	23fa902 <__adddf3+0xe6>
 23fa8f2:	f04f 0e00 	mov.w	lr, #0
 23fa8f6:	f1dc 0c00 	rsbs	ip, ip, #0
 23fa8fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fa8fe:	eb6e 0101 	sbc.w	r1, lr, r1
 23fa902:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fa906:	d31b      	bcc.n	23fa940 <__adddf3+0x124>
 23fa908:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fa90c:	d30c      	bcc.n	23fa928 <__adddf3+0x10c>
 23fa90e:	0849      	lsrs	r1, r1, #1
 23fa910:	ea5f 0030 	movs.w	r0, r0, rrx
 23fa914:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fa918:	f104 0401 	add.w	r4, r4, #1
 23fa91c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fa920:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fa924:	f080 809a 	bcs.w	23faa5c <__adddf3+0x240>
 23fa928:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fa92c:	bf08      	it	eq
 23fa92e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fa932:	f150 0000 	adcs.w	r0, r0, #0
 23fa936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa93a:	ea41 0105 	orr.w	r1, r1, r5
 23fa93e:	bd30      	pop	{r4, r5, pc}
 23fa940:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fa944:	4140      	adcs	r0, r0
 23fa946:	eb41 0101 	adc.w	r1, r1, r1
 23fa94a:	3c01      	subs	r4, #1
 23fa94c:	bf28      	it	cs
 23fa94e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fa952:	d2e9      	bcs.n	23fa928 <__adddf3+0x10c>
 23fa954:	f091 0f00 	teq	r1, #0
 23fa958:	bf04      	itt	eq
 23fa95a:	4601      	moveq	r1, r0
 23fa95c:	2000      	moveq	r0, #0
 23fa95e:	fab1 f381 	clz	r3, r1
 23fa962:	bf08      	it	eq
 23fa964:	3320      	addeq	r3, #32
 23fa966:	f1a3 030b 	sub.w	r3, r3, #11
 23fa96a:	f1b3 0220 	subs.w	r2, r3, #32
 23fa96e:	da0c      	bge.n	23fa98a <__adddf3+0x16e>
 23fa970:	320c      	adds	r2, #12
 23fa972:	dd08      	ble.n	23fa986 <__adddf3+0x16a>
 23fa974:	f102 0c14 	add.w	ip, r2, #20
 23fa978:	f1c2 020c 	rsb	r2, r2, #12
 23fa97c:	fa01 f00c 	lsl.w	r0, r1, ip
 23fa980:	fa21 f102 	lsr.w	r1, r1, r2
 23fa984:	e00c      	b.n	23fa9a0 <__adddf3+0x184>
 23fa986:	f102 0214 	add.w	r2, r2, #20
 23fa98a:	bfd8      	it	le
 23fa98c:	f1c2 0c20 	rsble	ip, r2, #32
 23fa990:	fa01 f102 	lsl.w	r1, r1, r2
 23fa994:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fa998:	bfdc      	itt	le
 23fa99a:	ea41 010c 	orrle.w	r1, r1, ip
 23fa99e:	4090      	lslle	r0, r2
 23fa9a0:	1ae4      	subs	r4, r4, r3
 23fa9a2:	bfa2      	ittt	ge
 23fa9a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fa9a8:	4329      	orrge	r1, r5
 23fa9aa:	bd30      	popge	{r4, r5, pc}
 23fa9ac:	ea6f 0404 	mvn.w	r4, r4
 23fa9b0:	3c1f      	subs	r4, #31
 23fa9b2:	da1c      	bge.n	23fa9ee <__adddf3+0x1d2>
 23fa9b4:	340c      	adds	r4, #12
 23fa9b6:	dc0e      	bgt.n	23fa9d6 <__adddf3+0x1ba>
 23fa9b8:	f104 0414 	add.w	r4, r4, #20
 23fa9bc:	f1c4 0220 	rsb	r2, r4, #32
 23fa9c0:	fa20 f004 	lsr.w	r0, r0, r4
 23fa9c4:	fa01 f302 	lsl.w	r3, r1, r2
 23fa9c8:	ea40 0003 	orr.w	r0, r0, r3
 23fa9cc:	fa21 f304 	lsr.w	r3, r1, r4
 23fa9d0:	ea45 0103 	orr.w	r1, r5, r3
 23fa9d4:	bd30      	pop	{r4, r5, pc}
 23fa9d6:	f1c4 040c 	rsb	r4, r4, #12
 23fa9da:	f1c4 0220 	rsb	r2, r4, #32
 23fa9de:	fa20 f002 	lsr.w	r0, r0, r2
 23fa9e2:	fa01 f304 	lsl.w	r3, r1, r4
 23fa9e6:	ea40 0003 	orr.w	r0, r0, r3
 23fa9ea:	4629      	mov	r1, r5
 23fa9ec:	bd30      	pop	{r4, r5, pc}
 23fa9ee:	fa21 f004 	lsr.w	r0, r1, r4
 23fa9f2:	4629      	mov	r1, r5
 23fa9f4:	bd30      	pop	{r4, r5, pc}
 23fa9f6:	f094 0f00 	teq	r4, #0
 23fa9fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fa9fe:	bf06      	itte	eq
 23faa00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23faa04:	3401      	addeq	r4, #1
 23faa06:	3d01      	subne	r5, #1
 23faa08:	e74e      	b.n	23fa8a8 <__adddf3+0x8c>
 23faa0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23faa0e:	bf18      	it	ne
 23faa10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23faa14:	d029      	beq.n	23faa6a <__adddf3+0x24e>
 23faa16:	ea94 0f05 	teq	r4, r5
 23faa1a:	bf08      	it	eq
 23faa1c:	ea90 0f02 	teqeq	r0, r2
 23faa20:	d005      	beq.n	23faa2e <__adddf3+0x212>
 23faa22:	ea54 0c00 	orrs.w	ip, r4, r0
 23faa26:	bf04      	itt	eq
 23faa28:	4619      	moveq	r1, r3
 23faa2a:	4610      	moveq	r0, r2
 23faa2c:	bd30      	pop	{r4, r5, pc}
 23faa2e:	ea91 0f03 	teq	r1, r3
 23faa32:	bf1e      	ittt	ne
 23faa34:	2100      	movne	r1, #0
 23faa36:	2000      	movne	r0, #0
 23faa38:	bd30      	popne	{r4, r5, pc}
 23faa3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23faa3e:	d105      	bne.n	23faa4c <__adddf3+0x230>
 23faa40:	0040      	lsls	r0, r0, #1
 23faa42:	4149      	adcs	r1, r1
 23faa44:	bf28      	it	cs
 23faa46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23faa4a:	bd30      	pop	{r4, r5, pc}
 23faa4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23faa50:	bf3c      	itt	cc
 23faa52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23faa56:	bd30      	popcc	{r4, r5, pc}
 23faa58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23faa5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23faa60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23faa64:	f04f 0000 	mov.w	r0, #0
 23faa68:	bd30      	pop	{r4, r5, pc}
 23faa6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23faa6e:	bf1a      	itte	ne
 23faa70:	4619      	movne	r1, r3
 23faa72:	4610      	movne	r0, r2
 23faa74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23faa78:	bf1c      	itt	ne
 23faa7a:	460b      	movne	r3, r1
 23faa7c:	4602      	movne	r2, r0
 23faa7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23faa82:	bf06      	itte	eq
 23faa84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23faa88:	ea91 0f03 	teqeq	r1, r3
 23faa8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23faa90:	bd30      	pop	{r4, r5, pc}
 23faa92:	bf00      	nop

023faa94 <__aeabi_ui2d>:
 23faa94:	f090 0f00 	teq	r0, #0
 23faa98:	bf04      	itt	eq
 23faa9a:	2100      	moveq	r1, #0
 23faa9c:	4770      	bxeq	lr
 23faa9e:	b530      	push	{r4, r5, lr}
 23faaa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23faaa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23faaa8:	f04f 0500 	mov.w	r5, #0
 23faaac:	f04f 0100 	mov.w	r1, #0
 23faab0:	e750      	b.n	23fa954 <__adddf3+0x138>
 23faab2:	bf00      	nop

023faab4 <__aeabi_i2d>:
 23faab4:	f090 0f00 	teq	r0, #0
 23faab8:	bf04      	itt	eq
 23faaba:	2100      	moveq	r1, #0
 23faabc:	4770      	bxeq	lr
 23faabe:	b530      	push	{r4, r5, lr}
 23faac0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23faac4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23faac8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23faacc:	bf48      	it	mi
 23faace:	4240      	negmi	r0, r0
 23faad0:	f04f 0100 	mov.w	r1, #0
 23faad4:	e73e      	b.n	23fa954 <__adddf3+0x138>
 23faad6:	bf00      	nop

023faad8 <__aeabi_f2d>:
 23faad8:	0042      	lsls	r2, r0, #1
 23faada:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23faade:	ea4f 0131 	mov.w	r1, r1, rrx
 23faae2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23faae6:	bf1f      	itttt	ne
 23faae8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23faaec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23faaf0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23faaf4:	4770      	bxne	lr
 23faaf6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23faafa:	bf08      	it	eq
 23faafc:	4770      	bxeq	lr
 23faafe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fab02:	bf04      	itt	eq
 23fab04:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fab08:	4770      	bxeq	lr
 23fab0a:	b530      	push	{r4, r5, lr}
 23fab0c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fab10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fab14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fab18:	e71c      	b.n	23fa954 <__adddf3+0x138>
 23fab1a:	bf00      	nop

023fab1c <__aeabi_ul2d>:
 23fab1c:	ea50 0201 	orrs.w	r2, r0, r1
 23fab20:	bf08      	it	eq
 23fab22:	4770      	bxeq	lr
 23fab24:	b530      	push	{r4, r5, lr}
 23fab26:	f04f 0500 	mov.w	r5, #0
 23fab2a:	e00a      	b.n	23fab42 <__aeabi_l2d+0x16>

023fab2c <__aeabi_l2d>:
 23fab2c:	ea50 0201 	orrs.w	r2, r0, r1
 23fab30:	bf08      	it	eq
 23fab32:	4770      	bxeq	lr
 23fab34:	b530      	push	{r4, r5, lr}
 23fab36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fab3a:	d502      	bpl.n	23fab42 <__aeabi_l2d+0x16>
 23fab3c:	4240      	negs	r0, r0
 23fab3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fab42:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fab46:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fab4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fab4e:	f43f aed8 	beq.w	23fa902 <__adddf3+0xe6>
 23fab52:	f04f 0203 	mov.w	r2, #3
 23fab56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fab5a:	bf18      	it	ne
 23fab5c:	3203      	addne	r2, #3
 23fab5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fab62:	bf18      	it	ne
 23fab64:	3203      	addne	r2, #3
 23fab66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fab6a:	f1c2 0320 	rsb	r3, r2, #32
 23fab6e:	fa00 fc03 	lsl.w	ip, r0, r3
 23fab72:	fa20 f002 	lsr.w	r0, r0, r2
 23fab76:	fa01 fe03 	lsl.w	lr, r1, r3
 23fab7a:	ea40 000e 	orr.w	r0, r0, lr
 23fab7e:	fa21 f102 	lsr.w	r1, r1, r2
 23fab82:	4414      	add	r4, r2
 23fab84:	e6bd      	b.n	23fa902 <__adddf3+0xe6>
 23fab86:	bf00      	nop

023fab88 <__aeabi_dmul>:
 23fab88:	b570      	push	{r4, r5, r6, lr}
 23fab8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fab8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fab92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fab96:	bf1d      	ittte	ne
 23fab98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fab9c:	ea94 0f0c 	teqne	r4, ip
 23faba0:	ea95 0f0c 	teqne	r5, ip
 23faba4:	f000 f8de 	bleq	23fad64 <__aeabi_dmul+0x1dc>
 23faba8:	442c      	add	r4, r5
 23fabaa:	ea81 0603 	eor.w	r6, r1, r3
 23fabae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fabb2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fabb6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fabba:	bf18      	it	ne
 23fabbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fabc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fabc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fabc8:	d038      	beq.n	23fac3c <__aeabi_dmul+0xb4>
 23fabca:	fba0 ce02 	umull	ip, lr, r0, r2
 23fabce:	f04f 0500 	mov.w	r5, #0
 23fabd2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fabd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fabda:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fabde:	f04f 0600 	mov.w	r6, #0
 23fabe2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fabe6:	f09c 0f00 	teq	ip, #0
 23fabea:	bf18      	it	ne
 23fabec:	f04e 0e01 	orrne.w	lr, lr, #1
 23fabf0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fabf4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fabf8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fabfc:	d204      	bcs.n	23fac08 <__aeabi_dmul+0x80>
 23fabfe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fac02:	416d      	adcs	r5, r5
 23fac04:	eb46 0606 	adc.w	r6, r6, r6
 23fac08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fac0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fac10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fac14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fac18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fac1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fac20:	bf88      	it	hi
 23fac22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fac26:	d81e      	bhi.n	23fac66 <__aeabi_dmul+0xde>
 23fac28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fac2c:	bf08      	it	eq
 23fac2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fac32:	f150 0000 	adcs.w	r0, r0, #0
 23fac36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fac3a:	bd70      	pop	{r4, r5, r6, pc}
 23fac3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fac40:	ea46 0101 	orr.w	r1, r6, r1
 23fac44:	ea40 0002 	orr.w	r0, r0, r2
 23fac48:	ea81 0103 	eor.w	r1, r1, r3
 23fac4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fac50:	bfc2      	ittt	gt
 23fac52:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fac56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fac5a:	bd70      	popgt	{r4, r5, r6, pc}
 23fac5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fac60:	f04f 0e00 	mov.w	lr, #0
 23fac64:	3c01      	subs	r4, #1
 23fac66:	f300 80ab 	bgt.w	23fadc0 <__aeabi_dmul+0x238>
 23fac6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fac6e:	bfde      	ittt	le
 23fac70:	2000      	movle	r0, #0
 23fac72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fac76:	bd70      	pople	{r4, r5, r6, pc}
 23fac78:	f1c4 0400 	rsb	r4, r4, #0
 23fac7c:	3c20      	subs	r4, #32
 23fac7e:	da35      	bge.n	23facec <__aeabi_dmul+0x164>
 23fac80:	340c      	adds	r4, #12
 23fac82:	dc1b      	bgt.n	23facbc <__aeabi_dmul+0x134>
 23fac84:	f104 0414 	add.w	r4, r4, #20
 23fac88:	f1c4 0520 	rsb	r5, r4, #32
 23fac8c:	fa00 f305 	lsl.w	r3, r0, r5
 23fac90:	fa20 f004 	lsr.w	r0, r0, r4
 23fac94:	fa01 f205 	lsl.w	r2, r1, r5
 23fac98:	ea40 0002 	orr.w	r0, r0, r2
 23fac9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23faca0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23faca4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23faca8:	fa21 f604 	lsr.w	r6, r1, r4
 23facac:	eb42 0106 	adc.w	r1, r2, r6
 23facb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23facb4:	bf08      	it	eq
 23facb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23facba:	bd70      	pop	{r4, r5, r6, pc}
 23facbc:	f1c4 040c 	rsb	r4, r4, #12
 23facc0:	f1c4 0520 	rsb	r5, r4, #32
 23facc4:	fa00 f304 	lsl.w	r3, r0, r4
 23facc8:	fa20 f005 	lsr.w	r0, r0, r5
 23faccc:	fa01 f204 	lsl.w	r2, r1, r4
 23facd0:	ea40 0002 	orr.w	r0, r0, r2
 23facd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23facd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23facdc:	f141 0100 	adc.w	r1, r1, #0
 23face0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23face4:	bf08      	it	eq
 23face6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23facea:	bd70      	pop	{r4, r5, r6, pc}
 23facec:	f1c4 0520 	rsb	r5, r4, #32
 23facf0:	fa00 f205 	lsl.w	r2, r0, r5
 23facf4:	ea4e 0e02 	orr.w	lr, lr, r2
 23facf8:	fa20 f304 	lsr.w	r3, r0, r4
 23facfc:	fa01 f205 	lsl.w	r2, r1, r5
 23fad00:	ea43 0302 	orr.w	r3, r3, r2
 23fad04:	fa21 f004 	lsr.w	r0, r1, r4
 23fad08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fad0c:	fa21 f204 	lsr.w	r2, r1, r4
 23fad10:	ea20 0002 	bic.w	r0, r0, r2
 23fad14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fad18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fad1c:	bf08      	it	eq
 23fad1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fad22:	bd70      	pop	{r4, r5, r6, pc}
 23fad24:	f094 0f00 	teq	r4, #0
 23fad28:	d10f      	bne.n	23fad4a <__aeabi_dmul+0x1c2>
 23fad2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fad2e:	0040      	lsls	r0, r0, #1
 23fad30:	eb41 0101 	adc.w	r1, r1, r1
 23fad34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fad38:	bf08      	it	eq
 23fad3a:	3c01      	subeq	r4, #1
 23fad3c:	d0f7      	beq.n	23fad2e <__aeabi_dmul+0x1a6>
 23fad3e:	ea41 0106 	orr.w	r1, r1, r6
 23fad42:	f095 0f00 	teq	r5, #0
 23fad46:	bf18      	it	ne
 23fad48:	4770      	bxne	lr
 23fad4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fad4e:	0052      	lsls	r2, r2, #1
 23fad50:	eb43 0303 	adc.w	r3, r3, r3
 23fad54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fad58:	bf08      	it	eq
 23fad5a:	3d01      	subeq	r5, #1
 23fad5c:	d0f7      	beq.n	23fad4e <__aeabi_dmul+0x1c6>
 23fad5e:	ea43 0306 	orr.w	r3, r3, r6
 23fad62:	4770      	bx	lr
 23fad64:	ea94 0f0c 	teq	r4, ip
 23fad68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fad6c:	bf18      	it	ne
 23fad6e:	ea95 0f0c 	teqne	r5, ip
 23fad72:	d00c      	beq.n	23fad8e <__aeabi_dmul+0x206>
 23fad74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fad78:	bf18      	it	ne
 23fad7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fad7e:	d1d1      	bne.n	23fad24 <__aeabi_dmul+0x19c>
 23fad80:	ea81 0103 	eor.w	r1, r1, r3
 23fad84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fad88:	f04f 0000 	mov.w	r0, #0
 23fad8c:	bd70      	pop	{r4, r5, r6, pc}
 23fad8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fad92:	bf06      	itte	eq
 23fad94:	4610      	moveq	r0, r2
 23fad96:	4619      	moveq	r1, r3
 23fad98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fad9c:	d019      	beq.n	23fadd2 <__aeabi_dmul+0x24a>
 23fad9e:	ea94 0f0c 	teq	r4, ip
 23fada2:	d102      	bne.n	23fadaa <__aeabi_dmul+0x222>
 23fada4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fada8:	d113      	bne.n	23fadd2 <__aeabi_dmul+0x24a>
 23fadaa:	ea95 0f0c 	teq	r5, ip
 23fadae:	d105      	bne.n	23fadbc <__aeabi_dmul+0x234>
 23fadb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fadb4:	bf1c      	itt	ne
 23fadb6:	4610      	movne	r0, r2
 23fadb8:	4619      	movne	r1, r3
 23fadba:	d10a      	bne.n	23fadd2 <__aeabi_dmul+0x24a>
 23fadbc:	ea81 0103 	eor.w	r1, r1, r3
 23fadc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fadc4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fadc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fadcc:	f04f 0000 	mov.w	r0, #0
 23fadd0:	bd70      	pop	{r4, r5, r6, pc}
 23fadd2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fadd6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fadda:	bd70      	pop	{r4, r5, r6, pc}

023faddc <__aeabi_ddiv>:
 23faddc:	b570      	push	{r4, r5, r6, lr}
 23fadde:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fade2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fade6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fadea:	bf1d      	ittte	ne
 23fadec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fadf0:	ea94 0f0c 	teqne	r4, ip
 23fadf4:	ea95 0f0c 	teqne	r5, ip
 23fadf8:	f000 f8a7 	bleq	23faf4a <__aeabi_ddiv+0x16e>
 23fadfc:	eba4 0405 	sub.w	r4, r4, r5
 23fae00:	ea81 0e03 	eor.w	lr, r1, r3
 23fae04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fae08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fae0c:	f000 8088 	beq.w	23faf20 <__aeabi_ddiv+0x144>
 23fae10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fae14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fae18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fae1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fae20:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fae24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fae28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fae2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fae30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fae34:	429d      	cmp	r5, r3
 23fae36:	bf08      	it	eq
 23fae38:	4296      	cmpeq	r6, r2
 23fae3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fae3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fae42:	d202      	bcs.n	23fae4a <__aeabi_ddiv+0x6e>
 23fae44:	085b      	lsrs	r3, r3, #1
 23fae46:	ea4f 0232 	mov.w	r2, r2, rrx
 23fae4a:	1ab6      	subs	r6, r6, r2
 23fae4c:	eb65 0503 	sbc.w	r5, r5, r3
 23fae50:	085b      	lsrs	r3, r3, #1
 23fae52:	ea4f 0232 	mov.w	r2, r2, rrx
 23fae56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fae5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fae5e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fae62:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fae66:	bf22      	ittt	cs
 23fae68:	1ab6      	subcs	r6, r6, r2
 23fae6a:	4675      	movcs	r5, lr
 23fae6c:	ea40 000c 	orrcs.w	r0, r0, ip
 23fae70:	085b      	lsrs	r3, r3, #1
 23fae72:	ea4f 0232 	mov.w	r2, r2, rrx
 23fae76:	ebb6 0e02 	subs.w	lr, r6, r2
 23fae7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fae7e:	bf22      	ittt	cs
 23fae80:	1ab6      	subcs	r6, r6, r2
 23fae82:	4675      	movcs	r5, lr
 23fae84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fae88:	085b      	lsrs	r3, r3, #1
 23fae8a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fae8e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fae92:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fae96:	bf22      	ittt	cs
 23fae98:	1ab6      	subcs	r6, r6, r2
 23fae9a:	4675      	movcs	r5, lr
 23fae9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23faea0:	085b      	lsrs	r3, r3, #1
 23faea2:	ea4f 0232 	mov.w	r2, r2, rrx
 23faea6:	ebb6 0e02 	subs.w	lr, r6, r2
 23faeaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23faeae:	bf22      	ittt	cs
 23faeb0:	1ab6      	subcs	r6, r6, r2
 23faeb2:	4675      	movcs	r5, lr
 23faeb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23faeb8:	ea55 0e06 	orrs.w	lr, r5, r6
 23faebc:	d018      	beq.n	23faef0 <__aeabi_ddiv+0x114>
 23faebe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23faec2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23faec6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23faeca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23faece:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23faed2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23faed6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23faeda:	d1c0      	bne.n	23fae5e <__aeabi_ddiv+0x82>
 23faedc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23faee0:	d10b      	bne.n	23faefa <__aeabi_ddiv+0x11e>
 23faee2:	ea41 0100 	orr.w	r1, r1, r0
 23faee6:	f04f 0000 	mov.w	r0, #0
 23faeea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23faeee:	e7b6      	b.n	23fae5e <__aeabi_ddiv+0x82>
 23faef0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23faef4:	bf04      	itt	eq
 23faef6:	4301      	orreq	r1, r0
 23faef8:	2000      	moveq	r0, #0
 23faefa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23faefe:	bf88      	it	hi
 23faf00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23faf04:	f63f aeaf 	bhi.w	23fac66 <__aeabi_dmul+0xde>
 23faf08:	ebb5 0c03 	subs.w	ip, r5, r3
 23faf0c:	bf04      	itt	eq
 23faf0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23faf12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23faf16:	f150 0000 	adcs.w	r0, r0, #0
 23faf1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23faf1e:	bd70      	pop	{r4, r5, r6, pc}
 23faf20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23faf24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23faf28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23faf2c:	bfc2      	ittt	gt
 23faf2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23faf32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23faf36:	bd70      	popgt	{r4, r5, r6, pc}
 23faf38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23faf3c:	f04f 0e00 	mov.w	lr, #0
 23faf40:	3c01      	subs	r4, #1
 23faf42:	e690      	b.n	23fac66 <__aeabi_dmul+0xde>
 23faf44:	ea45 0e06 	orr.w	lr, r5, r6
 23faf48:	e68d      	b.n	23fac66 <__aeabi_dmul+0xde>
 23faf4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23faf4e:	ea94 0f0c 	teq	r4, ip
 23faf52:	bf08      	it	eq
 23faf54:	ea95 0f0c 	teqeq	r5, ip
 23faf58:	f43f af3b 	beq.w	23fadd2 <__aeabi_dmul+0x24a>
 23faf5c:	ea94 0f0c 	teq	r4, ip
 23faf60:	d10a      	bne.n	23faf78 <__aeabi_ddiv+0x19c>
 23faf62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23faf66:	f47f af34 	bne.w	23fadd2 <__aeabi_dmul+0x24a>
 23faf6a:	ea95 0f0c 	teq	r5, ip
 23faf6e:	f47f af25 	bne.w	23fadbc <__aeabi_dmul+0x234>
 23faf72:	4610      	mov	r0, r2
 23faf74:	4619      	mov	r1, r3
 23faf76:	e72c      	b.n	23fadd2 <__aeabi_dmul+0x24a>
 23faf78:	ea95 0f0c 	teq	r5, ip
 23faf7c:	d106      	bne.n	23faf8c <__aeabi_ddiv+0x1b0>
 23faf7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23faf82:	f43f aefd 	beq.w	23fad80 <__aeabi_dmul+0x1f8>
 23faf86:	4610      	mov	r0, r2
 23faf88:	4619      	mov	r1, r3
 23faf8a:	e722      	b.n	23fadd2 <__aeabi_dmul+0x24a>
 23faf8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23faf90:	bf18      	it	ne
 23faf92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23faf96:	f47f aec5 	bne.w	23fad24 <__aeabi_dmul+0x19c>
 23faf9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23faf9e:	f47f af0d 	bne.w	23fadbc <__aeabi_dmul+0x234>
 23fafa2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fafa6:	f47f aeeb 	bne.w	23fad80 <__aeabi_dmul+0x1f8>
 23fafaa:	e712      	b.n	23fadd2 <__aeabi_dmul+0x24a>

023fafac <__gedf2>:
 23fafac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fafb0:	e006      	b.n	23fafc0 <__cmpdf2+0x4>
 23fafb2:	bf00      	nop

023fafb4 <__ledf2>:
 23fafb4:	f04f 0c01 	mov.w	ip, #1
 23fafb8:	e002      	b.n	23fafc0 <__cmpdf2+0x4>
 23fafba:	bf00      	nop

023fafbc <__cmpdf2>:
 23fafbc:	f04f 0c01 	mov.w	ip, #1
 23fafc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fafc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fafc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fafcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fafd0:	bf18      	it	ne
 23fafd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fafd6:	d01b      	beq.n	23fb010 <__cmpdf2+0x54>
 23fafd8:	b001      	add	sp, #4
 23fafda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fafde:	bf0c      	ite	eq
 23fafe0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fafe4:	ea91 0f03 	teqne	r1, r3
 23fafe8:	bf02      	ittt	eq
 23fafea:	ea90 0f02 	teqeq	r0, r2
 23fafee:	2000      	moveq	r0, #0
 23faff0:	4770      	bxeq	lr
 23faff2:	f110 0f00 	cmn.w	r0, #0
 23faff6:	ea91 0f03 	teq	r1, r3
 23faffa:	bf58      	it	pl
 23faffc:	4299      	cmppl	r1, r3
 23faffe:	bf08      	it	eq
 23fb000:	4290      	cmpeq	r0, r2
 23fb002:	bf2c      	ite	cs
 23fb004:	17d8      	asrcs	r0, r3, #31
 23fb006:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fb00a:	f040 0001 	orr.w	r0, r0, #1
 23fb00e:	4770      	bx	lr
 23fb010:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb014:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb018:	d102      	bne.n	23fb020 <__cmpdf2+0x64>
 23fb01a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb01e:	d107      	bne.n	23fb030 <__cmpdf2+0x74>
 23fb020:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb028:	d1d6      	bne.n	23fafd8 <__cmpdf2+0x1c>
 23fb02a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb02e:	d0d3      	beq.n	23fafd8 <__cmpdf2+0x1c>
 23fb030:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fb034:	4770      	bx	lr
 23fb036:	bf00      	nop

023fb038 <__aeabi_cdrcmple>:
 23fb038:	4684      	mov	ip, r0
 23fb03a:	4610      	mov	r0, r2
 23fb03c:	4662      	mov	r2, ip
 23fb03e:	468c      	mov	ip, r1
 23fb040:	4619      	mov	r1, r3
 23fb042:	4663      	mov	r3, ip
 23fb044:	e000      	b.n	23fb048 <__aeabi_cdcmpeq>
 23fb046:	bf00      	nop

023fb048 <__aeabi_cdcmpeq>:
 23fb048:	b501      	push	{r0, lr}
 23fb04a:	f7ff ffb7 	bl	23fafbc <__cmpdf2>
 23fb04e:	2800      	cmp	r0, #0
 23fb050:	bf48      	it	mi
 23fb052:	f110 0f00 	cmnmi.w	r0, #0
 23fb056:	bd01      	pop	{r0, pc}

023fb058 <__aeabi_dcmpeq>:
 23fb058:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb05c:	f7ff fff4 	bl	23fb048 <__aeabi_cdcmpeq>
 23fb060:	bf0c      	ite	eq
 23fb062:	2001      	moveq	r0, #1
 23fb064:	2000      	movne	r0, #0
 23fb066:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb06a:	bf00      	nop

023fb06c <__aeabi_dcmplt>:
 23fb06c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb070:	f7ff ffea 	bl	23fb048 <__aeabi_cdcmpeq>
 23fb074:	bf34      	ite	cc
 23fb076:	2001      	movcc	r0, #1
 23fb078:	2000      	movcs	r0, #0
 23fb07a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb07e:	bf00      	nop

023fb080 <__aeabi_dcmple>:
 23fb080:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb084:	f7ff ffe0 	bl	23fb048 <__aeabi_cdcmpeq>
 23fb088:	bf94      	ite	ls
 23fb08a:	2001      	movls	r0, #1
 23fb08c:	2000      	movhi	r0, #0
 23fb08e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb092:	bf00      	nop

023fb094 <__aeabi_dcmpge>:
 23fb094:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb098:	f7ff ffce 	bl	23fb038 <__aeabi_cdrcmple>
 23fb09c:	bf94      	ite	ls
 23fb09e:	2001      	movls	r0, #1
 23fb0a0:	2000      	movhi	r0, #0
 23fb0a2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb0a6:	bf00      	nop

023fb0a8 <__aeabi_dcmpgt>:
 23fb0a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb0ac:	f7ff ffc4 	bl	23fb038 <__aeabi_cdrcmple>
 23fb0b0:	bf34      	ite	cc
 23fb0b2:	2001      	movcc	r0, #1
 23fb0b4:	2000      	movcs	r0, #0
 23fb0b6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb0ba:	bf00      	nop

023fb0bc <__aeabi_dcmpun>:
 23fb0bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb0c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb0c4:	d102      	bne.n	23fb0cc <__aeabi_dcmpun+0x10>
 23fb0c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb0ca:	d10a      	bne.n	23fb0e2 <__aeabi_dcmpun+0x26>
 23fb0cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb0d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb0d4:	d102      	bne.n	23fb0dc <__aeabi_dcmpun+0x20>
 23fb0d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb0da:	d102      	bne.n	23fb0e2 <__aeabi_dcmpun+0x26>
 23fb0dc:	f04f 0000 	mov.w	r0, #0
 23fb0e0:	4770      	bx	lr
 23fb0e2:	f04f 0001 	mov.w	r0, #1
 23fb0e6:	4770      	bx	lr

023fb0e8 <__aeabi_d2f>:
 23fb0e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb0ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fb0f0:	bf24      	itt	cs
 23fb0f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fb0f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fb0fa:	d90d      	bls.n	23fb118 <__aeabi_d2f+0x30>
 23fb0fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fb100:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fb104:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fb108:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fb10c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fb110:	bf08      	it	eq
 23fb112:	f020 0001 	biceq.w	r0, r0, #1
 23fb116:	4770      	bx	lr
 23fb118:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fb11c:	d121      	bne.n	23fb162 <__aeabi_d2f+0x7a>
 23fb11e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fb122:	bfbc      	itt	lt
 23fb124:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fb128:	4770      	bxlt	lr
 23fb12a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb12e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fb132:	f1c2 0218 	rsb	r2, r2, #24
 23fb136:	f1c2 0c20 	rsb	ip, r2, #32
 23fb13a:	fa10 f30c 	lsls.w	r3, r0, ip
 23fb13e:	fa20 f002 	lsr.w	r0, r0, r2
 23fb142:	bf18      	it	ne
 23fb144:	f040 0001 	orrne.w	r0, r0, #1
 23fb148:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb14c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fb150:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fb154:	ea40 000c 	orr.w	r0, r0, ip
 23fb158:	fa23 f302 	lsr.w	r3, r3, r2
 23fb15c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fb160:	e7cc      	b.n	23fb0fc <__aeabi_d2f+0x14>
 23fb162:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fb166:	d107      	bne.n	23fb178 <__aeabi_d2f+0x90>
 23fb168:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fb16c:	bf1e      	ittt	ne
 23fb16e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fb172:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fb176:	4770      	bxne	lr
 23fb178:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fb17c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fb180:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fb184:	4770      	bx	lr
 23fb186:	bf00      	nop

023fb188 <strcmp>:
 23fb188:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb18c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb190:	2a01      	cmp	r2, #1
 23fb192:	bf28      	it	cs
 23fb194:	429a      	cmpcs	r2, r3
 23fb196:	d0f7      	beq.n	23fb188 <strcmp>
 23fb198:	1ad0      	subs	r0, r2, r3
 23fb19a:	4770      	bx	lr

023fb19c <strlen>:
 23fb19c:	4603      	mov	r3, r0
 23fb19e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb1a2:	2a00      	cmp	r2, #0
 23fb1a4:	d1fb      	bne.n	23fb19e <strlen+0x2>
 23fb1a6:	1a18      	subs	r0, r3, r0
 23fb1a8:	3801      	subs	r0, #1
 23fb1aa:	4770      	bx	lr

023fb1ac <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb1ac:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb1ae:	f002 fe27 	bl	23fde00 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb1b2:	2500      	movs	r5, #0
 23fb1b4:	4e05      	ldr	r6, [pc, #20]	; (23fb1cc <module_user_init+0x20>)
 23fb1b6:	4c06      	ldr	r4, [pc, #24]	; (23fb1d0 <module_user_init+0x24>)
 23fb1b8:	1ba4      	subs	r4, r4, r6
 23fb1ba:	08a4      	lsrs	r4, r4, #2
 23fb1bc:	42ac      	cmp	r4, r5
 23fb1be:	d100      	bne.n	23fb1c2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb1c0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb1c2:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb1c6:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb1c8:	3501      	adds	r5, #1
 23fb1ca:	e7f7      	b.n	23fb1bc <module_user_init+0x10>
 23fb1cc:	023fffcc 	.word	0x023fffcc
 23fb1d0:	023ffff0 	.word	0x023ffff0

023fb1d4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb1d4:	f000 b86e 	b.w	23fb2b4 <setup>

023fb1d8 <module_user_loop>:
}

void module_user_loop() {
 23fb1d8:	b508      	push	{r3, lr}
    loop();
 23fb1da:	f000 f8a5 	bl	23fb328 <loop>
    _post_loop();
}
 23fb1de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb1e2:	f002 bdc5 	b.w	23fdd70 <_post_loop>

023fb1e6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb1e6:	f000 bf0b 	b.w	23fc000 <malloc>

023fb1ea <_Znaj>:
 23fb1ea:	f000 bf09 	b.w	23fc000 <malloc>

023fb1ee <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb1ee:	f000 bf15 	b.w	23fc01c <free>
	...

023fb1f4 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb1f4:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb1f6:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb1f8:	4a02      	ldr	r2, [pc, #8]	; (23fb204 <__cxa_pure_virtual+0x10>)
 23fb1fa:	4903      	ldr	r1, [pc, #12]	; (23fb208 <__cxa_pure_virtual+0x14>)
 23fb1fc:	f000 fdcc 	bl	23fbd98 <panic_>
  while (1);
 23fb200:	e7fe      	b.n	23fb200 <__cxa_pure_virtual+0xc>
 23fb202:	bf00      	nop
 23fb204:	023fb901 	.word	0x023fb901
 23fb208:	023ffaf8 	.word	0x023ffaf8

023fb20c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb20c:	7800      	ldrb	r0, [r0, #0]
 23fb20e:	fab0 f080 	clz	r0, r0
 23fb212:	0940      	lsrs	r0, r0, #5
 23fb214:	4770      	bx	lr

023fb216 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb216:	2301      	movs	r3, #1
 23fb218:	7003      	strb	r3, [r0, #0]
 23fb21a:	4770      	bx	lr

023fb21c <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fb21c:	4770      	bx	lr
	...

023fb220 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb220:	b510      	push	{r4, lr}
 23fb222:	4604      	mov	r4, r0
 23fb224:	4b09      	ldr	r3, [pc, #36]	; (23fb24c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb226:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb228:	f001 fbf4 	bl	23fca14 <_ZN5spark10LogManager8instanceEv>
 23fb22c:	4621      	mov	r1, r4
 23fb22e:	f001 fe2b 	bl	23fce88 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb232:	f002 fd0d 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fb236:	f002 fcfd 	bl	23fdc34 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb23a:	4620      	mov	r0, r4
 23fb23c:	4b04      	ldr	r3, [pc, #16]	; (23fb250 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb23e:	f840 3b04 	str.w	r3, [r0], #4
 23fb242:	f001 fcbd 	bl	23fcbc0 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb246:	4620      	mov	r0, r4
 23fb248:	bd10      	pop	{r4, pc}
 23fb24a:	bf00      	nop
 23fb24c:	023ffb58 	.word	0x023ffb58
 23fb250:	023ffb40 	.word	0x023ffb40

023fb254 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb254:	b510      	push	{r4, lr}
 23fb256:	4604      	mov	r4, r0
    }
 23fb258:	f7ff ffe2 	bl	23fb220 <_ZN5spark16SerialLogHandlerD1Ev>
 23fb25c:	4620      	mov	r0, r4
 23fb25e:	2124      	movs	r1, #36	; 0x24
 23fb260:	f7ff ffc5 	bl	23fb1ee <_ZdlPvj>
 23fb264:	4620      	mov	r0, r4
 23fb266:	bd10      	pop	{r4, pc}

023fb268 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fb268:	b40e      	push	{r1, r2, r3}
 23fb26a:	b503      	push	{r0, r1, lr}
 23fb26c:	ab03      	add	r3, sp, #12
 23fb26e:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 23fb272:	2101      	movs	r1, #1
        va_start(args, format);
 23fb274:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 23fb276:	f002 fb08 	bl	23fd88a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fb27a:	b002      	add	sp, #8
 23fb27c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb280:	b003      	add	sp, #12
 23fb282:	4770      	bx	lr

023fb284 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fb284:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb286:	f04f 0c20 	mov.w	ip, #32
 23fb28a:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb28c:	b500      	push	{lr}
 23fb28e:	b08c      	sub	sp, #48	; 0x30
 23fb290:	aa0d      	add	r2, sp, #52	; 0x34
 23fb292:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fb296:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb29a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fb29e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb2a0:	6801      	ldr	r1, [r0, #0]
 23fb2a2:	aa04      	add	r2, sp, #16
 23fb2a4:	201e      	movs	r0, #30
 23fb2a6:	f000 fd85 	bl	23fbdb4 <log_message_v>
}
 23fb2aa:	b00c      	add	sp, #48	; 0x30
 23fb2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb2b0:	b003      	add	sp, #12
 23fb2b2:	4770      	bx	lr

023fb2b4 <setup>:
SerialLogHandler logHandler;

#include "ADXL362.h"
ADXL362 adxl362;

void setup() {
 23fb2b4:	b538      	push	{r3, r4, r5, lr}
  //DEBUGGING
  Serial.begin(9600);
 23fb2b6:	f002 fccb 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fb2ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb2be:	f002 fcb5 	bl	23fdc2c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fb2c2:	2000      	movs	r0, #0
 23fb2c4:	f000 fb38 	bl	23fb938 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fb2c8:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23fb2cc:	4604      	mov	r4, r0
 23fb2ce:	2000      	movs	r0, #0
 23fb2d0:	f000 fb32 	bl	23fb938 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fb2d4:	1b00      	subs	r0, r0, r4
 23fb2d6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fb2da:	42a8      	cmp	r0, r5
 23fb2dc:	f171 0300 	sbcs.w	r3, r1, #0
 23fb2e0:	d207      	bcs.n	23fb2f2 <setup+0x3e>
  waitFor(Serial.isConnected, 15000);
 23fb2e2:	f002 fcb5 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fb2e6:	f002 fca8 	bl	23fdc3a <_ZN9USBSerial11isConnectedEv>
 23fb2ea:	b910      	cbnz	r0, 23fb2f2 <setup+0x3e>
            spark_process();
 23fb2ec:	f000 fdc4 	bl	23fbe78 <spark_process>
        while (_while() && !_condition()) {
 23fb2f0:	e7ed      	b.n	23fb2ce <setup+0x1a>
 23fb2f2:	f002 fcad 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fb2f6:	f002 fca0 	bl	23fdc3a <_ZN9USBSerial11isConnectedEv>
  Log.info("Serial connected or timed out!");
 23fb2fa:	4908      	ldr	r1, [pc, #32]	; (23fb31c <setup+0x68>)
 23fb2fc:	4808      	ldr	r0, [pc, #32]	; (23fb320 <setup+0x6c>)
 23fb2fe:	f7ff ffc1 	bl	23fb284 <_ZNK5spark6Logger4infoEPKcz>

  adxl362.begin();
 23fb302:	4808      	ldr	r0, [pc, #32]	; (23fb324 <setup+0x70>)
 23fb304:	f000 fa96 	bl	23fb834 <_ZN7ADXL3625beginEv>
  adxl362.beginMeasure(); //NECESSARY - starts measurement
 23fb308:	4806      	ldr	r0, [pc, #24]	; (23fb324 <setup+0x70>)
 23fb30a:	f000 fa1f 	bl	23fb74c <_ZN7ADXL36212beginMeasureEv>

  adxl362.setRange(XL362_FILTER_FLAG_8G); //sets range to 8G - other options are 2G and 4G
}
 23fb30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  adxl362.setRange(XL362_FILTER_FLAG_8G); //sets range to 8G - other options are 2G and 4G
 23fb312:	2180      	movs	r1, #128	; 0x80
 23fb314:	4803      	ldr	r0, [pc, #12]	; (23fb324 <setup+0x70>)
 23fb316:	f000 ba2b 	b.w	23fb770 <_ZN7ADXL3628setRangeEh>
 23fb31a:	bf00      	nop
 23fb31c:	023ffb0d 	.word	0x023ffb0d
 23fb320:	1007ae70 	.word	0x1007ae70
 23fb324:	1007ae24 	.word	0x1007ae24

023fb328 <loop>:


void loop() {
 23fb328:	b510      	push	{r4, lr}
 23fb32a:	ed2d 8b02 	vpush	{d8}
 23fb32e:	b08a      	sub	sp, #40	; 0x28
  //float time;
  int x, y, z;
  float r, p, t;

  adxl362.readXYZmg(x, y, z); //burst read of axes - REQUIRED to guarantee all measurements correspond to same sample time 
 23fb330:	ab06      	add	r3, sp, #24
 23fb332:	aa05      	add	r2, sp, #20
 23fb334:	a904      	add	r1, sp, #16
 23fb336:	4817      	ldr	r0, [pc, #92]	; (23fb394 <loop+0x6c>)
 23fb338:	f000 fa36 	bl	23fb7a8 <_ZN7ADXL3629readXYZmgERiS0_S0_>
  //adxl362.readXYZTData(x, y, z, time); //burst read of all registers - REQUIRED to guarantee all measurements correspond to same sample time
  adxl362.XYZmgtoRPT(x, y, z, r, p, t); //converts raw data to roll, pitch, tilt
 23fb33c:	ab09      	add	r3, sp, #36	; 0x24
 23fb33e:	9302      	str	r3, [sp, #8]
 23fb340:	ab08      	add	r3, sp, #32
 23fb342:	9301      	str	r3, [sp, #4]
 23fb344:	ab07      	add	r3, sp, #28
 23fb346:	9904      	ldr	r1, [sp, #16]
 23fb348:	9300      	str	r3, [sp, #0]
 23fb34a:	4812      	ldr	r0, [pc, #72]	; (23fb394 <loop+0x6c>)
 23fb34c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 23fb350:	f000 f8fe 	bl	23fb550 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>

  int roll = (int)r;
  int pitch = (int)p;
  int tilt = (int)t;
 23fb354:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
  int roll = (int)r;
 23fb358:	ed9d 8a07 	vldr	s16, [sp, #28]
  int tilt = (int)t;
 23fb35c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  int pitch = (int)p;
 23fb360:	eddd 8a08 	vldr	s17, [sp, #32]
  int tilt = (int)t;
 23fb364:	ee17 4a90 	vmov	r4, s15
  int roll = (int)r;
 23fb368:	eebd 8ac8 	vcvt.s32.f32	s16, s16
  int pitch = (int)p;
 23fb36c:	eefd 8ae8 	vcvt.s32.f32	s17, s17

  //Log.info("x: %d, y: %d, z: %d, r: %d, p: %d, t: %d", x, y, z, roll, pitch, tilt);
  //Serial.printlnf("%d, %d, %d, %d, %d, %d", x, y, z, roll, pitch, tilt); //DEBUGGING - Use Arduino Serial Plotter
  Serial.printlnf("%d, %d, %d", roll, pitch, tilt); //DEBUGGING - Use Arduino Serial Plotter
 23fb370:	f002 fc6e 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fb374:	ee18 3a90 	vmov	r3, s17
 23fb378:	ee18 2a10 	vmov	r2, s16
 23fb37c:	4906      	ldr	r1, [pc, #24]	; (23fb398 <loop+0x70>)
 23fb37e:	9400      	str	r4, [sp, #0]
 23fb380:	f7ff ff72 	bl	23fb268 <_ZN5Print8printlnfEPKcz>
  delay(1);
 23fb384:	2001      	movs	r0, #1
 23fb386:	f000 fe9d 	bl	23fc0c4 <delay>
 23fb38a:	b00a      	add	sp, #40	; 0x28
 23fb38c:	ecbd 8b02 	vpop	{d8}
 23fb390:	bd10      	pop	{r4, pc}
 23fb392:	bf00      	nop
 23fb394:	1007ae24 	.word	0x1007ae24
 23fb398:	023ffb2c 	.word	0x023ffb2c

023fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb39c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb39e:	2614      	movs	r6, #20
 23fb3a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb3a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb3a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb3aa:	42ae      	cmp	r6, r5
 23fb3ac:	d004      	beq.n	23fb3b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fb3ae:	4628      	mov	r0, r5
 23fb3b0:	f002 fae0 	bl	23fd974 <_ZN6StringD1Ev>
 23fb3b4:	3514      	adds	r5, #20
 23fb3b6:	e7f8      	b.n	23fb3aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb3b8:	6820      	ldr	r0, [r4, #0]
 23fb3ba:	f000 fe2f 	bl	23fc01c <free>
    AllocatorT::free(data_);
}
 23fb3be:	4620      	mov	r0, r4
 23fb3c0:	bd70      	pop	{r4, r5, r6, pc}

023fb3c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fb3c2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb3c6:	4604      	mov	r4, r0
 23fb3c8:	460d      	mov	r5, r1
 23fb3ca:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb3cc:	d916      	bls.n	23fb3fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fb3ce:	4290      	cmp	r0, r2
 23fb3d0:	d215      	bcs.n	23fb3fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fb3d2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb3d6:	1a75      	subs	r5, r6, r1
 23fb3d8:	f1a1 0714 	sub.w	r7, r1, #20
 23fb3dc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb3de:	42b7      	cmp	r7, r6
 23fb3e0:	d01c      	beq.n	23fb41c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fb3e2:	b12c      	cbz	r4, 23fb3f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fb3e4:	4631      	mov	r1, r6
 23fb3e6:	4620      	mov	r0, r4
 23fb3e8:	f002 fb2d 	bl	23fda46 <_ZN6StringC1EOS_>
 23fb3ec:	7c33      	ldrb	r3, [r6, #16]
 23fb3ee:	7423      	strb	r3, [r4, #16]
 23fb3f0:	4630      	mov	r0, r6
 23fb3f2:	f002 fabf 	bl	23fd974 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb3f6:	3e14      	subs	r6, #20
 23fb3f8:	3c14      	subs	r4, #20
 23fb3fa:	e7f0      	b.n	23fb3de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fb3fc:	d00e      	beq.n	23fb41c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fb3fe:	42b5      	cmp	r5, r6
 23fb400:	d00c      	beq.n	23fb41c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fb402:	b12c      	cbz	r4, 23fb410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fb404:	4629      	mov	r1, r5
 23fb406:	4620      	mov	r0, r4
 23fb408:	f002 fb1d 	bl	23fda46 <_ZN6StringC1EOS_>
 23fb40c:	7c2b      	ldrb	r3, [r5, #16]
 23fb40e:	7423      	strb	r3, [r4, #16]
 23fb410:	4628      	mov	r0, r5
 23fb412:	f002 faaf 	bl	23fd974 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb416:	3514      	adds	r5, #20
 23fb418:	3414      	adds	r4, #20
 23fb41a:	e7f0      	b.n	23fb3fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fb41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb41e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fb424:	e9c0 3300 	strd	r3, r3, [r0]
 23fb428:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb42a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb42c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb42e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb430:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb432:	dd24      	ble.n	23fb47e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fb434:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fb438:	fb08 f007 	mul.w	r0, r8, r7
 23fb43c:	f000 fde0 	bl	23fc000 <malloc>
            if (!d) {
 23fb440:	4605      	mov	r5, r0
 23fb442:	b1e0      	cbz	r0, 23fb47e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fb444:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fb448:	fb08 1202 	mla	r2, r8, r2, r1
 23fb44c:	f7ff ffb9 	bl	23fb3c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fb450:	6820      	ldr	r0, [r4, #0]
 23fb452:	f000 fde3 	bl	23fc01c <free>
        data_ = d;
 23fb456:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fb458:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb45a:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fb45e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fb462:	45b8      	cmp	r8, r7
 23fb464:	d009      	beq.n	23fb47a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fb466:	4639      	mov	r1, r7
 23fb468:	4628      	mov	r0, r5
 23fb46a:	f002 fb06 	bl	23fda7a <_ZN6StringC1ERKS_>
 23fb46e:	7c3b      	ldrb	r3, [r7, #16]
 23fb470:	3514      	adds	r5, #20
 23fb472:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fb476:	3714      	adds	r7, #20
 23fb478:	e7f3      	b.n	23fb462 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fb47a:	6873      	ldr	r3, [r6, #4]
 23fb47c:	6063      	str	r3, [r4, #4]
}
 23fb47e:	4620      	mov	r0, r4
 23fb480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb484 <_GLOBAL__sub_I_logHandler>:
        capacity_(0) {
 23fb484:	2300      	movs	r3, #0
 23fb486:	b570      	push	{r4, r5, r6, lr}
 23fb488:	b08c      	sub	sp, #48	; 0x30
 23fb48a:	e9cd 3300 	strd	r3, r3, [sp]
 23fb48e:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fb490:	f002 fbde 	bl	23fdc50 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fb494:	4c1c      	ldr	r4, [pc, #112]	; (23fb508 <_GLOBAL__sub_I_logHandler+0x84>)
 23fb496:	4605      	mov	r5, r0
 23fb498:	4626      	mov	r6, r4
 23fb49a:	4669      	mov	r1, sp
 23fb49c:	a803      	add	r0, sp, #12
 23fb49e:	f7ff ffbe 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fb4a2:	a903      	add	r1, sp, #12
 23fb4a4:	a806      	add	r0, sp, #24
 23fb4a6:	f7ff ffba 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb4aa:	4b18      	ldr	r3, [pc, #96]	; (23fb50c <_GLOBAL__sub_I_logHandler+0x88>)
 23fb4ac:	a906      	add	r1, sp, #24
 23fb4ae:	f846 3b04 	str.w	r3, [r6], #4
 23fb4b2:	a809      	add	r0, sp, #36	; 0x24
 23fb4b4:	f7ff ffb3 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb4b8:	aa09      	add	r2, sp, #36	; 0x24
 23fb4ba:	211e      	movs	r1, #30
 23fb4bc:	4630      	mov	r0, r6
 23fb4be:	f001 fdc5 	bl	23fd04c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb4c2:	a809      	add	r0, sp, #36	; 0x24
 23fb4c4:	f7ff ff6a 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb4c8:	a806      	add	r0, sp, #24
 23fb4ca:	f7ff ff67 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb4ce:	4b10      	ldr	r3, [pc, #64]	; (23fb510 <_GLOBAL__sub_I_logHandler+0x8c>)
 23fb4d0:	a803      	add	r0, sp, #12
 23fb4d2:	6023      	str	r3, [r4, #0]
 23fb4d4:	6225      	str	r5, [r4, #32]
 23fb4d6:	f7ff ff61 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb4da:	4b0e      	ldr	r3, [pc, #56]	; (23fb514 <_GLOBAL__sub_I_logHandler+0x90>)
 23fb4dc:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fb4de:	f002 fbb7 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fb4e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb4e6:	f002 fba1 	bl	23fdc2c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fb4ea:	f001 fa93 	bl	23fca14 <_ZN5spark10LogManager8instanceEv>
 23fb4ee:	4621      	mov	r1, r4
 23fb4f0:	f001 fc84 	bl	23fcdfc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 23fb4f4:	4668      	mov	r0, sp
 23fb4f6:	f7ff ff51 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
ADXL362 adxl362;
 23fb4fa:	2112      	movs	r1, #18
 23fb4fc:	4806      	ldr	r0, [pc, #24]	; (23fb518 <_GLOBAL__sub_I_logHandler+0x94>)
 23fb4fe:	b00c      	add	sp, #48	; 0x30
 23fb500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ADXL362 adxl362;
 23fb504:	f000 b80a 	b.w	23fb51c <_ZN7ADXL362C1Ei>
 23fb508:	1007ae28 	.word	0x1007ae28
 23fb50c:	023ffb40 	.word	0x023ffb40
 23fb510:	023ffc7c 	.word	0x023ffc7c
 23fb514:	023ffb58 	.word	0x023ffb58
 23fb518:	1007ae24 	.word	0x1007ae24

023fb51c <_ZN7ADXL362C1Ei>:
#define XL362_FILTER_CTL    0x2C
#define XL362_POWER_CTL     0x2D
#define XL362_SELF_TEST     0x2E


ADXL362::ADXL362(int slaveSelectPin) : slaveSelectPin(uint16_t(slaveSelectPin)) {}
 23fb51c:	8041      	strh	r1, [r0, #2]
 23fb51e:	4770      	bx	lr

023fb520 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 23fb520:	b510      	push	{r4, lr}
 23fb522:	ed2d 8b02 	vpush	{d8}
 23fb526:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23fb52a:	f7ff fac3 	bl	23faab4 <__aeabi_i2d>
 23fb52e:	ec41 0b18 	vmov	d8, r0, r1
 23fb532:	4620      	mov	r0, r4
 23fb534:	f7ff fad0 	bl	23faad8 <__aeabi_f2d>
 23fb538:	eeb0 1a48 	vmov.f32	s2, s16
 23fb53c:	eef0 1a68 	vmov.f32	s3, s17
    }
 23fb540:	ecbd 8b02 	vpop	{d8}
 23fb544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
 23fb548:	ec41 0b10 	vmov	d0, r0, r1
 23fb54c:	f002 bdf8 	b.w	23fe140 <pow>

023fb550 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>:
  output.println("\tz = "); output.print(Z);
#endif
}

void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23fb550:	ee07 1a90 	vmov	s15, r1
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23fb554:	b530      	push	{r4, r5, lr}
 23fb556:	ed2d 8b04 	vpush	{d8-d9}
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23fb55a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 23fb55e:	ee07 2a90 	vmov	s15, r2
 23fb562:	eef8 8ae7 	vcvt.f32.s32	s17, s15
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23fb566:	ee08 3a10 	vmov	s16, r3
 23fb56a:	b083      	sub	sp, #12
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23fb56c:	2002      	movs	r0, #2
 23fb56e:	eeb0 0a68 	vmov.f32	s0, s17
 23fb572:	f7ff ffd5 	bl	23fb520 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb576:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23fb57a:	ec55 4b10 	vmov	r4, r5, d0
 23fb57e:	2002      	movs	r0, #2
 23fb580:	eeb0 0a48 	vmov.f32	s0, s16
 23fb584:	f7ff ffcc 	bl	23fb520 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb588:	4620      	mov	r0, r4
 23fb58a:	ec53 2b10 	vmov	r2, r3, d0
 23fb58e:	4629      	mov	r1, r5
 23fb590:	f7ff f944 	bl	23fa81c <__adddf3>
 23fb594:	ec41 0b10 	vmov	d0, r0, r1
 23fb598:	f002 fea4 	bl	23fe2e4 <sqrt>
      return atan2(__type(__y), __type(__x));
 23fb59c:	ee19 0a10 	vmov	r0, s18
 23fb5a0:	ed8d 0b00 	vstr	d0, [sp]
 23fb5a4:	f7ff fa98 	bl	23faad8 <__aeabi_f2d>
 23fb5a8:	ed9d 1b00 	vldr	d1, [sp]
 23fb5ac:	ec41 0b10 	vmov	d0, r0, r1
 23fb5b0:	f002 fdc4 	bl	23fe13c <atan2>
 23fb5b4:	ec51 0b10 	vmov	r0, r1, d0
 23fb5b8:	f7ff fd96 	bl	23fb0e8 <__aeabi_d2f>
  Rho *= 180/M_PI;
 23fb5bc:	f7ff fa8c 	bl	23faad8 <__aeabi_f2d>
 23fb5c0:	a337      	add	r3, pc, #220	; (adr r3, 23fb6a0 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fb5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb5c6:	f7ff fadf 	bl	23fab88 <__aeabi_dmul>
 23fb5ca:	f7ff fd8d 	bl	23fb0e8 <__aeabi_d2f>
 23fb5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23fb5d0:	eeb0 0a49 	vmov.f32	s0, s18
  Rho *= 180/M_PI;
 23fb5d4:	6018      	str	r0, [r3, #0]
  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23fb5d6:	2002      	movs	r0, #2
 23fb5d8:	f7ff ffa2 	bl	23fb520 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb5dc:	2002      	movs	r0, #2
 23fb5de:	ec55 4b10 	vmov	r4, r5, d0
 23fb5e2:	eeb0 0a48 	vmov.f32	s0, s16
 23fb5e6:	f7ff ff9b 	bl	23fb520 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb5ea:	4620      	mov	r0, r4
 23fb5ec:	ec53 2b10 	vmov	r2, r3, d0
 23fb5f0:	4629      	mov	r1, r5
 23fb5f2:	f7ff f913 	bl	23fa81c <__adddf3>
 23fb5f6:	ec41 0b10 	vmov	d0, r0, r1
 23fb5fa:	f002 fe73 	bl	23fe2e4 <sqrt>
 23fb5fe:	ee18 0a90 	vmov	r0, s17
 23fb602:	ed8d 0b00 	vstr	d0, [sp]
 23fb606:	f7ff fa67 	bl	23faad8 <__aeabi_f2d>
 23fb60a:	ed9d 1b00 	vldr	d1, [sp]
 23fb60e:	ec41 0b10 	vmov	d0, r0, r1
 23fb612:	f002 fd93 	bl	23fe13c <atan2>
 23fb616:	ec51 0b10 	vmov	r0, r1, d0
 23fb61a:	f7ff fd65 	bl	23fb0e8 <__aeabi_d2f>
  Phi *= 180/M_PI;
 23fb61e:	f7ff fa5b 	bl	23faad8 <__aeabi_f2d>
 23fb622:	a31f      	add	r3, pc, #124	; (adr r3, 23fb6a0 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fb624:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb628:	f7ff faae 	bl	23fab88 <__aeabi_dmul>
 23fb62c:	f7ff fd5c 	bl	23fb0e8 <__aeabi_d2f>
 23fb630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23fb632:	eeb0 0a49 	vmov.f32	s0, s18
  Phi *= 180/M_PI;
 23fb636:	6018      	str	r0, [r3, #0]
  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23fb638:	2002      	movs	r0, #2
 23fb63a:	f7ff ff71 	bl	23fb520 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb63e:	2002      	movs	r0, #2
 23fb640:	ec55 4b10 	vmov	r4, r5, d0
 23fb644:	eeb0 0a68 	vmov.f32	s0, s17
 23fb648:	f7ff ff6a 	bl	23fb520 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23fb64c:	4620      	mov	r0, r4
 23fb64e:	ec53 2b10 	vmov	r2, r3, d0
 23fb652:	4629      	mov	r1, r5
 23fb654:	f7ff f8e2 	bl	23fa81c <__adddf3>
 23fb658:	ec41 0b10 	vmov	d0, r0, r1
 23fb65c:	f002 fe42 	bl	23fe2e4 <sqrt>
 23fb660:	ee18 0a10 	vmov	r0, s16
 23fb664:	ed8d 0b00 	vstr	d0, [sp]
 23fb668:	f7ff fa36 	bl	23faad8 <__aeabi_f2d>
 23fb66c:	ed9d 0b00 	vldr	d0, [sp]
 23fb670:	ec41 0b11 	vmov	d1, r0, r1
 23fb674:	f002 fd62 	bl	23fe13c <atan2>
 23fb678:	ec51 0b10 	vmov	r0, r1, d0
 23fb67c:	f7ff fd34 	bl	23fb0e8 <__aeabi_d2f>
  Theta *= 180/M_PI;
 23fb680:	f7ff fa2a 	bl	23faad8 <__aeabi_f2d>
 23fb684:	a306      	add	r3, pc, #24	; (adr r3, 23fb6a0 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23fb686:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb68a:	f7ff fa7d 	bl	23fab88 <__aeabi_dmul>
 23fb68e:	f7ff fd2b 	bl	23fb0e8 <__aeabi_d2f>
 23fb692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fb694:	6018      	str	r0, [r3, #0]
}
 23fb696:	b003      	add	sp, #12
 23fb698:	ecbd 8b04 	vpop	{d8-d9}
 23fb69c:	bd30      	pop	{r4, r5, pc}
 23fb69e:	bf00      	nop
 23fb6a0:	1a63c1f8 	.word	0x1a63c1f8
 23fb6a4:	404ca5dc 	.word	0x404ca5dc

023fb6a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fb6a8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fb6aa:	4c0a      	ldr	r4, [pc, #40]	; (23fb6d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fb6ac:	e8d4 1f8f 	ldab	r1, [r4]
 23fb6b0:	f011 0101 	ands.w	r1, r1, #1
 23fb6b4:	d10b      	bne.n	23fb6ce <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb6b6:	4620      	mov	r0, r4
 23fb6b8:	9101      	str	r1, [sp, #4]
 23fb6ba:	f7ff fda7 	bl	23fb20c <__cxa_guard_acquire>
 23fb6be:	9901      	ldr	r1, [sp, #4]
 23fb6c0:	b128      	cbz	r0, 23fb6ce <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb6c2:	4805      	ldr	r0, [pc, #20]	; (23fb6d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb6c4:	f002 f91e 	bl	23fd904 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb6c8:	4620      	mov	r0, r4
 23fb6ca:	f7ff fda4 	bl	23fb216 <__cxa_guard_release>
        return instance;
    }
 23fb6ce:	4802      	ldr	r0, [pc, #8]	; (23fb6d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb6d0:	b002      	add	sp, #8
 23fb6d2:	bd10      	pop	{r4, pc}
 23fb6d4:	1007ae4c 	.word	0x1007ae4c
 23fb6d8:	1007ae50 	.word	0x1007ae50

023fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 23fb6dc:	b507      	push	{r0, r1, r2, lr}
 23fb6de:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
 23fb6e0:	f7ff ffe2 	bl	23fb6a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb6e4:	9901      	ldr	r1, [sp, #4]
    }
 23fb6e6:	b003      	add	sp, #12
 23fb6e8:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
 23fb6ec:	f002 b93c 	b.w	23fd968 <_ZN8SPIClass8transferEh>

023fb6f0 <_ZN7ADXL36219SPIwriteOneRegisterEhh>:
  digitalWrite(slaveSelectPin, HIGH);

  return regValue;
}

void ADXL362::SPIwriteOneRegister(uint8_t regAddress, uint8_t regValue){
 23fb6f0:	b570      	push	{r4, r5, r6, lr}
 23fb6f2:	460e      	mov	r6, r1
 23fb6f4:	4615      	mov	r5, r2
 23fb6f6:	4604      	mov	r4, r0

  digitalWrite(slaveSelectPin, LOW);
 23fb6f8:	2100      	movs	r1, #0
 23fb6fa:	8840      	ldrh	r0, [r0, #2]
 23fb6fc:	f002 fc01 	bl	23fdf02 <digitalWrite>
  SPI.transfer(0x0A);  // write instruction
 23fb700:	200a      	movs	r0, #10
 23fb702:	f7ff ffeb 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fb706:	4630      	mov	r0, r6
 23fb708:	f7ff ffe8 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regValue);
 23fb70c:	4628      	mov	r0, r5
 23fb70e:	f7ff ffe5 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  digitalWrite(slaveSelectPin, HIGH);
 23fb712:	8860      	ldrh	r0, [r4, #2]
 23fb714:	2101      	movs	r1, #1
}
 23fb716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(slaveSelectPin, HIGH);
 23fb71a:	f002 bbf2 	b.w	23fdf02 <digitalWrite>

023fb71e <_ZN7ADXL36218SPIreadOneRegisterEh>:
uint8_t ADXL362::SPIreadOneRegister(uint8_t regAddress){
 23fb71e:	b538      	push	{r3, r4, r5, lr}
 23fb720:	460d      	mov	r5, r1
 23fb722:	4604      	mov	r4, r0
  digitalWrite(slaveSelectPin, LOW);
 23fb724:	2100      	movs	r1, #0
 23fb726:	8840      	ldrh	r0, [r0, #2]
 23fb728:	f002 fbeb 	bl	23fdf02 <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fb72c:	200b      	movs	r0, #11
 23fb72e:	f7ff ffd5 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23fb732:	4628      	mov	r0, r5
 23fb734:	f7ff ffd2 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  regValue = SPI.transfer(0x00);
 23fb738:	2000      	movs	r0, #0
 23fb73a:	f7ff ffcf 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb73e:	4605      	mov	r5, r0
  digitalWrite(slaveSelectPin, HIGH);
 23fb740:	2101      	movs	r1, #1
 23fb742:	8860      	ldrh	r0, [r4, #2]
 23fb744:	f002 fbdd 	bl	23fdf02 <digitalWrite>
}
 23fb748:	4628      	mov	r0, r5
 23fb74a:	bd38      	pop	{r3, r4, r5, pc}

023fb74c <_ZN7ADXL36212beginMeasureEv>:
void ADXL362::beginMeasure() {
 23fb74c:	b510      	push	{r4, lr}
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23fb74e:	212d      	movs	r1, #45	; 0x2d
void ADXL362::beginMeasure() {
 23fb750:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23fb752:	f7ff ffe4 	bl	23fb71e <_ZN7ADXL36218SPIreadOneRegisterEh>
  temp = (temp & 0b11111100) | XL362_POWER_FLAG_MEASURE_RUNING;     // turn on measurement bit in Reg XL362_POWER_CTL
 23fb756:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  SPIwriteOneRegister(XL362_POWER_CTL, temp); // Write to XL362_POWER_CTL, Measurement Mode
 23fb75a:	f040 0202 	orr.w	r2, r0, #2
 23fb75e:	212d      	movs	r1, #45	; 0x2d
 23fb760:	4620      	mov	r0, r4
 23fb762:	f7ff ffc5 	bl	23fb6f0 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23fb766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23fb76a:	200a      	movs	r0, #10
 23fb76c:	f000 bcaa 	b.w	23fc0c4 <delay>

023fb770 <_ZN7ADXL3628setRangeEh>:
void ADXL362::setRange(uint8_t Range){
 23fb770:	b538      	push	{r3, r4, r5, lr}
 23fb772:	460d      	mov	r5, r1
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23fb774:	212c      	movs	r1, #44	; 0x2c
void ADXL362::setRange(uint8_t Range){
 23fb776:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23fb778:	f7ff ffd1 	bl	23fb71e <_ZN7ADXL36218SPIreadOneRegisterEh>
  switch ( Range ) { // Range affects converting LSB to mg
 23fb77c:	2d40      	cmp	r5, #64	; 0x40
 23fb77e:	d00f      	beq.n	23fb7a0 <_ZN7ADXL3628setRangeEh+0x30>
 23fb780:	2d80      	cmp	r5, #128	; 0x80
 23fb782:	d00f      	beq.n	23fb7a4 <_ZN7ADXL3628setRangeEh+0x34>
    mgperLSB = 1;
 23fb784:	2301      	movs	r3, #1
  temp = (temp & 0b00111111) | Range;
 23fb786:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    mgperLSB = 4;
 23fb78a:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_FILTER_CTL, temp); // Write to XL362_FILTER_CTL
 23fb78c:	4620      	mov	r0, r4
 23fb78e:	432a      	orrs	r2, r5
 23fb790:	212c      	movs	r1, #44	; 0x2c
 23fb792:	f7ff ffad 	bl	23fb6f0 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23fb796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
 23fb79a:	200a      	movs	r0, #10
 23fb79c:	f000 bc92 	b.w	23fc0c4 <delay>
    mgperLSB = 2;
 23fb7a0:	2302      	movs	r3, #2
 23fb7a2:	e7f0      	b.n	23fb786 <_ZN7ADXL3628setRangeEh+0x16>
    mgperLSB = 4;
 23fb7a4:	2304      	movs	r3, #4
 23fb7a6:	e7ee      	b.n	23fb786 <_ZN7ADXL3628setRangeEh+0x16>

023fb7a8 <_ZN7ADXL3629readXYZmgERiS0_S0_>:
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23fb7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb7ac:	4604      	mov	r4, r0
 23fb7ae:	468b      	mov	fp, r1
  digitalWrite(slaveSelectPin, LOW);
 23fb7b0:	8840      	ldrh	r0, [r0, #2]
 23fb7b2:	2100      	movs	r1, #0
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23fb7b4:	4691      	mov	r9, r2
 23fb7b6:	4698      	mov	r8, r3
  digitalWrite(slaveSelectPin, LOW);
 23fb7b8:	f002 fba3 	bl	23fdf02 <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23fb7bc:	200b      	movs	r0, #11
 23fb7be:	f7ff ff8d 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(XL362_XDATA_L);  // Start at XData Reg
 23fb7c2:	200e      	movs	r0, #14
 23fb7c4:	f7ff ff8a 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  short XData = SPI.transfer(0x00);
 23fb7c8:	2000      	movs	r0, #0
 23fb7ca:	f7ff ff87 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb7ce:	4607      	mov	r7, r0
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fb7d0:	2000      	movs	r0, #0
 23fb7d2:	f7ff ff83 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb7d6:	9001      	str	r0, [sp, #4]
  short YData = SPI.transfer(0x00);
 23fb7d8:	2000      	movs	r0, #0
 23fb7da:	f7ff ff7f 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb7de:	4606      	mov	r6, r0
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fb7e0:	2000      	movs	r0, #0
 23fb7e2:	f7ff ff7b 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb7e6:	9000      	str	r0, [sp, #0]
  short ZData = SPI.transfer(0x00);
 23fb7e8:	2000      	movs	r0, #0
 23fb7ea:	f7ff ff77 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb7ee:	4605      	mov	r5, r0
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23fb7f0:	2000      	movs	r0, #0
 23fb7f2:	f7ff ff73 	bl	23fb6dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23fb7f6:	4682      	mov	sl, r0
  digitalWrite(slaveSelectPin, HIGH);
 23fb7f8:	2101      	movs	r1, #1
 23fb7fa:	8860      	ldrh	r0, [r4, #2]
 23fb7fc:	f002 fb81 	bl	23fdf02 <digitalWrite>
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fb800:	9a01      	ldr	r2, [sp, #4]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fb802:	9b00      	ldr	r3, [sp, #0]
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23fb804:	eb07 2702 	add.w	r7, r7, r2, lsl #8
  X = (int)XData * mgperLSB;
 23fb808:	7822      	ldrb	r2, [r4, #0]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23fb80a:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  X = (int)XData * mgperLSB;
 23fb80e:	fb12 f707 	smulbb	r7, r2, r7
 23fb812:	f8cb 7000 	str.w	r7, [fp]
  Y = (int)YData * mgperLSB;
 23fb816:	7823      	ldrb	r3, [r4, #0]
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23fb818:	eb05 250a 	add.w	r5, r5, sl, lsl #8
  Y = (int)YData * mgperLSB;
 23fb81c:	fb13 f606 	smulbb	r6, r3, r6
 23fb820:	f8c9 6000 	str.w	r6, [r9]
  Z = (int)ZData * mgperLSB;
 23fb824:	7822      	ldrb	r2, [r4, #0]
 23fb826:	fb12 f505 	smulbb	r5, r2, r5
 23fb82a:	f8c8 5000 	str.w	r5, [r8]
}
 23fb82e:	b003      	add	sp, #12
 23fb830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb834 <_ZN7ADXL3625beginEv>:
void ADXL362::begin() {
 23fb834:	b510      	push	{r4, lr}
  pinMode(slaveSelectPin, OUTPUT);
 23fb836:	2101      	movs	r1, #1
void ADXL362::begin() {
 23fb838:	4604      	mov	r4, r0
  pinMode(slaveSelectPin, OUTPUT);
 23fb83a:	8840      	ldrh	r0, [r0, #2]
 23fb83c:	f002 fb50 	bl	23fdee0 <pinMode>
        instance().begin();
 23fb840:	f7ff ff32 	bl	23fb6a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb844:	f002 f868 	bl	23fd918 <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
 23fb848:	f7ff ff2e 	bl	23fb6a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb84c:	2100      	movs	r1, #0
 23fb84e:	f002 f877 	bl	23fd940 <_ZN8SPIClass11setDataModeEh>
  delay(500);
 23fb852:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fb856:	f000 fc35 	bl	23fc0c4 <delay>
  mgperLSB = 1;
 23fb85a:	2301      	movs	r3, #1
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fb85c:	4620      	mov	r0, r4
  mgperLSB = 1;
 23fb85e:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23fb860:	2252      	movs	r2, #82	; 0x52
 23fb862:	211f      	movs	r1, #31
 23fb864:	f7ff ff44 	bl	23fb6f0 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
 }
 23fb868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23fb86c:	200a      	movs	r0, #10
 23fb86e:	f000 bc29 	b.w	23fc0c4 <delay>
	...

023fb874 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fb874:	b509      	push	{r0, r3, lr}
 23fb876:	4804      	ldr	r0, [pc, #16]	; (23fb888 <os_mutex_recursive_create+0x14>)
 23fb878:	6800      	ldr	r0, [r0, #0]
 23fb87a:	4b04      	ldr	r3, [pc, #16]	; (23fb88c <os_mutex_recursive_create+0x18>)
 23fb87c:	4403      	add	r3, r0
 23fb87e:	681b      	ldr	r3, [r3, #0]
 23fb880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb882:	9302      	str	r3, [sp, #8]
 23fb884:	bd09      	pop	{r0, r3, pc}
 23fb886:	0000      	.short	0x0000
 23fb888:	1007ada8 	.word	0x1007ada8
 23fb88c:	00000030 	.word	0x00000030

023fb890 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fb890:	b509      	push	{r0, r3, lr}
 23fb892:	4804      	ldr	r0, [pc, #16]	; (23fb8a4 <os_mutex_recursive_destroy+0x14>)
 23fb894:	6800      	ldr	r0, [r0, #0]
 23fb896:	4b04      	ldr	r3, [pc, #16]	; (23fb8a8 <os_mutex_recursive_destroy+0x18>)
 23fb898:	4403      	add	r3, r0
 23fb89a:	681b      	ldr	r3, [r3, #0]
 23fb89c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fb89e:	9302      	str	r3, [sp, #8]
 23fb8a0:	bd09      	pop	{r0, r3, pc}
 23fb8a2:	0000      	.short	0x0000
 23fb8a4:	1007ada8 	.word	0x1007ada8
 23fb8a8:	00000030 	.word	0x00000030

023fb8ac <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fb8ac:	b509      	push	{r0, r3, lr}
 23fb8ae:	4804      	ldr	r0, [pc, #16]	; (23fb8c0 <os_mutex_recursive_lock+0x14>)
 23fb8b0:	6800      	ldr	r0, [r0, #0]
 23fb8b2:	4b04      	ldr	r3, [pc, #16]	; (23fb8c4 <os_mutex_recursive_lock+0x18>)
 23fb8b4:	4403      	add	r3, r0
 23fb8b6:	681b      	ldr	r3, [r3, #0]
 23fb8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb8ba:	9302      	str	r3, [sp, #8]
 23fb8bc:	bd09      	pop	{r0, r3, pc}
 23fb8be:	0000      	.short	0x0000
 23fb8c0:	1007ada8 	.word	0x1007ada8
 23fb8c4:	00000030 	.word	0x00000030

023fb8c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fb8c8:	b509      	push	{r0, r3, lr}
 23fb8ca:	4804      	ldr	r0, [pc, #16]	; (23fb8dc <os_mutex_recursive_unlock+0x14>)
 23fb8cc:	6800      	ldr	r0, [r0, #0]
 23fb8ce:	4b04      	ldr	r3, [pc, #16]	; (23fb8e0 <os_mutex_recursive_unlock+0x18>)
 23fb8d0:	4403      	add	r3, r0
 23fb8d2:	681b      	ldr	r3, [r3, #0]
 23fb8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb8d6:	9302      	str	r3, [sp, #8]
 23fb8d8:	bd09      	pop	{r0, r3, pc}
 23fb8da:	0000      	.short	0x0000
 23fb8dc:	1007ada8 	.word	0x1007ada8
 23fb8e0:	00000030 	.word	0x00000030

023fb8e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fb8e4:	b509      	push	{r0, r3, lr}
 23fb8e6:	4804      	ldr	r0, [pc, #16]	; (23fb8f8 <HAL_RNG_GetRandomNumber+0x14>)
 23fb8e8:	6800      	ldr	r0, [r0, #0]
 23fb8ea:	4b04      	ldr	r3, [pc, #16]	; (23fb8fc <HAL_RNG_GetRandomNumber+0x18>)
 23fb8ec:	4403      	add	r3, r0
 23fb8ee:	681b      	ldr	r3, [r3, #0]
 23fb8f0:	685b      	ldr	r3, [r3, #4]
 23fb8f2:	9302      	str	r3, [sp, #8]
 23fb8f4:	bd09      	pop	{r0, r3, pc}
 23fb8f6:	0000      	.short	0x0000
 23fb8f8:	1007ada8 	.word	0x1007ada8
 23fb8fc:	00000000 	.word	0x00000000

023fb900 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fb900:	b509      	push	{r0, r3, lr}
 23fb902:	4804      	ldr	r0, [pc, #16]	; (23fb914 <HAL_Delay_Microseconds+0x14>)
 23fb904:	6800      	ldr	r0, [r0, #0]
 23fb906:	4b04      	ldr	r3, [pc, #16]	; (23fb918 <HAL_Delay_Microseconds+0x18>)
 23fb908:	4403      	add	r3, r0
 23fb90a:	681b      	ldr	r3, [r3, #0]
 23fb90c:	68db      	ldr	r3, [r3, #12]
 23fb90e:	9302      	str	r3, [sp, #8]
 23fb910:	bd09      	pop	{r0, r3, pc}
 23fb912:	0000      	.short	0x0000
 23fb914:	1007ada8 	.word	0x1007ada8
 23fb918:	00000000 	.word	0x00000000

023fb91c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fb91c:	b509      	push	{r0, r3, lr}
 23fb91e:	4804      	ldr	r0, [pc, #16]	; (23fb930 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fb920:	6800      	ldr	r0, [r0, #0]
 23fb922:	4b04      	ldr	r3, [pc, #16]	; (23fb934 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fb924:	4403      	add	r3, r0
 23fb926:	681b      	ldr	r3, [r3, #0]
 23fb928:	695b      	ldr	r3, [r3, #20]
 23fb92a:	9302      	str	r3, [sp, #8]
 23fb92c:	bd09      	pop	{r0, r3, pc}
 23fb92e:	0000      	.short	0x0000
 23fb930:	1007ada8 	.word	0x1007ada8
 23fb934:	00000000 	.word	0x00000000

023fb938 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fb938:	b509      	push	{r0, r3, lr}
 23fb93a:	4804      	ldr	r0, [pc, #16]	; (23fb94c <hal_timer_millis+0x14>)
 23fb93c:	6800      	ldr	r0, [r0, #0]
 23fb93e:	4b04      	ldr	r3, [pc, #16]	; (23fb950 <hal_timer_millis+0x18>)
 23fb940:	4403      	add	r3, r0
 23fb942:	681b      	ldr	r3, [r3, #0]
 23fb944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fb946:	9302      	str	r3, [sp, #8]
 23fb948:	bd09      	pop	{r0, r3, pc}
 23fb94a:	0000      	.short	0x0000
 23fb94c:	1007ada8 	.word	0x1007ada8
 23fb950:	00000000 	.word	0x00000000

023fb954 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fb954:	b509      	push	{r0, r3, lr}
 23fb956:	4804      	ldr	r0, [pc, #16]	; (23fb968 <hal_gpio_mode+0x14>)
 23fb958:	6800      	ldr	r0, [r0, #0]
 23fb95a:	4b04      	ldr	r3, [pc, #16]	; (23fb96c <hal_gpio_mode+0x18>)
 23fb95c:	4403      	add	r3, r0
 23fb95e:	681b      	ldr	r3, [r3, #0]
 23fb960:	689b      	ldr	r3, [r3, #8]
 23fb962:	9302      	str	r3, [sp, #8]
 23fb964:	bd09      	pop	{r0, r3, pc}
 23fb966:	0000      	.short	0x0000
 23fb968:	1007ada8 	.word	0x1007ada8
 23fb96c:	00000014 	.word	0x00000014

023fb970 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fb970:	b509      	push	{r0, r3, lr}
 23fb972:	4804      	ldr	r0, [pc, #16]	; (23fb984 <hal_gpio_get_mode+0x14>)
 23fb974:	6800      	ldr	r0, [r0, #0]
 23fb976:	4b04      	ldr	r3, [pc, #16]	; (23fb988 <hal_gpio_get_mode+0x18>)
 23fb978:	4403      	add	r3, r0
 23fb97a:	681b      	ldr	r3, [r3, #0]
 23fb97c:	68db      	ldr	r3, [r3, #12]
 23fb97e:	9302      	str	r3, [sp, #8]
 23fb980:	bd09      	pop	{r0, r3, pc}
 23fb982:	0000      	.short	0x0000
 23fb984:	1007ada8 	.word	0x1007ada8
 23fb988:	00000014 	.word	0x00000014

023fb98c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fb98c:	b509      	push	{r0, r3, lr}
 23fb98e:	4804      	ldr	r0, [pc, #16]	; (23fb9a0 <hal_gpio_write+0x14>)
 23fb990:	6800      	ldr	r0, [r0, #0]
 23fb992:	4b04      	ldr	r3, [pc, #16]	; (23fb9a4 <hal_gpio_write+0x18>)
 23fb994:	4403      	add	r3, r0
 23fb996:	681b      	ldr	r3, [r3, #0]
 23fb998:	691b      	ldr	r3, [r3, #16]
 23fb99a:	9302      	str	r3, [sp, #8]
 23fb99c:	bd09      	pop	{r0, r3, pc}
 23fb99e:	0000      	.short	0x0000
 23fb9a0:	1007ada8 	.word	0x1007ada8
 23fb9a4:	00000014 	.word	0x00000014

023fb9a8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fb9a8:	b509      	push	{r0, r3, lr}
 23fb9aa:	4804      	ldr	r0, [pc, #16]	; (23fb9bc <hal_i2c_write+0x14>)
 23fb9ac:	6800      	ldr	r0, [r0, #0]
 23fb9ae:	4b04      	ldr	r3, [pc, #16]	; (23fb9c0 <hal_i2c_write+0x18>)
 23fb9b0:	4403      	add	r3, r0
 23fb9b2:	681b      	ldr	r3, [r3, #0]
 23fb9b4:	6a1b      	ldr	r3, [r3, #32]
 23fb9b6:	9302      	str	r3, [sp, #8]
 23fb9b8:	bd09      	pop	{r0, r3, pc}
 23fb9ba:	0000      	.short	0x0000
 23fb9bc:	1007ada8 	.word	0x1007ada8
 23fb9c0:	00000010 	.word	0x00000010

023fb9c4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fb9c4:	b509      	push	{r0, r3, lr}
 23fb9c6:	4804      	ldr	r0, [pc, #16]	; (23fb9d8 <hal_i2c_available+0x14>)
 23fb9c8:	6800      	ldr	r0, [r0, #0]
 23fb9ca:	4b04      	ldr	r3, [pc, #16]	; (23fb9dc <hal_i2c_available+0x18>)
 23fb9cc:	4403      	add	r3, r0
 23fb9ce:	681b      	ldr	r3, [r3, #0]
 23fb9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb9d2:	9302      	str	r3, [sp, #8]
 23fb9d4:	bd09      	pop	{r0, r3, pc}
 23fb9d6:	0000      	.short	0x0000
 23fb9d8:	1007ada8 	.word	0x1007ada8
 23fb9dc:	00000010 	.word	0x00000010

023fb9e0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fb9e0:	b509      	push	{r0, r3, lr}
 23fb9e2:	4804      	ldr	r0, [pc, #16]	; (23fb9f4 <hal_i2c_read+0x14>)
 23fb9e4:	6800      	ldr	r0, [r0, #0]
 23fb9e6:	4b04      	ldr	r3, [pc, #16]	; (23fb9f8 <hal_i2c_read+0x18>)
 23fb9e8:	4403      	add	r3, r0
 23fb9ea:	681b      	ldr	r3, [r3, #0]
 23fb9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb9ee:	9302      	str	r3, [sp, #8]
 23fb9f0:	bd09      	pop	{r0, r3, pc}
 23fb9f2:	0000      	.short	0x0000
 23fb9f4:	1007ada8 	.word	0x1007ada8
 23fb9f8:	00000010 	.word	0x00000010

023fb9fc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fb9fc:	b509      	push	{r0, r3, lr}
 23fb9fe:	4804      	ldr	r0, [pc, #16]	; (23fba10 <hal_i2c_peek+0x14>)
 23fba00:	6800      	ldr	r0, [r0, #0]
 23fba02:	4b04      	ldr	r3, [pc, #16]	; (23fba14 <hal_i2c_peek+0x18>)
 23fba04:	4403      	add	r3, r0
 23fba06:	681b      	ldr	r3, [r3, #0]
 23fba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fba0a:	9302      	str	r3, [sp, #8]
 23fba0c:	bd09      	pop	{r0, r3, pc}
 23fba0e:	0000      	.short	0x0000
 23fba10:	1007ada8 	.word	0x1007ada8
 23fba14:	00000010 	.word	0x00000010

023fba18 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fba18:	b509      	push	{r0, r3, lr}
 23fba1a:	4804      	ldr	r0, [pc, #16]	; (23fba2c <hal_i2c_flush+0x14>)
 23fba1c:	6800      	ldr	r0, [r0, #0]
 23fba1e:	4b04      	ldr	r3, [pc, #16]	; (23fba30 <hal_i2c_flush+0x18>)
 23fba20:	4403      	add	r3, r0
 23fba22:	681b      	ldr	r3, [r3, #0]
 23fba24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fba26:	9302      	str	r3, [sp, #8]
 23fba28:	bd09      	pop	{r0, r3, pc}
 23fba2a:	0000      	.short	0x0000
 23fba2c:	1007ada8 	.word	0x1007ada8
 23fba30:	00000010 	.word	0x00000010

023fba34 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fba34:	b509      	push	{r0, r3, lr}
 23fba36:	4804      	ldr	r0, [pc, #16]	; (23fba48 <hal_i2c_is_enabled+0x14>)
 23fba38:	6800      	ldr	r0, [r0, #0]
 23fba3a:	4b04      	ldr	r3, [pc, #16]	; (23fba4c <hal_i2c_is_enabled+0x18>)
 23fba3c:	4403      	add	r3, r0
 23fba3e:	681b      	ldr	r3, [r3, #0]
 23fba40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fba42:	9302      	str	r3, [sp, #8]
 23fba44:	bd09      	pop	{r0, r3, pc}
 23fba46:	0000      	.short	0x0000
 23fba48:	1007ada8 	.word	0x1007ada8
 23fba4c:	00000010 	.word	0x00000010

023fba50 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fba50:	b509      	push	{r0, r3, lr}
 23fba52:	4804      	ldr	r0, [pc, #16]	; (23fba64 <hal_i2c_init+0x14>)
 23fba54:	6800      	ldr	r0, [r0, #0]
 23fba56:	4b04      	ldr	r3, [pc, #16]	; (23fba68 <hal_i2c_init+0x18>)
 23fba58:	4403      	add	r3, r0
 23fba5a:	681b      	ldr	r3, [r3, #0]
 23fba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fba5e:	9302      	str	r3, [sp, #8]
 23fba60:	bd09      	pop	{r0, r3, pc}
 23fba62:	0000      	.short	0x0000
 23fba64:	1007ada8 	.word	0x1007ada8
 23fba68:	00000010 	.word	0x00000010

023fba6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fba6c:	b509      	push	{r0, r3, lr}
 23fba6e:	4804      	ldr	r0, [pc, #16]	; (23fba80 <inet_inet_ntop+0x14>)
 23fba70:	6800      	ldr	r0, [r0, #0]
 23fba72:	4b04      	ldr	r3, [pc, #16]	; (23fba84 <inet_inet_ntop+0x18>)
 23fba74:	4403      	add	r3, r0
 23fba76:	681b      	ldr	r3, [r3, #0]
 23fba78:	695b      	ldr	r3, [r3, #20]
 23fba7a:	9302      	str	r3, [sp, #8]
 23fba7c:	bd09      	pop	{r0, r3, pc}
 23fba7e:	0000      	.short	0x0000
 23fba80:	1007ada8 	.word	0x1007ada8
 23fba84:	0000004c 	.word	0x0000004c

023fba88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fba88:	b509      	push	{r0, r3, lr}
 23fba8a:	4804      	ldr	r0, [pc, #16]	; (23fba9c <netdb_freeaddrinfo+0x14>)
 23fba8c:	6800      	ldr	r0, [r0, #0]
 23fba8e:	4b04      	ldr	r3, [pc, #16]	; (23fbaa0 <netdb_freeaddrinfo+0x18>)
 23fba90:	4403      	add	r3, r0
 23fba92:	681b      	ldr	r3, [r3, #0]
 23fba94:	689b      	ldr	r3, [r3, #8]
 23fba96:	9302      	str	r3, [sp, #8]
 23fba98:	bd09      	pop	{r0, r3, pc}
 23fba9a:	0000      	.short	0x0000
 23fba9c:	1007ada8 	.word	0x1007ada8
 23fbaa0:	00000050 	.word	0x00000050

023fbaa4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fbaa4:	b509      	push	{r0, r3, lr}
 23fbaa6:	4804      	ldr	r0, [pc, #16]	; (23fbab8 <netdb_getaddrinfo+0x14>)
 23fbaa8:	6800      	ldr	r0, [r0, #0]
 23fbaaa:	4b04      	ldr	r3, [pc, #16]	; (23fbabc <netdb_getaddrinfo+0x18>)
 23fbaac:	4403      	add	r3, r0
 23fbaae:	681b      	ldr	r3, [r3, #0]
 23fbab0:	68db      	ldr	r3, [r3, #12]
 23fbab2:	9302      	str	r3, [sp, #8]
 23fbab4:	bd09      	pop	{r0, r3, pc}
 23fbab6:	0000      	.short	0x0000
 23fbab8:	1007ada8 	.word	0x1007ada8
 23fbabc:	00000050 	.word	0x00000050

023fbac0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fbac0:	b509      	push	{r0, r3, lr}
 23fbac2:	4804      	ldr	r0, [pc, #16]	; (23fbad4 <hal_spi_begin+0x14>)
 23fbac4:	6800      	ldr	r0, [r0, #0]
 23fbac6:	4b04      	ldr	r3, [pc, #16]	; (23fbad8 <hal_spi_begin+0x18>)
 23fbac8:	4403      	add	r3, r0
 23fbaca:	681b      	ldr	r3, [r3, #0]
 23fbacc:	681b      	ldr	r3, [r3, #0]
 23fbace:	9302      	str	r3, [sp, #8]
 23fbad0:	bd09      	pop	{r0, r3, pc}
 23fbad2:	0000      	.short	0x0000
 23fbad4:	1007ada8 	.word	0x1007ada8
 23fbad8:	00000018 	.word	0x00000018

023fbadc <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fbadc:	b509      	push	{r0, r3, lr}
 23fbade:	4804      	ldr	r0, [pc, #16]	; (23fbaf0 <hal_spi_set_data_mode+0x14>)
 23fbae0:	6800      	ldr	r0, [r0, #0]
 23fbae2:	4b04      	ldr	r3, [pc, #16]	; (23fbaf4 <hal_spi_set_data_mode+0x18>)
 23fbae4:	4403      	add	r3, r0
 23fbae6:	681b      	ldr	r3, [r3, #0]
 23fbae8:	68db      	ldr	r3, [r3, #12]
 23fbaea:	9302      	str	r3, [sp, #8]
 23fbaec:	bd09      	pop	{r0, r3, pc}
 23fbaee:	0000      	.short	0x0000
 23fbaf0:	1007ada8 	.word	0x1007ada8
 23fbaf4:	00000018 	.word	0x00000018

023fbaf8 <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fbaf8:	b509      	push	{r0, r3, lr}
 23fbafa:	4804      	ldr	r0, [pc, #16]	; (23fbb0c <hal_spi_transfer+0x14>)
 23fbafc:	6800      	ldr	r0, [r0, #0]
 23fbafe:	4b04      	ldr	r3, [pc, #16]	; (23fbb10 <hal_spi_transfer+0x18>)
 23fbb00:	4403      	add	r3, r0
 23fbb02:	681b      	ldr	r3, [r3, #0]
 23fbb04:	695b      	ldr	r3, [r3, #20]
 23fbb06:	9302      	str	r3, [sp, #8]
 23fbb08:	bd09      	pop	{r0, r3, pc}
 23fbb0a:	0000      	.short	0x0000
 23fbb0c:	1007ada8 	.word	0x1007ada8
 23fbb10:	00000018 	.word	0x00000018

023fbb14 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fbb14:	b509      	push	{r0, r3, lr}
 23fbb16:	4804      	ldr	r0, [pc, #16]	; (23fbb28 <hal_spi_init+0x14>)
 23fbb18:	6800      	ldr	r0, [r0, #0]
 23fbb1a:	4b04      	ldr	r3, [pc, #16]	; (23fbb2c <hal_spi_init+0x18>)
 23fbb1c:	4403      	add	r3, r0
 23fbb1e:	681b      	ldr	r3, [r3, #0]
 23fbb20:	69db      	ldr	r3, [r3, #28]
 23fbb22:	9302      	str	r3, [sp, #8]
 23fbb24:	bd09      	pop	{r0, r3, pc}
 23fbb26:	0000      	.short	0x0000
 23fbb28:	1007ada8 	.word	0x1007ada8
 23fbb2c:	00000018 	.word	0x00000018

023fbb30 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fbb30:	b509      	push	{r0, r3, lr}
 23fbb32:	4804      	ldr	r0, [pc, #16]	; (23fbb44 <hal_spi_is_enabled+0x14>)
 23fbb34:	6800      	ldr	r0, [r0, #0]
 23fbb36:	4b04      	ldr	r3, [pc, #16]	; (23fbb48 <hal_spi_is_enabled+0x18>)
 23fbb38:	4403      	add	r3, r0
 23fbb3a:	681b      	ldr	r3, [r3, #0]
 23fbb3c:	6a1b      	ldr	r3, [r3, #32]
 23fbb3e:	9302      	str	r3, [sp, #8]
 23fbb40:	bd09      	pop	{r0, r3, pc}
 23fbb42:	0000      	.short	0x0000
 23fbb44:	1007ada8 	.word	0x1007ada8
 23fbb48:	00000018 	.word	0x00000018

023fbb4c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fbb4c:	b509      	push	{r0, r3, lr}
 23fbb4e:	4804      	ldr	r0, [pc, #16]	; (23fbb60 <hal_spi_acquire+0x14>)
 23fbb50:	6800      	ldr	r0, [r0, #0]
 23fbb52:	4b04      	ldr	r3, [pc, #16]	; (23fbb64 <hal_spi_acquire+0x18>)
 23fbb54:	4403      	add	r3, r0
 23fbb56:	681b      	ldr	r3, [r3, #0]
 23fbb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbb5a:	9302      	str	r3, [sp, #8]
 23fbb5c:	bd09      	pop	{r0, r3, pc}
 23fbb5e:	0000      	.short	0x0000
 23fbb60:	1007ada8 	.word	0x1007ada8
 23fbb64:	00000018 	.word	0x00000018

023fbb68 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fbb68:	b509      	push	{r0, r3, lr}
 23fbb6a:	4804      	ldr	r0, [pc, #16]	; (23fbb7c <hal_spi_release+0x14>)
 23fbb6c:	6800      	ldr	r0, [r0, #0]
 23fbb6e:	4b04      	ldr	r3, [pc, #16]	; (23fbb80 <hal_spi_release+0x18>)
 23fbb70:	4403      	add	r3, r0
 23fbb72:	681b      	ldr	r3, [r3, #0]
 23fbb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbb76:	9302      	str	r3, [sp, #8]
 23fbb78:	bd09      	pop	{r0, r3, pc}
 23fbb7a:	0000      	.short	0x0000
 23fbb7c:	1007ada8 	.word	0x1007ada8
 23fbb80:	00000018 	.word	0x00000018

023fbb84 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fbb84:	b509      	push	{r0, r3, lr}
 23fbb86:	4804      	ldr	r0, [pc, #16]	; (23fbb98 <hal_usart_end+0x14>)
 23fbb88:	6800      	ldr	r0, [r0, #0]
 23fbb8a:	4b04      	ldr	r3, [pc, #16]	; (23fbb9c <hal_usart_end+0x18>)
 23fbb8c:	4403      	add	r3, r0
 23fbb8e:	681b      	ldr	r3, [r3, #0]
 23fbb90:	689b      	ldr	r3, [r3, #8]
 23fbb92:	9302      	str	r3, [sp, #8]
 23fbb94:	bd09      	pop	{r0, r3, pc}
 23fbb96:	0000      	.short	0x0000
 23fbb98:	1007ada8 	.word	0x1007ada8
 23fbb9c:	00000024 	.word	0x00000024

023fbba0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fbba0:	b509      	push	{r0, r3, lr}
 23fbba2:	4804      	ldr	r0, [pc, #16]	; (23fbbb4 <hal_usart_write+0x14>)
 23fbba4:	6800      	ldr	r0, [r0, #0]
 23fbba6:	4b04      	ldr	r3, [pc, #16]	; (23fbbb8 <hal_usart_write+0x18>)
 23fbba8:	4403      	add	r3, r0
 23fbbaa:	681b      	ldr	r3, [r3, #0]
 23fbbac:	68db      	ldr	r3, [r3, #12]
 23fbbae:	9302      	str	r3, [sp, #8]
 23fbbb0:	bd09      	pop	{r0, r3, pc}
 23fbbb2:	0000      	.short	0x0000
 23fbbb4:	1007ada8 	.word	0x1007ada8
 23fbbb8:	00000024 	.word	0x00000024

023fbbbc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fbbbc:	b509      	push	{r0, r3, lr}
 23fbbbe:	4804      	ldr	r0, [pc, #16]	; (23fbbd0 <hal_usart_available+0x14>)
 23fbbc0:	6800      	ldr	r0, [r0, #0]
 23fbbc2:	4b04      	ldr	r3, [pc, #16]	; (23fbbd4 <hal_usart_available+0x18>)
 23fbbc4:	4403      	add	r3, r0
 23fbbc6:	681b      	ldr	r3, [r3, #0]
 23fbbc8:	691b      	ldr	r3, [r3, #16]
 23fbbca:	9302      	str	r3, [sp, #8]
 23fbbcc:	bd09      	pop	{r0, r3, pc}
 23fbbce:	0000      	.short	0x0000
 23fbbd0:	1007ada8 	.word	0x1007ada8
 23fbbd4:	00000024 	.word	0x00000024

023fbbd8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fbbd8:	b509      	push	{r0, r3, lr}
 23fbbda:	4804      	ldr	r0, [pc, #16]	; (23fbbec <hal_usart_read+0x14>)
 23fbbdc:	6800      	ldr	r0, [r0, #0]
 23fbbde:	4b04      	ldr	r3, [pc, #16]	; (23fbbf0 <hal_usart_read+0x18>)
 23fbbe0:	4403      	add	r3, r0
 23fbbe2:	681b      	ldr	r3, [r3, #0]
 23fbbe4:	695b      	ldr	r3, [r3, #20]
 23fbbe6:	9302      	str	r3, [sp, #8]
 23fbbe8:	bd09      	pop	{r0, r3, pc}
 23fbbea:	0000      	.short	0x0000
 23fbbec:	1007ada8 	.word	0x1007ada8
 23fbbf0:	00000024 	.word	0x00000024

023fbbf4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fbbf4:	b509      	push	{r0, r3, lr}
 23fbbf6:	4804      	ldr	r0, [pc, #16]	; (23fbc08 <hal_usart_peek+0x14>)
 23fbbf8:	6800      	ldr	r0, [r0, #0]
 23fbbfa:	4b04      	ldr	r3, [pc, #16]	; (23fbc0c <hal_usart_peek+0x18>)
 23fbbfc:	4403      	add	r3, r0
 23fbbfe:	681b      	ldr	r3, [r3, #0]
 23fbc00:	699b      	ldr	r3, [r3, #24]
 23fbc02:	9302      	str	r3, [sp, #8]
 23fbc04:	bd09      	pop	{r0, r3, pc}
 23fbc06:	0000      	.short	0x0000
 23fbc08:	1007ada8 	.word	0x1007ada8
 23fbc0c:	00000024 	.word	0x00000024

023fbc10 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fbc10:	b509      	push	{r0, r3, lr}
 23fbc12:	4804      	ldr	r0, [pc, #16]	; (23fbc24 <hal_usart_flush+0x14>)
 23fbc14:	6800      	ldr	r0, [r0, #0]
 23fbc16:	4b04      	ldr	r3, [pc, #16]	; (23fbc28 <hal_usart_flush+0x18>)
 23fbc18:	4403      	add	r3, r0
 23fbc1a:	681b      	ldr	r3, [r3, #0]
 23fbc1c:	69db      	ldr	r3, [r3, #28]
 23fbc1e:	9302      	str	r3, [sp, #8]
 23fbc20:	bd09      	pop	{r0, r3, pc}
 23fbc22:	0000      	.short	0x0000
 23fbc24:	1007ada8 	.word	0x1007ada8
 23fbc28:	00000024 	.word	0x00000024

023fbc2c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fbc2c:	b509      	push	{r0, r3, lr}
 23fbc2e:	4804      	ldr	r0, [pc, #16]	; (23fbc40 <hal_usart_is_enabled+0x14>)
 23fbc30:	6800      	ldr	r0, [r0, #0]
 23fbc32:	4b04      	ldr	r3, [pc, #16]	; (23fbc44 <hal_usart_is_enabled+0x18>)
 23fbc34:	4403      	add	r3, r0
 23fbc36:	681b      	ldr	r3, [r3, #0]
 23fbc38:	6a1b      	ldr	r3, [r3, #32]
 23fbc3a:	9302      	str	r3, [sp, #8]
 23fbc3c:	bd09      	pop	{r0, r3, pc}
 23fbc3e:	0000      	.short	0x0000
 23fbc40:	1007ada8 	.word	0x1007ada8
 23fbc44:	00000024 	.word	0x00000024

023fbc48 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fbc48:	b509      	push	{r0, r3, lr}
 23fbc4a:	4804      	ldr	r0, [pc, #16]	; (23fbc5c <hal_usart_available_data_for_write+0x14>)
 23fbc4c:	6800      	ldr	r0, [r0, #0]
 23fbc4e:	4b04      	ldr	r3, [pc, #16]	; (23fbc60 <hal_usart_available_data_for_write+0x18>)
 23fbc50:	4403      	add	r3, r0
 23fbc52:	681b      	ldr	r3, [r3, #0]
 23fbc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbc56:	9302      	str	r3, [sp, #8]
 23fbc58:	bd09      	pop	{r0, r3, pc}
 23fbc5a:	0000      	.short	0x0000
 23fbc5c:	1007ada8 	.word	0x1007ada8
 23fbc60:	00000024 	.word	0x00000024

023fbc64 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fbc64:	b509      	push	{r0, r3, lr}
 23fbc66:	4804      	ldr	r0, [pc, #16]	; (23fbc78 <hal_usart_begin_config+0x14>)
 23fbc68:	6800      	ldr	r0, [r0, #0]
 23fbc6a:	4b04      	ldr	r3, [pc, #16]	; (23fbc7c <hal_usart_begin_config+0x18>)
 23fbc6c:	4403      	add	r3, r0
 23fbc6e:	681b      	ldr	r3, [r3, #0]
 23fbc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbc72:	9302      	str	r3, [sp, #8]
 23fbc74:	bd09      	pop	{r0, r3, pc}
 23fbc76:	0000      	.short	0x0000
 23fbc78:	1007ada8 	.word	0x1007ada8
 23fbc7c:	00000024 	.word	0x00000024

023fbc80 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fbc80:	b509      	push	{r0, r3, lr}
 23fbc82:	4804      	ldr	r0, [pc, #16]	; (23fbc94 <hal_usart_init_ex+0x14>)
 23fbc84:	6800      	ldr	r0, [r0, #0]
 23fbc86:	4b04      	ldr	r3, [pc, #16]	; (23fbc98 <hal_usart_init_ex+0x18>)
 23fbc88:	4403      	add	r3, r0
 23fbc8a:	681b      	ldr	r3, [r3, #0]
 23fbc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbc8e:	9302      	str	r3, [sp, #8]
 23fbc90:	bd09      	pop	{r0, r3, pc}
 23fbc92:	0000      	.short	0x0000
 23fbc94:	1007ada8 	.word	0x1007ada8
 23fbc98:	00000024 	.word	0x00000024

023fbc9c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fbc9c:	b509      	push	{r0, r3, lr}
 23fbc9e:	4804      	ldr	r0, [pc, #16]	; (23fbcb0 <HAL_USB_USART_Init+0x14>)
 23fbca0:	6800      	ldr	r0, [r0, #0]
 23fbca2:	4b04      	ldr	r3, [pc, #16]	; (23fbcb4 <HAL_USB_USART_Init+0x18>)
 23fbca4:	4403      	add	r3, r0
 23fbca6:	681b      	ldr	r3, [r3, #0]
 23fbca8:	681b      	ldr	r3, [r3, #0]
 23fbcaa:	9302      	str	r3, [sp, #8]
 23fbcac:	bd09      	pop	{r0, r3, pc}
 23fbcae:	0000      	.short	0x0000
 23fbcb0:	1007ada8 	.word	0x1007ada8
 23fbcb4:	00000034 	.word	0x00000034

023fbcb8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fbcb8:	b509      	push	{r0, r3, lr}
 23fbcba:	4804      	ldr	r0, [pc, #16]	; (23fbccc <HAL_USB_USART_Begin+0x14>)
 23fbcbc:	6800      	ldr	r0, [r0, #0]
 23fbcbe:	4b04      	ldr	r3, [pc, #16]	; (23fbcd0 <HAL_USB_USART_Begin+0x18>)
 23fbcc0:	4403      	add	r3, r0
 23fbcc2:	681b      	ldr	r3, [r3, #0]
 23fbcc4:	685b      	ldr	r3, [r3, #4]
 23fbcc6:	9302      	str	r3, [sp, #8]
 23fbcc8:	bd09      	pop	{r0, r3, pc}
 23fbcca:	0000      	.short	0x0000
 23fbccc:	1007ada8 	.word	0x1007ada8
 23fbcd0:	00000034 	.word	0x00000034

023fbcd4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fbcd4:	b509      	push	{r0, r3, lr}
 23fbcd6:	4804      	ldr	r0, [pc, #16]	; (23fbce8 <HAL_USB_USART_End+0x14>)
 23fbcd8:	6800      	ldr	r0, [r0, #0]
 23fbcda:	4b04      	ldr	r3, [pc, #16]	; (23fbcec <HAL_USB_USART_End+0x18>)
 23fbcdc:	4403      	add	r3, r0
 23fbcde:	681b      	ldr	r3, [r3, #0]
 23fbce0:	689b      	ldr	r3, [r3, #8]
 23fbce2:	9302      	str	r3, [sp, #8]
 23fbce4:	bd09      	pop	{r0, r3, pc}
 23fbce6:	0000      	.short	0x0000
 23fbce8:	1007ada8 	.word	0x1007ada8
 23fbcec:	00000034 	.word	0x00000034

023fbcf0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fbcf0:	b509      	push	{r0, r3, lr}
 23fbcf2:	4804      	ldr	r0, [pc, #16]	; (23fbd04 <HAL_USB_USART_Available_Data+0x14>)
 23fbcf4:	6800      	ldr	r0, [r0, #0]
 23fbcf6:	4b04      	ldr	r3, [pc, #16]	; (23fbd08 <HAL_USB_USART_Available_Data+0x18>)
 23fbcf8:	4403      	add	r3, r0
 23fbcfa:	681b      	ldr	r3, [r3, #0]
 23fbcfc:	691b      	ldr	r3, [r3, #16]
 23fbcfe:	9302      	str	r3, [sp, #8]
 23fbd00:	bd09      	pop	{r0, r3, pc}
 23fbd02:	0000      	.short	0x0000
 23fbd04:	1007ada8 	.word	0x1007ada8
 23fbd08:	00000034 	.word	0x00000034

023fbd0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fbd0c:	b509      	push	{r0, r3, lr}
 23fbd0e:	4804      	ldr	r0, [pc, #16]	; (23fbd20 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fbd10:	6800      	ldr	r0, [r0, #0]
 23fbd12:	4b04      	ldr	r3, [pc, #16]	; (23fbd24 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fbd14:	4403      	add	r3, r0
 23fbd16:	681b      	ldr	r3, [r3, #0]
 23fbd18:	695b      	ldr	r3, [r3, #20]
 23fbd1a:	9302      	str	r3, [sp, #8]
 23fbd1c:	bd09      	pop	{r0, r3, pc}
 23fbd1e:	0000      	.short	0x0000
 23fbd20:	1007ada8 	.word	0x1007ada8
 23fbd24:	00000034 	.word	0x00000034

023fbd28 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbd28:	b509      	push	{r0, r3, lr}
 23fbd2a:	4804      	ldr	r0, [pc, #16]	; (23fbd3c <HAL_USB_USART_Receive_Data+0x14>)
 23fbd2c:	6800      	ldr	r0, [r0, #0]
 23fbd2e:	4b04      	ldr	r3, [pc, #16]	; (23fbd40 <HAL_USB_USART_Receive_Data+0x18>)
 23fbd30:	4403      	add	r3, r0
 23fbd32:	681b      	ldr	r3, [r3, #0]
 23fbd34:	699b      	ldr	r3, [r3, #24]
 23fbd36:	9302      	str	r3, [sp, #8]
 23fbd38:	bd09      	pop	{r0, r3, pc}
 23fbd3a:	0000      	.short	0x0000
 23fbd3c:	1007ada8 	.word	0x1007ada8
 23fbd40:	00000034 	.word	0x00000034

023fbd44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbd44:	b509      	push	{r0, r3, lr}
 23fbd46:	4804      	ldr	r0, [pc, #16]	; (23fbd58 <HAL_USB_USART_Send_Data+0x14>)
 23fbd48:	6800      	ldr	r0, [r0, #0]
 23fbd4a:	4b04      	ldr	r3, [pc, #16]	; (23fbd5c <HAL_USB_USART_Send_Data+0x18>)
 23fbd4c:	4403      	add	r3, r0
 23fbd4e:	681b      	ldr	r3, [r3, #0]
 23fbd50:	69db      	ldr	r3, [r3, #28]
 23fbd52:	9302      	str	r3, [sp, #8]
 23fbd54:	bd09      	pop	{r0, r3, pc}
 23fbd56:	0000      	.short	0x0000
 23fbd58:	1007ada8 	.word	0x1007ada8
 23fbd5c:	00000034 	.word	0x00000034

023fbd60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fbd60:	b509      	push	{r0, r3, lr}
 23fbd62:	4804      	ldr	r0, [pc, #16]	; (23fbd74 <HAL_USB_USART_Flush_Data+0x14>)
 23fbd64:	6800      	ldr	r0, [r0, #0]
 23fbd66:	4b04      	ldr	r3, [pc, #16]	; (23fbd78 <HAL_USB_USART_Flush_Data+0x18>)
 23fbd68:	4403      	add	r3, r0
 23fbd6a:	681b      	ldr	r3, [r3, #0]
 23fbd6c:	6a1b      	ldr	r3, [r3, #32]
 23fbd6e:	9302      	str	r3, [sp, #8]
 23fbd70:	bd09      	pop	{r0, r3, pc}
 23fbd72:	0000      	.short	0x0000
 23fbd74:	1007ada8 	.word	0x1007ada8
 23fbd78:	00000034 	.word	0x00000034

023fbd7c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fbd7c:	b509      	push	{r0, r3, lr}
 23fbd7e:	4804      	ldr	r0, [pc, #16]	; (23fbd90 <HAL_USB_USART_Is_Connected+0x14>)
 23fbd80:	6800      	ldr	r0, [r0, #0]
 23fbd82:	4b04      	ldr	r3, [pc, #16]	; (23fbd94 <HAL_USB_USART_Is_Connected+0x18>)
 23fbd84:	4403      	add	r3, r0
 23fbd86:	681b      	ldr	r3, [r3, #0]
 23fbd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbd8a:	9302      	str	r3, [sp, #8]
 23fbd8c:	bd09      	pop	{r0, r3, pc}
 23fbd8e:	0000      	.short	0x0000
 23fbd90:	1007ada8 	.word	0x1007ada8
 23fbd94:	00000034 	.word	0x00000034

023fbd98 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fbd98:	b509      	push	{r0, r3, lr}
 23fbd9a:	4804      	ldr	r0, [pc, #16]	; (23fbdac <panic_+0x14>)
 23fbd9c:	6800      	ldr	r0, [r0, #0]
 23fbd9e:	4b04      	ldr	r3, [pc, #16]	; (23fbdb0 <panic_+0x18>)
 23fbda0:	4403      	add	r3, r0
 23fbda2:	681b      	ldr	r3, [r3, #0]
 23fbda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbda6:	9302      	str	r3, [sp, #8]
 23fbda8:	bd09      	pop	{r0, r3, pc}
 23fbdaa:	0000      	.short	0x0000
 23fbdac:	1007ada8 	.word	0x1007ada8
 23fbdb0:	00000048 	.word	0x00000048

023fbdb4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fbdb4:	b509      	push	{r0, r3, lr}
 23fbdb6:	4804      	ldr	r0, [pc, #16]	; (23fbdc8 <log_message_v+0x14>)
 23fbdb8:	6800      	ldr	r0, [r0, #0]
 23fbdba:	4b04      	ldr	r3, [pc, #16]	; (23fbdcc <log_message_v+0x18>)
 23fbdbc:	4403      	add	r3, r0
 23fbdbe:	681b      	ldr	r3, [r3, #0]
 23fbdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fbdc2:	9302      	str	r3, [sp, #8]
 23fbdc4:	bd09      	pop	{r0, r3, pc}
 23fbdc6:	0000      	.short	0x0000
 23fbdc8:	1007ada8 	.word	0x1007ada8
 23fbdcc:	00000048 	.word	0x00000048

023fbdd0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fbdd0:	b509      	push	{r0, r3, lr}
 23fbdd2:	4804      	ldr	r0, [pc, #16]	; (23fbde4 <log_level_name+0x14>)
 23fbdd4:	6800      	ldr	r0, [r0, #0]
 23fbdd6:	4b04      	ldr	r3, [pc, #16]	; (23fbde8 <log_level_name+0x18>)
 23fbdd8:	4403      	add	r3, r0
 23fbdda:	681b      	ldr	r3, [r3, #0]
 23fbddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fbdde:	9302      	str	r3, [sp, #8]
 23fbde0:	bd09      	pop	{r0, r3, pc}
 23fbde2:	0000      	.short	0x0000
 23fbde4:	1007ada8 	.word	0x1007ada8
 23fbde8:	00000048 	.word	0x00000048

023fbdec <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fbdec:	b509      	push	{r0, r3, lr}
 23fbdee:	4804      	ldr	r0, [pc, #16]	; (23fbe00 <log_set_callbacks+0x14>)
 23fbdf0:	6800      	ldr	r0, [r0, #0]
 23fbdf2:	4b04      	ldr	r3, [pc, #16]	; (23fbe04 <log_set_callbacks+0x18>)
 23fbdf4:	4403      	add	r3, r0
 23fbdf6:	681b      	ldr	r3, [r3, #0]
 23fbdf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fbdfa:	9302      	str	r3, [sp, #8]
 23fbdfc:	bd09      	pop	{r0, r3, pc}
 23fbdfe:	0000      	.short	0x0000
 23fbe00:	1007ada8 	.word	0x1007ada8
 23fbe04:	00000048 	.word	0x00000048

023fbe08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fbe08:	b509      	push	{r0, r3, lr}
 23fbe0a:	4804      	ldr	r0, [pc, #16]	; (23fbe1c <set_system_mode+0x14>)
 23fbe0c:	6800      	ldr	r0, [r0, #0]
 23fbe0e:	4b04      	ldr	r3, [pc, #16]	; (23fbe20 <set_system_mode+0x18>)
 23fbe10:	4403      	add	r3, r0
 23fbe12:	681b      	ldr	r3, [r3, #0]
 23fbe14:	685b      	ldr	r3, [r3, #4]
 23fbe16:	9302      	str	r3, [sp, #8]
 23fbe18:	bd09      	pop	{r0, r3, pc}
 23fbe1a:	0000      	.short	0x0000
 23fbe1c:	1007ada8 	.word	0x1007ada8
 23fbe20:	00000008 	.word	0x00000008

023fbe24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fbe24:	b509      	push	{r0, r3, lr}
 23fbe26:	4804      	ldr	r0, [pc, #16]	; (23fbe38 <system_delay_ms+0x14>)
 23fbe28:	6800      	ldr	r0, [r0, #0]
 23fbe2a:	4b04      	ldr	r3, [pc, #16]	; (23fbe3c <system_delay_ms+0x18>)
 23fbe2c:	4403      	add	r3, r0
 23fbe2e:	681b      	ldr	r3, [r3, #0]
 23fbe30:	695b      	ldr	r3, [r3, #20]
 23fbe32:	9302      	str	r3, [sp, #8]
 23fbe34:	bd09      	pop	{r0, r3, pc}
 23fbe36:	0000      	.short	0x0000
 23fbe38:	1007ada8 	.word	0x1007ada8
 23fbe3c:	00000008 	.word	0x00000008

023fbe40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fbe40:	b509      	push	{r0, r3, lr}
 23fbe42:	4804      	ldr	r0, [pc, #16]	; (23fbe54 <system_ctrl_set_app_request_handler+0x14>)
 23fbe44:	6800      	ldr	r0, [r0, #0]
 23fbe46:	4b04      	ldr	r3, [pc, #16]	; (23fbe58 <system_ctrl_set_app_request_handler+0x18>)
 23fbe48:	4403      	add	r3, r0
 23fbe4a:	681b      	ldr	r3, [r3, #0]
 23fbe4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fbe50:	9302      	str	r3, [sp, #8]
 23fbe52:	bd09      	pop	{r0, r3, pc}
 23fbe54:	1007ada8 	.word	0x1007ada8
 23fbe58:	00000008 	.word	0x00000008

023fbe5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fbe5c:	b509      	push	{r0, r3, lr}
 23fbe5e:	4804      	ldr	r0, [pc, #16]	; (23fbe70 <system_ctrl_set_result+0x14>)
 23fbe60:	6800      	ldr	r0, [r0, #0]
 23fbe62:	4b04      	ldr	r3, [pc, #16]	; (23fbe74 <system_ctrl_set_result+0x18>)
 23fbe64:	4403      	add	r3, r0
 23fbe66:	681b      	ldr	r3, [r3, #0]
 23fbe68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fbe6c:	9302      	str	r3, [sp, #8]
 23fbe6e:	bd09      	pop	{r0, r3, pc}
 23fbe70:	1007ada8 	.word	0x1007ada8
 23fbe74:	00000008 	.word	0x00000008

023fbe78 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fbe78:	b509      	push	{r0, r3, lr}
 23fbe7a:	4804      	ldr	r0, [pc, #16]	; (23fbe8c <spark_process+0x14>)
 23fbe7c:	6800      	ldr	r0, [r0, #0]
 23fbe7e:	4b04      	ldr	r3, [pc, #16]	; (23fbe90 <spark_process+0x18>)
 23fbe80:	4403      	add	r3, r0
 23fbe82:	681b      	ldr	r3, [r3, #0]
 23fbe84:	689b      	ldr	r3, [r3, #8]
 23fbe86:	9302      	str	r3, [sp, #8]
 23fbe88:	bd09      	pop	{r0, r3, pc}
 23fbe8a:	0000      	.short	0x0000
 23fbe8c:	1007ada8 	.word	0x1007ada8
 23fbe90:	0000002c 	.word	0x0000002c

023fbe94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fbe94:	b509      	push	{r0, r3, lr}
 23fbe96:	4804      	ldr	r0, [pc, #16]	; (23fbea8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fbe98:	6800      	ldr	r0, [r0, #0]
 23fbe9a:	4b04      	ldr	r3, [pc, #16]	; (23fbeac <spark_set_random_seed_from_cloud_handler+0x18>)
 23fbe9c:	4403      	add	r3, r0
 23fbe9e:	681b      	ldr	r3, [r3, #0]
 23fbea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbea2:	9302      	str	r3, [sp, #8]
 23fbea4:	bd09      	pop	{r0, r3, pc}
 23fbea6:	0000      	.short	0x0000
 23fbea8:	1007ada8 	.word	0x1007ada8
 23fbeac:	0000002c 	.word	0x0000002c

023fbeb0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbeb0:	b509      	push	{r0, r3, lr}
 23fbeb2:	4804      	ldr	r0, [pc, #16]	; (23fbec4 <network_connect+0x14>)
 23fbeb4:	6800      	ldr	r0, [r0, #0]
 23fbeb6:	4b04      	ldr	r3, [pc, #16]	; (23fbec8 <network_connect+0x18>)
 23fbeb8:	4403      	add	r3, r0
 23fbeba:	681b      	ldr	r3, [r3, #0]
 23fbebc:	685b      	ldr	r3, [r3, #4]
 23fbebe:	9302      	str	r3, [sp, #8]
 23fbec0:	bd09      	pop	{r0, r3, pc}
 23fbec2:	0000      	.short	0x0000
 23fbec4:	1007ada8 	.word	0x1007ada8
 23fbec8:	00000028 	.word	0x00000028

023fbecc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fbecc:	b509      	push	{r0, r3, lr}
 23fbece:	4804      	ldr	r0, [pc, #16]	; (23fbee0 <network_connecting+0x14>)
 23fbed0:	6800      	ldr	r0, [r0, #0]
 23fbed2:	4b04      	ldr	r3, [pc, #16]	; (23fbee4 <network_connecting+0x18>)
 23fbed4:	4403      	add	r3, r0
 23fbed6:	681b      	ldr	r3, [r3, #0]
 23fbed8:	689b      	ldr	r3, [r3, #8]
 23fbeda:	9302      	str	r3, [sp, #8]
 23fbedc:	bd09      	pop	{r0, r3, pc}
 23fbede:	0000      	.short	0x0000
 23fbee0:	1007ada8 	.word	0x1007ada8
 23fbee4:	00000028 	.word	0x00000028

023fbee8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fbee8:	b509      	push	{r0, r3, lr}
 23fbeea:	4804      	ldr	r0, [pc, #16]	; (23fbefc <network_disconnect+0x14>)
 23fbeec:	6800      	ldr	r0, [r0, #0]
 23fbeee:	4b04      	ldr	r3, [pc, #16]	; (23fbf00 <network_disconnect+0x18>)
 23fbef0:	4403      	add	r3, r0
 23fbef2:	681b      	ldr	r3, [r3, #0]
 23fbef4:	68db      	ldr	r3, [r3, #12]
 23fbef6:	9302      	str	r3, [sp, #8]
 23fbef8:	bd09      	pop	{r0, r3, pc}
 23fbefa:	0000      	.short	0x0000
 23fbefc:	1007ada8 	.word	0x1007ada8
 23fbf00:	00000028 	.word	0x00000028

023fbf04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fbf04:	b509      	push	{r0, r3, lr}
 23fbf06:	4804      	ldr	r0, [pc, #16]	; (23fbf18 <network_ready+0x14>)
 23fbf08:	6800      	ldr	r0, [r0, #0]
 23fbf0a:	4b04      	ldr	r3, [pc, #16]	; (23fbf1c <network_ready+0x18>)
 23fbf0c:	4403      	add	r3, r0
 23fbf0e:	681b      	ldr	r3, [r3, #0]
 23fbf10:	691b      	ldr	r3, [r3, #16]
 23fbf12:	9302      	str	r3, [sp, #8]
 23fbf14:	bd09      	pop	{r0, r3, pc}
 23fbf16:	0000      	.short	0x0000
 23fbf18:	1007ada8 	.word	0x1007ada8
 23fbf1c:	00000028 	.word	0x00000028

023fbf20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbf20:	b509      	push	{r0, r3, lr}
 23fbf22:	4804      	ldr	r0, [pc, #16]	; (23fbf34 <network_on+0x14>)
 23fbf24:	6800      	ldr	r0, [r0, #0]
 23fbf26:	4b04      	ldr	r3, [pc, #16]	; (23fbf38 <network_on+0x18>)
 23fbf28:	4403      	add	r3, r0
 23fbf2a:	681b      	ldr	r3, [r3, #0]
 23fbf2c:	695b      	ldr	r3, [r3, #20]
 23fbf2e:	9302      	str	r3, [sp, #8]
 23fbf30:	bd09      	pop	{r0, r3, pc}
 23fbf32:	0000      	.short	0x0000
 23fbf34:	1007ada8 	.word	0x1007ada8
 23fbf38:	00000028 	.word	0x00000028

023fbf3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbf3c:	b509      	push	{r0, r3, lr}
 23fbf3e:	4804      	ldr	r0, [pc, #16]	; (23fbf50 <network_off+0x14>)
 23fbf40:	6800      	ldr	r0, [r0, #0]
 23fbf42:	4b04      	ldr	r3, [pc, #16]	; (23fbf54 <network_off+0x18>)
 23fbf44:	4403      	add	r3, r0
 23fbf46:	681b      	ldr	r3, [r3, #0]
 23fbf48:	699b      	ldr	r3, [r3, #24]
 23fbf4a:	9302      	str	r3, [sp, #8]
 23fbf4c:	bd09      	pop	{r0, r3, pc}
 23fbf4e:	0000      	.short	0x0000
 23fbf50:	1007ada8 	.word	0x1007ada8
 23fbf54:	00000028 	.word	0x00000028

023fbf58 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fbf58:	b509      	push	{r0, r3, lr}
 23fbf5a:	4804      	ldr	r0, [pc, #16]	; (23fbf6c <network_listen+0x14>)
 23fbf5c:	6800      	ldr	r0, [r0, #0]
 23fbf5e:	4b04      	ldr	r3, [pc, #16]	; (23fbf70 <network_listen+0x18>)
 23fbf60:	4403      	add	r3, r0
 23fbf62:	681b      	ldr	r3, [r3, #0]
 23fbf64:	69db      	ldr	r3, [r3, #28]
 23fbf66:	9302      	str	r3, [sp, #8]
 23fbf68:	bd09      	pop	{r0, r3, pc}
 23fbf6a:	0000      	.short	0x0000
 23fbf6c:	1007ada8 	.word	0x1007ada8
 23fbf70:	00000028 	.word	0x00000028

023fbf74 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fbf74:	b509      	push	{r0, r3, lr}
 23fbf76:	4804      	ldr	r0, [pc, #16]	; (23fbf88 <network_listening+0x14>)
 23fbf78:	6800      	ldr	r0, [r0, #0]
 23fbf7a:	4b04      	ldr	r3, [pc, #16]	; (23fbf8c <network_listening+0x18>)
 23fbf7c:	4403      	add	r3, r0
 23fbf7e:	681b      	ldr	r3, [r3, #0]
 23fbf80:	6a1b      	ldr	r3, [r3, #32]
 23fbf82:	9302      	str	r3, [sp, #8]
 23fbf84:	bd09      	pop	{r0, r3, pc}
 23fbf86:	0000      	.short	0x0000
 23fbf88:	1007ada8 	.word	0x1007ada8
 23fbf8c:	00000028 	.word	0x00000028

023fbf90 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fbf90:	b509      	push	{r0, r3, lr}
 23fbf92:	4804      	ldr	r0, [pc, #16]	; (23fbfa4 <network_set_listen_timeout+0x14>)
 23fbf94:	6800      	ldr	r0, [r0, #0]
 23fbf96:	4b04      	ldr	r3, [pc, #16]	; (23fbfa8 <network_set_listen_timeout+0x18>)
 23fbf98:	4403      	add	r3, r0
 23fbf9a:	681b      	ldr	r3, [r3, #0]
 23fbf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbf9e:	9302      	str	r3, [sp, #8]
 23fbfa0:	bd09      	pop	{r0, r3, pc}
 23fbfa2:	0000      	.short	0x0000
 23fbfa4:	1007ada8 	.word	0x1007ada8
 23fbfa8:	00000028 	.word	0x00000028

023fbfac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fbfac:	b509      	push	{r0, r3, lr}
 23fbfae:	4804      	ldr	r0, [pc, #16]	; (23fbfc0 <network_get_listen_timeout+0x14>)
 23fbfb0:	6800      	ldr	r0, [r0, #0]
 23fbfb2:	4b04      	ldr	r3, [pc, #16]	; (23fbfc4 <network_get_listen_timeout+0x18>)
 23fbfb4:	4403      	add	r3, r0
 23fbfb6:	681b      	ldr	r3, [r3, #0]
 23fbfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbfba:	9302      	str	r3, [sp, #8]
 23fbfbc:	bd09      	pop	{r0, r3, pc}
 23fbfbe:	0000      	.short	0x0000
 23fbfc0:	1007ada8 	.word	0x1007ada8
 23fbfc4:	00000028 	.word	0x00000028

023fbfc8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fbfc8:	b509      	push	{r0, r3, lr}
 23fbfca:	4804      	ldr	r0, [pc, #16]	; (23fbfdc <network_is_on+0x14>)
 23fbfcc:	6800      	ldr	r0, [r0, #0]
 23fbfce:	4b04      	ldr	r3, [pc, #16]	; (23fbfe0 <network_is_on+0x18>)
 23fbfd0:	4403      	add	r3, r0
 23fbfd2:	681b      	ldr	r3, [r3, #0]
 23fbfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbfd6:	9302      	str	r3, [sp, #8]
 23fbfd8:	bd09      	pop	{r0, r3, pc}
 23fbfda:	0000      	.short	0x0000
 23fbfdc:	1007ada8 	.word	0x1007ada8
 23fbfe0:	00000028 	.word	0x00000028

023fbfe4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fbfe4:	b509      	push	{r0, r3, lr}
 23fbfe6:	4804      	ldr	r0, [pc, #16]	; (23fbff8 <network_is_off+0x14>)
 23fbfe8:	6800      	ldr	r0, [r0, #0]
 23fbfea:	4b04      	ldr	r3, [pc, #16]	; (23fbffc <network_is_off+0x18>)
 23fbfec:	4403      	add	r3, r0
 23fbfee:	681b      	ldr	r3, [r3, #0]
 23fbff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbff2:	9302      	str	r3, [sp, #8]
 23fbff4:	bd09      	pop	{r0, r3, pc}
 23fbff6:	0000      	.short	0x0000
 23fbff8:	1007ada8 	.word	0x1007ada8
 23fbffc:	00000028 	.word	0x00000028

023fc000 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc000:	b509      	push	{r0, r3, lr}
 23fc002:	4804      	ldr	r0, [pc, #16]	; (23fc014 <malloc+0x14>)
 23fc004:	6800      	ldr	r0, [r0, #0]
 23fc006:	4b04      	ldr	r3, [pc, #16]	; (23fc018 <malloc+0x18>)
 23fc008:	4403      	add	r3, r0
 23fc00a:	681b      	ldr	r3, [r3, #0]
 23fc00c:	681b      	ldr	r3, [r3, #0]
 23fc00e:	9302      	str	r3, [sp, #8]
 23fc010:	bd09      	pop	{r0, r3, pc}
 23fc012:	0000      	.short	0x0000
 23fc014:	1007ada8 	.word	0x1007ada8
 23fc018:	00000004 	.word	0x00000004

023fc01c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc01c:	b509      	push	{r0, r3, lr}
 23fc01e:	4804      	ldr	r0, [pc, #16]	; (23fc030 <free+0x14>)
 23fc020:	6800      	ldr	r0, [r0, #0]
 23fc022:	4b04      	ldr	r3, [pc, #16]	; (23fc034 <free+0x18>)
 23fc024:	4403      	add	r3, r0
 23fc026:	681b      	ldr	r3, [r3, #0]
 23fc028:	685b      	ldr	r3, [r3, #4]
 23fc02a:	9302      	str	r3, [sp, #8]
 23fc02c:	bd09      	pop	{r0, r3, pc}
 23fc02e:	0000      	.short	0x0000
 23fc030:	1007ada8 	.word	0x1007ada8
 23fc034:	00000004 	.word	0x00000004

023fc038 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc038:	b509      	push	{r0, r3, lr}
 23fc03a:	4804      	ldr	r0, [pc, #16]	; (23fc04c <realloc+0x14>)
 23fc03c:	6800      	ldr	r0, [r0, #0]
 23fc03e:	4b04      	ldr	r3, [pc, #16]	; (23fc050 <realloc+0x18>)
 23fc040:	4403      	add	r3, r0
 23fc042:	681b      	ldr	r3, [r3, #0]
 23fc044:	689b      	ldr	r3, [r3, #8]
 23fc046:	9302      	str	r3, [sp, #8]
 23fc048:	bd09      	pop	{r0, r3, pc}
 23fc04a:	0000      	.short	0x0000
 23fc04c:	1007ada8 	.word	0x1007ada8
 23fc050:	00000004 	.word	0x00000004

023fc054 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc054:	b509      	push	{r0, r3, lr}
 23fc056:	4804      	ldr	r0, [pc, #16]	; (23fc068 <vsnprintf+0x14>)
 23fc058:	6800      	ldr	r0, [r0, #0]
 23fc05a:	4b04      	ldr	r3, [pc, #16]	; (23fc06c <vsnprintf+0x18>)
 23fc05c:	4403      	add	r3, r0
 23fc05e:	681b      	ldr	r3, [r3, #0]
 23fc060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc062:	9302      	str	r3, [sp, #8]
 23fc064:	bd09      	pop	{r0, r3, pc}
 23fc066:	0000      	.short	0x0000
 23fc068:	1007ada8 	.word	0x1007ada8
 23fc06c:	00000004 	.word	0x00000004

023fc070 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fc070:	b509      	push	{r0, r3, lr}
 23fc072:	4804      	ldr	r0, [pc, #16]	; (23fc084 <__errno+0x14>)
 23fc074:	6800      	ldr	r0, [r0, #0]
 23fc076:	4b04      	ldr	r3, [pc, #16]	; (23fc088 <__errno+0x18>)
 23fc078:	4403      	add	r3, r0
 23fc07a:	681b      	ldr	r3, [r3, #0]
 23fc07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc07e:	9302      	str	r3, [sp, #8]
 23fc080:	bd09      	pop	{r0, r3, pc}
 23fc082:	0000      	.short	0x0000
 23fc084:	1007ada8 	.word	0x1007ada8
 23fc088:	00000004 	.word	0x00000004

023fc08c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc08c:	b509      	push	{r0, r3, lr}
 23fc08e:	4804      	ldr	r0, [pc, #16]	; (23fc0a0 <__assert_func+0x14>)
 23fc090:	6800      	ldr	r0, [r0, #0]
 23fc092:	4b04      	ldr	r3, [pc, #16]	; (23fc0a4 <__assert_func+0x18>)
 23fc094:	4403      	add	r3, r0
 23fc096:	681b      	ldr	r3, [r3, #0]
 23fc098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc09a:	9302      	str	r3, [sp, #8]
 23fc09c:	bd09      	pop	{r0, r3, pc}
 23fc09e:	0000      	.short	0x0000
 23fc0a0:	1007ada8 	.word	0x1007ada8
 23fc0a4:	00000004 	.word	0x00000004

023fc0a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc0a8:	b509      	push	{r0, r3, lr}
 23fc0aa:	4804      	ldr	r0, [pc, #16]	; (23fc0bc <newlib_impure_ptr_callback+0x14>)
 23fc0ac:	6800      	ldr	r0, [r0, #0]
 23fc0ae:	4b04      	ldr	r3, [pc, #16]	; (23fc0c0 <newlib_impure_ptr_callback+0x18>)
 23fc0b0:	4403      	add	r3, r0
 23fc0b2:	681b      	ldr	r3, [r3, #0]
 23fc0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc0b6:	9302      	str	r3, [sp, #8]
 23fc0b8:	bd09      	pop	{r0, r3, pc}
 23fc0ba:	0000      	.short	0x0000
 23fc0bc:	1007ada8 	.word	0x1007ada8
 23fc0c0:	00000004 	.word	0x00000004

023fc0c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fc0c4:	2100      	movs	r1, #0
 23fc0c6:	f7ff bead 	b.w	23fbe24 <system_delay_ms>

023fc0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fc0ca:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fc0cc:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fc0ce:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fc0d0:	b17c      	cbz	r4, 23fc0f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fc0d2:	6863      	ldr	r3, [r4, #4]
 23fc0d4:	3b01      	subs	r3, #1
 23fc0d6:	6063      	str	r3, [r4, #4]
 23fc0d8:	b95b      	cbnz	r3, 23fc0f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fc0da:	6823      	ldr	r3, [r4, #0]
 23fc0dc:	4620      	mov	r0, r4
 23fc0de:	689b      	ldr	r3, [r3, #8]
 23fc0e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc0e2:	68a3      	ldr	r3, [r4, #8]
 23fc0e4:	3b01      	subs	r3, #1
 23fc0e6:	60a3      	str	r3, [r4, #8]
 23fc0e8:	b91b      	cbnz	r3, 23fc0f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fc0ea:	6823      	ldr	r3, [r4, #0]
 23fc0ec:	4620      	mov	r0, r4
 23fc0ee:	68db      	ldr	r3, [r3, #12]
 23fc0f0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fc0f2:	4628      	mov	r0, r5
 23fc0f4:	bd38      	pop	{r3, r4, r5, pc}

023fc0f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fc0f6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc0f8:	6843      	ldr	r3, [r0, #4]
    {
 23fc0fa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc0fc:	3b01      	subs	r3, #1
 23fc0fe:	6043      	str	r3, [r0, #4]
 23fc100:	b963      	cbnz	r3, 23fc11c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fc102:	6803      	ldr	r3, [r0, #0]
 23fc104:	689b      	ldr	r3, [r3, #8]
 23fc106:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc108:	68a3      	ldr	r3, [r4, #8]
 23fc10a:	3b01      	subs	r3, #1
 23fc10c:	60a3      	str	r3, [r4, #8]
 23fc10e:	b92b      	cbnz	r3, 23fc11c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc110:	6823      	ldr	r3, [r4, #0]
 23fc112:	4620      	mov	r0, r4
    }
 23fc114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc118:	68db      	ldr	r3, [r3, #12]
 23fc11a:	4718      	bx	r3
    }
 23fc11c:	bd10      	pop	{r4, pc}

023fc11e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc11e:	b570      	push	{r4, r5, r6, lr}
 23fc120:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc122:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc126:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fc12a:	42ae      	cmp	r6, r5
 23fc12c:	d004      	beq.n	23fc138 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fc12e:	4628      	mov	r0, r5
 23fc130:	f001 fc20 	bl	23fd974 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fc134:	3510      	adds	r5, #16
 23fc136:	e7f8      	b.n	23fc12a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc138:	6820      	ldr	r0, [r4, #0]
 23fc13a:	f7ff ff6f 	bl	23fc01c <free>
    AllocatorT::free(data_);
}
 23fc13e:	4620      	mov	r0, r4
 23fc140:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc144 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fc144:	2300      	movs	r3, #0
 23fc146:	4802      	ldr	r0, [pc, #8]	; (23fc150 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fc148:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fc14a:	f7ff bb93 	b.w	23fb874 <os_mutex_recursive_create>
 23fc14e:	bf00      	nop
 23fc150:	1007ae58 	.word	0x1007ae58

023fc154 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc154:	2200      	movs	r2, #0
 23fc156:	6840      	ldr	r0, [r0, #4]
 23fc158:	4611      	mov	r1, r2
 23fc15a:	f7ff bf0b 	b.w	23fbf74 <network_listening>

023fc15e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc15e:	2200      	movs	r2, #0
 23fc160:	6840      	ldr	r0, [r0, #4]
 23fc162:	4611      	mov	r1, r2
 23fc164:	f7ff bf22 	b.w	23fbfac <network_get_listen_timeout>

023fc168 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc168:	2200      	movs	r2, #0
 23fc16a:	6840      	ldr	r0, [r0, #4]
 23fc16c:	f7ff bf10 	b.w	23fbf90 <network_set_listen_timeout>

023fc170 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc170:	2200      	movs	r2, #0
 23fc172:	6840      	ldr	r0, [r0, #4]
 23fc174:	f081 0101 	eor.w	r1, r1, #1
 23fc178:	f7ff beee 	b.w	23fbf58 <network_listen>

023fc17c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc17c:	2300      	movs	r3, #0
 23fc17e:	6840      	ldr	r0, [r0, #4]
 23fc180:	461a      	mov	r2, r3
 23fc182:	4619      	mov	r1, r3
 23fc184:	f7ff beda 	b.w	23fbf3c <network_off>

023fc188 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc188:	2300      	movs	r3, #0
 23fc18a:	6840      	ldr	r0, [r0, #4]
 23fc18c:	461a      	mov	r2, r3
 23fc18e:	4619      	mov	r1, r3
 23fc190:	f7ff bec6 	b.w	23fbf20 <network_on>

023fc194 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fc194:	2200      	movs	r2, #0
 23fc196:	6840      	ldr	r0, [r0, #4]
 23fc198:	4611      	mov	r1, r2
 23fc19a:	f7ff beb3 	b.w	23fbf04 <network_ready>

023fc19e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc19e:	2200      	movs	r2, #0
 23fc1a0:	6840      	ldr	r0, [r0, #4]
 23fc1a2:	4611      	mov	r1, r2
 23fc1a4:	f7ff be92 	b.w	23fbecc <network_connecting>

023fc1a8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc1a8:	2200      	movs	r2, #0
 23fc1aa:	2102      	movs	r1, #2
 23fc1ac:	6840      	ldr	r0, [r0, #4]
 23fc1ae:	f7ff be9b 	b.w	23fbee8 <network_disconnect>

023fc1b2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc1b2:	2300      	movs	r3, #0
 23fc1b4:	6840      	ldr	r0, [r0, #4]
 23fc1b6:	461a      	mov	r2, r3
 23fc1b8:	f7ff be7a 	b.w	23fbeb0 <network_connect>

023fc1bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc1bc:	2203      	movs	r2, #3
 23fc1be:	4b02      	ldr	r3, [pc, #8]	; (23fc1c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fc1c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fc1c2:	4a02      	ldr	r2, [pc, #8]	; (23fc1cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fc1c4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fc1c6:	4770      	bx	lr
 23fc1c8:	1007ae5c 	.word	0x1007ae5c
 23fc1cc:	023ffb70 	.word	0x023ffb70

023fc1d0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fc1d0:	4770      	bx	lr

023fc1d2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fc1d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc1d4:	4606      	mov	r6, r0
 23fc1d6:	4615      	mov	r5, r2
 23fc1d8:	460c      	mov	r4, r1
 23fc1da:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fc1dc:	42bc      	cmp	r4, r7
 23fc1de:	d006      	beq.n	23fc1ee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fc1e0:	6833      	ldr	r3, [r6, #0]
 23fc1e2:	4630      	mov	r0, r6
 23fc1e4:	689b      	ldr	r3, [r3, #8]
 23fc1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fc1ea:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fc1ec:	e7f6      	b.n	23fc1dc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fc1ee:	4628      	mov	r0, r5
 23fc1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc1f2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fc1f2:	2200      	movs	r2, #0
 23fc1f4:	7c00      	ldrb	r0, [r0, #16]
 23fc1f6:	f7ff bbd7 	b.w	23fb9a8 <hal_i2c_write>

023fc1fa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fc1fa:	2100      	movs	r1, #0
 23fc1fc:	7c00      	ldrb	r0, [r0, #16]
 23fc1fe:	f7ff bbe1 	b.w	23fb9c4 <hal_i2c_available>

023fc202 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fc202:	2100      	movs	r1, #0
 23fc204:	7c00      	ldrb	r0, [r0, #16]
 23fc206:	f7ff bbeb 	b.w	23fb9e0 <hal_i2c_read>

023fc20a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fc20a:	2100      	movs	r1, #0
 23fc20c:	7c00      	ldrb	r0, [r0, #16]
 23fc20e:	f7ff bbf5 	b.w	23fb9fc <hal_i2c_peek>

023fc212 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fc212:	2100      	movs	r1, #0
 23fc214:	7c00      	ldrb	r0, [r0, #16]
 23fc216:	f7ff bbff 	b.w	23fba18 <hal_i2c_flush>

023fc21a <_ZN7TwoWireD0Ev>:
 23fc21a:	b510      	push	{r4, lr}
 23fc21c:	4604      	mov	r4, r0
 23fc21e:	2114      	movs	r1, #20
 23fc220:	f7fe ffe5 	bl	23fb1ee <_ZdlPvj>
 23fc224:	4620      	mov	r0, r4
 23fc226:	bd10      	pop	{r4, pc}

023fc228 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc228:	b538      	push	{r3, r4, r5, lr}
 23fc22a:	4604      	mov	r4, r0
 23fc22c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc22e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc232:	2200      	movs	r2, #0
 23fc234:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fc238:	4b09      	ldr	r3, [pc, #36]	; (23fc260 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fc23a:	4608      	mov	r0, r1
  _i2c = i2c;
 23fc23c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc23e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fc240:	4629      	mov	r1, r5
 23fc242:	f7ff fc05 	bl	23fba50 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc246:	30bf      	adds	r0, #191	; 0xbf
 23fc248:	d108      	bne.n	23fc25c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fc24a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc24c:	07db      	lsls	r3, r3, #31
 23fc24e:	d505      	bpl.n	23fc25c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fc250:	6868      	ldr	r0, [r5, #4]
 23fc252:	f7ff fee3 	bl	23fc01c <free>
    free(conf.tx_buffer);
 23fc256:	68e8      	ldr	r0, [r5, #12]
 23fc258:	f7ff fee0 	bl	23fc01c <free>
}
 23fc25c:	4620      	mov	r0, r4
 23fc25e:	bd38      	pop	{r3, r4, r5, pc}
 23fc260:	023ffbac 	.word	0x023ffbac

023fc264 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fc264:	4770      	bx	lr

023fc266 <_ZN9IPAddressD0Ev>:
 23fc266:	b510      	push	{r4, lr}
 23fc268:	4604      	mov	r4, r0
 23fc26a:	2118      	movs	r1, #24
 23fc26c:	f7fe ffbf 	bl	23fb1ee <_ZdlPvj>
 23fc270:	4620      	mov	r0, r4
 23fc272:	bd10      	pop	{r4, pc}

023fc274 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc274:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc276:	7d03      	ldrb	r3, [r0, #20]
{
 23fc278:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc27a:	2b06      	cmp	r3, #6
 23fc27c:	f04f 0400 	mov.w	r4, #0
{
 23fc280:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc282:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc286:	d012      	beq.n	23fc2ae <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc288:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc28c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc290:	220a      	movs	r2, #10
 23fc292:	4630      	mov	r0, r6
 23fc294:	f001 fadb 	bl	23fd84e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc298:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc29a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc29c:	d019      	beq.n	23fc2d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc29e:	2c00      	cmp	r4, #0
 23fc2a0:	d0f4      	beq.n	23fc28c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc2a2:	212e      	movs	r1, #46	; 0x2e
 23fc2a4:	4630      	mov	r0, r6
 23fc2a6:	f001 fac3 	bl	23fd830 <_ZN5Print5printEc>
 23fc2aa:	4404      	add	r4, r0
 23fc2ac:	e7ee      	b.n	23fc28c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc2ae:	232f      	movs	r3, #47	; 0x2f
 23fc2b0:	466a      	mov	r2, sp
 23fc2b2:	4639      	mov	r1, r7
 23fc2b4:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc2b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc2ba:	f7ff fbd7 	bl	23fba6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc2be:	4668      	mov	r0, sp
 23fc2c0:	f7fe ff6c 	bl	23fb19c <strlen>
 23fc2c4:	6833      	ldr	r3, [r6, #0]
 23fc2c6:	4602      	mov	r2, r0
 23fc2c8:	4669      	mov	r1, sp
 23fc2ca:	4630      	mov	r0, r6
 23fc2cc:	68db      	ldr	r3, [r3, #12]
 23fc2ce:	4798      	blx	r3
 23fc2d0:	4604      	mov	r4, r0
    }
    return n;
}
 23fc2d2:	4620      	mov	r0, r4
 23fc2d4:	b00d      	add	sp, #52	; 0x34
 23fc2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc2d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc2d8:	b510      	push	{r4, lr}
 23fc2da:	4604      	mov	r4, r0
 23fc2dc:	4b04      	ldr	r3, [pc, #16]	; (23fc2f0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc2de:	2211      	movs	r2, #17
 23fc2e0:	2100      	movs	r1, #0
 23fc2e2:	f840 3b04 	str.w	r3, [r0], #4
 23fc2e6:	f003 fa8c 	bl	23ff802 <memset>
}
 23fc2ea:	4620      	mov	r0, r4
 23fc2ec:	bd10      	pop	{r4, pc}
 23fc2ee:	bf00      	nop
 23fc2f0:	023ffbd4 	.word	0x023ffbd4

023fc2f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc2f4:	4603      	mov	r3, r0
 23fc2f6:	4a07      	ldr	r2, [pc, #28]	; (23fc314 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc2f8:	b510      	push	{r4, lr}
 23fc2fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc2fe:	f101 0210 	add.w	r2, r1, #16
 23fc302:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc306:	4291      	cmp	r1, r2
 23fc308:	f843 4b04 	str.w	r4, [r3], #4
 23fc30c:	d1f9      	bne.n	23fc302 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc30e:	780a      	ldrb	r2, [r1, #0]
 23fc310:	701a      	strb	r2, [r3, #0]
}
 23fc312:	bd10      	pop	{r4, pc}
 23fc314:	023ffbd4 	.word	0x023ffbd4

023fc318 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc318:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc31a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc31e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc322:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc326:	2304      	movs	r3, #4
 23fc328:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc32c:	6041      	str	r1, [r0, #4]
 23fc32e:	7503      	strb	r3, [r0, #20]
}
 23fc330:	bd10      	pop	{r4, pc}
	...

023fc334 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc334:	b507      	push	{r0, r1, r2, lr}
 23fc336:	4b06      	ldr	r3, [pc, #24]	; (23fc350 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc338:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc33a:	78cb      	ldrb	r3, [r1, #3]
 23fc33c:	9300      	str	r3, [sp, #0]
 23fc33e:	788b      	ldrb	r3, [r1, #2]
 23fc340:	784a      	ldrb	r2, [r1, #1]
 23fc342:	7809      	ldrb	r1, [r1, #0]
 23fc344:	f7ff ffe8 	bl	23fc318 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc348:	b003      	add	sp, #12
 23fc34a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc34e:	bf00      	nop
 23fc350:	023ffbd4 	.word	0x023ffbd4

023fc354 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fc354:	2201      	movs	r2, #1
 23fc356:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fc35a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fc35e:	4618      	mov	r0, r3
 23fc360:	2901      	cmp	r1, #1
 23fc362:	d108      	bne.n	23fc376 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fc364:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fc368:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fc36c:	3a01      	subs	r2, #1
 23fc36e:	f103 0310 	add.w	r3, r3, #16
 23fc372:	d1f2      	bne.n	23fc35a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fc374:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fc376:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fc378:	bf04      	itt	eq
 23fc37a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fc37e:	1852      	addeq	r2, r2, r1
 23fc380:	e7f4      	b.n	23fc36c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fc382 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc382:	b40e      	push	{r1, r2, r3}
 23fc384:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc386:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc388:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc38a:	af00      	add	r7, sp, #0
 23fc38c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fc390:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc394:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc396:	462b      	mov	r3, r5
 23fc398:	1878      	adds	r0, r7, r1
 23fc39a:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc39c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc39e:	f7ff fe59 	bl	23fc054 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fc3a2:	280f      	cmp	r0, #15
 23fc3a4:	687a      	ldr	r2, [r7, #4]
 23fc3a6:	d91a      	bls.n	23fc3de <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fc3a8:	f100 0308 	add.w	r3, r0, #8
 23fc3ac:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fc3b0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fc3b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3b6:	1c41      	adds	r1, r0, #1
 23fc3b8:	462b      	mov	r3, r5
 23fc3ba:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc3bc:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3be:	f7ff fe49 	bl	23fc054 <vsnprintf>
        if (n > 0) {
 23fc3c2:	1e02      	subs	r2, r0, #0
 23fc3c4:	dd04      	ble.n	23fc3d0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fc3c6:	6823      	ldr	r3, [r4, #0]
 23fc3c8:	4669      	mov	r1, sp
 23fc3ca:	4620      	mov	r0, r4
 23fc3cc:	689b      	ldr	r3, [r3, #8]
 23fc3ce:	4798      	blx	r3
 23fc3d0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fc3d2:	3720      	adds	r7, #32
 23fc3d4:	46bd      	mov	sp, r7
 23fc3d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc3da:	b003      	add	sp, #12
 23fc3dc:	4770      	bx	lr
    } else if (n > 0) {
 23fc3de:	2800      	cmp	r0, #0
 23fc3e0:	d0f7      	beq.n	23fc3d2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fc3e2:	6823      	ldr	r3, [r4, #0]
 23fc3e4:	4602      	mov	r2, r0
 23fc3e6:	689b      	ldr	r3, [r3, #8]
 23fc3e8:	4620      	mov	r0, r4
 23fc3ea:	f107 0110 	add.w	r1, r7, #16
 23fc3ee:	4798      	blx	r3
}
 23fc3f0:	e7ef      	b.n	23fc3d2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fc3f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc3f2:	b538      	push	{r3, r4, r5, lr}
 23fc3f4:	680b      	ldr	r3, [r1, #0]
 23fc3f6:	4604      	mov	r4, r0
 23fc3f8:	6003      	str	r3, [r0, #0]
 23fc3fa:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fc3fc:	6843      	ldr	r3, [r0, #4]
 23fc3fe:	429d      	cmp	r5, r3
 23fc400:	d008      	beq.n	23fc414 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fc402:	b115      	cbz	r5, 23fc40a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fc404:	686b      	ldr	r3, [r5, #4]
 23fc406:	3301      	adds	r3, #1
 23fc408:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fc40a:	6860      	ldr	r0, [r4, #4]
 23fc40c:	b108      	cbz	r0, 23fc412 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fc40e:	f7ff fe72 	bl	23fc0f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fc412:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc414:	bd38      	pop	{r3, r4, r5, pc}

023fc416 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fc416:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc418:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fc41a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc41e:	2201      	movs	r2, #1
 23fc420:	689b      	ldr	r3, [r3, #8]
 23fc422:	f10d 0107 	add.w	r1, sp, #7
 23fc426:	4798      	blx	r3
}
 23fc428:	b003      	add	sp, #12
 23fc42a:	f85d fb04 	ldr.w	pc, [sp], #4

023fc42e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc42e:	460b      	mov	r3, r1
 23fc430:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fc432:	2200      	movs	r2, #0
 23fc434:	b510      	push	{r4, lr}
 23fc436:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc438:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fc43c:	6083      	str	r3, [r0, #8]
    if (t) {
 23fc43e:	b90b      	cbnz	r3, 23fc444 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fc440:	4620      	mov	r0, r4
 23fc442:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fc444:	f7ff ffd5 	bl	23fc3f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fc448:	e7fa      	b.n	23fc440 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fc44a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fc44a:	6883      	ldr	r3, [r0, #8]
 23fc44c:	b1eb      	cbz	r3, 23fc48a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fc44e:	781a      	ldrb	r2, [r3, #0]
 23fc450:	2a03      	cmp	r2, #3
 23fc452:	d81a      	bhi.n	23fc48a <_ZNK5spark9JSONValue4typeEv+0x40>
 23fc454:	e8df f002 	tbb	[pc, r2]
 23fc458:	1b021704 	.word	0x1b021704
 23fc45c:	2005      	movs	r0, #5
 23fc45e:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fc460:	6802      	ldr	r2, [r0, #0]
 23fc462:	685b      	ldr	r3, [r3, #4]
 23fc464:	6852      	ldr	r2, [r2, #4]
 23fc466:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fc468:	282d      	cmp	r0, #45	; 0x2d
 23fc46a:	d012      	beq.n	23fc492 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fc46c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fc470:	2b09      	cmp	r3, #9
 23fc472:	d90e      	bls.n	23fc492 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fc474:	2874      	cmp	r0, #116	; 0x74
 23fc476:	d00e      	beq.n	23fc496 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fc478:	2866      	cmp	r0, #102	; 0x66
 23fc47a:	d00c      	beq.n	23fc496 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fc47c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fc480:	4258      	negs	r0, r3
 23fc482:	4158      	adcs	r0, r3
 23fc484:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fc486:	2006      	movs	r0, #6
 23fc488:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fc48a:	2000      	movs	r0, #0
 23fc48c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fc48e:	2004      	movs	r0, #4
 23fc490:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fc492:	2003      	movs	r0, #3
 23fc494:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fc496:	2002      	movs	r0, #2
}
 23fc498:	4770      	bx	lr

023fc49a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fc49a:	b510      	push	{r4, lr}
 23fc49c:	4604      	mov	r4, r0
    switch (type()) {
 23fc49e:	f7ff ffd4 	bl	23fc44a <_ZNK5spark9JSONValue4typeEv>
 23fc4a2:	2802      	cmp	r0, #2
 23fc4a4:	d00e      	beq.n	23fc4c4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fc4a6:	1ec3      	subs	r3, r0, #3
 23fc4a8:	b2db      	uxtb	r3, r3
 23fc4aa:	2b01      	cmp	r3, #1
 23fc4ac:	d814      	bhi.n	23fc4d8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fc4ae:	6822      	ldr	r2, [r4, #0]
 23fc4b0:	68a3      	ldr	r3, [r4, #8]
 23fc4b2:	6850      	ldr	r0, [r2, #4]
 23fc4b4:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fc4b6:	220a      	movs	r2, #10
}
 23fc4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fc4bc:	2100      	movs	r1, #0
 23fc4be:	4418      	add	r0, r3
 23fc4c0:	f003 baa0 	b.w	23ffa04 <strtol>
        const char* const s = d_->json + t_->start;
 23fc4c4:	6822      	ldr	r2, [r4, #0]
 23fc4c6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fc4c8:	6852      	ldr	r2, [r2, #4]
 23fc4ca:	685b      	ldr	r3, [r3, #4]
 23fc4cc:	5cd0      	ldrb	r0, [r2, r3]
 23fc4ce:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fc4d2:	4258      	negs	r0, r3
 23fc4d4:	4158      	adcs	r0, r3
}
 23fc4d6:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fc4d8:	2000      	movs	r0, #0
 23fc4da:	e7fc      	b.n	23fc4d6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fc4dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc4dc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc4de:	2300      	movs	r3, #0
 23fc4e0:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc4e2:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fc4e6:	480e      	ldr	r0, [pc, #56]	; (23fc520 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fc4e8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fc4ec:	b1a9      	cbz	r1, 23fc51a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fc4ee:	780b      	ldrb	r3, [r1, #0]
 23fc4f0:	2b03      	cmp	r3, #3
 23fc4f2:	d006      	beq.n	23fc502 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fc4f4:	b98b      	cbnz	r3, 23fc51a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fc4f6:	6813      	ldr	r3, [r2, #0]
 23fc4f8:	6858      	ldr	r0, [r3, #4]
 23fc4fa:	684b      	ldr	r3, [r1, #4]
 23fc4fc:	5cc3      	ldrb	r3, [r0, r3]
 23fc4fe:	2b6e      	cmp	r3, #110	; 0x6e
 23fc500:	d007      	beq.n	23fc512 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fc502:	6813      	ldr	r3, [r2, #0]
 23fc504:	684d      	ldr	r5, [r1, #4]
 23fc506:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fc508:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fc50a:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fc50c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fc50e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fc510:	60e3      	str	r3, [r4, #12]
 23fc512:	4611      	mov	r1, r2
 23fc514:	4620      	mov	r0, r4
 23fc516:	f7ff ff6c 	bl	23fc3f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc51a:	4620      	mov	r0, r4
 23fc51c:	bd38      	pop	{r3, r4, r5, pc}
 23fc51e:	bf00      	nop
 23fc520:	023ffc43 	.word	0x023ffc43

023fc524 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc524:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc526:	2500      	movs	r5, #0
 23fc528:	460b      	mov	r3, r1
 23fc52a:	4604      	mov	r4, r0
 23fc52c:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc52e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fc532:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fc536:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fc53a:	b14b      	cbz	r3, 23fc550 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fc53c:	781a      	ldrb	r2, [r3, #0]
 23fc53e:	2a01      	cmp	r2, #1
 23fc540:	d106      	bne.n	23fc550 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fc542:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fc546:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fc548:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fc54a:	6143      	str	r3, [r0, #20]
 23fc54c:	f7ff ff51 	bl	23fc3f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc550:	4620      	mov	r0, r4
 23fc552:	bd38      	pop	{r3, r4, r5, pc}

023fc554 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fc554:	b510      	push	{r4, lr}
    if (!n_) {
 23fc556:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fc558:	4604      	mov	r4, r0
    if (!n_) {
 23fc55a:	b163      	cbz	r3, 23fc576 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fc55c:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fc55e:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fc560:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fc562:	3010      	adds	r0, #16
 23fc564:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fc566:	6120      	str	r0, [r4, #16]
    --n_;
 23fc568:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fc56a:	b113      	cbz	r3, 23fc572 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fc56c:	f7ff fef2 	bl	23fc354 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fc570:	60a0      	str	r0, [r4, #8]
    return true;
 23fc572:	2001      	movs	r0, #1
 23fc574:	e000      	b.n	23fc578 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fc576:	4618      	mov	r0, r3
}
 23fc578:	bd10      	pop	{r4, pc}

023fc57a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc57a:	b510      	push	{r4, lr}
    write('}');
 23fc57c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc57e:	4604      	mov	r4, r0
    write('}');
 23fc580:	f7ff ff49 	bl	23fc416 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fc584:	2301      	movs	r3, #1
}
 23fc586:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc588:	7123      	strb	r3, [r4, #4]
}
 23fc58a:	bd10      	pop	{r4, pc}

023fc58c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fc58c:	b508      	push	{r3, lr}
    switch (state_) {
 23fc58e:	7903      	ldrb	r3, [r0, #4]
 23fc590:	2b01      	cmp	r3, #1
 23fc592:	d002      	beq.n	23fc59a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fc594:	2b02      	cmp	r3, #2
 23fc596:	d004      	beq.n	23fc5a2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fc598:	bd08      	pop	{r3, pc}
        write(',');
 23fc59a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fc59c:	f7ff ff3b 	bl	23fc416 <_ZN5spark10JSONWriter5writeEc>
}
 23fc5a0:	e7fa      	b.n	23fc598 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fc5a2:	213a      	movs	r1, #58	; 0x3a
 23fc5a4:	e7fa      	b.n	23fc59c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fc5a6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fc5a6:	b510      	push	{r4, lr}
 23fc5a8:	4604      	mov	r4, r0
    writeSeparator();
 23fc5aa:	f7ff ffef 	bl	23fc58c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fc5ae:	4620      	mov	r0, r4
 23fc5b0:	217b      	movs	r1, #123	; 0x7b
 23fc5b2:	f7ff ff30 	bl	23fc416 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc5b6:	2300      	movs	r3, #0
}
 23fc5b8:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc5ba:	7123      	strb	r3, [r4, #4]
}
 23fc5bc:	bd10      	pop	{r4, pc}
	...

023fc5c0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fc5c0:	b513      	push	{r0, r1, r4, lr}
 23fc5c2:	4604      	mov	r4, r0
 23fc5c4:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc5c6:	f7ff ffe1 	bl	23fc58c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fc5ca:	6823      	ldr	r3, [r4, #0]
 23fc5cc:	4620      	mov	r0, r4
 23fc5ce:	68db      	ldr	r3, [r3, #12]
 23fc5d0:	9a01      	ldr	r2, [sp, #4]
 23fc5d2:	4903      	ldr	r1, [pc, #12]	; (23fc5e0 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fc5d4:	4798      	blx	r3
    state_ = NEXT;
 23fc5d6:	2301      	movs	r3, #1
}
 23fc5d8:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc5da:	7123      	strb	r3, [r4, #4]
}
 23fc5dc:	b002      	add	sp, #8
 23fc5de:	bd10      	pop	{r4, pc}
 23fc5e0:	023ffb34 	.word	0x023ffb34

023fc5e4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fc5e4:	b513      	push	{r0, r1, r4, lr}
 23fc5e6:	4604      	mov	r4, r0
 23fc5e8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc5ea:	f7ff ffcf 	bl	23fc58c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fc5ee:	6823      	ldr	r3, [r4, #0]
 23fc5f0:	4620      	mov	r0, r4
 23fc5f2:	68db      	ldr	r3, [r3, #12]
 23fc5f4:	9a01      	ldr	r2, [sp, #4]
 23fc5f6:	4903      	ldr	r1, [pc, #12]	; (23fc604 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fc5f8:	4798      	blx	r3
    state_ = NEXT;
 23fc5fa:	2301      	movs	r3, #1
}
 23fc5fc:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc5fe:	7123      	strb	r3, [r4, #4]
}
 23fc600:	b002      	add	sp, #8
 23fc602:	bd10      	pop	{r4, pc}
 23fc604:	023ffbe0 	.word	0x023ffbe0

023fc608 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc60c:	460d      	mov	r5, r1
 23fc60e:	4690      	mov	r8, r2
    write('"');
 23fc610:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc612:	4604      	mov	r4, r0
 23fc614:	462f      	mov	r7, r5
    write('"');
 23fc616:	f7ff fefe 	bl	23fc416 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fc61a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fc6c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fc61e:	44a8      	add	r8, r5
    while (s != end) {
 23fc620:	4547      	cmp	r7, r8
 23fc622:	46ba      	mov	sl, r7
 23fc624:	d03d      	beq.n	23fc6a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fc626:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fc62a:	2e22      	cmp	r6, #34	; 0x22
 23fc62c:	d006      	beq.n	23fc63c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc62e:	2e5c      	cmp	r6, #92	; 0x5c
 23fc630:	d004      	beq.n	23fc63c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc632:	4630      	mov	r0, r6
 23fc634:	f003 f8b6 	bl	23ff7a4 <isprint>
 23fc638:	2800      	cmp	r0, #0
 23fc63a:	d1f1      	bne.n	23fc620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fc63c:	6823      	ldr	r3, [r4, #0]
 23fc63e:	4629      	mov	r1, r5
 23fc640:	4620      	mov	r0, r4
 23fc642:	689b      	ldr	r3, [r3, #8]
 23fc644:	ebaa 0205 	sub.w	r2, sl, r5
 23fc648:	4798      	blx	r3
            write('\\');
 23fc64a:	215c      	movs	r1, #92	; 0x5c
 23fc64c:	4620      	mov	r0, r4
 23fc64e:	f7ff fee2 	bl	23fc416 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fc652:	2e0d      	cmp	r6, #13
 23fc654:	d80a      	bhi.n	23fc66c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fc656:	2e07      	cmp	r6, #7
 23fc658:	d91c      	bls.n	23fc694 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc65a:	f1a6 0308 	sub.w	r3, r6, #8
 23fc65e:	2b05      	cmp	r3, #5
 23fc660:	d818      	bhi.n	23fc694 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc662:	e8df f003 	tbb	[pc, r3]
 23fc666:	0f0d      	.short	0x0f0d
 23fc668:	15131711 	.word	0x15131711
 23fc66c:	2e22      	cmp	r6, #34	; 0x22
 23fc66e:	d001      	beq.n	23fc674 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fc670:	2e5c      	cmp	r6, #92	; 0x5c
 23fc672:	d10f      	bne.n	23fc694 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fc674:	4631      	mov	r1, r6
                write('b');
 23fc676:	4620      	mov	r0, r4
 23fc678:	f7ff fecd 	bl	23fc416 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fc67c:	463d      	mov	r5, r7
    while (s != end) {
 23fc67e:	e7cf      	b.n	23fc620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fc680:	2162      	movs	r1, #98	; 0x62
 23fc682:	e7f8      	b.n	23fc676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fc684:	2174      	movs	r1, #116	; 0x74
 23fc686:	e7f6      	b.n	23fc676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fc688:	216e      	movs	r1, #110	; 0x6e
 23fc68a:	e7f4      	b.n	23fc676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fc68c:	2166      	movs	r1, #102	; 0x66
 23fc68e:	e7f2      	b.n	23fc676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fc690:	2172      	movs	r1, #114	; 0x72
 23fc692:	e7f0      	b.n	23fc676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fc694:	6823      	ldr	r3, [r4, #0]
 23fc696:	4632      	mov	r2, r6
 23fc698:	4649      	mov	r1, r9
 23fc69a:	4620      	mov	r0, r4
 23fc69c:	68db      	ldr	r3, [r3, #12]
 23fc69e:	4798      	blx	r3
                break;
 23fc6a0:	e7ec      	b.n	23fc67c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fc6a2:	42bd      	cmp	r5, r7
 23fc6a4:	d005      	beq.n	23fc6b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fc6a6:	6823      	ldr	r3, [r4, #0]
 23fc6a8:	4629      	mov	r1, r5
 23fc6aa:	4620      	mov	r0, r4
 23fc6ac:	689b      	ldr	r3, [r3, #8]
 23fc6ae:	1b7a      	subs	r2, r7, r5
 23fc6b0:	4798      	blx	r3
    }
    write('"');
 23fc6b2:	2122      	movs	r1, #34	; 0x22
 23fc6b4:	4620      	mov	r0, r4
 23fc6b6:	f7ff feae 	bl	23fc416 <_ZN5spark10JSONWriter5writeEc>
}
 23fc6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc6be:	bf00      	nop
 23fc6c0:	023ffbe3 	.word	0x023ffbe3

023fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fc6c4:	b513      	push	{r0, r1, r4, lr}
 23fc6c6:	4604      	mov	r4, r0
 23fc6c8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc6cc:	f7ff ff5e 	bl	23fc58c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fc6d0:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc6d4:	4620      	mov	r0, r4
 23fc6d6:	f7ff ff97 	bl	23fc608 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fc6da:	2302      	movs	r3, #2
}
 23fc6dc:	4620      	mov	r0, r4
    state_ = VALUE;
 23fc6de:	7123      	strb	r3, [r4, #4]
}
 23fc6e0:	b002      	add	sp, #8
 23fc6e2:	bd10      	pop	{r4, pc}

023fc6e4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fc6e4:	b513      	push	{r0, r1, r4, lr}
 23fc6e6:	4604      	mov	r4, r0
 23fc6e8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc6ec:	f7ff ff4e 	bl	23fc58c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fc6f0:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc6f4:	4620      	mov	r0, r4
 23fc6f6:	f7ff ff87 	bl	23fc608 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fc6fa:	2301      	movs	r3, #1
}
 23fc6fc:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc6fe:	7123      	strb	r3, [r4, #4]
}
 23fc700:	b002      	add	sp, #8
 23fc702:	bd10      	pop	{r4, pc}

023fc704 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc704:	6880      	ldr	r0, [r0, #8]
 23fc706:	6803      	ldr	r3, [r0, #0]
 23fc708:	68db      	ldr	r3, [r3, #12]
 23fc70a:	4718      	bx	r3

023fc70c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc70c:	4770      	bx	lr

023fc70e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc70e:	4608      	mov	r0, r1
 23fc710:	b111      	cbz	r1, 23fc718 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc712:	680b      	ldr	r3, [r1, #0]
 23fc714:	685b      	ldr	r3, [r3, #4]
 23fc716:	4718      	bx	r3
}
 23fc718:	4770      	bx	lr

023fc71a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc71a:	4770      	bx	lr

023fc71c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc71c:	4770      	bx	lr

023fc71e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc71e:	4770      	bx	lr

023fc720 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc720:	4770      	bx	lr

023fc722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc722:	b538      	push	{r3, r4, r5, lr}
 23fc724:	4604      	mov	r4, r0
 23fc726:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc728:	6800      	ldr	r0, [r0, #0]
 23fc72a:	212e      	movs	r1, #46	; 0x2e
 23fc72c:	f003 f8ad 	bl	23ff88a <strchrnul>
    size = s - category;
 23fc730:	6823      	ldr	r3, [r4, #0]
 23fc732:	1ac3      	subs	r3, r0, r3
 23fc734:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc736:	b123      	cbz	r3, 23fc742 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc738:	7803      	ldrb	r3, [r0, #0]
 23fc73a:	b103      	cbz	r3, 23fc73e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc73c:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fc73e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc740:	6020      	str	r0, [r4, #0]
}
 23fc742:	4618      	mov	r0, r3
 23fc744:	bd38      	pop	{r3, r4, r5, pc}

023fc746 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc746:	b510      	push	{r4, lr}
 23fc748:	4604      	mov	r4, r0
 23fc74a:	210c      	movs	r1, #12
 23fc74c:	f7fe fd4f 	bl	23fb1ee <_ZdlPvj>
 23fc750:	4620      	mov	r0, r4
 23fc752:	bd10      	pop	{r4, pc}

023fc754 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fc754:	b510      	push	{r4, lr}
 23fc756:	4604      	mov	r4, r0
 23fc758:	2104      	movs	r1, #4
 23fc75a:	f7fe fd48 	bl	23fb1ee <_ZdlPvj>
 23fc75e:	4620      	mov	r0, r4
 23fc760:	bd10      	pop	{r4, pc}

023fc762 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc762:	b510      	push	{r4, lr}
 23fc764:	4604      	mov	r4, r0
 23fc766:	2104      	movs	r1, #4
 23fc768:	f7fe fd41 	bl	23fb1ee <_ZdlPvj>
 23fc76c:	4620      	mov	r0, r4
 23fc76e:	bd10      	pop	{r4, pc}

023fc770 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fc770:	f7ff b89c 	b.w	23fb8ac <os_mutex_recursive_lock>

023fc774 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fc774:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fc776:	f7fe fd07 	bl	23fb188 <strcmp>
}
 23fc77a:	fab0 f080 	clz	r0, r0
 23fc77e:	0940      	lsrs	r0, r0, #5
 23fc780:	bd08      	pop	{r3, pc}

023fc782 <__tcf_1>:
 23fc782:	4770      	bx	lr

023fc784 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fc784:	b510      	push	{r4, lr}
 23fc786:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fc788:	f001 fa62 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fc78c:	4284      	cmp	r4, r0
 23fc78e:	d105      	bne.n	23fc79c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fc790:	f001 fa5e 	bl	23fdc50 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fc794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fc798:	f001 ba4c 	b.w	23fdc34 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fc79c:	f001 fc3a 	bl	23fe014 <_Z22__fetch_global_Serial1v>
 23fc7a0:	4284      	cmp	r4, r0
 23fc7a2:	d105      	bne.n	23fc7b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fc7a4:	f001 fc36 	bl	23fe014 <_Z22__fetch_global_Serial1v>
}
 23fc7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fc7ac:	f001 b9e5 	b.w	23fdb7a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fc7b0:	b12c      	cbz	r4, 23fc7be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fc7b2:	6823      	ldr	r3, [r4, #0]
 23fc7b4:	4620      	mov	r0, r4
}
 23fc7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc7ba:	685b      	ldr	r3, [r3, #4]
 23fc7bc:	4718      	bx	r3
 23fc7be:	bd10      	pop	{r4, pc}

023fc7c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc7c0:	680b      	ldr	r3, [r1, #0]
 23fc7c2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc7c4:	684b      	ldr	r3, [r1, #4]
 23fc7c6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc7c8:	b113      	cbz	r3, 23fc7d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fc7ca:	685a      	ldr	r2, [r3, #4]
 23fc7cc:	3201      	adds	r2, #1
 23fc7ce:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc7d0:	4770      	bx	lr

023fc7d2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fc7d2:	b513      	push	{r0, r1, r4, lr}
 23fc7d4:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fc7d6:	4608      	mov	r0, r1
 23fc7d8:	9101      	str	r1, [sp, #4]
 23fc7da:	f7fe fcdf 	bl	23fb19c <strlen>
 23fc7de:	4602      	mov	r2, r0
 23fc7e0:	4620      	mov	r0, r4
 23fc7e2:	9901      	ldr	r1, [sp, #4]
}
 23fc7e4:	b002      	add	sp, #8
 23fc7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fc7ea:	f7ff bf7b 	b.w	23fc6e4 <_ZN5spark10JSONWriter5valueEPKcj>

023fc7ee <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fc7ee:	b513      	push	{r0, r1, r4, lr}
 23fc7f0:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fc7f2:	4608      	mov	r0, r1
 23fc7f4:	9101      	str	r1, [sp, #4]
 23fc7f6:	f7fe fcd1 	bl	23fb19c <strlen>
 23fc7fa:	4602      	mov	r2, r0
 23fc7fc:	4620      	mov	r0, r4
 23fc7fe:	6823      	ldr	r3, [r4, #0]
 23fc800:	9901      	ldr	r1, [sp, #4]
 23fc802:	68db      	ldr	r3, [r3, #12]
}
 23fc804:	b002      	add	sp, #8
 23fc806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fc80a:	4718      	bx	r3

023fc80c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fc80c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc80e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fc810:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc814:	2201      	movs	r2, #1
 23fc816:	68db      	ldr	r3, [r3, #12]
 23fc818:	f10d 0107 	add.w	r1, sp, #7
 23fc81c:	4798      	blx	r3
}
 23fc81e:	b003      	add	sp, #12
 23fc820:	f85d fb04 	ldr.w	pc, [sp], #4

023fc824 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fc824:	680a      	ldr	r2, [r1, #0]
 23fc826:	b510      	push	{r4, lr}
 23fc828:	6002      	str	r2, [r0, #0]
 23fc82a:	684a      	ldr	r2, [r1, #4]
 23fc82c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fc82e:	2200      	movs	r2, #0
 23fc830:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fc834:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc836:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc838:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc83a:	6084      	str	r4, [r0, #8]
 23fc83c:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc83e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc840:	60c4      	str	r4, [r0, #12]
 23fc842:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc844:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc846:	6104      	str	r4, [r0, #16]
 23fc848:	bd10      	pop	{r4, pc}
	...

023fc84c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fc850:	f04f 0a14 	mov.w	sl, #20
 23fc854:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fc858:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fc85a:	4645      	mov	r5, r8
 23fc85c:	fb0a f404 	mul.w	r4, sl, r4
 23fc860:	9300      	str	r3, [sp, #0]
 23fc862:	4b17      	ldr	r3, [pc, #92]	; (23fc8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc864:	10a4      	asrs	r4, r4, #2
 23fc866:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fc868:	2c00      	cmp	r4, #0
 23fc86a:	dd21      	ble.n	23fc8b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fc86c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fc86e:	fb0a f006 	mul.w	r0, sl, r6
 23fc872:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fc876:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fc87a:	463a      	mov	r2, r7
 23fc87c:	455f      	cmp	r7, fp
 23fc87e:	bf28      	it	cs
 23fc880:	465a      	movcs	r2, fp
 23fc882:	5828      	ldr	r0, [r5, r0]
 23fc884:	9101      	str	r1, [sp, #4]
 23fc886:	f003 f812 	bl	23ff8ae <strncmp>
                if (cmp == 0) {
 23fc88a:	2800      	cmp	r0, #0
 23fc88c:	f04f 0301 	mov.w	r3, #1
 23fc890:	9901      	ldr	r1, [sp, #4]
 23fc892:	d10b      	bne.n	23fc8ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fc894:	455f      	cmp	r7, fp
 23fc896:	d103      	bne.n	23fc8a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fc898:	9a00      	ldr	r2, [sp, #0]
 23fc89a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc89c:	4634      	mov	r4, r6
 23fc89e:	e7e3      	b.n	23fc868 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fc8a0:	d9fc      	bls.n	23fc89c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fc8a2:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fc8a4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fc8a8:	3e01      	subs	r6, #1
 23fc8aa:	e7f7      	b.n	23fc89c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fc8ac:	dbf9      	blt.n	23fc8a2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fc8ae:	e7f5      	b.n	23fc89c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fc8b0:	eba5 0508 	sub.w	r5, r5, r8
}
 23fc8b4:	4802      	ldr	r0, [pc, #8]	; (23fc8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc8b6:	10ad      	asrs	r5, r5, #2
 23fc8b8:	4368      	muls	r0, r5
 23fc8ba:	b003      	add	sp, #12
 23fc8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc8c0:	cccccccd 	.word	0xcccccccd

023fc8c4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc8c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fc8c6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fc8c8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc8ca:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fc8cc:	b303      	cbz	r3, 23fc910 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fc8ce:	b1f9      	cbz	r1, 23fc910 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fc8d0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fc8d2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fc8d6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fc8d8:	a903      	add	r1, sp, #12
 23fc8da:	a801      	add	r0, sp, #4
 23fc8dc:	f7ff ff21 	bl	23fc722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fc8e0:	4601      	mov	r1, r0
 23fc8e2:	b1a8      	cbz	r0, 23fc910 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc8e4:	f10d 030b 	add.w	r3, sp, #11
 23fc8e8:	4620      	mov	r0, r4
 23fc8ea:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fc8ec:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc8f0:	f7ff ffac 	bl	23fc84c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fc8f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fc8f8:	b153      	cbz	r3, 23fc910 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fc8fa:	6823      	ldr	r3, [r4, #0]
 23fc8fc:	2414      	movs	r4, #20
 23fc8fe:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fc902:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fc906:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fc908:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fc90a:	bfa8      	it	ge
 23fc90c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fc90e:	e7e3      	b.n	23fc8d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fc910:	4628      	mov	r0, r5
 23fc912:	b004      	add	sp, #16
 23fc914:	bd70      	pop	{r4, r5, r6, pc}

023fc916 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fc916:	b40e      	push	{r1, r2, r3}
 23fc918:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc91a:	b08c      	sub	sp, #48	; 0x30
 23fc91c:	af00      	add	r7, sp, #0
 23fc91e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fc922:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc926:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc928:	462b      	mov	r3, r5
 23fc92a:	2120      	movs	r1, #32
 23fc92c:	f107 0010 	add.w	r0, r7, #16
 23fc930:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc932:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc934:	f7ff fb8e 	bl	23fc054 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fc938:	281f      	cmp	r0, #31
 23fc93a:	687a      	ldr	r2, [r7, #4]
 23fc93c:	d91a      	bls.n	23fc974 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fc93e:	f100 0308 	add.w	r3, r0, #8
 23fc942:	f023 0307 	bic.w	r3, r3, #7
        }
 23fc946:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fc948:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc94c:	1c41      	adds	r1, r0, #1
 23fc94e:	462b      	mov	r3, r5
 23fc950:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc952:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc954:	f7ff fb7e 	bl	23fc054 <vsnprintf>
        if (n > 0) {
 23fc958:	1e02      	subs	r2, r0, #0
 23fc95a:	dd04      	ble.n	23fc966 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fc95c:	6823      	ldr	r3, [r4, #0]
 23fc95e:	4669      	mov	r1, sp
 23fc960:	4620      	mov	r0, r4
 23fc962:	68db      	ldr	r3, [r3, #12]
 23fc964:	4798      	blx	r3
 23fc966:	46b5      	mov	sp, r6
}
 23fc968:	3730      	adds	r7, #48	; 0x30
 23fc96a:	46bd      	mov	sp, r7
 23fc96c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc970:	b003      	add	sp, #12
 23fc972:	4770      	bx	lr
    } else if (n > 0) {
 23fc974:	2800      	cmp	r0, #0
 23fc976:	d0f7      	beq.n	23fc968 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fc978:	6823      	ldr	r3, [r4, #0]
 23fc97a:	4602      	mov	r2, r0
 23fc97c:	68db      	ldr	r3, [r3, #12]
 23fc97e:	4620      	mov	r0, r4
 23fc980:	f107 0110 	add.w	r1, r7, #16
 23fc984:	4798      	blx	r3
}
 23fc986:	e7ef      	b.n	23fc968 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fc988 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fc988:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fc98a:	4c08      	ldr	r4, [pc, #32]	; (23fc9ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fc98c:	e8d4 3f8f 	ldab	r3, [r4]
 23fc990:	07db      	lsls	r3, r3, #31
 23fc992:	d409      	bmi.n	23fc9a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc994:	4620      	mov	r0, r4
 23fc996:	f7fe fc39 	bl	23fb20c <__cxa_guard_acquire>
 23fc99a:	b128      	cbz	r0, 23fc9a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc99c:	4620      	mov	r0, r4
 23fc99e:	f7fe fc3a 	bl	23fb216 <__cxa_guard_release>
 23fc9a2:	4803      	ldr	r0, [pc, #12]	; (23fc9b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fc9a4:	f002 fef8 	bl	23ff798 <atexit>
}
 23fc9a8:	4802      	ldr	r0, [pc, #8]	; (23fc9b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fc9aa:	bd10      	pop	{r4, pc}
 23fc9ac:	1007ae68 	.word	0x1007ae68
 23fc9b0:	023fc71b 	.word	0x023fc71b
 23fc9b4:	1007adac 	.word	0x1007adac

023fc9b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fc9b8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fc9ba:	4c08      	ldr	r4, [pc, #32]	; (23fc9dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fc9bc:	e8d4 3f8f 	ldab	r3, [r4]
 23fc9c0:	07db      	lsls	r3, r3, #31
 23fc9c2:	d409      	bmi.n	23fc9d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc9c4:	4620      	mov	r0, r4
 23fc9c6:	f7fe fc21 	bl	23fb20c <__cxa_guard_acquire>
 23fc9ca:	b128      	cbz	r0, 23fc9d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc9cc:	4620      	mov	r0, r4
 23fc9ce:	f7fe fc22 	bl	23fb216 <__cxa_guard_release>
 23fc9d2:	4803      	ldr	r0, [pc, #12]	; (23fc9e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fc9d4:	f002 fee0 	bl	23ff798 <atexit>
    return &factory;
}
 23fc9d8:	4802      	ldr	r0, [pc, #8]	; (23fc9e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fc9da:	bd10      	pop	{r4, pc}
 23fc9dc:	1007ae6c 	.word	0x1007ae6c
 23fc9e0:	023fc783 	.word	0x023fc783
 23fc9e4:	1007adb0 	.word	0x1007adb0

023fc9e8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fc9e8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fc9ea:	2500      	movs	r5, #0
 23fc9ec:	4604      	mov	r4, r0
 23fc9ee:	e9c0 5500 	strd	r5, r5, [r0]
 23fc9f2:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fc9f6:	6085      	str	r5, [r0, #8]
 23fc9f8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fc9fa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fc9fe:	f7fe ff39 	bl	23fb874 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fca02:	f7ff ffc1 	bl	23fc988 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fca06:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fca08:	f7ff ffd6 	bl	23fc9b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fca0c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fca0e:	6220      	str	r0, [r4, #32]
}
 23fca10:	4620      	mov	r0, r4
 23fca12:	bd38      	pop	{r3, r4, r5, pc}

023fca14 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fca14:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fca16:	4c0a      	ldr	r4, [pc, #40]	; (23fca40 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fca18:	e8d4 3f8f 	ldab	r3, [r4]
 23fca1c:	07db      	lsls	r3, r3, #31
 23fca1e:	d40c      	bmi.n	23fca3a <_ZN5spark10LogManager8instanceEv+0x26>
 23fca20:	4620      	mov	r0, r4
 23fca22:	f7fe fbf3 	bl	23fb20c <__cxa_guard_acquire>
 23fca26:	b140      	cbz	r0, 23fca3a <_ZN5spark10LogManager8instanceEv+0x26>
 23fca28:	4806      	ldr	r0, [pc, #24]	; (23fca44 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fca2a:	f7ff ffdd 	bl	23fc9e8 <_ZN5spark10LogManagerC1Ev>
 23fca2e:	4620      	mov	r0, r4
 23fca30:	f7fe fbf1 	bl	23fb216 <__cxa_guard_release>
 23fca34:	4804      	ldr	r0, [pc, #16]	; (23fca48 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fca36:	f002 feaf 	bl	23ff798 <atexit>
    return &mgr;
}
 23fca3a:	4802      	ldr	r0, [pc, #8]	; (23fca44 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fca3c:	bd10      	pop	{r4, pc}
 23fca3e:	bf00      	nop
 23fca40:	1007ae64 	.word	0x1007ae64
 23fca44:	1007ae74 	.word	0x1007ae74
 23fca48:	023fcf65 	.word	0x023fcf65

023fca4c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fca4c:	2300      	movs	r3, #0
 23fca4e:	4a02      	ldr	r2, [pc, #8]	; (23fca58 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fca50:	4902      	ldr	r1, [pc, #8]	; (23fca5c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fca52:	4803      	ldr	r0, [pc, #12]	; (23fca60 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fca54:	f7ff b9ca 	b.w	23fbdec <log_set_callbacks>
 23fca58:	023fcd4d 	.word	0x023fcd4d
 23fca5c:	023fccd9 	.word	0x023fccd9
 23fca60:	023fcc59 	.word	0x023fcc59

023fca64 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fca64:	2300      	movs	r3, #0
 23fca66:	461a      	mov	r2, r3
 23fca68:	4619      	mov	r1, r3
 23fca6a:	4618      	mov	r0, r3
 23fca6c:	f7ff b9be 	b.w	23fbdec <log_set_callbacks>

023fca70 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fca70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fca72:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fca74:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fca76:	4668      	mov	r0, sp
 23fca78:	f7ff fea2 	bl	23fc7c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fca7c:	466a      	mov	r2, sp
 23fca7e:	4629      	mov	r1, r5
 23fca80:	4620      	mov	r0, r4
 23fca82:	f7ff fd4f 	bl	23fc524 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fca86:	a801      	add	r0, sp, #4
 23fca88:	f7ff fb1f 	bl	23fc0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fca8c:	4620      	mov	r0, r4
 23fca8e:	b003      	add	sp, #12
 23fca90:	bd30      	pop	{r4, r5, pc}

023fca92 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fca92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fca94:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fca96:	68cd      	ldr	r5, [r1, #12]
 23fca98:	4668      	mov	r0, sp
 23fca9a:	f7ff fe91 	bl	23fc7c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fca9e:	466a      	mov	r2, sp
 23fcaa0:	4629      	mov	r1, r5
 23fcaa2:	4620      	mov	r0, r4
 23fcaa4:	f7ff fd1a 	bl	23fc4dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcaa8:	a801      	add	r0, sp, #4
 23fcaaa:	f7ff fb0e 	bl	23fc0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcaae:	4620      	mov	r0, r4
 23fcab0:	b003      	add	sp, #12
 23fcab2:	bd30      	pop	{r4, r5, pc}

023fcab4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fcab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcab6:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fcab8:	690d      	ldr	r5, [r1, #16]
 23fcaba:	4668      	mov	r0, sp
 23fcabc:	f7ff fe80 	bl	23fc7c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcac0:	466a      	mov	r2, sp
 23fcac2:	4629      	mov	r1, r5
 23fcac4:	4620      	mov	r0, r4
 23fcac6:	f7ff fcb2 	bl	23fc42e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcaca:	a801      	add	r0, sp, #4
 23fcacc:	f7ff fafd 	bl	23fc0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcad0:	4620      	mov	r0, r4
 23fcad2:	b003      	add	sp, #12
 23fcad4:	bd30      	pop	{r4, r5, pc}
	...

023fcad8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fcad8:	b570      	push	{r4, r5, r6, lr}
 23fcada:	b08a      	sub	sp, #40	; 0x28
 23fcadc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fcade:	4601      	mov	r1, r0
 23fcae0:	a804      	add	r0, sp, #16
 23fcae2:	f7ff ffc5 	bl	23fca70 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fcae6:	4e14      	ldr	r6, [pc, #80]	; (23fcb38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fcae8:	a804      	add	r0, sp, #16
 23fcaea:	f7ff fd33 	bl	23fc554 <_ZN5spark18JSONObjectIterator4nextEv>
 23fcaee:	b1e8      	cbz	r0, 23fcb2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fcaf0:	4668      	mov	r0, sp
 23fcaf2:	a904      	add	r1, sp, #16
 23fcaf4:	f7ff ffcd 	bl	23fca92 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fcaf8:	4631      	mov	r1, r6
 23fcafa:	9802      	ldr	r0, [sp, #8]
 23fcafc:	f7ff fe3a 	bl	23fc774 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fcb00:	4604      	mov	r4, r0
 23fcb02:	b110      	cbz	r0, 23fcb0a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fcb04:	1e2c      	subs	r4, r5, #0
 23fcb06:	bf18      	it	ne
 23fcb08:	2401      	movne	r4, #1
 23fcb0a:	a801      	add	r0, sp, #4
 23fcb0c:	f7ff fadd 	bl	23fc0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcb10:	2c00      	cmp	r4, #0
 23fcb12:	d0e9      	beq.n	23fcae8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fcb14:	4668      	mov	r0, sp
 23fcb16:	a904      	add	r1, sp, #16
 23fcb18:	f7ff ffcc 	bl	23fcab4 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fcb1c:	4668      	mov	r0, sp
 23fcb1e:	f7ff fcbc 	bl	23fc49a <_ZNK5spark9JSONValue5toIntEv>
 23fcb22:	6028      	str	r0, [r5, #0]
 23fcb24:	a801      	add	r0, sp, #4
 23fcb26:	f7ff fad0 	bl	23fc0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcb2a:	e7dd      	b.n	23fcae8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fcb2c:	a805      	add	r0, sp, #20
 23fcb2e:	f7ff facc 	bl	23fc0ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcb32:	b00a      	add	sp, #40	; 0x28
 23fcb34:	bd70      	pop	{r4, r5, r6, pc}
 23fcb36:	bf00      	nop
 23fcb38:	023ffbe9 	.word	0x023ffbe9

023fcb3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcb3e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fcb40:	4913      	ldr	r1, [pc, #76]	; (23fcb90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fcb42:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcb44:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fcb46:	f7fe fb1f 	bl	23fb188 <strcmp>
 23fcb4a:	b950      	cbnz	r0, 23fcb62 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fcb4c:	f001 f880 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fcb50:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fcb54:	f001 f86a 	bl	23fdc2c <_ZN9USBSerial5beginEl>
}
 23fcb58:	b003      	add	sp, #12
 23fcb5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fcb5e:	f001 b877 	b.w	23fdc50 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fcb62:	4620      	mov	r0, r4
 23fcb64:	490b      	ldr	r1, [pc, #44]	; (23fcb94 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fcb66:	f7fe fb0f 	bl	23fb188 <strcmp>
 23fcb6a:	b978      	cbnz	r0, 23fcb8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fcb6c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fcb70:	a901      	add	r1, sp, #4
 23fcb72:	4628      	mov	r0, r5
        int baud = 9600;
 23fcb74:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fcb76:	f7ff ffaf 	bl	23fcad8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fcb7a:	f001 fa4b 	bl	23fe014 <_Z22__fetch_global_Serial1v>
 23fcb7e:	9901      	ldr	r1, [sp, #4]
 23fcb80:	f000 fff8 	bl	23fdb74 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fcb84:	f001 fa46 	bl	23fe014 <_Z22__fetch_global_Serial1v>
}
 23fcb88:	b003      	add	sp, #12
 23fcb8a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fcb8c:	2000      	movs	r0, #0
 23fcb8e:	e7fb      	b.n	23fcb88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fcb90:	023ffbee 	.word	0x023ffbee
 23fcb94:	023ffbf5 	.word	0x023ffbf5

023fcb98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcb98:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fcb9a:	2614      	movs	r6, #20
 23fcb9c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcba0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcba2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcba6:	42ae      	cmp	r6, r5
 23fcba8:	d005      	beq.n	23fcbb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fcbaa:	f105 0008 	add.w	r0, r5, #8
 23fcbae:	f7ff fff3 	bl	23fcb98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcbb2:	3514      	adds	r5, #20
 23fcbb4:	e7f7      	b.n	23fcba6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fcbb6:	6820      	ldr	r0, [r4, #0]
 23fcbb8:	f7ff fa30 	bl	23fc01c <free>
}
 23fcbbc:	4620      	mov	r0, r4
 23fcbbe:	bd70      	pop	{r4, r5, r6, pc}

023fcbc0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fcbc0:	b510      	push	{r4, lr}
 23fcbc2:	4604      	mov	r4, r0
 23fcbc4:	300c      	adds	r0, #12
 23fcbc6:	f7ff ffe7 	bl	23fcb98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcbca:	4620      	mov	r0, r4
 23fcbcc:	f7ff faa7 	bl	23fc11e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcbd0:	4620      	mov	r0, r4
 23fcbd2:	bd10      	pop	{r4, pc}

023fcbd4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fcbd4:	b510      	push	{r4, lr}
 23fcbd6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fcbd8:	4b03      	ldr	r3, [pc, #12]	; (23fcbe8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fcbda:	f840 3b04 	str.w	r3, [r0], #4
 23fcbde:	f7ff ffef 	bl	23fcbc0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fcbe2:	4620      	mov	r0, r4
 23fcbe4:	bd10      	pop	{r4, pc}
 23fcbe6:	bf00      	nop
 23fcbe8:	023ffb40 	.word	0x023ffb40

023fcbec <_ZN5spark16StreamLogHandlerD0Ev>:
 23fcbec:	b510      	push	{r4, lr}
 23fcbee:	4604      	mov	r4, r0
 23fcbf0:	f7ff fff0 	bl	23fcbd4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fcbf4:	4620      	mov	r0, r4
 23fcbf6:	2124      	movs	r1, #36	; 0x24
 23fcbf8:	f7fe faf9 	bl	23fb1ee <_ZdlPvj>
 23fcbfc:	4620      	mov	r0, r4
 23fcbfe:	bd10      	pop	{r4, pc}

023fcc00 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fcc00:	b510      	push	{r4, lr}
 23fcc02:	4604      	mov	r4, r0
 23fcc04:	4b02      	ldr	r3, [pc, #8]	; (23fcc10 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fcc06:	6003      	str	r3, [r0, #0]
 23fcc08:	f7ff ffe4 	bl	23fcbd4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fcc0c:	4620      	mov	r0, r4
 23fcc0e:	bd10      	pop	{r4, pc}
 23fcc10:	023ffc94 	.word	0x023ffc94

023fcc14 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fcc14:	b510      	push	{r4, lr}
 23fcc16:	4604      	mov	r4, r0
 23fcc18:	f7ff fff2 	bl	23fcc00 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fcc1c:	4620      	mov	r0, r4
 23fcc1e:	2124      	movs	r1, #36	; 0x24
 23fcc20:	f7fe fae5 	bl	23fb1ee <_ZdlPvj>
 23fcc24:	4620      	mov	r0, r4
 23fcc26:	bd10      	pop	{r4, pc}

023fcc28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fcc28:	2200      	movs	r2, #0
 23fcc2a:	e9c0 2200 	strd	r2, r2, [r0]
 23fcc2e:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fcc30:	b510      	push	{r4, lr}
 23fcc32:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc34:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fcc36:	6004      	str	r4, [r0, #0]
 23fcc38:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc3a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcc3c:	6044      	str	r4, [r0, #4]
 23fcc3e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc40:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcc42:	6084      	str	r4, [r0, #8]
}
 23fcc44:	bd10      	pop	{r4, pc}

023fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fcc46:	b510      	push	{r4, lr}
 23fcc48:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fcc4a:	6803      	ldr	r3, [r0, #0]
 23fcc4c:	6818      	ldr	r0, [r3, #0]
 23fcc4e:	f7fe fe3b 	bl	23fb8c8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fcc52:	4620      	mov	r0, r4
 23fcc54:	bd10      	pop	{r4, pc}
	...

023fcc58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fcc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcc5c:	b087      	sub	sp, #28
 23fcc5e:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fcc60:	4b1c      	ldr	r3, [pc, #112]	; (23fccd4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fcc62:	4680      	mov	r8, r0
 23fcc64:	685b      	ldr	r3, [r3, #4]
 23fcc66:	4689      	mov	r9, r1
 23fcc68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fcc6c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fcc6e:	b96b      	cbnz	r3, 23fcc8c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fcc70:	f7ff fed0 	bl	23fca14 <_ZN5spark10LogManager8instanceEv>
 23fcc74:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcc76:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fcc7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcc7c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fcc7e:	f7ff fd77 	bl	23fc770 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fcc82:	7b23      	ldrb	r3, [r4, #12]
 23fcc84:	b12b      	cbz	r3, 23fcc92 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fcc86:	a805      	add	r0, sp, #20
 23fcc88:	f7ff ffdd 	bl	23fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fcc8c:	b007      	add	sp, #28
 23fcc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fcc92:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fcc94:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fcc98:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fcc9a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fcc9e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcca2:	45aa      	cmp	sl, r5
 23fcca4:	d012      	beq.n	23fcccc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fcca6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fccaa:	4631      	mov	r1, r6
 23fccac:	1d38      	adds	r0, r7, #4
 23fccae:	f7ff fe09 	bl	23fc8c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fccb2:	4581      	cmp	r9, r0
 23fccb4:	d3f5      	bcc.n	23fcca2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fccb6:	9a03      	ldr	r2, [sp, #12]
 23fccb8:	683b      	ldr	r3, [r7, #0]
 23fccba:	9200      	str	r2, [sp, #0]
 23fccbc:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fccc0:	464a      	mov	r2, r9
 23fccc2:	4633      	mov	r3, r6
 23fccc4:	4641      	mov	r1, r8
 23fccc6:	4638      	mov	r0, r7
 23fccc8:	47d8      	blx	fp
 23fccca:	e7ea      	b.n	23fcca2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fcccc:	2300      	movs	r3, #0
 23fccce:	7323      	strb	r3, [r4, #12]
 23fccd0:	e7d9      	b.n	23fcc86 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fccd2:	bf00      	nop
 23fccd4:	e000ed00 	.word	0xe000ed00

023fccd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fccd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fccdc:	469b      	mov	fp, r3
 23fccde:	4b1a      	ldr	r3, [pc, #104]	; (23fcd48 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fcce0:	4680      	mov	r8, r0
 23fcce2:	685b      	ldr	r3, [r3, #4]
 23fcce4:	4689      	mov	r9, r1
 23fcce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fccea:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fccec:	b96b      	cbnz	r3, 23fcd0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fccee:	f7ff fe91 	bl	23fca14 <_ZN5spark10LogManager8instanceEv>
 23fccf2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fccf4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fccf8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fccfa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fccfc:	f7ff fd38 	bl	23fc770 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fcd00:	7b23      	ldrb	r3, [r4, #12]
 23fcd02:	b12b      	cbz	r3, 23fcd10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fcd04:	a801      	add	r0, sp, #4
 23fcd06:	f7ff ff9e 	bl	23fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fcd0a:	b003      	add	sp, #12
 23fcd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fcd10:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fcd12:	b2f6      	uxtb	r6, r6
 23fcd14:	7323      	strb	r3, [r4, #12]
 23fcd16:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fcd1a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcd1e:	4555      	cmp	r5, sl
 23fcd20:	d00e      	beq.n	23fcd40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fcd22:	f855 7b04 	ldr.w	r7, [r5], #4
 23fcd26:	4659      	mov	r1, fp
 23fcd28:	1d38      	adds	r0, r7, #4
 23fcd2a:	f7ff fdcb 	bl	23fc8c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fcd2e:	4286      	cmp	r6, r0
 23fcd30:	d3f5      	bcc.n	23fcd1e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fcd32:	683b      	ldr	r3, [r7, #0]
 23fcd34:	464a      	mov	r2, r9
 23fcd36:	4641      	mov	r1, r8
 23fcd38:	4638      	mov	r0, r7
 23fcd3a:	68db      	ldr	r3, [r3, #12]
 23fcd3c:	4798      	blx	r3
 23fcd3e:	e7ee      	b.n	23fcd1e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fcd40:	2300      	movs	r3, #0
 23fcd42:	7323      	strb	r3, [r4, #12]
 23fcd44:	e7de      	b.n	23fcd04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fcd46:	bf00      	nop
 23fcd48:	e000ed00 	.word	0xe000ed00

023fcd4c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fcd4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fcd50:	4b16      	ldr	r3, [pc, #88]	; (23fcdac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fcd52:	4605      	mov	r5, r0
 23fcd54:	685b      	ldr	r3, [r3, #4]
 23fcd56:	460f      	mov	r7, r1
 23fcd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fcd5c:	bb1b      	cbnz	r3, 23fcda6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fcd5e:	f7ff fe59 	bl	23fca14 <_ZN5spark10LogManager8instanceEv>
 23fcd62:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcd64:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcd68:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcd6a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fcd6c:	f7ff fd00 	bl	23fc770 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fcd70:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fcd74:	2446      	movs	r4, #70	; 0x46
 23fcd76:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcd7a:	45b0      	cmp	r8, r6
 23fcd7c:	d109      	bne.n	23fcd92 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fcd7e:	a801      	add	r0, sp, #4
 23fcd80:	f7ff ff61 	bl	23fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fcd84:	42a5      	cmp	r5, r4
 23fcd86:	bfb4      	ite	lt
 23fcd88:	2000      	movlt	r0, #0
 23fcd8a:	2001      	movge	r0, #1
}
 23fcd8c:	b002      	add	sp, #8
 23fcd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fcd92:	f856 0b04 	ldr.w	r0, [r6], #4
 23fcd96:	4639      	mov	r1, r7
 23fcd98:	3004      	adds	r0, #4
 23fcd9a:	f7ff fd93 	bl	23fc8c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fcd9e:	4284      	cmp	r4, r0
 23fcda0:	bfa8      	it	ge
 23fcda2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fcda4:	e7e9      	b.n	23fcd7a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fcda6:	2000      	movs	r0, #0
 23fcda8:	e7f0      	b.n	23fcd8c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fcdaa:	bf00      	nop
 23fcdac:	e000ed00 	.word	0xe000ed00

023fcdb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fcdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcdb2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fcdb6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fcdb8:	4604      	mov	r4, r0
 23fcdba:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcdbc:	db0d      	blt.n	23fcdda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fcdbe:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fcdc0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fcdc2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fcdc4:	dd04      	ble.n	23fcdd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fcdc6:	00b9      	lsls	r1, r7, #2
 23fcdc8:	f7ff f936 	bl	23fc038 <realloc>
            if (!d) {
 23fcdcc:	b918      	cbnz	r0, 23fcdd6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fcdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fcdd0:	f7ff f924 	bl	23fc01c <free>
        T* d = nullptr;
 23fcdd4:	2000      	movs	r0, #0
        data_ = d;
 23fcdd6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fcdd8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fcdda:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fcddc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fcdde:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fcde2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcde4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fcde8:	1d08      	adds	r0, r1, #4
 23fcdea:	f002 fcf0 	bl	23ff7ce <memmove>
    new(p) T(std::move(value));
 23fcdee:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fcdf2:	6863      	ldr	r3, [r4, #4]
    return true;
 23fcdf4:	2001      	movs	r0, #1
    ++size_;
 23fcdf6:	3301      	adds	r3, #1
 23fcdf8:	6063      	str	r3, [r4, #4]
    return true;
 23fcdfa:	e7e8      	b.n	23fcdce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fcdfc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fcdfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcdfe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fce00:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fce04:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fce06:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fce08:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fce0a:	f7ff fcb1 	bl	23fc770 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fce0e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fce12:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fce16:	4293      	cmp	r3, r2
 23fce18:	4619      	mov	r1, r3
 23fce1a:	d00a      	beq.n	23fce32 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fce1c:	6809      	ldr	r1, [r1, #0]
 23fce1e:	3304      	adds	r3, #4
 23fce20:	42a9      	cmp	r1, r5
 23fce22:	d1f8      	bne.n	23fce16 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fce24:	a801      	add	r0, sp, #4
 23fce26:	f7ff ff0e 	bl	23fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fce2a:	2500      	movs	r5, #0
}
 23fce2c:	4628      	mov	r0, r5
 23fce2e:	b003      	add	sp, #12
 23fce30:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fce32:	4629      	mov	r1, r5
 23fce34:	4620      	mov	r0, r4
 23fce36:	f7ff ffbb 	bl	23fcdb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fce3a:	4605      	mov	r5, r0
 23fce3c:	2800      	cmp	r0, #0
 23fce3e:	d0f1      	beq.n	23fce24 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fce40:	6863      	ldr	r3, [r4, #4]
 23fce42:	2b01      	cmp	r3, #1
 23fce44:	d101      	bne.n	23fce4a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fce46:	f7ff fe01 	bl	23fca4c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fce4a:	a801      	add	r0, sp, #4
 23fce4c:	f7ff fefb 	bl	23fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fce50:	e7ec      	b.n	23fce2c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fce52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fce52:	460b      	mov	r3, r1
 23fce54:	b570      	push	{r4, r5, r6, lr}
 23fce56:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fce58:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fce5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fce60:	4282      	cmp	r2, r0
 23fce62:	d00f      	beq.n	23fce84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fce64:	4601      	mov	r1, r0
            if (*p == value) {
 23fce66:	681d      	ldr	r5, [r3, #0]
 23fce68:	f851 6b04 	ldr.w	r6, [r1], #4
 23fce6c:	42ae      	cmp	r6, r5
 23fce6e:	d107      	bne.n	23fce80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fce70:	1a52      	subs	r2, r2, r1
 23fce72:	f002 fcac 	bl	23ff7ce <memmove>
    return true;
 23fce76:	2001      	movs	r0, #1
    --size_;
 23fce78:	6863      	ldr	r3, [r4, #4]
 23fce7a:	3b01      	subs	r3, #1
 23fce7c:	6063      	str	r3, [r4, #4]
}
 23fce7e:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fce80:	4608      	mov	r0, r1
 23fce82:	e7ed      	b.n	23fce60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fce84:	2000      	movs	r0, #0
 23fce86:	e7fa      	b.n	23fce7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fce88 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fce88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fce8a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fce8c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fce90:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fce92:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fce94:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fce96:	f7ff fc6b 	bl	23fc770 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fce9a:	4620      	mov	r0, r4
 23fce9c:	a901      	add	r1, sp, #4
 23fce9e:	f7ff ffd8 	bl	23fce52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fcea2:	b118      	cbz	r0, 23fceac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fcea4:	6863      	ldr	r3, [r4, #4]
 23fcea6:	b90b      	cbnz	r3, 23fceac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fcea8:	f7ff fddc 	bl	23fca64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fceac:	a803      	add	r0, sp, #12
 23fceae:	f7ff feca 	bl	23fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fceb2:	b004      	add	sp, #16
 23fceb4:	bd10      	pop	{r4, pc}

023fceb6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fceb6:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fceb8:	b570      	push	{r4, r5, r6, lr}
 23fceba:	4604      	mov	r4, r0
 23fcebc:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fcec0:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fcec4:	42ae      	cmp	r6, r5
 23fcec6:	d015      	beq.n	23fcef4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fcec8:	4620      	mov	r0, r4
 23fceca:	f105 0110 	add.w	r1, r5, #16
 23fcece:	f7ff ffc0 	bl	23fce52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fced2:	6863      	ldr	r3, [r4, #4]
 23fced4:	b90b      	cbnz	r3, 23fceda <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fced6:	f7ff fdc5 	bl	23fca64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fceda:	69e0      	ldr	r0, [r4, #28]
 23fcedc:	6929      	ldr	r1, [r5, #16]
 23fcede:	6803      	ldr	r3, [r0, #0]
 23fcee0:	68db      	ldr	r3, [r3, #12]
 23fcee2:	4798      	blx	r3
        if (h.stream) {
 23fcee4:	6969      	ldr	r1, [r5, #20]
 23fcee6:	b119      	cbz	r1, 23fcef0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fcee8:	6a20      	ldr	r0, [r4, #32]
 23fceea:	6803      	ldr	r3, [r0, #0]
 23fceec:	68db      	ldr	r3, [r3, #12]
 23fceee:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fcef0:	3518      	adds	r5, #24
 23fcef2:	e7e7      	b.n	23fcec4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fcef4:	2618      	movs	r6, #24
 23fcef6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fcefa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcefe:	42ae      	cmp	r6, r5
 23fcf00:	d004      	beq.n	23fcf0c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fcf02:	4628      	mov	r0, r5
 23fcf04:	f000 fd36 	bl	23fd974 <_ZN6StringD1Ev>
 23fcf08:	3518      	adds	r5, #24
 23fcf0a:	e7f8      	b.n	23fcefe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fcf0c:	2300      	movs	r3, #0
 23fcf0e:	6163      	str	r3, [r4, #20]
}
 23fcf10:	bd70      	pop	{r4, r5, r6, pc}

023fcf12 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fcf12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fcf14:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fcf16:	f7ff fda5 	bl	23fca64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fcf1a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fcf1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcf20:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fcf22:	f7ff fc25 	bl	23fc770 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fcf26:	4620      	mov	r0, r4
 23fcf28:	f7ff ffc5 	bl	23fceb6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fcf2c:	a801      	add	r0, sp, #4
 23fcf2e:	f7ff fe8a 	bl	23fcc46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fcf32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fcf34:	b108      	cbz	r0, 23fcf3a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fcf36:	f7fe fcab 	bl	23fb890 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fcf3a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fcf3e:	2618      	movs	r6, #24
 23fcf40:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcf44:	42ae      	cmp	r6, r5
 23fcf46:	d004      	beq.n	23fcf52 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fcf48:	4628      	mov	r0, r5
 23fcf4a:	f000 fd13 	bl	23fd974 <_ZN6StringD1Ev>
 23fcf4e:	3518      	adds	r5, #24
 23fcf50:	e7f8      	b.n	23fcf44 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fcf52:	6920      	ldr	r0, [r4, #16]
 23fcf54:	f7ff f862 	bl	23fc01c <free>
 23fcf58:	6820      	ldr	r0, [r4, #0]
 23fcf5a:	f7ff f85f 	bl	23fc01c <free>
}
 23fcf5e:	4620      	mov	r0, r4
 23fcf60:	b002      	add	sp, #8
 23fcf62:	bd70      	pop	{r4, r5, r6, pc}

023fcf64 <__tcf_2>:
    static LogManager mgr;
 23fcf64:	4801      	ldr	r0, [pc, #4]	; (23fcf6c <__tcf_2+0x8>)
 23fcf66:	f7ff bfd4 	b.w	23fcf12 <_ZN5spark10LogManagerD1Ev>
 23fcf6a:	bf00      	nop
 23fcf6c:	1007ae74 	.word	0x1007ae74

023fcf70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fcf70:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcf74:	4604      	mov	r4, r0
 23fcf76:	460d      	mov	r5, r1
 23fcf78:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcf7a:	d915      	bls.n	23fcfa8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fcf7c:	4290      	cmp	r0, r2
 23fcf7e:	d214      	bcs.n	23fcfaa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fcf80:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fcf84:	1a75      	subs	r5, r6, r1
 23fcf86:	f1a1 0714 	sub.w	r7, r1, #20
 23fcf8a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcf8c:	42b7      	cmp	r7, r6
 23fcf8e:	d01a      	beq.n	23fcfc6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fcf90:	b11c      	cbz	r4, 23fcf9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fcf92:	4631      	mov	r1, r6
 23fcf94:	4620      	mov	r0, r4
 23fcf96:	f7ff fc45 	bl	23fc824 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fcf9a:	f106 0008 	add.w	r0, r6, #8
 23fcf9e:	f7ff fdfb 	bl	23fcb98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fcfa2:	3e14      	subs	r6, #20
 23fcfa4:	3c14      	subs	r4, #20
 23fcfa6:	e7f1      	b.n	23fcf8c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fcfa8:	d00d      	beq.n	23fcfc6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fcfaa:	42b5      	cmp	r5, r6
 23fcfac:	d00b      	beq.n	23fcfc6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fcfae:	b11c      	cbz	r4, 23fcfb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fcfb0:	4629      	mov	r1, r5
 23fcfb2:	4620      	mov	r0, r4
 23fcfb4:	f7ff fc36 	bl	23fc824 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fcfb8:	f105 0008 	add.w	r0, r5, #8
 23fcfbc:	f7ff fdec 	bl	23fcb98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fcfc0:	3514      	adds	r5, #20
 23fcfc2:	3414      	adds	r4, #20
 23fcfc4:	e7f1      	b.n	23fcfaa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fcfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcfc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fcfc8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcfca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcfcc:	4604      	mov	r4, r0
 23fcfce:	460d      	mov	r5, r1
 23fcfd0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcfd2:	d914      	bls.n	23fcffe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fcfd4:	4290      	cmp	r0, r2
 23fcfd6:	d213      	bcs.n	23fd000 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fcfd8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fcfdc:	1a75      	subs	r5, r6, r1
 23fcfde:	f1a1 0710 	sub.w	r7, r1, #16
 23fcfe2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcfe4:	42b7      	cmp	r7, r6
 23fcfe6:	d018      	beq.n	23fd01a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fcfe8:	b11c      	cbz	r4, 23fcff2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fcfea:	4631      	mov	r1, r6
 23fcfec:	4620      	mov	r0, r4
 23fcfee:	f000 fd2a 	bl	23fda46 <_ZN6StringC1EOS_>
                end->~T();
 23fcff2:	4630      	mov	r0, r6
 23fcff4:	f000 fcbe 	bl	23fd974 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fcff8:	3e10      	subs	r6, #16
 23fcffa:	3c10      	subs	r4, #16
 23fcffc:	e7f2      	b.n	23fcfe4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fcffe:	d00c      	beq.n	23fd01a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd000:	42b5      	cmp	r5, r6
 23fd002:	d00a      	beq.n	23fd01a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd004:	b11c      	cbz	r4, 23fd00e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd006:	4629      	mov	r1, r5
 23fd008:	4620      	mov	r0, r4
 23fd00a:	f000 fd1c 	bl	23fda46 <_ZN6StringC1EOS_>
                p->~T();
 23fd00e:	4628      	mov	r0, r5
 23fd010:	f000 fcb0 	bl	23fd974 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd014:	3510      	adds	r5, #16
 23fd016:	3410      	adds	r4, #16
 23fd018:	e7f2      	b.n	23fd000 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd01c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd01c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd01e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd020:	4605      	mov	r5, r0
        if (n > 0) {
 23fd022:	dd11      	ble.n	23fd048 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd024:	0130      	lsls	r0, r6, #4
 23fd026:	f7fe ffeb 	bl	23fc000 <malloc>
            if (!d) {
 23fd02a:	4604      	mov	r4, r0
 23fd02c:	b158      	cbz	r0, 23fd046 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd02e:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd032:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd036:	f7ff ffc7 	bl	23fcfc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd03a:	6828      	ldr	r0, [r5, #0]
 23fd03c:	f7fe ffee 	bl	23fc01c <free>
        return true;
 23fd040:	2001      	movs	r0, #1
        data_ = d;
 23fd042:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd044:	60ae      	str	r6, [r5, #8]
    }
 23fd046:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd048:	2400      	movs	r4, #0
 23fd04a:	e7f6      	b.n	23fd03a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd04c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd050:	4690      	mov	r8, r2
        capacity_(0) {
 23fd052:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd054:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd056:	b095      	sub	sp, #84	; 0x54
 23fd058:	9103      	str	r1, [sp, #12]
    return size_;
 23fd05a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd05e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd060:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd062:	e9c0 3300 	strd	r3, r3, [r0]
 23fd066:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd06e:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd072:	7602      	strb	r2, [r0, #24]
 23fd074:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd076:	dc23      	bgt.n	23fd0c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd078:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd07c:	2314      	movs	r3, #20
 23fd07e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd082:	42af      	cmp	r7, r5
 23fd084:	d03b      	beq.n	23fd0fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd086:	4629      	mov	r1, r5
 23fd088:	a80b      	add	r0, sp, #44	; 0x2c
 23fd08a:	f000 fcdc 	bl	23fda46 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd08e:	a90b      	add	r1, sp, #44	; 0x2c
 23fd090:	a80f      	add	r0, sp, #60	; 0x3c
 23fd092:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd094:	f000 fcd7 	bl	23fda46 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd098:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd09c:	4299      	cmp	r1, r3
 23fd09e:	da1b      	bge.n	23fd0d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd0a0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd0a4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd0a8:	4631      	mov	r1, r6
 23fd0aa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd0ae:	f106 0010 	add.w	r0, r6, #16
 23fd0b2:	f7ff ff89 	bl	23fcfc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd0b6:	b9ee      	cbnz	r6, 23fd0f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd0ba:	3301      	adds	r3, #1
 23fd0bc:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd0be:	e011      	b.n	23fd0e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd0c0:	a808      	add	r0, sp, #32
 23fd0c2:	f7ff ffab 	bl	23fd01c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd0c6:	2800      	cmp	r0, #0
 23fd0c8:	d1d6      	bne.n	23fd078 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd0ca:	a808      	add	r0, sp, #32
 23fd0cc:	f7ff f827 	bl	23fc11e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd0d0:	4620      	mov	r0, r4
 23fd0d2:	b015      	add	sp, #84	; 0x54
 23fd0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd0d8:	3101      	adds	r1, #1
 23fd0da:	a808      	add	r0, sp, #32
 23fd0dc:	f7ff ff9e 	bl	23fd01c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd0e0:	2800      	cmp	r0, #0
 23fd0e2:	d1dd      	bne.n	23fd0a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd0e4:	a80f      	add	r0, sp, #60	; 0x3c
 23fd0e6:	f000 fc45 	bl	23fd974 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd0ea:	a80b      	add	r0, sp, #44	; 0x2c
 23fd0ec:	f000 fc42 	bl	23fd974 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd0f0:	3514      	adds	r5, #20
 23fd0f2:	e7c6      	b.n	23fd082 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd0f4:	4630      	mov	r0, r6
 23fd0f6:	a90f      	add	r1, sp, #60	; 0x3c
 23fd0f8:	f000 fca5 	bl	23fda46 <_ZN6StringC1EOS_>
 23fd0fc:	e7dc      	b.n	23fd0b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd0fe:	2600      	movs	r6, #0
 23fd100:	f04f 0914 	mov.w	r9, #20
 23fd104:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd108:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd10a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd10e:	429e      	cmp	r6, r3
 23fd110:	da7c      	bge.n	23fd20c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fd112:	0133      	lsls	r3, r6, #4
 23fd114:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd116:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd118:	b90b      	cbnz	r3, 23fd11e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd11a:	3601      	adds	r6, #1
 23fd11c:	e7f5      	b.n	23fd10a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd11e:	2300      	movs	r3, #0
 23fd120:	9307      	str	r3, [sp, #28]
 23fd122:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd126:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd128:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd12a:	a907      	add	r1, sp, #28
 23fd12c:	a806      	add	r0, sp, #24
 23fd12e:	f7ff faf8 	bl	23fc722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd132:	4682      	mov	sl, r0
 23fd134:	2800      	cmp	r0, #0
 23fd136:	d0f0      	beq.n	23fd11a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd138:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd13c:	4601      	mov	r1, r0
            bool found = false;
 23fd13e:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd142:	4628      	mov	r0, r5
 23fd144:	9a07      	ldr	r2, [sp, #28]
 23fd146:	f10d 0317 	add.w	r3, sp, #23
 23fd14a:	f7ff fb7f 	bl	23fc84c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd14e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd152:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd154:	2f00      	cmp	r7, #0
 23fd156:	d14a      	bne.n	23fd1ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd158:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd15c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd160:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd168:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd16c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd170:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd172:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd176:	4293      	cmp	r3, r2
 23fd178:	db17      	blt.n	23fd1aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd17a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd17e:	f1ba 0f00 	cmp.w	sl, #0
 23fd182:	dd30      	ble.n	23fd1e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd184:	fb09 f00a 	mul.w	r0, r9, sl
 23fd188:	f7fe ff3a 	bl	23fc000 <malloc>
            if (!d) {
 23fd18c:	4683      	mov	fp, r0
 23fd18e:	b360      	cbz	r0, 23fd1ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd190:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd194:	fb09 1202 	mla	r2, r9, r2, r1
 23fd198:	f7ff feea 	bl	23fcf70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd19c:	6828      	ldr	r0, [r5, #0]
 23fd19e:	f7fe ff3d 	bl	23fc01c <free>
        data_ = d;
 23fd1a2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd1a6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd1aa:	682b      	ldr	r3, [r5, #0]
 23fd1ac:	9a01      	ldr	r2, [sp, #4]
 23fd1ae:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd1b2:	686a      	ldr	r2, [r5, #4]
 23fd1b4:	4651      	mov	r1, sl
 23fd1b6:	fb09 3202 	mla	r2, r9, r2, r3
 23fd1ba:	f10a 0014 	add.w	r0, sl, #20
 23fd1be:	f7ff fed7 	bl	23fcf70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd1c2:	f1ba 0f00 	cmp.w	sl, #0
 23fd1c6:	d003      	beq.n	23fd1d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd1c8:	4650      	mov	r0, sl
 23fd1ca:	a90f      	add	r1, sp, #60	; 0x3c
 23fd1cc:	f7ff fb2a 	bl	23fc824 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd1d0:	686b      	ldr	r3, [r5, #4]
 23fd1d2:	3301      	adds	r3, #1
 23fd1d4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd1d6:	a811      	add	r0, sp, #68	; 0x44
 23fd1d8:	f7ff fcde 	bl	23fcb98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd1dc:	b13f      	cbz	r7, 23fd1ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd1de:	a80b      	add	r0, sp, #44	; 0x2c
 23fd1e0:	f7ff fcda 	bl	23fcb98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd1e4:	e771      	b.n	23fd0ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd1e6:	46bb      	mov	fp, r7
 23fd1e8:	e7d8      	b.n	23fd19c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd1ea:	2701      	movs	r7, #1
 23fd1ec:	e7f3      	b.n	23fd1d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd1ee:	9b01      	ldr	r3, [sp, #4]
 23fd1f0:	682d      	ldr	r5, [r5, #0]
 23fd1f2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd1f6:	9b06      	ldr	r3, [sp, #24]
 23fd1f8:	781b      	ldrb	r3, [r3, #0]
 23fd1fa:	b92b      	cbnz	r3, 23fd208 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd1fc:	f8d8 3000 	ldr.w	r3, [r8]
 23fd200:	9a02      	ldr	r2, [sp, #8]
 23fd202:	4413      	add	r3, r2
 23fd204:	7c1b      	ldrb	r3, [r3, #16]
 23fd206:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd208:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd20a:	e78e      	b.n	23fd12a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd20c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd20e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd210:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd212:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd214:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd216:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd21a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd21c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd21e:	60a2      	str	r2, [r4, #8]
 23fd220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd222:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd224:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd226:	60e2      	str	r2, [r4, #12]
 23fd228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd22a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd22c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd22e:	6122      	str	r2, [r4, #16]
 23fd230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd232:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd234:	9b03      	ldr	r3, [sp, #12]
 23fd236:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd238:	6162      	str	r2, [r4, #20]
 23fd23a:	7623      	strb	r3, [r4, #24]
 23fd23c:	e7cf      	b.n	23fd1de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd240 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd240:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd242:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd244:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd246:	4617      	mov	r7, r2
 23fd248:	b087      	sub	sp, #28
 23fd24a:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd24c:	4668      	mov	r0, sp
 23fd24e:	4619      	mov	r1, r3
 23fd250:	f7fe f8e5 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd254:	4b0b      	ldr	r3, [pc, #44]	; (23fd284 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd256:	4669      	mov	r1, sp
 23fd258:	f846 3b04 	str.w	r3, [r6], #4
 23fd25c:	a803      	add	r0, sp, #12
 23fd25e:	f7fe f8de 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd262:	4639      	mov	r1, r7
 23fd264:	aa03      	add	r2, sp, #12
 23fd266:	4630      	mov	r0, r6
 23fd268:	f7ff fef0 	bl	23fd04c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd26c:	a803      	add	r0, sp, #12
 23fd26e:	f7fe f895 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd272:	4668      	mov	r0, sp
 23fd274:	f7fe f892 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd278:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd27a:	4b03      	ldr	r3, [pc, #12]	; (23fd288 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd27c:	6225      	str	r5, [r4, #32]
 23fd27e:	6023      	str	r3, [r4, #0]
}
 23fd280:	b007      	add	sp, #28
 23fd282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd284:	023ffb40 	.word	0x023ffb40
 23fd288:	023ffc7c 	.word	0x023ffc7c

023fd28c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd28e:	460f      	mov	r7, r1
 23fd290:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd292:	4638      	mov	r0, r7
 23fd294:	491c      	ldr	r1, [pc, #112]	; (23fd308 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd296:	4616      	mov	r6, r2
 23fd298:	461d      	mov	r5, r3
 23fd29a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd29c:	f7fd ff74 	bl	23fb188 <strcmp>
 23fd2a0:	b9c0      	cbnz	r0, 23fd2d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd2a2:	b1a4      	cbz	r4, 23fd2ce <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd2a4:	4629      	mov	r1, r5
 23fd2a6:	a801      	add	r0, sp, #4
 23fd2a8:	f7ff fcbe 	bl	23fcc28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd2ac:	2024      	movs	r0, #36	; 0x24
 23fd2ae:	4917      	ldr	r1, [pc, #92]	; (23fd30c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd2b0:	f000 ff40 	bl	23fe134 <_ZnwjRKSt9nothrow_t>
 23fd2b4:	4605      	mov	r5, r0
 23fd2b6:	b130      	cbz	r0, 23fd2c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd2b8:	ab01      	add	r3, sp, #4
 23fd2ba:	4632      	mov	r2, r6
 23fd2bc:	4621      	mov	r1, r4
 23fd2be:	f7ff ffbf 	bl	23fd240 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd2c2:	4b13      	ldr	r3, [pc, #76]	; (23fd310 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd2c4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd2c6:	a801      	add	r0, sp, #4
 23fd2c8:	f7fe f868 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd2cc:	462c      	mov	r4, r5
}
 23fd2ce:	4620      	mov	r0, r4
 23fd2d0:	b005      	add	sp, #20
 23fd2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd2d4:	4638      	mov	r0, r7
 23fd2d6:	490f      	ldr	r1, [pc, #60]	; (23fd314 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd2d8:	f7fd ff56 	bl	23fb188 <strcmp>
 23fd2dc:	b990      	cbnz	r0, 23fd304 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd2de:	2c00      	cmp	r4, #0
 23fd2e0:	d0f5      	beq.n	23fd2ce <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd2e2:	4629      	mov	r1, r5
 23fd2e4:	a801      	add	r0, sp, #4
 23fd2e6:	f7ff fc9f 	bl	23fcc28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd2ea:	2024      	movs	r0, #36	; 0x24
 23fd2ec:	4907      	ldr	r1, [pc, #28]	; (23fd30c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd2ee:	f000 ff21 	bl	23fe134 <_ZnwjRKSt9nothrow_t>
 23fd2f2:	4605      	mov	r5, r0
 23fd2f4:	2800      	cmp	r0, #0
 23fd2f6:	d0e6      	beq.n	23fd2c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fd2f8:	4632      	mov	r2, r6
 23fd2fa:	4621      	mov	r1, r4
 23fd2fc:	ab01      	add	r3, sp, #4
 23fd2fe:	f7ff ff9f 	bl	23fd240 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd302:	e7e0      	b.n	23fd2c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fd304:	2400      	movs	r4, #0
 23fd306:	e7e2      	b.n	23fd2ce <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fd308:	023ffbfd 	.word	0x023ffbfd
 23fd30c:	023ffdc8 	.word	0x023ffdc8
 23fd310:	023ffc94 	.word	0x023ffc94
 23fd314:	023ffc01 	.word	0x023ffc01

023fd318 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fd318:	4b01      	ldr	r3, [pc, #4]	; (23fd320 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd31a:	4a02      	ldr	r2, [pc, #8]	; (23fd324 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd31c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd31e:	4770      	bx	lr
 23fd320:	1007ae70 	.word	0x1007ae70
 23fd324:	023ffc12 	.word	0x023ffc12

023fd328 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd32c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fd32e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd332:	4604      	mov	r4, r0
 23fd334:	460e      	mov	r6, r1
 23fd336:	4617      	mov	r7, r2
 23fd338:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fd33a:	f000 fc89 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fd33e:	4581      	cmp	r9, r0
 23fd340:	d04d      	beq.n	23fd3de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fd342:	792b      	ldrb	r3, [r5, #4]
 23fd344:	0719      	lsls	r1, r3, #28
 23fd346:	d504      	bpl.n	23fd352 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fd348:	4620      	mov	r0, r4
 23fd34a:	696a      	ldr	r2, [r5, #20]
 23fd34c:	4954      	ldr	r1, [pc, #336]	; (23fd4a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fd34e:	f7ff fae2 	bl	23fc916 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fd352:	f1b8 0f00 	cmp.w	r8, #0
 23fd356:	d00d      	beq.n	23fd374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fd358:	215b      	movs	r1, #91	; 0x5b
 23fd35a:	4620      	mov	r0, r4
 23fd35c:	f7ff fa56 	bl	23fc80c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fd360:	4641      	mov	r1, r8
 23fd362:	4620      	mov	r0, r4
 23fd364:	f7ff fa43 	bl	23fc7ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fd368:	6823      	ldr	r3, [r4, #0]
 23fd36a:	2202      	movs	r2, #2
 23fd36c:	4620      	mov	r0, r4
 23fd36e:	68db      	ldr	r3, [r3, #12]
 23fd370:	494c      	ldr	r1, [pc, #304]	; (23fd4a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fd372:	4798      	blx	r3
    if (attr.has_file) {
 23fd374:	792b      	ldrb	r3, [r5, #4]
 23fd376:	07da      	lsls	r2, r3, #31
 23fd378:	d524      	bpl.n	23fd3c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fd37a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fd37e:	212f      	movs	r1, #47	; 0x2f
 23fd380:	4640      	mov	r0, r8
 23fd382:	f002 faa8 	bl	23ff8d6 <strrchr>
    if (s1) {
 23fd386:	b108      	cbz	r0, 23fd38c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fd388:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fd38c:	4641      	mov	r1, r8
 23fd38e:	4620      	mov	r0, r4
 23fd390:	f7ff fa2d 	bl	23fc7ee <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fd394:	792b      	ldrb	r3, [r5, #4]
 23fd396:	079b      	lsls	r3, r3, #30
 23fd398:	d508      	bpl.n	23fd3ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fd39a:	213a      	movs	r1, #58	; 0x3a
 23fd39c:	4620      	mov	r0, r4
 23fd39e:	f7ff fa35 	bl	23fc80c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fd3a2:	4620      	mov	r0, r4
 23fd3a4:	68ea      	ldr	r2, [r5, #12]
 23fd3a6:	4940      	ldr	r1, [pc, #256]	; (23fd4a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fd3a8:	f7ff fab5 	bl	23fc916 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fd3ac:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fd3ae:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fd3b0:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fd3b4:	4620      	mov	r0, r4
            write(", ", 2);
 23fd3b6:	f04f 0202 	mov.w	r2, #2
 23fd3ba:	68db      	ldr	r3, [r3, #12]
 23fd3bc:	bf14      	ite	ne
 23fd3be:	493b      	ldrne	r1, [pc, #236]	; (23fd4ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fd3c0:	493b      	ldreq	r1, [pc, #236]	; (23fd4b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd3c2:	4798      	blx	r3
    if (attr.has_function) {
 23fd3c4:	792b      	ldrb	r3, [r5, #4]
 23fd3c6:	0758      	lsls	r0, r3, #29
 23fd3c8:	d51d      	bpl.n	23fd406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd3ca:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd3cc:	460b      	mov	r3, r1
 23fd3ce:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fd3d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd3d4:	b160      	cbz	r0, 23fd3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fd3d6:	2820      	cmp	r0, #32
 23fd3d8:	d108      	bne.n	23fd3ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fd3da:	4619      	mov	r1, r3
 23fd3dc:	e7f7      	b.n	23fd3ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fd3de:	4835      	ldr	r0, [pc, #212]	; (23fd4b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fd3e0:	f000 f983 	bl	23fd6ea <_ZN5spark12NetworkClass9listeningEv>
 23fd3e4:	2800      	cmp	r0, #0
 23fd3e6:	d0ac      	beq.n	23fd342 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fd3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fd3ec:	2828      	cmp	r0, #40	; 0x28
 23fd3ee:	d1ee      	bne.n	23fd3ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fd3f0:	6823      	ldr	r3, [r4, #0]
 23fd3f2:	1a52      	subs	r2, r2, r1
 23fd3f4:	4620      	mov	r0, r4
 23fd3f6:	68db      	ldr	r3, [r3, #12]
 23fd3f8:	4798      	blx	r3
        write("(): ", 4);
 23fd3fa:	6823      	ldr	r3, [r4, #0]
 23fd3fc:	2204      	movs	r2, #4
 23fd3fe:	4620      	mov	r0, r4
 23fd400:	68db      	ldr	r3, [r3, #12]
 23fd402:	492d      	ldr	r1, [pc, #180]	; (23fd4b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fd404:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fd406:	2100      	movs	r1, #0
 23fd408:	4638      	mov	r0, r7
 23fd40a:	f7fe fce1 	bl	23fbdd0 <log_level_name>
 23fd40e:	4601      	mov	r1, r0
    write(s);
 23fd410:	4620      	mov	r0, r4
 23fd412:	f7ff f9ec 	bl	23fc7ee <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fd416:	6823      	ldr	r3, [r4, #0]
 23fd418:	2202      	movs	r2, #2
 23fd41a:	4620      	mov	r0, r4
 23fd41c:	68db      	ldr	r3, [r3, #12]
 23fd41e:	4924      	ldr	r1, [pc, #144]	; (23fd4b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd420:	4798      	blx	r3
    if (msg) {
 23fd422:	b11e      	cbz	r6, 23fd42c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fd424:	4631      	mov	r1, r6
 23fd426:	4620      	mov	r0, r4
 23fd428:	f7ff f9e1 	bl	23fc7ee <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fd42c:	792b      	ldrb	r3, [r5, #4]
 23fd42e:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fd432:	d02c      	beq.n	23fd48e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fd434:	6823      	ldr	r3, [r4, #0]
 23fd436:	4921      	ldr	r1, [pc, #132]	; (23fd4bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fd438:	68db      	ldr	r3, [r3, #12]
 23fd43a:	2202      	movs	r2, #2
 23fd43c:	4620      	mov	r0, r4
 23fd43e:	4798      	blx	r3
        if (attr.has_code) {
 23fd440:	792b      	ldrb	r3, [r5, #4]
 23fd442:	06d9      	lsls	r1, r3, #27
 23fd444:	d50a      	bpl.n	23fd45c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fd446:	6823      	ldr	r3, [r4, #0]
 23fd448:	2207      	movs	r2, #7
 23fd44a:	4620      	mov	r0, r4
 23fd44c:	491c      	ldr	r1, [pc, #112]	; (23fd4c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fd44e:	68db      	ldr	r3, [r3, #12]
 23fd450:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fd452:	4620      	mov	r0, r4
 23fd454:	69aa      	ldr	r2, [r5, #24]
 23fd456:	491b      	ldr	r1, [pc, #108]	; (23fd4c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fd458:	f7ff fa5d 	bl	23fc916 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fd45c:	792b      	ldrb	r3, [r5, #4]
 23fd45e:	069a      	lsls	r2, r3, #26
 23fd460:	d511      	bpl.n	23fd486 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fd462:	06db      	lsls	r3, r3, #27
 23fd464:	d505      	bpl.n	23fd472 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fd466:	6823      	ldr	r3, [r4, #0]
 23fd468:	2202      	movs	r2, #2
 23fd46a:	4620      	mov	r0, r4
 23fd46c:	68db      	ldr	r3, [r3, #12]
 23fd46e:	490f      	ldr	r1, [pc, #60]	; (23fd4ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fd470:	4798      	blx	r3
            write("details = ", 10);
 23fd472:	6823      	ldr	r3, [r4, #0]
 23fd474:	4620      	mov	r0, r4
 23fd476:	4914      	ldr	r1, [pc, #80]	; (23fd4c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fd478:	220a      	movs	r2, #10
 23fd47a:	68db      	ldr	r3, [r3, #12]
 23fd47c:	4798      	blx	r3
            write(attr.details);
 23fd47e:	4620      	mov	r0, r4
 23fd480:	69e9      	ldr	r1, [r5, #28]
 23fd482:	f7ff f9b4 	bl	23fc7ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fd486:	215d      	movs	r1, #93	; 0x5d
 23fd488:	4620      	mov	r0, r4
 23fd48a:	f7ff f9bf 	bl	23fc80c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fd48e:	6823      	ldr	r3, [r4, #0]
 23fd490:	4620      	mov	r0, r4
}
 23fd492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fd496:	2202      	movs	r2, #2
 23fd498:	68db      	ldr	r3, [r3, #12]
 23fd49a:	490c      	ldr	r1, [pc, #48]	; (23fd4cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fd49c:	4718      	bx	r3
 23fd49e:	bf00      	nop
 23fd4a0:	023ffc16 	.word	0x023ffc16
 23fd4a4:	023ffc1d 	.word	0x023ffc1d
 23fd4a8:	023ffb34 	.word	0x023ffb34
 23fd4ac:	023ffc20 	.word	0x023ffc20
 23fd4b0:	023ffc25 	.word	0x023ffc25
 23fd4b4:	1007ae9c 	.word	0x1007ae9c
 23fd4b8:	023ffc23 	.word	0x023ffc23
 23fd4bc:	023ffc28 	.word	0x023ffc28
 23fd4c0:	023ffc2b 	.word	0x023ffc2b
 23fd4c4:	023ffc33 	.word	0x023ffc33
 23fd4c8:	023ffc36 	.word	0x023ffc36
 23fd4cc:	023ffc41 	.word	0x023ffc41

023fd4d0 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd4d4:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fd4d6:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd4d8:	460d      	mov	r5, r1
 23fd4da:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fd4dc:	f000 fbb8 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fd4e0:	4287      	cmp	r7, r0
 23fd4e2:	d007      	beq.n	23fd4f4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fd4e4:	6a20      	ldr	r0, [r4, #32]
 23fd4e6:	4632      	mov	r2, r6
 23fd4e8:	6803      	ldr	r3, [r0, #0]
 23fd4ea:	4629      	mov	r1, r5
}
 23fd4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fd4f0:	68db      	ldr	r3, [r3, #12]
 23fd4f2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fd4f4:	4803      	ldr	r0, [pc, #12]	; (23fd504 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fd4f6:	f000 f8f8 	bl	23fd6ea <_ZN5spark12NetworkClass9listeningEv>
 23fd4fa:	2800      	cmp	r0, #0
 23fd4fc:	d0f2      	beq.n	23fd4e4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fd4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd502:	bf00      	nop
 23fd504:	1007ae9c 	.word	0x1007ae9c

023fd508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd50c:	b085      	sub	sp, #20
    return stream_;
 23fd50e:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fd512:	4605      	mov	r5, r0
 23fd514:	460f      	mov	r7, r1
 23fd516:	4690      	mov	r8, r2
 23fd518:	461e      	mov	r6, r3
 23fd51a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fd51c:	f000 fb98 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fd520:	4581      	cmp	r9, r0
 23fd522:	d105      	bne.n	23fd530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fd524:	4849      	ldr	r0, [pc, #292]	; (23fd64c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fd526:	f000 f8e0 	bl	23fd6ea <_ZN5spark12NetworkClass9listeningEv>
 23fd52a:	2800      	cmp	r0, #0
 23fd52c:	f040 808a 	bne.w	23fd644 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fd530:	f04f 0900 	mov.w	r9, #0
 23fd534:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fd536:	4a46      	ldr	r2, [pc, #280]	; (23fd650 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fd538:	a801      	add	r0, sp, #4
 23fd53a:	9201      	str	r2, [sp, #4]
 23fd53c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fd53e:	f88d 9008 	strb.w	r9, [sp, #8]
 23fd542:	f7ff f830 	bl	23fc5a6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fd546:	4649      	mov	r1, r9
 23fd548:	4640      	mov	r0, r8
 23fd54a:	f7fe fc41 	bl	23fbdd0 <log_level_name>
 23fd54e:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd550:	4940      	ldr	r1, [pc, #256]	; (23fd654 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd552:	2201      	movs	r2, #1
 23fd554:	a801      	add	r0, sp, #4
 23fd556:	f7ff f8b5 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd55a:	4641      	mov	r1, r8
 23fd55c:	f7ff f939 	bl	23fc7d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd560:	b13f      	cbz	r7, 23fd572 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd562:	493d      	ldr	r1, [pc, #244]	; (23fd658 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd564:	2201      	movs	r2, #1
 23fd566:	a801      	add	r0, sp, #4
 23fd568:	f7ff f8ac 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd56c:	4639      	mov	r1, r7
 23fd56e:	f7ff f930 	bl	23fc7d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd572:	b13e      	cbz	r6, 23fd584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd574:	4939      	ldr	r1, [pc, #228]	; (23fd65c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd576:	2201      	movs	r2, #1
 23fd578:	a801      	add	r0, sp, #4
 23fd57a:	f7ff f8a3 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd57e:	4631      	mov	r1, r6
 23fd580:	f7ff f927 	bl	23fc7d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd584:	7923      	ldrb	r3, [r4, #4]
 23fd586:	07df      	lsls	r7, r3, #31
 23fd588:	d50e      	bpl.n	23fd5a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd58a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd58c:	212f      	movs	r1, #47	; 0x2f
 23fd58e:	4630      	mov	r0, r6
 23fd590:	f002 f9a1 	bl	23ff8d6 <strrchr>
    if (s1) {
 23fd594:	b100      	cbz	r0, 23fd598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd596:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd598:	4931      	ldr	r1, [pc, #196]	; (23fd660 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd59a:	2201      	movs	r2, #1
 23fd59c:	a801      	add	r0, sp, #4
 23fd59e:	f7ff f891 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd5a2:	4631      	mov	r1, r6
 23fd5a4:	f7ff f915 	bl	23fc7d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd5a8:	7923      	ldrb	r3, [r4, #4]
 23fd5aa:	079e      	lsls	r6, r3, #30
 23fd5ac:	d507      	bpl.n	23fd5be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd5ae:	492d      	ldr	r1, [pc, #180]	; (23fd664 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd5b0:	2202      	movs	r2, #2
 23fd5b2:	a801      	add	r0, sp, #4
 23fd5b4:	f7ff f886 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd5b8:	68e1      	ldr	r1, [r4, #12]
 23fd5ba:	f7ff f801 	bl	23fc5c0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd5be:	7923      	ldrb	r3, [r4, #4]
 23fd5c0:	0758      	lsls	r0, r3, #29
 23fd5c2:	d514      	bpl.n	23fd5ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd5c4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd5c6:	4633      	mov	r3, r6
 23fd5c8:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd5ce:	b12a      	cbz	r2, 23fd5dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd5d0:	2a20      	cmp	r2, #32
 23fd5d2:	d101      	bne.n	23fd5d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd5d4:	461e      	mov	r6, r3
 23fd5d6:	e7f7      	b.n	23fd5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd5d8:	2a28      	cmp	r2, #40	; 0x28
 23fd5da:	d1f5      	bne.n	23fd5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd5dc:	2202      	movs	r2, #2
 23fd5de:	4922      	ldr	r1, [pc, #136]	; (23fd668 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd5e0:	a801      	add	r0, sp, #4
 23fd5e2:	f7ff f86f 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd5e6:	4631      	mov	r1, r6
 23fd5e8:	1bba      	subs	r2, r7, r6
 23fd5ea:	f7ff f87b 	bl	23fc6e4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd5ee:	7923      	ldrb	r3, [r4, #4]
 23fd5f0:	0719      	lsls	r1, r3, #28
 23fd5f2:	d507      	bpl.n	23fd604 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd5f4:	491d      	ldr	r1, [pc, #116]	; (23fd66c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd5f6:	2201      	movs	r2, #1
 23fd5f8:	a801      	add	r0, sp, #4
 23fd5fa:	f7ff f863 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd5fe:	6961      	ldr	r1, [r4, #20]
 23fd600:	f7fe fff0 	bl	23fc5e4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd604:	7923      	ldrb	r3, [r4, #4]
 23fd606:	06da      	lsls	r2, r3, #27
 23fd608:	d508      	bpl.n	23fd61c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd60a:	2204      	movs	r2, #4
 23fd60c:	4918      	ldr	r1, [pc, #96]	; (23fd670 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd60e:	eb0d 0002 	add.w	r0, sp, r2
 23fd612:	f7ff f857 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd616:	69a1      	ldr	r1, [r4, #24]
 23fd618:	f7fe ffd2 	bl	23fc5c0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd61c:	7923      	ldrb	r3, [r4, #4]
 23fd61e:	069b      	lsls	r3, r3, #26
 23fd620:	d507      	bpl.n	23fd632 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd622:	4914      	ldr	r1, [pc, #80]	; (23fd674 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd624:	2206      	movs	r2, #6
 23fd626:	a801      	add	r0, sp, #4
 23fd628:	f7ff f84c 	bl	23fc6c4 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd62c:	69e1      	ldr	r1, [r4, #28]
 23fd62e:	f7ff f8d0 	bl	23fc7d2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd632:	a801      	add	r0, sp, #4
 23fd634:	f7fe ffa1 	bl	23fc57a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd638:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd63a:	2202      	movs	r2, #2
 23fd63c:	6803      	ldr	r3, [r0, #0]
 23fd63e:	490e      	ldr	r1, [pc, #56]	; (23fd678 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd640:	68db      	ldr	r3, [r3, #12]
 23fd642:	4798      	blx	r3
}
 23fd644:	b005      	add	sp, #20
 23fd646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd64a:	bf00      	nop
 23fd64c:	1007ae9c 	.word	0x1007ae9c
 23fd650:	023ffc64 	.word	0x023ffc64
 23fd654:	023ffbf3 	.word	0x023ffbf3
 23fd658:	023ffc44 	.word	0x023ffc44
 23fd65c:	023ffec6 	.word	0x023ffec6
 23fd660:	023ffc46 	.word	0x023ffc46
 23fd664:	023ffc48 	.word	0x023ffc48
 23fd668:	023ffc4b 	.word	0x023ffc4b
 23fd66c:	023ffc4e 	.word	0x023ffc4e
 23fd670:	023ffc50 	.word	0x023ffc50
 23fd674:	023ffc55 	.word	0x023ffc55
 23fd678:	023ffc41 	.word	0x023ffc41

023fd67c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd67c:	2300      	movs	r3, #0
 23fd67e:	6840      	ldr	r0, [r0, #4]
 23fd680:	461a      	mov	r2, r3
 23fd682:	f7fe bc15 	b.w	23fbeb0 <network_connect>

023fd686 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd686:	2200      	movs	r2, #0
 23fd688:	2102      	movs	r1, #2
 23fd68a:	6840      	ldr	r0, [r0, #4]
 23fd68c:	f7fe bc2c 	b.w	23fbee8 <network_disconnect>

023fd690 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd690:	2200      	movs	r2, #0
 23fd692:	6840      	ldr	r0, [r0, #4]
 23fd694:	4611      	mov	r1, r2
 23fd696:	f7fe bc19 	b.w	23fbecc <network_connecting>

023fd69a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd69a:	2200      	movs	r2, #0
 23fd69c:	6840      	ldr	r0, [r0, #4]
 23fd69e:	4611      	mov	r1, r2
 23fd6a0:	f7fe bc30 	b.w	23fbf04 <network_ready>

023fd6a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd6a4:	2300      	movs	r3, #0
 23fd6a6:	6840      	ldr	r0, [r0, #4]
 23fd6a8:	461a      	mov	r2, r3
 23fd6aa:	4619      	mov	r1, r3
 23fd6ac:	f7fe bc38 	b.w	23fbf20 <network_on>

023fd6b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd6b0:	2300      	movs	r3, #0
 23fd6b2:	6840      	ldr	r0, [r0, #4]
 23fd6b4:	461a      	mov	r2, r3
 23fd6b6:	4619      	mov	r1, r3
 23fd6b8:	f7fe bc40 	b.w	23fbf3c <network_off>

023fd6bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd6bc:	2100      	movs	r1, #0
 23fd6be:	6840      	ldr	r0, [r0, #4]
 23fd6c0:	f7fe bc82 	b.w	23fbfc8 <network_is_on>

023fd6c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd6c4:	2100      	movs	r1, #0
 23fd6c6:	6840      	ldr	r0, [r0, #4]
 23fd6c8:	f7fe bc8c 	b.w	23fbfe4 <network_is_off>

023fd6cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd6cc:	2200      	movs	r2, #0
 23fd6ce:	6840      	ldr	r0, [r0, #4]
 23fd6d0:	f081 0101 	eor.w	r1, r1, #1
 23fd6d4:	f7fe bc40 	b.w	23fbf58 <network_listen>

023fd6d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fd6d8:	2200      	movs	r2, #0
 23fd6da:	6840      	ldr	r0, [r0, #4]
 23fd6dc:	f7fe bc58 	b.w	23fbf90 <network_set_listen_timeout>

023fd6e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fd6e0:	2200      	movs	r2, #0
 23fd6e2:	6840      	ldr	r0, [r0, #4]
 23fd6e4:	4611      	mov	r1, r2
 23fd6e6:	f7fe bc61 	b.w	23fbfac <network_get_listen_timeout>

023fd6ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fd6ea:	2200      	movs	r2, #0
 23fd6ec:	6840      	ldr	r0, [r0, #4]
 23fd6ee:	4611      	mov	r1, r2
 23fd6f0:	f7fe bc40 	b.w	23fbf74 <network_listening>

023fd6f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fd6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd6f8:	b095      	sub	sp, #84	; 0x54
 23fd6fa:	4614      	mov	r4, r2
 23fd6fc:	460d      	mov	r5, r1
 23fd6fe:	4607      	mov	r7, r0
    IPAddress addr;
 23fd700:	f7fe fdea 	bl	23fc2d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fd704:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fd706:	221c      	movs	r2, #28
 23fd708:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fd70a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fd70c:	f002 f879 	bl	23ff802 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fd710:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd712:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fd714:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd716:	2100      	movs	r1, #0
 23fd718:	466b      	mov	r3, sp
 23fd71a:	aa0c      	add	r2, sp, #48	; 0x30
 23fd71c:	f7fe f9c2 	bl	23fbaa4 <netdb_getaddrinfo>
    if (!r) {
 23fd720:	4604      	mov	r4, r0
 23fd722:	2800      	cmp	r0, #0
 23fd724:	d14b      	bne.n	23fd7be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd726:	4602      	mov	r2, r0
 23fd728:	2101      	movs	r1, #1
 23fd72a:	6868      	ldr	r0, [r5, #4]
 23fd72c:	f7fe fbea 	bl	23fbf04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd730:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd732:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd734:	4622      	mov	r2, r4
 23fd736:	6868      	ldr	r0, [r5, #4]
 23fd738:	f7fe fbe4 	bl	23fbf04 <network_ready>
        bool ok = false;
 23fd73c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd73e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd740:	9e00      	ldr	r6, [sp, #0]
 23fd742:	2e00      	cmp	r6, #0
 23fd744:	d03b      	beq.n	23fd7be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fd746:	2900      	cmp	r1, #0
 23fd748:	d139      	bne.n	23fd7be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fd74a:	6873      	ldr	r3, [r6, #4]
 23fd74c:	2b02      	cmp	r3, #2
 23fd74e:	d003      	beq.n	23fd758 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fd750:	2b0a      	cmp	r3, #10
 23fd752:	d011      	beq.n	23fd778 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd754:	69f6      	ldr	r6, [r6, #28]
 23fd756:	e7f4      	b.n	23fd742 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fd758:	f1b8 0f00 	cmp.w	r8, #0
 23fd75c:	d0fa      	beq.n	23fd754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fd75e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fd760:	a806      	add	r0, sp, #24
 23fd762:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fd764:	1d3c      	adds	r4, r7, #4
 23fd766:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fd768:	f7fe fde4 	bl	23fc334 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fd76c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd76e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd770:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd772:	4641      	mov	r1, r8
 23fd774:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fd776:	e7ed      	b.n	23fd754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fd778:	f1b9 0f00 	cmp.w	r9, #0
 23fd77c:	d0ea      	beq.n	23fd754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fd77e:	2210      	movs	r2, #16
 23fd780:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fd782:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fd784:	f002 f83d 	bl	23ff802 <memset>
                    a.v = 6;
 23fd788:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd78a:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fd78c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd790:	f104 0308 	add.w	r3, r4, #8
 23fd794:	3418      	adds	r4, #24
 23fd796:	462a      	mov	r2, r5
 23fd798:	6818      	ldr	r0, [r3, #0]
 23fd79a:	6859      	ldr	r1, [r3, #4]
 23fd79c:	3308      	adds	r3, #8
 23fd79e:	c203      	stmia	r2!, {r0, r1}
 23fd7a0:	42a3      	cmp	r3, r4
 23fd7a2:	4615      	mov	r5, r2
 23fd7a4:	d1f7      	bne.n	23fd796 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fd7a6:	a901      	add	r1, sp, #4
 23fd7a8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fd7aa:	1d3c      	adds	r4, r7, #4
 23fd7ac:	ad07      	add	r5, sp, #28
 23fd7ae:	f7fe fda1 	bl	23fc2f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fd7b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd7b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd7b6:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd7b8:	4649      	mov	r1, r9
 23fd7ba:	7023      	strb	r3, [r4, #0]
                    break;
 23fd7bc:	e7ca      	b.n	23fd754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fd7be:	9800      	ldr	r0, [sp, #0]
 23fd7c0:	f7fe f962 	bl	23fba88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fd7c4:	4638      	mov	r0, r7
 23fd7c6:	b015      	add	sp, #84	; 0x54
 23fd7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd7cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fd7cc:	4b02      	ldr	r3, [pc, #8]	; (23fd7d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fd7ce:	4a03      	ldr	r2, [pc, #12]	; (23fd7dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fd7d0:	601a      	str	r2, [r3, #0]
 23fd7d2:	2200      	movs	r2, #0
 23fd7d4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fd7d6:	4770      	bx	lr
 23fd7d8:	1007ae9c 	.word	0x1007ae9c
 23fd7dc:	023ffcdc 	.word	0x023ffcdc

023fd7e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd7e2:	4606      	mov	r6, r0
 23fd7e4:	460d      	mov	r5, r1
  size_t n = 0;
 23fd7e6:	2400      	movs	r4, #0
 23fd7e8:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd7ea:	42bd      	cmp	r5, r7
 23fd7ec:	d00c      	beq.n	23fd808 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd7ee:	6833      	ldr	r3, [r6, #0]
 23fd7f0:	4630      	mov	r0, r6
 23fd7f2:	689b      	ldr	r3, [r3, #8]
 23fd7f4:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd7f8:	4798      	blx	r3
     if (chunk>=0)
 23fd7fa:	1e03      	subs	r3, r0, #0
 23fd7fc:	db01      	blt.n	23fd802 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd7fe:	441c      	add	r4, r3
  while (size--) {
 23fd800:	e7f3      	b.n	23fd7ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd802:	2c00      	cmp	r4, #0
 23fd804:	bf08      	it	eq
 23fd806:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd808:	4620      	mov	r0, r4
 23fd80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd80c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd80c:	b513      	push	{r0, r1, r4, lr}
 23fd80e:	4604      	mov	r4, r0
    }
 23fd810:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd812:	b159      	cbz	r1, 23fd82c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd814:	9101      	str	r1, [sp, #4]
 23fd816:	f7fd fcc1 	bl	23fb19c <strlen>
 23fd81a:	4602      	mov	r2, r0
 23fd81c:	4620      	mov	r0, r4
 23fd81e:	6823      	ldr	r3, [r4, #0]
 23fd820:	9901      	ldr	r1, [sp, #4]
 23fd822:	68db      	ldr	r3, [r3, #12]
    }
 23fd824:	b002      	add	sp, #8
 23fd826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd82a:	4718      	bx	r3
    }
 23fd82c:	b002      	add	sp, #8
 23fd82e:	bd10      	pop	{r4, pc}

023fd830 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd830:	6803      	ldr	r3, [r0, #0]
 23fd832:	689b      	ldr	r3, [r3, #8]
 23fd834:	4718      	bx	r3

023fd836 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fd836:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fd838:	210d      	movs	r1, #13
{
 23fd83a:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fd83c:	f7ff fff8 	bl	23fd830 <_ZN5Print5printEc>
  n += print('\n');
 23fd840:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fd842:	4604      	mov	r4, r0
  n += print('\n');
 23fd844:	4628      	mov	r0, r5
 23fd846:	f7ff fff3 	bl	23fd830 <_ZN5Print5printEc>
  return n;
}
 23fd84a:	4420      	add	r0, r4
 23fd84c:	bd38      	pop	{r3, r4, r5, pc}

023fd84e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd84e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd850:	2a01      	cmp	r2, #1
 23fd852:	bf98      	it	ls
 23fd854:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd856:	b530      	push	{r4, r5, lr}
 23fd858:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd85a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd85e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd860:	460d      	mov	r5, r1
 23fd862:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd866:	fb01 5312 	mls	r3, r1, r2, r5
 23fd86a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd86e:	2b09      	cmp	r3, #9
 23fd870:	bf94      	ite	ls
 23fd872:	3330      	addls	r3, #48	; 0x30
 23fd874:	3337      	addhi	r3, #55	; 0x37
 23fd876:	b2db      	uxtb	r3, r3
  } while(n);
 23fd878:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd87a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd87e:	d9ef      	bls.n	23fd860 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd880:	4621      	mov	r1, r4
 23fd882:	f7ff ffc3 	bl	23fd80c <_ZN5Print5writeEPKc>
}
 23fd886:	b00b      	add	sp, #44	; 0x2c
 23fd888:	bd30      	pop	{r4, r5, pc}

023fd88a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fd88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd88e:	b086      	sub	sp, #24
 23fd890:	af00      	add	r7, sp, #0
 23fd892:	4605      	mov	r5, r0
 23fd894:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fd896:	1d38      	adds	r0, r7, #4
 23fd898:	2114      	movs	r1, #20
{
 23fd89a:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fd89c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fd89e:	f7fe fbd9 	bl	23fc054 <vsnprintf>

    if (n<bufsize)
 23fd8a2:	2813      	cmp	r0, #19
 23fd8a4:	d80e      	bhi.n	23fd8c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fd8a6:	4628      	mov	r0, r5
 23fd8a8:	1d39      	adds	r1, r7, #4
 23fd8aa:	f7ff ffaf 	bl	23fd80c <_ZN5Print5writeEPKc>
 23fd8ae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fd8b0:	b11e      	cbz	r6, 23fd8ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fd8b2:	4628      	mov	r0, r5
 23fd8b4:	f7ff ffbf 	bl	23fd836 <_ZN5Print7printlnEv>
 23fd8b8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fd8ba:	4620      	mov	r0, r4
 23fd8bc:	3718      	adds	r7, #24
 23fd8be:	46bd      	mov	sp, r7
 23fd8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fd8c4:	f100 0308 	add.w	r3, r0, #8
 23fd8c8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fd8cc:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fd8ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fd8d2:	4622      	mov	r2, r4
 23fd8d4:	1c41      	adds	r1, r0, #1
 23fd8d6:	683b      	ldr	r3, [r7, #0]
 23fd8d8:	4668      	mov	r0, sp
 23fd8da:	f7fe fbbb 	bl	23fc054 <vsnprintf>
  return write(str);
 23fd8de:	4669      	mov	r1, sp
 23fd8e0:	4628      	mov	r0, r5
 23fd8e2:	f7ff ff93 	bl	23fd80c <_ZN5Print5writeEPKc>
 23fd8e6:	4604      	mov	r4, r0
 23fd8e8:	46c5      	mov	sp, r8
 23fd8ea:	e7e1      	b.n	23fd8b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fd8ec <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fd8ec:	2200      	movs	r2, #0
 23fd8ee:	4b01      	ldr	r3, [pc, #4]	; (23fd8f4 <_GLOBAL__sub_I_RGB+0x8>)
 23fd8f0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd8f2:	4770      	bx	lr
 23fd8f4:	1007aea4 	.word	0x1007aea4

023fd8f8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd8f8:	2100      	movs	r1, #0
 23fd8fa:	f7fe b935 	b.w	23fbb68 <hal_spi_release>

023fd8fe <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd8fe:	2100      	movs	r1, #0
 23fd900:	f7fe b924 	b.w	23fbb4c <hal_spi_acquire>

023fd904 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd904:	b510      	push	{r4, lr}
 23fd906:	4604      	mov	r4, r0
 23fd908:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd90a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd90c:	f7fe f902 	bl	23fbb14 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd910:	2300      	movs	r3, #0
}
 23fd912:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd914:	6063      	str	r3, [r4, #4]
}
 23fd916:	bd10      	pop	{r4, pc}

023fd918 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd918:	b513      	push	{r0, r1, r4, lr}
 23fd91a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd91c:	7800      	ldrb	r0, [r0, #0]
 23fd91e:	f7ff ffee 	bl	23fd8fe <_ZN8SPIClass4lockEv.isra.0>
 23fd922:	b958      	cbnz	r0, 23fd93c <_ZN8SPIClass5beginEv+0x24>
 23fd924:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd926:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd92a:	9001      	str	r0, [sp, #4]
 23fd92c:	f7fe f8c8 	bl	23fbac0 <hal_spi_begin>
        unlock();
 23fd930:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd932:	b002      	add	sp, #8
 23fd934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd938:	f7ff bfde 	b.w	23fd8f8 <_ZN8SPIClass6unlockEv.isra.0>
 23fd93c:	b002      	add	sp, #8
 23fd93e:	bd10      	pop	{r4, pc}

023fd940 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fd940:	b513      	push	{r0, r1, r4, lr}
 23fd942:	4604      	mov	r4, r0
    if (!lock())
 23fd944:	7800      	ldrb	r0, [r0, #0]
{
 23fd946:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fd948:	f7ff ffd9 	bl	23fd8fe <_ZN8SPIClass4lockEv.isra.0>
 23fd94c:	9901      	ldr	r1, [sp, #4]
 23fd94e:	b948      	cbnz	r0, 23fd964 <_ZN8SPIClass11setDataModeEh+0x24>
 23fd950:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fd952:	9001      	str	r0, [sp, #4]
 23fd954:	f7fe f8c2 	bl	23fbadc <hal_spi_set_data_mode>
        unlock();
 23fd958:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd95a:	b002      	add	sp, #8
 23fd95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd960:	f7ff bfca 	b.w	23fd8f8 <_ZN8SPIClass6unlockEv.isra.0>
 23fd964:	b002      	add	sp, #8
 23fd966:	bd10      	pop	{r4, pc}

023fd968 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fd968:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd96a:	7800      	ldrb	r0, [r0, #0]
 23fd96c:	f7fe f8c4 	bl	23fbaf8 <hal_spi_transfer>
}
 23fd970:	b2c0      	uxtb	r0, r0
 23fd972:	bd08      	pop	{r3, pc}

023fd974 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fd974:	b510      	push	{r4, lr}
 23fd976:	4604      	mov	r4, r0
{
	free(buffer);
 23fd978:	6800      	ldr	r0, [r0, #0]
 23fd97a:	f7fe fb4f 	bl	23fc01c <free>
}
 23fd97e:	4620      	mov	r0, r4
 23fd980:	bd10      	pop	{r4, pc}

023fd982 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fd982:	b510      	push	{r4, lr}
 23fd984:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fd986:	6800      	ldr	r0, [r0, #0]
 23fd988:	b108      	cbz	r0, 23fd98e <_ZN6String10invalidateEv+0xc>
 23fd98a:	f7fe fb47 	bl	23fc01c <free>
	buffer = NULL;
 23fd98e:	2300      	movs	r3, #0
	capacity = len = 0;
 23fd990:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fd994:	6023      	str	r3, [r4, #0]
}
 23fd996:	bd10      	pop	{r4, pc}

023fd998 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd998:	b538      	push	{r3, r4, r5, lr}
 23fd99a:	4604      	mov	r4, r0
 23fd99c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd99e:	6800      	ldr	r0, [r0, #0]
 23fd9a0:	3101      	adds	r1, #1
 23fd9a2:	f7fe fb49 	bl	23fc038 <realloc>
	if (newbuffer) {
 23fd9a6:	b110      	cbz	r0, 23fd9ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fd9a8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fd9ac:	2001      	movs	r0, #1
	}
	return 0;
}
 23fd9ae:	bd38      	pop	{r3, r4, r5, pc}

023fd9b0 <_ZN6String7reserveEj>:
{
 23fd9b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fd9b2:	6803      	ldr	r3, [r0, #0]
{
 23fd9b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fd9b6:	b123      	cbz	r3, 23fd9c2 <_ZN6String7reserveEj+0x12>
 23fd9b8:	6843      	ldr	r3, [r0, #4]
 23fd9ba:	428b      	cmp	r3, r1
 23fd9bc:	d301      	bcc.n	23fd9c2 <_ZN6String7reserveEj+0x12>
 23fd9be:	2001      	movs	r0, #1
}
 23fd9c0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fd9c2:	4620      	mov	r0, r4
 23fd9c4:	f7ff ffe8 	bl	23fd998 <_ZN6String12changeBufferEj>
 23fd9c8:	2800      	cmp	r0, #0
 23fd9ca:	d0f9      	beq.n	23fd9c0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fd9cc:	68a3      	ldr	r3, [r4, #8]
 23fd9ce:	2b00      	cmp	r3, #0
 23fd9d0:	d1f5      	bne.n	23fd9be <_ZN6String7reserveEj+0xe>
 23fd9d2:	6822      	ldr	r2, [r4, #0]
 23fd9d4:	7013      	strb	r3, [r2, #0]
 23fd9d6:	e7f2      	b.n	23fd9be <_ZN6String7reserveEj+0xe>

023fd9d8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd9da:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fd9dc:	4611      	mov	r1, r2
 23fd9de:	9201      	str	r2, [sp, #4]
{
 23fd9e0:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fd9e2:	f7ff ffe5 	bl	23fd9b0 <_ZN6String7reserveEj>
 23fd9e6:	9a01      	ldr	r2, [sp, #4]
 23fd9e8:	b928      	cbnz	r0, 23fd9f6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fd9ea:	4620      	mov	r0, r4
 23fd9ec:	f7ff ffc9 	bl	23fd982 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fd9f0:	4620      	mov	r0, r4
 23fd9f2:	b003      	add	sp, #12
 23fd9f4:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fd9f6:	4629      	mov	r1, r5
	len = length;
 23fd9f8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fd9fa:	6820      	ldr	r0, [r4, #0]
 23fd9fc:	f001 feda 	bl	23ff7b4 <memcpy>
	buffer[len] = 0;
 23fda00:	2100      	movs	r1, #0
 23fda02:	6822      	ldr	r2, [r4, #0]
 23fda04:	68a3      	ldr	r3, [r4, #8]
 23fda06:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fda08:	e7f2      	b.n	23fd9f0 <_ZN6String4copyEPKcj+0x18>

023fda0a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fda0a:	b538      	push	{r3, r4, r5, lr}
 23fda0c:	4605      	mov	r5, r0
	if (buffer) {
 23fda0e:	6800      	ldr	r0, [r0, #0]
{
 23fda10:	460c      	mov	r4, r1
	if (buffer) {
 23fda12:	b170      	cbz	r0, 23fda32 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fda14:	686a      	ldr	r2, [r5, #4]
 23fda16:	688b      	ldr	r3, [r1, #8]
 23fda18:	429a      	cmp	r2, r3
 23fda1a:	d308      	bcc.n	23fda2e <_ZN6String4moveERS_+0x24>
 23fda1c:	6809      	ldr	r1, [r1, #0]
 23fda1e:	b131      	cbz	r1, 23fda2e <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fda20:	f001 ff3d 	bl	23ff89e <strcpy>
			len = rhs.len;
 23fda24:	68a3      	ldr	r3, [r4, #8]
 23fda26:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fda28:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fda2a:	60a3      	str	r3, [r4, #8]
}
 23fda2c:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fda2e:	f7fe faf5 	bl	23fc01c <free>
	buffer = rhs.buffer;
 23fda32:	6823      	ldr	r3, [r4, #0]
 23fda34:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fda36:	6863      	ldr	r3, [r4, #4]
 23fda38:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fda3a:	68a3      	ldr	r3, [r4, #8]
 23fda3c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fda3e:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fda40:	e9c4 3300 	strd	r3, r3, [r4]
 23fda44:	e7f1      	b.n	23fda2a <_ZN6String4moveERS_+0x20>

023fda46 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fda46:	2300      	movs	r3, #0
String::String(String &&rval)
 23fda48:	b510      	push	{r4, lr}
 23fda4a:	4604      	mov	r4, r0
	capacity = 0;
 23fda4c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fda50:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fda52:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fda54:	f7ff ffd9 	bl	23fda0a <_ZN6String4moveERS_>
}
 23fda58:	4620      	mov	r0, r4
 23fda5a:	bd10      	pop	{r4, pc}

023fda5c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fda5c:	4288      	cmp	r0, r1
{
 23fda5e:	b510      	push	{r4, lr}
 23fda60:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fda62:	d005      	beq.n	23fda70 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fda64:	680b      	ldr	r3, [r1, #0]
 23fda66:	b12b      	cbz	r3, 23fda74 <_ZN6StringaSERKS_+0x18>
 23fda68:	688a      	ldr	r2, [r1, #8]
 23fda6a:	4619      	mov	r1, r3
 23fda6c:	f7ff ffb4 	bl	23fd9d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fda70:	4620      	mov	r0, r4
 23fda72:	bd10      	pop	{r4, pc}
	else invalidate();
 23fda74:	f7ff ff85 	bl	23fd982 <_ZN6String10invalidateEv>
 23fda78:	e7fa      	b.n	23fda70 <_ZN6StringaSERKS_+0x14>

023fda7a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fda7a:	2300      	movs	r3, #0
String::String(const String &value)
 23fda7c:	b510      	push	{r4, lr}
 23fda7e:	4604      	mov	r4, r0
	capacity = 0;
 23fda80:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fda84:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fda86:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fda88:	f7ff ffe8 	bl	23fda5c <_ZN6StringaSERKS_>
}
 23fda8c:	4620      	mov	r0, r4
 23fda8e:	bd10      	pop	{r4, pc}

023fda90 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fda90:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fda92:	2000      	movs	r0, #0
 23fda94:	4b04      	ldr	r3, [pc, #16]	; (23fdaa8 <_GLOBAL__sub_I_System+0x18>)
 23fda96:	601a      	str	r2, [r3, #0]
 23fda98:	4b04      	ldr	r3, [pc, #16]	; (23fdaac <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fda9a:	4a05      	ldr	r2, [pc, #20]	; (23fdab0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fda9c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fdaa0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fdaa2:	f7fe b9b1 	b.w	23fbe08 <set_system_mode>
 23fdaa6:	bf00      	nop
 23fdaa8:	1007aec0 	.word	0x1007aec0
 23fdaac:	1007aeb4 	.word	0x1007aeb4
 23fdab0:	ffff0000 	.word	0xffff0000

023fdab4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdab4:	4b02      	ldr	r3, [pc, #8]	; (23fdac0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdab6:	681a      	ldr	r2, [r3, #0]
 23fdab8:	4b02      	ldr	r3, [pc, #8]	; (23fdac4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdaba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdabc:	4770      	bx	lr
 23fdabe:	bf00      	nop
 23fdac0:	1007adb4 	.word	0x1007adb4
 23fdac4:	1007aec4 	.word	0x1007aec4

023fdac8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fdac8:	4770      	bx	lr

023fdaca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdaca:	7441      	strb	r1, [r0, #17]
}
 23fdacc:	4770      	bx	lr

023fdace <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fdace:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fdad0:	7c00      	ldrb	r0, [r0, #16]
 23fdad2:	f7fe f8b9 	bl	23fbc48 <hal_usart_available_data_for_write>
}
 23fdad6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdada:	bd08      	pop	{r3, pc}

023fdadc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fdadc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fdade:	7c00      	ldrb	r0, [r0, #16]
 23fdae0:	f7fe f86c 	bl	23fbbbc <hal_usart_available>
}
 23fdae4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdae8:	bd08      	pop	{r3, pc}

023fdaea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fdaea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fdaec:	7c00      	ldrb	r0, [r0, #16]
 23fdaee:	f7fe f881 	bl	23fbbf4 <hal_usart_peek>
}
 23fdaf2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdaf6:	bd08      	pop	{r3, pc}

023fdaf8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fdaf8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fdafa:	7c00      	ldrb	r0, [r0, #16]
 23fdafc:	f7fe f86c 	bl	23fbbd8 <hal_usart_read>
}
 23fdb00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdb04:	bd08      	pop	{r3, pc}

023fdb06 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fdb06:	7c00      	ldrb	r0, [r0, #16]
 23fdb08:	f7fe b882 	b.w	23fbc10 <hal_usart_flush>

023fdb0c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fdb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdb0e:	7c45      	ldrb	r5, [r0, #17]
{
 23fdb10:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdb12:	b12d      	cbz	r5, 23fdb20 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fdb14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fdb16:	b003      	add	sp, #12
 23fdb18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fdb1c:	f7fe b840 	b.w	23fbba0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdb20:	7c00      	ldrb	r0, [r0, #16]
 23fdb22:	9101      	str	r1, [sp, #4]
 23fdb24:	f7fe f890 	bl	23fbc48 <hal_usart_available_data_for_write>
 23fdb28:	2800      	cmp	r0, #0
 23fdb2a:	9901      	ldr	r1, [sp, #4]
 23fdb2c:	dcf2      	bgt.n	23fdb14 <_ZN11USARTSerial5writeEh+0x8>
}
 23fdb2e:	4628      	mov	r0, r5
 23fdb30:	b003      	add	sp, #12
 23fdb32:	bd30      	pop	{r4, r5, pc}

023fdb34 <_ZN11USARTSerialD0Ev>:
 23fdb34:	b510      	push	{r4, lr}
 23fdb36:	4604      	mov	r4, r0
 23fdb38:	2114      	movs	r1, #20
 23fdb3a:	f7fd fb58 	bl	23fb1ee <_ZdlPvj>
 23fdb3e:	4620      	mov	r0, r4
 23fdb40:	bd10      	pop	{r4, pc}
	...

023fdb44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdb44:	b510      	push	{r4, lr}
 23fdb46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdb4a:	4604      	mov	r4, r0
 23fdb4c:	4608      	mov	r0, r1
 23fdb4e:	4611      	mov	r1, r2
 23fdb50:	2200      	movs	r2, #0
 23fdb52:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdb56:	4b04      	ldr	r3, [pc, #16]	; (23fdb68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fdb58:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdb5a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdb5c:	2301      	movs	r3, #1
 23fdb5e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fdb60:	f7fe f88e 	bl	23fbc80 <hal_usart_init_ex>
}
 23fdb64:	4620      	mov	r0, r4
 23fdb66:	bd10      	pop	{r4, pc}
 23fdb68:	023ffd34 	.word	0x023ffd34

023fdb6c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fdb6c:	2300      	movs	r3, #0
 23fdb6e:	7c00      	ldrb	r0, [r0, #16]
 23fdb70:	f7fe b878 	b.w	23fbc64 <hal_usart_begin_config>

023fdb74 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fdb74:	2200      	movs	r2, #0
 23fdb76:	f7ff bff9 	b.w	23fdb6c <_ZN11USARTSerial5beginEmm>

023fdb7a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fdb7a:	7c00      	ldrb	r0, [r0, #16]
 23fdb7c:	f7fe b802 	b.w	23fbb84 <hal_usart_end>

023fdb80 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fdb80:	7c00      	ldrb	r0, [r0, #16]
 23fdb82:	f7fe b853 	b.w	23fbc2c <hal_usart_is_enabled>

023fdb86 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdb86:	7441      	strb	r1, [r0, #17]
}
 23fdb88:	4770      	bx	lr

023fdb8a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdb8a:	4770      	bx	lr

023fdb8c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fdb8c:	4770      	bx	lr

023fdb8e <_ZN9USBSerial4readEv>:
{
 23fdb8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fdb90:	2100      	movs	r1, #0
 23fdb92:	7c00      	ldrb	r0, [r0, #16]
 23fdb94:	f7fe f8c8 	bl	23fbd28 <HAL_USB_USART_Receive_Data>
}
 23fdb98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdb9c:	bd08      	pop	{r3, pc}

023fdb9e <_ZN9USBSerial4peekEv>:
{
 23fdb9e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fdba0:	2101      	movs	r1, #1
 23fdba2:	7c00      	ldrb	r0, [r0, #16]
 23fdba4:	f7fe f8c0 	bl	23fbd28 <HAL_USB_USART_Receive_Data>
}
 23fdba8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdbac:	bd08      	pop	{r3, pc}

023fdbae <_ZN9USBSerial17availableForWriteEv>:
{
 23fdbae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fdbb0:	7c00      	ldrb	r0, [r0, #16]
 23fdbb2:	f7fe f8ab 	bl	23fbd0c <HAL_USB_USART_Available_Data_For_Write>
}
 23fdbb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdbba:	bd08      	pop	{r3, pc}

023fdbbc <_ZN9USBSerial9availableEv>:
{
 23fdbbc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fdbbe:	7c00      	ldrb	r0, [r0, #16]
 23fdbc0:	f7fe f896 	bl	23fbcf0 <HAL_USB_USART_Available_Data>
}
 23fdbc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdbc8:	bd08      	pop	{r3, pc}

023fdbca <_ZN9USBSerial5writeEh>:
{
 23fdbca:	b513      	push	{r0, r1, r4, lr}
 23fdbcc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdbce:	7c00      	ldrb	r0, [r0, #16]
{
 23fdbd0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdbd2:	f7fe f89b 	bl	23fbd0c <HAL_USB_USART_Available_Data_For_Write>
 23fdbd6:	2800      	cmp	r0, #0
 23fdbd8:	9901      	ldr	r1, [sp, #4]
 23fdbda:	dc01      	bgt.n	23fdbe0 <_ZN9USBSerial5writeEh+0x16>
 23fdbdc:	7c60      	ldrb	r0, [r4, #17]
 23fdbde:	b120      	cbz	r0, 23fdbea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fdbe0:	7c20      	ldrb	r0, [r4, #16]
 23fdbe2:	f7fe f8af 	bl	23fbd44 <HAL_USB_USART_Send_Data>
 23fdbe6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fdbea:	b002      	add	sp, #8
 23fdbec:	bd10      	pop	{r4, pc}

023fdbee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fdbee:	7c00      	ldrb	r0, [r0, #16]
 23fdbf0:	f7fe b8b6 	b.w	23fbd60 <HAL_USB_USART_Flush_Data>

023fdbf4 <_ZN9USBSerialD0Ev>:
 23fdbf4:	b510      	push	{r4, lr}
 23fdbf6:	4604      	mov	r4, r0
 23fdbf8:	2114      	movs	r1, #20
 23fdbfa:	f7fd faf8 	bl	23fb1ee <_ZdlPvj>
 23fdbfe:	4620      	mov	r0, r4
 23fdc00:	bd10      	pop	{r4, pc}
	...

023fdc04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdc04:	b510      	push	{r4, lr}
 23fdc06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdc0a:	4604      	mov	r4, r0
 23fdc0c:	4608      	mov	r0, r1
 23fdc0e:	2100      	movs	r1, #0
 23fdc10:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fdc14:	4b04      	ldr	r3, [pc, #16]	; (23fdc28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fdc16:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdc18:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdc1a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fdc1c:	4611      	mov	r1, r2
  _blocking = true;
 23fdc1e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fdc20:	f7fe f83c 	bl	23fbc9c <HAL_USB_USART_Init>
}
 23fdc24:	4620      	mov	r0, r4
 23fdc26:	bd10      	pop	{r4, pc}
 23fdc28:	023ffd64 	.word	0x023ffd64

023fdc2c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fdc2c:	2200      	movs	r2, #0
 23fdc2e:	7c00      	ldrb	r0, [r0, #16]
 23fdc30:	f7fe b842 	b.w	23fbcb8 <HAL_USB_USART_Begin>

023fdc34 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fdc34:	7c00      	ldrb	r0, [r0, #16]
 23fdc36:	f7fe b84d 	b.w	23fbcd4 <HAL_USB_USART_End>

023fdc3a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fdc3a:	7c00      	ldrb	r0, [r0, #16]
 23fdc3c:	f7fe b89e 	b.w	23fbd7c <HAL_USB_USART_Is_Connected>

023fdc40 <_Z19acquireSerialBufferv>:
{
 23fdc40:	b510      	push	{r4, lr}
 23fdc42:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fdc44:	2214      	movs	r2, #20
 23fdc46:	2100      	movs	r1, #0
 23fdc48:	f001 fddb 	bl	23ff802 <memset>
}
 23fdc4c:	4620      	mov	r0, r4
 23fdc4e:	bd10      	pop	{r4, pc}

023fdc50 <_Z16_fetch_usbserialv>:
{
 23fdc50:	b510      	push	{r4, lr}
 23fdc52:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fdc54:	a803      	add	r0, sp, #12
 23fdc56:	f7ff fff3 	bl	23fdc40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdc5a:	4c0c      	ldr	r4, [pc, #48]	; (23fdc8c <_Z16_fetch_usbserialv+0x3c>)
 23fdc5c:	e8d4 1f8f 	ldab	r1, [r4]
 23fdc60:	f011 0101 	ands.w	r1, r1, #1
 23fdc64:	d10f      	bne.n	23fdc86 <_Z16_fetch_usbserialv+0x36>
 23fdc66:	4620      	mov	r0, r4
 23fdc68:	9101      	str	r1, [sp, #4]
 23fdc6a:	f7fd facf 	bl	23fb20c <__cxa_guard_acquire>
 23fdc6e:	9901      	ldr	r1, [sp, #4]
 23fdc70:	b148      	cbz	r0, 23fdc86 <_Z16_fetch_usbserialv+0x36>
 23fdc72:	aa03      	add	r2, sp, #12
 23fdc74:	4806      	ldr	r0, [pc, #24]	; (23fdc90 <_Z16_fetch_usbserialv+0x40>)
 23fdc76:	f7ff ffc5 	bl	23fdc04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fdc7a:	4620      	mov	r0, r4
 23fdc7c:	f7fd facb 	bl	23fb216 <__cxa_guard_release>
 23fdc80:	4804      	ldr	r0, [pc, #16]	; (23fdc94 <_Z16_fetch_usbserialv+0x44>)
 23fdc82:	f001 fd89 	bl	23ff798 <atexit>
	return _usbserial;
}
 23fdc86:	4802      	ldr	r0, [pc, #8]	; (23fdc90 <_Z16_fetch_usbserialv+0x40>)
 23fdc88:	b008      	add	sp, #32
 23fdc8a:	bd10      	pop	{r4, pc}
 23fdc8c:	1007aec8 	.word	0x1007aec8
 23fdc90:	1007aecc 	.word	0x1007aecc
 23fdc94:	023fdb8b 	.word	0x023fdb8b

023fdc98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fdc98:	2200      	movs	r2, #0
 23fdc9a:	6840      	ldr	r0, [r0, #4]
 23fdc9c:	4611      	mov	r1, r2
 23fdc9e:	f7fe b931 	b.w	23fbf04 <network_ready>

023fdca2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fdca2:	2200      	movs	r2, #0
 23fdca4:	6840      	ldr	r0, [r0, #4]
 23fdca6:	4611      	mov	r1, r2
 23fdca8:	f7fe b964 	b.w	23fbf74 <network_listening>

023fdcac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fdcac:	2200      	movs	r2, #0
 23fdcae:	6840      	ldr	r0, [r0, #4]
 23fdcb0:	4611      	mov	r1, r2
 23fdcb2:	f7fe b97b 	b.w	23fbfac <network_get_listen_timeout>

023fdcb6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fdcb6:	2200      	movs	r2, #0
 23fdcb8:	6840      	ldr	r0, [r0, #4]
 23fdcba:	f7fe b969 	b.w	23fbf90 <network_set_listen_timeout>

023fdcbe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fdcbe:	2200      	movs	r2, #0
 23fdcc0:	6840      	ldr	r0, [r0, #4]
 23fdcc2:	f081 0101 	eor.w	r1, r1, #1
 23fdcc6:	f7fe b947 	b.w	23fbf58 <network_listen>

023fdcca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fdcca:	2300      	movs	r3, #0
 23fdccc:	6840      	ldr	r0, [r0, #4]
 23fdcce:	461a      	mov	r2, r3
 23fdcd0:	4619      	mov	r1, r3
 23fdcd2:	f7fe b933 	b.w	23fbf3c <network_off>

023fdcd6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fdcd6:	2300      	movs	r3, #0
 23fdcd8:	6840      	ldr	r0, [r0, #4]
 23fdcda:	461a      	mov	r2, r3
 23fdcdc:	4619      	mov	r1, r3
 23fdcde:	f7fe b91f 	b.w	23fbf20 <network_on>

023fdce2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fdce2:	2200      	movs	r2, #0
 23fdce4:	6840      	ldr	r0, [r0, #4]
 23fdce6:	4611      	mov	r1, r2
 23fdce8:	f7fe b8f0 	b.w	23fbecc <network_connecting>

023fdcec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fdcec:	2200      	movs	r2, #0
 23fdcee:	2102      	movs	r1, #2
 23fdcf0:	6840      	ldr	r0, [r0, #4]
 23fdcf2:	f7fe b8f9 	b.w	23fbee8 <network_disconnect>

023fdcf6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fdcf6:	2300      	movs	r3, #0
 23fdcf8:	6840      	ldr	r0, [r0, #4]
 23fdcfa:	461a      	mov	r2, r3
 23fdcfc:	f7fe b8d8 	b.w	23fbeb0 <network_connect>

023fdd00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fdd00:	2204      	movs	r2, #4
 23fdd02:	4b02      	ldr	r3, [pc, #8]	; (23fdd0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fdd04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fdd06:	4a02      	ldr	r2, [pc, #8]	; (23fdd10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fdd08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fdd0a:	4770      	bx	lr
 23fdd0c:	1007aee0 	.word	0x1007aee0
 23fdd10:	023ffd94 	.word	0x023ffd94

023fdd14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdd14:	4b01      	ldr	r3, [pc, #4]	; (23fdd1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fdd16:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fdd18:	4770      	bx	lr
 23fdd1a:	bf00      	nop
 23fdd1c:	1007adbc 	.word	0x1007adbc

023fdd20 <serialEventRun>:
{
 23fdd20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fdd22:	4b0f      	ldr	r3, [pc, #60]	; (23fdd60 <serialEventRun+0x40>)
 23fdd24:	b143      	cbz	r3, 23fdd38 <serialEventRun+0x18>
 23fdd26:	f7ff ff93 	bl	23fdc50 <_Z16_fetch_usbserialv>
 23fdd2a:	6803      	ldr	r3, [r0, #0]
 23fdd2c:	691b      	ldr	r3, [r3, #16]
 23fdd2e:	4798      	blx	r3
 23fdd30:	2800      	cmp	r0, #0
 23fdd32:	dd01      	ble.n	23fdd38 <serialEventRun+0x18>
        serialEvent();
 23fdd34:	e000      	b.n	23fdd38 <serialEventRun+0x18>
 23fdd36:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fdd38:	4b0a      	ldr	r3, [pc, #40]	; (23fdd64 <serialEventRun+0x44>)
 23fdd3a:	b143      	cbz	r3, 23fdd4e <serialEventRun+0x2e>
 23fdd3c:	f000 f96a 	bl	23fe014 <_Z22__fetch_global_Serial1v>
 23fdd40:	6803      	ldr	r3, [r0, #0]
 23fdd42:	691b      	ldr	r3, [r3, #16]
 23fdd44:	4798      	blx	r3
 23fdd46:	2800      	cmp	r0, #0
 23fdd48:	dd01      	ble.n	23fdd4e <serialEventRun+0x2e>
        serialEvent1();
 23fdd4a:	e000      	b.n	23fdd4e <serialEventRun+0x2e>
 23fdd4c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fdd4e:	4b06      	ldr	r3, [pc, #24]	; (23fdd68 <serialEventRun+0x48>)
 23fdd50:	b10b      	cbz	r3, 23fdd56 <serialEventRun+0x36>
 23fdd52:	f000 f9a5 	bl	23fe0a0 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fdd56:	4b05      	ldr	r3, [pc, #20]	; (23fdd6c <serialEventRun+0x4c>)
 23fdd58:	b10b      	cbz	r3, 23fdd5e <serialEventRun+0x3e>
 23fdd5a:	f000 f9d7 	bl	23fe10c <_Z15serialEventRun3v>
}
 23fdd5e:	bd08      	pop	{r3, pc}
	...

023fdd70 <_post_loop>:
{
 23fdd70:	b508      	push	{r3, lr}
	serialEventRun();
 23fdd72:	f7ff ffd5 	bl	23fdd20 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fdd76:	f7fd fdd1 	bl	23fb91c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fdd7a:	4b01      	ldr	r3, [pc, #4]	; (23fdd80 <_post_loop+0x10>)
 23fdd7c:	6018      	str	r0, [r3, #0]
}
 23fdd7e:	bd08      	pop	{r3, pc}
 23fdd80:	1007aef0 	.word	0x1007aef0

023fdd84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdd84:	4805      	ldr	r0, [pc, #20]	; (23fdd9c <_Z33system_initialize_user_backup_ramv+0x18>)
 23fdd86:	4a06      	ldr	r2, [pc, #24]	; (23fdda0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fdd88:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdd8a:	1a12      	subs	r2, r2, r0
 23fdd8c:	4905      	ldr	r1, [pc, #20]	; (23fdda4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fdd8e:	f001 fd11 	bl	23ff7b4 <memcpy>
    __backup_sram_signature = signature;
 23fdd92:	4b05      	ldr	r3, [pc, #20]	; (23fdda8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fdd94:	4a05      	ldr	r2, [pc, #20]	; (23fddac <_Z33system_initialize_user_backup_ramv+0x28>)
 23fdd96:	601a      	str	r2, [r3, #0]
}
 23fdd98:	bd08      	pop	{r3, pc}
 23fdd9a:	bf00      	nop
 23fdd9c:	1007b400 	.word	0x1007b400
 23fdda0:	1007b404 	.word	0x1007b404
 23fdda4:	085ff90c 	.word	0x085ff90c
 23fdda8:	1007b400 	.word	0x1007b400
 23fddac:	9a271c1e 	.word	0x9a271c1e

023fddb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fddb0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fddb2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fddb4:	461a      	mov	r2, r3
 23fddb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fddba:	9300      	str	r3, [sp, #0]
 23fddbc:	f7fe f84e 	bl	23fbe5c <system_ctrl_set_result>
}
 23fddc0:	b003      	add	sp, #12
 23fddc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fddc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fddc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fddca:	8843      	ldrh	r3, [r0, #2]
 23fddcc:	2b0a      	cmp	r3, #10
 23fddce:	d008      	beq.n	23fdde2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fddd0:	2b50      	cmp	r3, #80	; 0x50
 23fddd2:	d10b      	bne.n	23fddec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fddd4:	4b09      	ldr	r3, [pc, #36]	; (23fddfc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fddd6:	681b      	ldr	r3, [r3, #0]
 23fddd8:	b14b      	cbz	r3, 23fddee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fddda:	b003      	add	sp, #12
 23fdddc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fdde0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fdde2:	f7ff ffe5 	bl	23fddb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fdde6:	b003      	add	sp, #12
 23fdde8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fddec:	2300      	movs	r3, #0
 23fddee:	461a      	mov	r2, r3
 23fddf0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fddf4:	9300      	str	r3, [sp, #0]
 23fddf6:	f7fe f831 	bl	23fbe5c <system_ctrl_set_result>
}
 23fddfa:	e7f4      	b.n	23fdde6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fddfc:	1007aeec 	.word	0x1007aeec

023fde00 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fde00:	2100      	movs	r1, #0
{
 23fde02:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fde04:	4811      	ldr	r0, [pc, #68]	; (23fde4c <module_user_init_hook+0x4c>)
 23fde06:	f7fe f94f 	bl	23fc0a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fde0a:	4b11      	ldr	r3, [pc, #68]	; (23fde50 <module_user_init_hook+0x50>)
 23fde0c:	681a      	ldr	r2, [r3, #0]
 23fde0e:	4b11      	ldr	r3, [pc, #68]	; (23fde54 <module_user_init_hook+0x54>)
 23fde10:	429a      	cmp	r2, r3
 23fde12:	bf0c      	ite	eq
 23fde14:	2201      	moveq	r2, #1
 23fde16:	2200      	movne	r2, #0
 23fde18:	4b0f      	ldr	r3, [pc, #60]	; (23fde58 <module_user_init_hook+0x58>)
 23fde1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fde1c:	d001      	beq.n	23fde22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fde1e:	f7ff ffb1 	bl	23fdd84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fde22:	f7fd fd5f 	bl	23fb8e4 <HAL_RNG_GetRandomNumber>
 23fde26:	4604      	mov	r4, r0
    srand(seed);
 23fde28:	f001 fcf4 	bl	23ff814 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fde2c:	4b0b      	ldr	r3, [pc, #44]	; (23fde5c <module_user_init_hook+0x5c>)
 23fde2e:	b113      	cbz	r3, 23fde36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fde30:	4620      	mov	r0, r4
 23fde32:	e000      	b.n	23fde36 <module_user_init_hook+0x36>
 23fde34:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fde36:	2100      	movs	r1, #0
 23fde38:	4808      	ldr	r0, [pc, #32]	; (23fde5c <module_user_init_hook+0x5c>)
 23fde3a:	f7fe f82b 	bl	23fbe94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fde3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fde42:	2100      	movs	r1, #0
 23fde44:	4806      	ldr	r0, [pc, #24]	; (23fde60 <module_user_init_hook+0x60>)
 23fde46:	f7fd bffb 	b.w	23fbe40 <system_ctrl_set_app_request_handler>
 23fde4a:	bf00      	nop
 23fde4c:	023fdd15 	.word	0x023fdd15
 23fde50:	1007b400 	.word	0x1007b400
 23fde54:	9a271c1e 	.word	0x9a271c1e
 23fde58:	1007aee8 	.word	0x1007aee8
 23fde5c:	00000000 	.word	0x00000000
 23fde60:	023fddc9 	.word	0x023fddc9

023fde64 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fde64:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fde66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fde68:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fde6a:	d902      	bls.n	23fde72 <pinAvailable+0xe>
    return false;
 23fde6c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fde6e:	b003      	add	sp, #12
 23fde70:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fde72:	f1a0 030f 	sub.w	r3, r0, #15
 23fde76:	2b02      	cmp	r3, #2
 23fde78:	d90b      	bls.n	23fde92 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fde7a:	2801      	cmp	r0, #1
 23fde7c:	d821      	bhi.n	23fdec2 <pinAvailable+0x5e>
 23fde7e:	f000 f875 	bl	23fdf6c <_Z19__fetch_global_Wirev>
 23fde82:	2100      	movs	r1, #0
 23fde84:	7c00      	ldrb	r0, [r0, #16]
 23fde86:	f7fd fdd5 	bl	23fba34 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fde8a:	f080 0001 	eor.w	r0, r0, #1
 23fde8e:	b2c0      	uxtb	r0, r0
 23fde90:	e7ed      	b.n	23fde6e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fde92:	4d11      	ldr	r5, [pc, #68]	; (23fded8 <pinAvailable+0x74>)
 23fde94:	e8d5 1f8f 	ldab	r1, [r5]
 23fde98:	f011 0101 	ands.w	r1, r1, #1
 23fde9c:	d10b      	bne.n	23fdeb6 <pinAvailable+0x52>
 23fde9e:	4628      	mov	r0, r5
 23fdea0:	9101      	str	r1, [sp, #4]
 23fdea2:	f7fd f9b3 	bl	23fb20c <__cxa_guard_acquire>
 23fdea6:	9901      	ldr	r1, [sp, #4]
 23fdea8:	b128      	cbz	r0, 23fdeb6 <pinAvailable+0x52>
 23fdeaa:	480c      	ldr	r0, [pc, #48]	; (23fdedc <pinAvailable+0x78>)
 23fdeac:	f7ff fd2a 	bl	23fd904 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fdeb0:	4628      	mov	r0, r5
 23fdeb2:	f7fd f9b0 	bl	23fb216 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fdeb6:	4b09      	ldr	r3, [pc, #36]	; (23fdedc <pinAvailable+0x78>)
 23fdeb8:	7818      	ldrb	r0, [r3, #0]
 23fdeba:	f7fd fe39 	bl	23fbb30 <hal_spi_is_enabled>
 23fdebe:	2800      	cmp	r0, #0
 23fdec0:	d1d4      	bne.n	23fde6c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fdec2:	3c08      	subs	r4, #8
 23fdec4:	2c01      	cmp	r4, #1
 23fdec6:	d805      	bhi.n	23fded4 <pinAvailable+0x70>
 23fdec8:	f000 f8a4 	bl	23fe014 <_Z22__fetch_global_Serial1v>
 23fdecc:	7c00      	ldrb	r0, [r0, #16]
 23fdece:	f7fd fead 	bl	23fbc2c <hal_usart_is_enabled>
 23fded2:	e7da      	b.n	23fde8a <pinAvailable+0x26>
  return true; // 'pin' is available
 23fded4:	2001      	movs	r0, #1
 23fded6:	e7ca      	b.n	23fde6e <pinAvailable+0xa>
 23fded8:	1007ae4c 	.word	0x1007ae4c
 23fdedc:	1007ae50 	.word	0x1007ae50

023fdee0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fdee0:	281b      	cmp	r0, #27
{
 23fdee2:	b538      	push	{r3, r4, r5, lr}
 23fdee4:	4604      	mov	r4, r0
 23fdee6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fdee8:	d80a      	bhi.n	23fdf00 <pinMode+0x20>
 23fdeea:	29ff      	cmp	r1, #255	; 0xff
 23fdeec:	d008      	beq.n	23fdf00 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fdeee:	f7ff ffb9 	bl	23fde64 <pinAvailable>
 23fdef2:	b128      	cbz	r0, 23fdf00 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fdef4:	4629      	mov	r1, r5
 23fdef6:	4620      	mov	r0, r4
}
 23fdef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fdefc:	f7fd bd2a 	b.w	23fb954 <hal_gpio_mode>
}
 23fdf00:	bd38      	pop	{r3, r4, r5, pc}

023fdf02 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fdf02:	b538      	push	{r3, r4, r5, lr}
 23fdf04:	4604      	mov	r4, r0
 23fdf06:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fdf08:	f7fd fd32 	bl	23fb970 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fdf0c:	28ff      	cmp	r0, #255	; 0xff
 23fdf0e:	d010      	beq.n	23fdf32 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fdf10:	2806      	cmp	r0, #6
 23fdf12:	d804      	bhi.n	23fdf1e <digitalWrite+0x1c>
 23fdf14:	234d      	movs	r3, #77	; 0x4d
 23fdf16:	fa23 f000 	lsr.w	r0, r3, r0
 23fdf1a:	07c3      	lsls	r3, r0, #31
 23fdf1c:	d409      	bmi.n	23fdf32 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fdf1e:	4620      	mov	r0, r4
 23fdf20:	f7ff ffa0 	bl	23fde64 <pinAvailable>
 23fdf24:	b128      	cbz	r0, 23fdf32 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fdf26:	4629      	mov	r1, r5
 23fdf28:	4620      	mov	r0, r4
}
 23fdf2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fdf2e:	f7fd bd2d 	b.w	23fb98c <hal_gpio_write>
}
 23fdf32:	bd38      	pop	{r3, r4, r5, pc}

023fdf34 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdf34:	4770      	bx	lr
	...

023fdf38 <_Z17acquireWireBufferv>:
{
 23fdf38:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fdf3a:	4b0a      	ldr	r3, [pc, #40]	; (23fdf64 <_Z17acquireWireBufferv+0x2c>)
{
 23fdf3c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fdf3e:	6003      	str	r3, [r0, #0]
 23fdf40:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf42:	4909      	ldr	r1, [pc, #36]	; (23fdf68 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fdf44:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf46:	2020      	movs	r0, #32
 23fdf48:	f000 f8f6 	bl	23fe138 <_ZnajRKSt9nothrow_t>
	};
 23fdf4c:	2520      	movs	r5, #32
 23fdf4e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf50:	4905      	ldr	r1, [pc, #20]	; (23fdf68 <_Z17acquireWireBufferv+0x30>)
 23fdf52:	4628      	mov	r0, r5
	};
 23fdf54:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdf56:	f000 f8ef 	bl	23fe138 <_ZnajRKSt9nothrow_t>
	};
 23fdf5a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fdf5e:	4620      	mov	r0, r4
 23fdf60:	bd38      	pop	{r3, r4, r5, pc}
 23fdf62:	bf00      	nop
 23fdf64:	00010018 	.word	0x00010018
 23fdf68:	023ffdc8 	.word	0x023ffdc8

023fdf6c <_Z19__fetch_global_Wirev>:
{
 23fdf6c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdf6e:	4d0e      	ldr	r5, [pc, #56]	; (23fdfa8 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fdf70:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdf72:	e8d5 1f8f 	ldab	r1, [r5]
 23fdf76:	f011 0401 	ands.w	r4, r1, #1
 23fdf7a:	d111      	bne.n	23fdfa0 <_Z19__fetch_global_Wirev+0x34>
 23fdf7c:	4628      	mov	r0, r5
 23fdf7e:	f7fd f945 	bl	23fb20c <__cxa_guard_acquire>
 23fdf82:	b168      	cbz	r0, 23fdfa0 <_Z19__fetch_global_Wirev+0x34>
 23fdf84:	4668      	mov	r0, sp
 23fdf86:	f7ff ffd7 	bl	23fdf38 <_Z17acquireWireBufferv>
 23fdf8a:	466a      	mov	r2, sp
 23fdf8c:	4621      	mov	r1, r4
 23fdf8e:	4807      	ldr	r0, [pc, #28]	; (23fdfac <_Z19__fetch_global_Wirev+0x40>)
 23fdf90:	f7fe f94a 	bl	23fc228 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fdf94:	4628      	mov	r0, r5
 23fdf96:	f7fd f93e 	bl	23fb216 <__cxa_guard_release>
 23fdf9a:	4805      	ldr	r0, [pc, #20]	; (23fdfb0 <_Z19__fetch_global_Wirev+0x44>)
 23fdf9c:	f001 fbfc 	bl	23ff798 <atexit>
	return wire;
}
 23fdfa0:	4802      	ldr	r0, [pc, #8]	; (23fdfac <_Z19__fetch_global_Wirev+0x40>)
 23fdfa2:	b007      	add	sp, #28
 23fdfa4:	bd30      	pop	{r4, r5, pc}
 23fdfa6:	bf00      	nop
 23fdfa8:	1007aef4 	.word	0x1007aef4
 23fdfac:	1007aef8 	.word	0x1007aef8
 23fdfb0:	023fdf35 	.word	0x023fdf35

023fdfb4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdfb4:	4770      	bx	lr
	...

023fdfb8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdfb8:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fdfba:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdfbc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fdfbe:	462a      	mov	r2, r5
 23fdfc0:	2100      	movs	r1, #0
 23fdfc2:	f001 fc1e 	bl	23ff802 <memset>
 23fdfc6:	8025      	strh	r5, [r4, #0]
 23fdfc8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdfca:	4907      	ldr	r1, [pc, #28]	; (23fdfe8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fdfcc:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fdfce:	8125      	strh	r5, [r4, #8]
 23fdfd0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdfd2:	f000 f8b1 	bl	23fe138 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdfd6:	4904      	ldr	r1, [pc, #16]	; (23fdfe8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fdfd8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdfda:	4628      	mov	r0, r5
 23fdfdc:	f000 f8ac 	bl	23fe138 <_ZnajRKSt9nothrow_t>
    };
 23fdfe0:	60e0      	str	r0, [r4, #12]
}
 23fdfe2:	4620      	mov	r0, r4
 23fdfe4:	bd38      	pop	{r3, r4, r5, pc}
 23fdfe6:	bf00      	nop
 23fdfe8:	023ffdc8 	.word	0x023ffdc8

023fdfec <__tcf_2>:
 23fdfec:	4770      	bx	lr

023fdfee <__tcf_1>:
 23fdfee:	4770      	bx	lr

023fdff0 <_Z20acquireSerial1Bufferv>:
{
 23fdff0:	b510      	push	{r4, lr}
 23fdff2:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fdff4:	f7ff ffe0 	bl	23fdfb8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fdff8:	4620      	mov	r0, r4
 23fdffa:	bd10      	pop	{r4, pc}

023fdffc <_Z20acquireSerial2Bufferv>:
 23fdffc:	b510      	push	{r4, lr}
 23fdffe:	4604      	mov	r4, r0
 23fe000:	f7ff ffda 	bl	23fdfb8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe004:	4620      	mov	r0, r4
 23fe006:	bd10      	pop	{r4, pc}

023fe008 <_Z20acquireSerial3Bufferv>:
 23fe008:	b510      	push	{r4, lr}
 23fe00a:	4604      	mov	r4, r0
 23fe00c:	f7ff ffd4 	bl	23fdfb8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe010:	4620      	mov	r0, r4
 23fe012:	bd10      	pop	{r4, pc}

023fe014 <_Z22__fetch_global_Serial1v>:
{
 23fe014:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe016:	4d0e      	ldr	r5, [pc, #56]	; (23fe050 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe018:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe01a:	e8d5 1f8f 	ldab	r1, [r5]
 23fe01e:	f011 0401 	ands.w	r4, r1, #1
 23fe022:	d111      	bne.n	23fe048 <_Z22__fetch_global_Serial1v+0x34>
 23fe024:	4628      	mov	r0, r5
 23fe026:	f7fd f8f1 	bl	23fb20c <__cxa_guard_acquire>
 23fe02a:	b168      	cbz	r0, 23fe048 <_Z22__fetch_global_Serial1v+0x34>
 23fe02c:	a801      	add	r0, sp, #4
 23fe02e:	f7ff ffdf 	bl	23fdff0 <_Z20acquireSerial1Bufferv>
 23fe032:	4621      	mov	r1, r4
 23fe034:	aa01      	add	r2, sp, #4
 23fe036:	4807      	ldr	r0, [pc, #28]	; (23fe054 <_Z22__fetch_global_Serial1v+0x40>)
 23fe038:	f7ff fd84 	bl	23fdb44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe03c:	4628      	mov	r0, r5
 23fe03e:	f7fd f8ea 	bl	23fb216 <__cxa_guard_release>
 23fe042:	4805      	ldr	r0, [pc, #20]	; (23fe058 <_Z22__fetch_global_Serial1v+0x44>)
 23fe044:	f001 fba8 	bl	23ff798 <atexit>
    return serial1;
}
 23fe048:	4802      	ldr	r0, [pc, #8]	; (23fe054 <_Z22__fetch_global_Serial1v+0x40>)
 23fe04a:	b007      	add	sp, #28
 23fe04c:	bd30      	pop	{r4, r5, pc}
 23fe04e:	bf00      	nop
 23fe050:	1007af0c 	.word	0x1007af0c
 23fe054:	1007af18 	.word	0x1007af18
 23fe058:	023fdfb5 	.word	0x023fdfb5

023fe05c <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe05c:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe05e:	4c0d      	ldr	r4, [pc, #52]	; (23fe094 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe060:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe062:	e8d4 3f8f 	ldab	r3, [r4]
 23fe066:	07db      	lsls	r3, r3, #31
 23fe068:	d411      	bmi.n	23fe08e <_Z22__fetch_global_Serial2v+0x32>
 23fe06a:	4620      	mov	r0, r4
 23fe06c:	f7fd f8ce 	bl	23fb20c <__cxa_guard_acquire>
 23fe070:	b168      	cbz	r0, 23fe08e <_Z22__fetch_global_Serial2v+0x32>
 23fe072:	a801      	add	r0, sp, #4
 23fe074:	f7ff ffc2 	bl	23fdffc <_Z20acquireSerial2Bufferv>
 23fe078:	2101      	movs	r1, #1
 23fe07a:	aa01      	add	r2, sp, #4
 23fe07c:	4806      	ldr	r0, [pc, #24]	; (23fe098 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe07e:	f7ff fd61 	bl	23fdb44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe082:	4620      	mov	r0, r4
 23fe084:	f7fd f8c7 	bl	23fb216 <__cxa_guard_release>
 23fe088:	4804      	ldr	r0, [pc, #16]	; (23fe09c <_Z22__fetch_global_Serial2v+0x40>)
 23fe08a:	f001 fb85 	bl	23ff798 <atexit>
	return serial2;
}
 23fe08e:	4802      	ldr	r0, [pc, #8]	; (23fe098 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe090:	b006      	add	sp, #24
 23fe092:	bd10      	pop	{r4, pc}
 23fe094:	1007af10 	.word	0x1007af10
 23fe098:	1007af2c 	.word	0x1007af2c
 23fe09c:	023fdfef 	.word	0x023fdfef

023fe0a0 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe0a0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe0a2:	f7ff ffdb 	bl	23fe05c <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe0a6:	4b07      	ldr	r3, [pc, #28]	; (23fe0c4 <_Z15serialEventRun2v+0x24>)
 23fe0a8:	4604      	mov	r4, r0
 23fe0aa:	b153      	cbz	r3, 23fe0c2 <_Z15serialEventRun2v+0x22>
 23fe0ac:	f7ff fd68 	bl	23fdb80 <_ZN11USARTSerial9isEnabledEv>
 23fe0b0:	b138      	cbz	r0, 23fe0c2 <_Z15serialEventRun2v+0x22>
 23fe0b2:	6823      	ldr	r3, [r4, #0]
 23fe0b4:	4620      	mov	r0, r4
 23fe0b6:	691b      	ldr	r3, [r3, #16]
 23fe0b8:	4798      	blx	r3
 23fe0ba:	2800      	cmp	r0, #0
 23fe0bc:	dd01      	ble.n	23fe0c2 <_Z15serialEventRun2v+0x22>
        handler();
 23fe0be:	e000      	b.n	23fe0c2 <_Z15serialEventRun2v+0x22>
 23fe0c0:	bf00      	nop
}
 23fe0c2:	bd10      	pop	{r4, pc}
 23fe0c4:	00000000 	.word	0x00000000

023fe0c8 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe0c8:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe0ca:	4c0d      	ldr	r4, [pc, #52]	; (23fe100 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe0cc:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe0ce:	e8d4 3f8f 	ldab	r3, [r4]
 23fe0d2:	07db      	lsls	r3, r3, #31
 23fe0d4:	d411      	bmi.n	23fe0fa <_Z22__fetch_global_Serial3v+0x32>
 23fe0d6:	4620      	mov	r0, r4
 23fe0d8:	f7fd f898 	bl	23fb20c <__cxa_guard_acquire>
 23fe0dc:	b168      	cbz	r0, 23fe0fa <_Z22__fetch_global_Serial3v+0x32>
 23fe0de:	a801      	add	r0, sp, #4
 23fe0e0:	f7ff ff92 	bl	23fe008 <_Z20acquireSerial3Bufferv>
 23fe0e4:	2102      	movs	r1, #2
 23fe0e6:	aa01      	add	r2, sp, #4
 23fe0e8:	4806      	ldr	r0, [pc, #24]	; (23fe104 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe0ea:	f7ff fd2b 	bl	23fdb44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe0ee:	4620      	mov	r0, r4
 23fe0f0:	f7fd f891 	bl	23fb216 <__cxa_guard_release>
 23fe0f4:	4804      	ldr	r0, [pc, #16]	; (23fe108 <_Z22__fetch_global_Serial3v+0x40>)
 23fe0f6:	f001 fb4f 	bl	23ff798 <atexit>
	return serial3;
}
 23fe0fa:	4802      	ldr	r0, [pc, #8]	; (23fe104 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe0fc:	b006      	add	sp, #24
 23fe0fe:	bd10      	pop	{r4, pc}
 23fe100:	1007af14 	.word	0x1007af14
 23fe104:	1007af40 	.word	0x1007af40
 23fe108:	023fdfed 	.word	0x023fdfed

023fe10c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe10c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe10e:	f7ff ffdb 	bl	23fe0c8 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe112:	4b07      	ldr	r3, [pc, #28]	; (23fe130 <_Z15serialEventRun3v+0x24>)
 23fe114:	4604      	mov	r4, r0
 23fe116:	b153      	cbz	r3, 23fe12e <_Z15serialEventRun3v+0x22>
 23fe118:	f7ff fd32 	bl	23fdb80 <_ZN11USARTSerial9isEnabledEv>
 23fe11c:	b138      	cbz	r0, 23fe12e <_Z15serialEventRun3v+0x22>
 23fe11e:	6823      	ldr	r3, [r4, #0]
 23fe120:	4620      	mov	r0, r4
 23fe122:	691b      	ldr	r3, [r3, #16]
 23fe124:	4798      	blx	r3
 23fe126:	2800      	cmp	r0, #0
 23fe128:	dd01      	ble.n	23fe12e <_Z15serialEventRun3v+0x22>
        handler();
 23fe12a:	e000      	b.n	23fe12e <_Z15serialEventRun3v+0x22>
 23fe12c:	bf00      	nop
}
 23fe12e:	bd10      	pop	{r4, pc}
 23fe130:	00000000 	.word	0x00000000

023fe134 <_ZnwjRKSt9nothrow_t>:
 23fe134:	f7fd b857 	b.w	23fb1e6 <_Znwj>

023fe138 <_ZnajRKSt9nothrow_t>:
 23fe138:	f7fd b857 	b.w	23fb1ea <_Znaj>

023fe13c <atan2>:
 23fe13c:	f000 b90c 	b.w	23fe358 <__ieee754_atan2>

023fe140 <pow>:
 23fe140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe142:	ed2d 8b02 	vpush	{d8}
 23fe146:	ec57 6b10 	vmov	r6, r7, d0
 23fe14a:	ec55 4b11 	vmov	r4, r5, d1
 23fe14e:	f000 f9d7 	bl	23fe500 <__ieee754_pow>
 23fe152:	4b63      	ldr	r3, [pc, #396]	; (23fe2e0 <pow+0x1a0>)
 23fe154:	eeb0 8a40 	vmov.f32	s16, s0
 23fe158:	eef0 8a60 	vmov.f32	s17, s1
 23fe15c:	f993 3000 	ldrsb.w	r3, [r3]
 23fe160:	3301      	adds	r3, #1
 23fe162:	d02a      	beq.n	23fe1ba <pow+0x7a>
 23fe164:	4622      	mov	r2, r4
 23fe166:	462b      	mov	r3, r5
 23fe168:	4620      	mov	r0, r4
 23fe16a:	4629      	mov	r1, r5
 23fe16c:	f7fc ffa6 	bl	23fb0bc <__aeabi_dcmpun>
 23fe170:	bb18      	cbnz	r0, 23fe1ba <pow+0x7a>
 23fe172:	4632      	mov	r2, r6
 23fe174:	463b      	mov	r3, r7
 23fe176:	4630      	mov	r0, r6
 23fe178:	4639      	mov	r1, r7
 23fe17a:	f7fc ff9f 	bl	23fb0bc <__aeabi_dcmpun>
 23fe17e:	2800      	cmp	r0, #0
 23fe180:	d144      	bne.n	23fe20c <pow+0xcc>
 23fe182:	2200      	movs	r2, #0
 23fe184:	2300      	movs	r3, #0
 23fe186:	4630      	mov	r0, r6
 23fe188:	4639      	mov	r1, r7
 23fe18a:	f7fc ff65 	bl	23fb058 <__aeabi_dcmpeq>
 23fe18e:	b1d8      	cbz	r0, 23fe1c8 <pow+0x88>
 23fe190:	2200      	movs	r2, #0
 23fe192:	2300      	movs	r3, #0
 23fe194:	4620      	mov	r0, r4
 23fe196:	4629      	mov	r1, r5
 23fe198:	f7fc ff5e 	bl	23fb058 <__aeabi_dcmpeq>
 23fe19c:	2800      	cmp	r0, #0
 23fe19e:	d13d      	bne.n	23fe21c <pow+0xdc>
 23fe1a0:	ec45 4b10 	vmov	d0, r4, r5
 23fe1a4:	f001 f9b2 	bl	23ff50c <finite>
 23fe1a8:	b138      	cbz	r0, 23fe1ba <pow+0x7a>
 23fe1aa:	4620      	mov	r0, r4
 23fe1ac:	4629      	mov	r1, r5
 23fe1ae:	2200      	movs	r2, #0
 23fe1b0:	2300      	movs	r3, #0
 23fe1b2:	f7fc ff5b 	bl	23fb06c <__aeabi_dcmplt>
 23fe1b6:	2800      	cmp	r0, #0
 23fe1b8:	d15c      	bne.n	23fe274 <pow+0x134>
 23fe1ba:	eeb0 0a48 	vmov.f32	s0, s16
 23fe1be:	eef0 0a68 	vmov.f32	s1, s17
 23fe1c2:	ecbd 8b02 	vpop	{d8}
 23fe1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe1c8:	eeb0 0a48 	vmov.f32	s0, s16
 23fe1cc:	eef0 0a68 	vmov.f32	s1, s17
 23fe1d0:	f001 f99c 	bl	23ff50c <finite>
 23fe1d4:	b358      	cbz	r0, 23fe22e <pow+0xee>
 23fe1d6:	2200      	movs	r2, #0
 23fe1d8:	2300      	movs	r3, #0
 23fe1da:	ec51 0b18 	vmov	r0, r1, d8
 23fe1de:	f7fc ff3b 	bl	23fb058 <__aeabi_dcmpeq>
 23fe1e2:	2800      	cmp	r0, #0
 23fe1e4:	d0e9      	beq.n	23fe1ba <pow+0x7a>
 23fe1e6:	ec47 6b10 	vmov	d0, r6, r7
 23fe1ea:	f001 f98f 	bl	23ff50c <finite>
 23fe1ee:	2800      	cmp	r0, #0
 23fe1f0:	d0e3      	beq.n	23fe1ba <pow+0x7a>
 23fe1f2:	ec45 4b10 	vmov	d0, r4, r5
 23fe1f6:	f001 f989 	bl	23ff50c <finite>
 23fe1fa:	2800      	cmp	r0, #0
 23fe1fc:	d0dd      	beq.n	23fe1ba <pow+0x7a>
 23fe1fe:	f7fd ff37 	bl	23fc070 <__errno>
 23fe202:	2322      	movs	r3, #34	; 0x22
 23fe204:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fe2c0 <pow+0x180>
 23fe208:	6003      	str	r3, [r0, #0]
 23fe20a:	e7d6      	b.n	23fe1ba <pow+0x7a>
 23fe20c:	4620      	mov	r0, r4
 23fe20e:	4629      	mov	r1, r5
 23fe210:	2200      	movs	r2, #0
 23fe212:	2300      	movs	r3, #0
 23fe214:	f7fc ff20 	bl	23fb058 <__aeabi_dcmpeq>
 23fe218:	2800      	cmp	r0, #0
 23fe21a:	d0ce      	beq.n	23fe1ba <pow+0x7a>
 23fe21c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fe2c8 <pow+0x188>
 23fe220:	eeb0 0a48 	vmov.f32	s0, s16
 23fe224:	eef0 0a68 	vmov.f32	s1, s17
 23fe228:	ecbd 8b02 	vpop	{d8}
 23fe22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe22e:	ec47 6b10 	vmov	d0, r6, r7
 23fe232:	f001 f96b 	bl	23ff50c <finite>
 23fe236:	2800      	cmp	r0, #0
 23fe238:	d0cd      	beq.n	23fe1d6 <pow+0x96>
 23fe23a:	ec45 4b10 	vmov	d0, r4, r5
 23fe23e:	f001 f965 	bl	23ff50c <finite>
 23fe242:	2800      	cmp	r0, #0
 23fe244:	d0c7      	beq.n	23fe1d6 <pow+0x96>
 23fe246:	ee18 0a10 	vmov	r0, s16
 23fe24a:	ec53 2b18 	vmov	r2, r3, d8
 23fe24e:	4619      	mov	r1, r3
 23fe250:	f7fc ff34 	bl	23fb0bc <__aeabi_dcmpun>
 23fe254:	bb20      	cbnz	r0, 23fe2a0 <pow+0x160>
 23fe256:	f7fd ff0b 	bl	23fc070 <__errno>
 23fe25a:	2222      	movs	r2, #34	; 0x22
 23fe25c:	4603      	mov	r3, r0
 23fe25e:	4639      	mov	r1, r7
 23fe260:	4630      	mov	r0, r6
 23fe262:	601a      	str	r2, [r3, #0]
 23fe264:	2200      	movs	r2, #0
 23fe266:	2300      	movs	r3, #0
 23fe268:	f7fc ff00 	bl	23fb06c <__aeabi_dcmplt>
 23fe26c:	b948      	cbnz	r0, 23fe282 <pow+0x142>
 23fe26e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fe2d0 <pow+0x190>
 23fe272:	e7a2      	b.n	23fe1ba <pow+0x7a>
 23fe274:	f7fd fefc 	bl	23fc070 <__errno>
 23fe278:	2321      	movs	r3, #33	; 0x21
 23fe27a:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fe2d8 <pow+0x198>
 23fe27e:	6003      	str	r3, [r0, #0]
 23fe280:	e79b      	b.n	23fe1ba <pow+0x7a>
 23fe282:	ec45 4b10 	vmov	d0, r4, r5
 23fe286:	f001 f957 	bl	23ff538 <rint>
 23fe28a:	4622      	mov	r2, r4
 23fe28c:	462b      	mov	r3, r5
 23fe28e:	ec51 0b10 	vmov	r0, r1, d0
 23fe292:	f7fc fee1 	bl	23fb058 <__aeabi_dcmpeq>
 23fe296:	2800      	cmp	r0, #0
 23fe298:	d1e9      	bne.n	23fe26e <pow+0x12e>
 23fe29a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fe2d8 <pow+0x198>
 23fe29e:	e78c      	b.n	23fe1ba <pow+0x7a>
 23fe2a0:	f7fd fee6 	bl	23fc070 <__errno>
 23fe2a4:	2200      	movs	r2, #0
 23fe2a6:	2300      	movs	r3, #0
 23fe2a8:	2121      	movs	r1, #33	; 0x21
 23fe2aa:	6001      	str	r1, [r0, #0]
 23fe2ac:	4610      	mov	r0, r2
 23fe2ae:	4619      	mov	r1, r3
 23fe2b0:	f7fc fd94 	bl	23faddc <__aeabi_ddiv>
 23fe2b4:	ec41 0b18 	vmov	d8, r0, r1
 23fe2b8:	e77f      	b.n	23fe1ba <pow+0x7a>
 23fe2ba:	bf00      	nop
 23fe2bc:	f3af 8000 	nop.w
	...
 23fe2cc:	3ff00000 	.word	0x3ff00000
 23fe2d0:	00000000 	.word	0x00000000
 23fe2d4:	7ff00000 	.word	0x7ff00000
 23fe2d8:	00000000 	.word	0x00000000
 23fe2dc:	fff00000 	.word	0xfff00000
 23fe2e0:	1007adb8 	.word	0x1007adb8

023fe2e4 <sqrt>:
 23fe2e4:	b538      	push	{r3, r4, r5, lr}
 23fe2e6:	ed2d 8b02 	vpush	{d8}
 23fe2ea:	ec55 4b10 	vmov	r4, r5, d0
 23fe2ee:	f000 fe99 	bl	23ff024 <__ieee754_sqrt>
 23fe2f2:	4b18      	ldr	r3, [pc, #96]	; (23fe354 <sqrt+0x70>)
 23fe2f4:	eeb0 8a40 	vmov.f32	s16, s0
 23fe2f8:	eef0 8a60 	vmov.f32	s17, s1
 23fe2fc:	f993 3000 	ldrsb.w	r3, [r3]
 23fe300:	3301      	adds	r3, #1
 23fe302:	d00d      	beq.n	23fe320 <sqrt+0x3c>
 23fe304:	4622      	mov	r2, r4
 23fe306:	462b      	mov	r3, r5
 23fe308:	4620      	mov	r0, r4
 23fe30a:	4629      	mov	r1, r5
 23fe30c:	f7fc fed6 	bl	23fb0bc <__aeabi_dcmpun>
 23fe310:	b930      	cbnz	r0, 23fe320 <sqrt+0x3c>
 23fe312:	2200      	movs	r2, #0
 23fe314:	2300      	movs	r3, #0
 23fe316:	4620      	mov	r0, r4
 23fe318:	4629      	mov	r1, r5
 23fe31a:	f7fc fea7 	bl	23fb06c <__aeabi_dcmplt>
 23fe31e:	b930      	cbnz	r0, 23fe32e <sqrt+0x4a>
 23fe320:	eeb0 0a48 	vmov.f32	s0, s16
 23fe324:	eef0 0a68 	vmov.f32	s1, s17
 23fe328:	ecbd 8b02 	vpop	{d8}
 23fe32c:	bd38      	pop	{r3, r4, r5, pc}
 23fe32e:	f7fd fe9f 	bl	23fc070 <__errno>
 23fe332:	2200      	movs	r2, #0
 23fe334:	2300      	movs	r3, #0
 23fe336:	2121      	movs	r1, #33	; 0x21
 23fe338:	6001      	str	r1, [r0, #0]
 23fe33a:	4610      	mov	r0, r2
 23fe33c:	4619      	mov	r1, r3
 23fe33e:	f7fc fd4d 	bl	23faddc <__aeabi_ddiv>
 23fe342:	ec41 0b18 	vmov	d8, r0, r1
 23fe346:	eeb0 0a48 	vmov.f32	s0, s16
 23fe34a:	eef0 0a68 	vmov.f32	s1, s17
 23fe34e:	ecbd 8b02 	vpop	{d8}
 23fe352:	bd38      	pop	{r3, r4, r5, pc}
 23fe354:	1007adb8 	.word	0x1007adb8

023fe358 <__ieee754_atan2>:
 23fe358:	ec51 0b11 	vmov	r0, r1, d1
 23fe35c:	4243      	negs	r3, r0
 23fe35e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe362:	4303      	orrs	r3, r0
 23fe364:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fe368:	4e61      	ldr	r6, [pc, #388]	; (23fe4f0 <__ieee754_atan2+0x198>)
 23fe36a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fe36e:	42b3      	cmp	r3, r6
 23fe370:	ec55 4b10 	vmov	r4, r5, d0
 23fe374:	d83c      	bhi.n	23fe3f0 <__ieee754_atan2+0x98>
 23fe376:	4263      	negs	r3, r4
 23fe378:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fe37c:	46a9      	mov	r9, r5
 23fe37e:	4323      	orrs	r3, r4
 23fe380:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fe384:	42b3      	cmp	r3, r6
 23fe386:	d833      	bhi.n	23fe3f0 <__ieee754_atan2+0x98>
 23fe388:	4b5a      	ldr	r3, [pc, #360]	; (23fe4f4 <__ieee754_atan2+0x19c>)
 23fe38a:	440b      	add	r3, r1
 23fe38c:	4303      	orrs	r3, r0
 23fe38e:	d03e      	beq.n	23fe40e <__ieee754_atan2+0xb6>
 23fe390:	178f      	asrs	r7, r1, #30
 23fe392:	ea5a 0304 	orrs.w	r3, sl, r4
 23fe396:	f007 0702 	and.w	r7, r7, #2
 23fe39a:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fe39e:	d02f      	beq.n	23fe400 <__ieee754_atan2+0xa8>
 23fe3a0:	ea5e 0300 	orrs.w	r3, lr, r0
 23fe3a4:	d037      	beq.n	23fe416 <__ieee754_atan2+0xbe>
 23fe3a6:	45b6      	cmp	lr, r6
 23fe3a8:	d044      	beq.n	23fe434 <__ieee754_atan2+0xdc>
 23fe3aa:	45b2      	cmp	sl, r6
 23fe3ac:	d033      	beq.n	23fe416 <__ieee754_atan2+0xbe>
 23fe3ae:	ebaa 0e0e 	sub.w	lr, sl, lr
 23fe3b2:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23fe3b6:	ea4f 532e 	mov.w	r3, lr, asr #20
 23fe3ba:	da38      	bge.n	23fe42e <__ieee754_atan2+0xd6>
 23fe3bc:	2900      	cmp	r1, #0
 23fe3be:	da6a      	bge.n	23fe496 <__ieee754_atan2+0x13e>
 23fe3c0:	333c      	adds	r3, #60	; 0x3c
 23fe3c2:	da68      	bge.n	23fe496 <__ieee754_atan2+0x13e>
 23fe3c4:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fe4b8 <__ieee754_atan2+0x160>
 23fe3c8:	2f01      	cmp	r7, #1
 23fe3ca:	d050      	beq.n	23fe46e <__ieee754_atan2+0x116>
 23fe3cc:	2f02      	cmp	r7, #2
 23fe3ce:	d03d      	beq.n	23fe44c <__ieee754_atan2+0xf4>
 23fe3d0:	b1a7      	cbz	r7, 23fe3fc <__ieee754_atan2+0xa4>
 23fe3d2:	ec51 0b10 	vmov	r0, r1, d0
 23fe3d6:	a33a      	add	r3, pc, #232	; (adr r3, 23fe4c0 <__ieee754_atan2+0x168>)
 23fe3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe3dc:	f7fc fa1c 	bl	23fa818 <__aeabi_dsub>
 23fe3e0:	a339      	add	r3, pc, #228	; (adr r3, 23fe4c8 <__ieee754_atan2+0x170>)
 23fe3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe3e6:	f7fc fa17 	bl	23fa818 <__aeabi_dsub>
 23fe3ea:	ec41 0b10 	vmov	d0, r0, r1
 23fe3ee:	e005      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe3f0:	4622      	mov	r2, r4
 23fe3f2:	462b      	mov	r3, r5
 23fe3f4:	f7fc fa12 	bl	23fa81c <__adddf3>
 23fe3f8:	ec41 0b10 	vmov	d0, r0, r1
 23fe3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe400:	2f02      	cmp	r7, #2
 23fe402:	d00e      	beq.n	23fe422 <__ieee754_atan2+0xca>
 23fe404:	2f03      	cmp	r7, #3
 23fe406:	d1f9      	bne.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe408:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fe4d0 <__ieee754_atan2+0x178>
 23fe40c:	e7f6      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe40e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe412:	f000 bec9 	b.w	23ff1a8 <atan>
 23fe416:	f1b9 0f00 	cmp.w	r9, #0
 23fe41a:	db05      	blt.n	23fe428 <__ieee754_atan2+0xd0>
 23fe41c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fe4d8 <__ieee754_atan2+0x180>
 23fe420:	e7ec      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe422:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fe4c8 <__ieee754_atan2+0x170>
 23fe426:	e7e9      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe428:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fe4e0 <__ieee754_atan2+0x188>
 23fe42c:	e7e6      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe42e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fe4d8 <__ieee754_atan2+0x180>
 23fe432:	e7c9      	b.n	23fe3c8 <__ieee754_atan2+0x70>
 23fe434:	45f2      	cmp	sl, lr
 23fe436:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fe43a:	d021      	beq.n	23fe480 <__ieee754_atan2+0x128>
 23fe43c:	2f02      	cmp	r7, #2
 23fe43e:	d827      	bhi.n	23fe490 <__ieee754_atan2+0x138>
 23fe440:	4b2d      	ldr	r3, [pc, #180]	; (23fe4f8 <__ieee754_atan2+0x1a0>)
 23fe442:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe446:	ed97 0b00 	vldr	d0, [r7]
 23fe44a:	e7d7      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe44c:	a31c      	add	r3, pc, #112	; (adr r3, 23fe4c0 <__ieee754_atan2+0x168>)
 23fe44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe452:	ec51 0b10 	vmov	r0, r1, d0
 23fe456:	f7fc f9df 	bl	23fa818 <__aeabi_dsub>
 23fe45a:	4602      	mov	r2, r0
 23fe45c:	460b      	mov	r3, r1
 23fe45e:	a11a      	add	r1, pc, #104	; (adr r1, 23fe4c8 <__ieee754_atan2+0x170>)
 23fe460:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fe464:	f7fc f9d8 	bl	23fa818 <__aeabi_dsub>
 23fe468:	ec41 0b10 	vmov	d0, r0, r1
 23fe46c:	e7c6      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe46e:	ee10 1a90 	vmov	r1, s1
 23fe472:	ec53 2b10 	vmov	r2, r3, d0
 23fe476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fe47a:	ec43 2b10 	vmov	d0, r2, r3
 23fe47e:	e7bd      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe480:	2f02      	cmp	r7, #2
 23fe482:	d815      	bhi.n	23fe4b0 <__ieee754_atan2+0x158>
 23fe484:	4b1d      	ldr	r3, [pc, #116]	; (23fe4fc <__ieee754_atan2+0x1a4>)
 23fe486:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe48a:	ed97 0b00 	vldr	d0, [r7]
 23fe48e:	e7b5      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe490:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fe4b8 <__ieee754_atan2+0x160>
 23fe494:	e7b2      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe496:	4602      	mov	r2, r0
 23fe498:	460b      	mov	r3, r1
 23fe49a:	4620      	mov	r0, r4
 23fe49c:	4629      	mov	r1, r5
 23fe49e:	f7fc fc9d 	bl	23faddc <__aeabi_ddiv>
 23fe4a2:	ec41 0b10 	vmov	d0, r0, r1
 23fe4a6:	f001 f827 	bl	23ff4f8 <fabs>
 23fe4aa:	f000 fe7d 	bl	23ff1a8 <atan>
 23fe4ae:	e78b      	b.n	23fe3c8 <__ieee754_atan2+0x70>
 23fe4b0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fe4e8 <__ieee754_atan2+0x190>
 23fe4b4:	e7a2      	b.n	23fe3fc <__ieee754_atan2+0xa4>
 23fe4b6:	bf00      	nop
	...
 23fe4c0:	33145c07 	.word	0x33145c07
 23fe4c4:	3ca1a626 	.word	0x3ca1a626
 23fe4c8:	54442d18 	.word	0x54442d18
 23fe4cc:	400921fb 	.word	0x400921fb
 23fe4d0:	54442d18 	.word	0x54442d18
 23fe4d4:	c00921fb 	.word	0xc00921fb
 23fe4d8:	54442d18 	.word	0x54442d18
 23fe4dc:	3ff921fb 	.word	0x3ff921fb
 23fe4e0:	54442d18 	.word	0x54442d18
 23fe4e4:	bff921fb 	.word	0xbff921fb
 23fe4e8:	54442d18 	.word	0x54442d18
 23fe4ec:	3fe921fb 	.word	0x3fe921fb
 23fe4f0:	7ff00000 	.word	0x7ff00000
 23fe4f4:	c0100000 	.word	0xc0100000
 23fe4f8:	023ffde8 	.word	0x023ffde8
 23fe4fc:	023ffdd0 	.word	0x023ffdd0

023fe500 <__ieee754_pow>:
 23fe500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe504:	ec55 4b11 	vmov	r4, r5, d1
 23fe508:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fe50c:	ea5a 0204 	orrs.w	r2, sl, r4
 23fe510:	ed2d 8b0c 	vpush	{d8-d13}
 23fe514:	b087      	sub	sp, #28
 23fe516:	d01f      	beq.n	23fe558 <__ieee754_pow+0x58>
 23fe518:	495d      	ldr	r1, [pc, #372]	; (23fe690 <__ieee754_pow+0x190>)
 23fe51a:	ee10 2a10 	vmov	r2, s0
 23fe51e:	ec57 6b10 	vmov	r6, r7, d0
 23fe522:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fe526:	46b9      	mov	r9, r7
 23fe528:	4588      	cmp	r8, r1
 23fe52a:	dc11      	bgt.n	23fe550 <__ieee754_pow+0x50>
 23fe52c:	46ab      	mov	fp, r5
 23fe52e:	ee11 3a10 	vmov	r3, s2
 23fe532:	d108      	bne.n	23fe546 <__ieee754_pow+0x46>
 23fe534:	b13e      	cbz	r6, 23fe546 <__ieee754_pow+0x46>
 23fe536:	4857      	ldr	r0, [pc, #348]	; (23fe694 <__ieee754_pow+0x194>)
 23fe538:	b007      	add	sp, #28
 23fe53a:	ecbd 8b0c 	vpop	{d8-d13}
 23fe53e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe542:	f000 bff1 	b.w	23ff528 <nan>
 23fe546:	4952      	ldr	r1, [pc, #328]	; (23fe690 <__ieee754_pow+0x190>)
 23fe548:	458a      	cmp	sl, r1
 23fe54a:	dc01      	bgt.n	23fe550 <__ieee754_pow+0x50>
 23fe54c:	d10b      	bne.n	23fe566 <__ieee754_pow+0x66>
 23fe54e:	b153      	cbz	r3, 23fe566 <__ieee754_pow+0x66>
 23fe550:	4b51      	ldr	r3, [pc, #324]	; (23fe698 <__ieee754_pow+0x198>)
 23fe552:	4443      	add	r3, r8
 23fe554:	4313      	orrs	r3, r2
 23fe556:	d1ee      	bne.n	23fe536 <__ieee754_pow+0x36>
 23fe558:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fe680 <__ieee754_pow+0x180>
 23fe55c:	b007      	add	sp, #28
 23fe55e:	ecbd 8b0c 	vpop	{d8-d13}
 23fe562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe566:	f1b9 0f00 	cmp.w	r9, #0
 23fe56a:	db45      	blt.n	23fe5f8 <__ieee754_pow+0xf8>
 23fe56c:	2100      	movs	r1, #0
 23fe56e:	9100      	str	r1, [sp, #0]
 23fe570:	b983      	cbnz	r3, 23fe594 <__ieee754_pow+0x94>
 23fe572:	4b47      	ldr	r3, [pc, #284]	; (23fe690 <__ieee754_pow+0x190>)
 23fe574:	459a      	cmp	sl, r3
 23fe576:	d05b      	beq.n	23fe630 <__ieee754_pow+0x130>
 23fe578:	4b48      	ldr	r3, [pc, #288]	; (23fe69c <__ieee754_pow+0x19c>)
 23fe57a:	459a      	cmp	sl, r3
 23fe57c:	d06a      	beq.n	23fe654 <__ieee754_pow+0x154>
 23fe57e:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fe582:	f000 84b0 	beq.w	23feee6 <__ieee754_pow+0x9e6>
 23fe586:	4b46      	ldr	r3, [pc, #280]	; (23fe6a0 <__ieee754_pow+0x1a0>)
 23fe588:	459b      	cmp	fp, r3
 23fe58a:	d103      	bne.n	23fe594 <__ieee754_pow+0x94>
 23fe58c:	f1b9 0f00 	cmp.w	r9, #0
 23fe590:	f280 850d 	bge.w	23fefae <__ieee754_pow+0xaae>
 23fe594:	9202      	str	r2, [sp, #8]
 23fe596:	ec47 6b10 	vmov	d0, r6, r7
 23fe59a:	f000 ffad 	bl	23ff4f8 <fabs>
 23fe59e:	9a02      	ldr	r2, [sp, #8]
 23fe5a0:	b94a      	cbnz	r2, 23fe5b6 <__ieee754_pow+0xb6>
 23fe5a2:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fe5a6:	4a3d      	ldr	r2, [pc, #244]	; (23fe69c <__ieee754_pow+0x19c>)
 23fe5a8:	4293      	cmp	r3, r2
 23fe5aa:	f000 83a8 	beq.w	23fecfe <__ieee754_pow+0x7fe>
 23fe5ae:	f1b8 0f00 	cmp.w	r8, #0
 23fe5b2:	f000 83a4 	beq.w	23fecfe <__ieee754_pow+0x7fe>
 23fe5b6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fe5ba:	9a00      	ldr	r2, [sp, #0]
 23fe5bc:	3b01      	subs	r3, #1
 23fe5be:	9304      	str	r3, [sp, #16]
 23fe5c0:	4313      	orrs	r3, r2
 23fe5c2:	d04e      	beq.n	23fe662 <__ieee754_pow+0x162>
 23fe5c4:	4b37      	ldr	r3, [pc, #220]	; (23fe6a4 <__ieee754_pow+0x1a4>)
 23fe5c6:	459a      	cmp	sl, r3
 23fe5c8:	dd72      	ble.n	23fe6b0 <__ieee754_pow+0x1b0>
 23fe5ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fe5ce:	459a      	cmp	sl, r3
 23fe5d0:	4b35      	ldr	r3, [pc, #212]	; (23fe6a8 <__ieee754_pow+0x1a8>)
 23fe5d2:	f340 842b 	ble.w	23fee2c <__ieee754_pow+0x92c>
 23fe5d6:	4598      	cmp	r8, r3
 23fe5d8:	f340 83a9 	ble.w	23fed2e <__ieee754_pow+0x82e>
 23fe5dc:	f1bb 0f00 	cmp.w	fp, #0
 23fe5e0:	f340 83a9 	ble.w	23fed36 <__ieee754_pow+0x836>
 23fe5e4:	a328      	add	r3, pc, #160	; (adr r3, 23fe688 <__ieee754_pow+0x188>)
 23fe5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe5ea:	4610      	mov	r0, r2
 23fe5ec:	4619      	mov	r1, r3
 23fe5ee:	f7fc facb 	bl	23fab88 <__aeabi_dmul>
 23fe5f2:	ec41 0b10 	vmov	d0, r0, r1
 23fe5f6:	e7b1      	b.n	23fe55c <__ieee754_pow+0x5c>
 23fe5f8:	492c      	ldr	r1, [pc, #176]	; (23fe6ac <__ieee754_pow+0x1ac>)
 23fe5fa:	458a      	cmp	sl, r1
 23fe5fc:	dc27      	bgt.n	23fe64e <__ieee754_pow+0x14e>
 23fe5fe:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fe602:	458a      	cmp	sl, r1
 23fe604:	ddb2      	ble.n	23fe56c <__ieee754_pow+0x6c>
 23fe606:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fe60a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fe60e:	2914      	cmp	r1, #20
 23fe610:	f340 847d 	ble.w	23fef0e <__ieee754_pow+0xa0e>
 23fe614:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fe618:	fa23 f001 	lsr.w	r0, r3, r1
 23fe61c:	fa00 f101 	lsl.w	r1, r0, r1
 23fe620:	4299      	cmp	r1, r3
 23fe622:	d1a3      	bne.n	23fe56c <__ieee754_pow+0x6c>
 23fe624:	f000 0001 	and.w	r0, r0, #1
 23fe628:	f1c0 0102 	rsb	r1, r0, #2
 23fe62c:	9100      	str	r1, [sp, #0]
 23fe62e:	e79f      	b.n	23fe570 <__ieee754_pow+0x70>
 23fe630:	4b19      	ldr	r3, [pc, #100]	; (23fe698 <__ieee754_pow+0x198>)
 23fe632:	4443      	add	r3, r8
 23fe634:	4313      	orrs	r3, r2
 23fe636:	d08f      	beq.n	23fe558 <__ieee754_pow+0x58>
 23fe638:	4b1b      	ldr	r3, [pc, #108]	; (23fe6a8 <__ieee754_pow+0x1a8>)
 23fe63a:	4598      	cmp	r8, r3
 23fe63c:	f340 83ab 	ble.w	23fed96 <__ieee754_pow+0x896>
 23fe640:	f1bb 0f00 	cmp.w	fp, #0
 23fe644:	f2c0 8377 	blt.w	23fed36 <__ieee754_pow+0x836>
 23fe648:	ec45 4b10 	vmov	d0, r4, r5
 23fe64c:	e786      	b.n	23fe55c <__ieee754_pow+0x5c>
 23fe64e:	2102      	movs	r1, #2
 23fe650:	9100      	str	r1, [sp, #0]
 23fe652:	e78d      	b.n	23fe570 <__ieee754_pow+0x70>
 23fe654:	f1bb 0f00 	cmp.w	fp, #0
 23fe658:	f2c0 844f 	blt.w	23feefa <__ieee754_pow+0x9fa>
 23fe65c:	ec47 6b10 	vmov	d0, r6, r7
 23fe660:	e77c      	b.n	23fe55c <__ieee754_pow+0x5c>
 23fe662:	4632      	mov	r2, r6
 23fe664:	463b      	mov	r3, r7
 23fe666:	4610      	mov	r0, r2
 23fe668:	4619      	mov	r1, r3
 23fe66a:	f7fc f8d5 	bl	23fa818 <__aeabi_dsub>
 23fe66e:	4602      	mov	r2, r0
 23fe670:	460b      	mov	r3, r1
 23fe672:	f7fc fbb3 	bl	23faddc <__aeabi_ddiv>
 23fe676:	ec41 0b10 	vmov	d0, r0, r1
 23fe67a:	e76f      	b.n	23fe55c <__ieee754_pow+0x5c>
 23fe67c:	f3af 8000 	nop.w
 23fe680:	00000000 	.word	0x00000000
 23fe684:	3ff00000 	.word	0x3ff00000
 23fe688:	8800759c 	.word	0x8800759c
 23fe68c:	7e37e43c 	.word	0x7e37e43c
 23fe690:	7ff00000 	.word	0x7ff00000
 23fe694:	023ffe00 	.word	0x023ffe00
 23fe698:	c0100000 	.word	0xc0100000
 23fe69c:	3ff00000 	.word	0x3ff00000
 23fe6a0:	3fe00000 	.word	0x3fe00000
 23fe6a4:	41e00000 	.word	0x41e00000
 23fe6a8:	3fefffff 	.word	0x3fefffff
 23fe6ac:	433fffff 	.word	0x433fffff
 23fe6b0:	4be3      	ldr	r3, [pc, #908]	; (23fea40 <__ieee754_pow+0x540>)
 23fe6b2:	2200      	movs	r2, #0
 23fe6b4:	ea09 0303 	and.w	r3, r9, r3
 23fe6b8:	b953      	cbnz	r3, 23fe6d0 <__ieee754_pow+0x1d0>
 23fe6ba:	4be2      	ldr	r3, [pc, #904]	; (23fea44 <__ieee754_pow+0x544>)
 23fe6bc:	ec51 0b10 	vmov	r0, r1, d0
 23fe6c0:	f7fc fa62 	bl	23fab88 <__aeabi_dmul>
 23fe6c4:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fe6c8:	ec41 0b10 	vmov	d0, r0, r1
 23fe6cc:	ee10 8a90 	vmov	r8, s1
 23fe6d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fe6d4:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fe6d8:	4edb      	ldr	r6, [pc, #876]	; (23fea48 <__ieee754_pow+0x548>)
 23fe6da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fe6de:	ea48 0606 	orr.w	r6, r8, r6
 23fe6e2:	189a      	adds	r2, r3, r2
 23fe6e4:	4bd9      	ldr	r3, [pc, #868]	; (23fea4c <__ieee754_pow+0x54c>)
 23fe6e6:	4598      	cmp	r8, r3
 23fe6e8:	9205      	str	r2, [sp, #20]
 23fe6ea:	dd07      	ble.n	23fe6fc <__ieee754_pow+0x1fc>
 23fe6ec:	4bd8      	ldr	r3, [pc, #864]	; (23fea50 <__ieee754_pow+0x550>)
 23fe6ee:	4598      	cmp	r8, r3
 23fe6f0:	f340 8433 	ble.w	23fef5a <__ieee754_pow+0xa5a>
 23fe6f4:	3201      	adds	r2, #1
 23fe6f6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fe6fa:	9205      	str	r2, [sp, #20]
 23fe6fc:	2700      	movs	r7, #0
 23fe6fe:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fe9e0 <__ieee754_pow+0x4e0>
 23fe702:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fe9e8 <__ieee754_pow+0x4e8>
 23fe706:	eeb0 da47 	vmov.f32	s26, s14
 23fe70a:	eef0 da67 	vmov.f32	s27, s15
 23fe70e:	eeb0 ca47 	vmov.f32	s24, s14
 23fe712:	eef0 ca67 	vmov.f32	s25, s15
 23fe716:	ec51 0b16 	vmov	r0, r1, d6
 23fe71a:	ec53 2b10 	vmov	r2, r3, d0
 23fe71e:	4633      	mov	r3, r6
 23fe720:	1076      	asrs	r6, r6, #1
 23fe722:	ec43 2b19 	vmov	d9, r2, r3
 23fe726:	ec41 0b1a 	vmov	d10, r0, r1
 23fe72a:	4602      	mov	r2, r0
 23fe72c:	460b      	mov	r3, r1
 23fe72e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fe732:	ec51 0b19 	vmov	r0, r1, d9
 23fe736:	f7fc f86f 	bl	23fa818 <__aeabi_dsub>
 23fe73a:	4680      	mov	r8, r0
 23fe73c:	4689      	mov	r9, r1
 23fe73e:	ec53 2b1a 	vmov	r2, r3, d10
 23fe742:	ec51 0b19 	vmov	r0, r1, d9
 23fe746:	f7fc f869 	bl	23fa81c <__adddf3>
 23fe74a:	4602      	mov	r2, r0
 23fe74c:	460b      	mov	r3, r1
 23fe74e:	2000      	movs	r0, #0
 23fe750:	49bd      	ldr	r1, [pc, #756]	; (23fea48 <__ieee754_pow+0x548>)
 23fe752:	f7fc fb43 	bl	23faddc <__aeabi_ddiv>
 23fe756:	ec41 0b1b 	vmov	d11, r0, r1
 23fe75a:	ec53 2b1b 	vmov	r2, r3, d11
 23fe75e:	4640      	mov	r0, r8
 23fe760:	4649      	mov	r1, r9
 23fe762:	f7fc fa11 	bl	23fab88 <__aeabi_dmul>
 23fe766:	460a      	mov	r2, r1
 23fe768:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fe76c:	ec41 0b18 	vmov	d8, r0, r1
 23fe770:	4601      	mov	r1, r0
 23fe772:	2000      	movs	r0, #0
 23fe774:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fe778:	2100      	movs	r1, #0
 23fe77a:	4606      	mov	r6, r0
 23fe77c:	4602      	mov	r2, r0
 23fe77e:	9102      	str	r1, [sp, #8]
 23fe780:	19d9      	adds	r1, r3, r7
 23fe782:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fe786:	460f      	mov	r7, r1
 23fe788:	460b      	mov	r3, r1
 23fe78a:	4650      	mov	r0, sl
 23fe78c:	4659      	mov	r1, fp
 23fe78e:	f7fc f9fb 	bl	23fab88 <__aeabi_dmul>
 23fe792:	4602      	mov	r2, r0
 23fe794:	460b      	mov	r3, r1
 23fe796:	4640      	mov	r0, r8
 23fe798:	4649      	mov	r1, r9
 23fe79a:	f7fc f83d 	bl	23fa818 <__aeabi_dsub>
 23fe79e:	4680      	mov	r8, r0
 23fe7a0:	4689      	mov	r9, r1
 23fe7a2:	4630      	mov	r0, r6
 23fe7a4:	4639      	mov	r1, r7
 23fe7a6:	ec53 2b1a 	vmov	r2, r3, d10
 23fe7aa:	f7fc f835 	bl	23fa818 <__aeabi_dsub>
 23fe7ae:	4602      	mov	r2, r0
 23fe7b0:	460b      	mov	r3, r1
 23fe7b2:	ec51 0b19 	vmov	r0, r1, d9
 23fe7b6:	f7fc f82f 	bl	23fa818 <__aeabi_dsub>
 23fe7ba:	4652      	mov	r2, sl
 23fe7bc:	465b      	mov	r3, fp
 23fe7be:	f7fc f9e3 	bl	23fab88 <__aeabi_dmul>
 23fe7c2:	4602      	mov	r2, r0
 23fe7c4:	460b      	mov	r3, r1
 23fe7c6:	4640      	mov	r0, r8
 23fe7c8:	4649      	mov	r1, r9
 23fe7ca:	f7fc f825 	bl	23fa818 <__aeabi_dsub>
 23fe7ce:	ec53 2b1b 	vmov	r2, r3, d11
 23fe7d2:	f7fc f9d9 	bl	23fab88 <__aeabi_dmul>
 23fe7d6:	ec53 2b18 	vmov	r2, r3, d8
 23fe7da:	ec41 0b1a 	vmov	d10, r0, r1
 23fe7de:	ec51 0b18 	vmov	r0, r1, d8
 23fe7e2:	f7fc f9d1 	bl	23fab88 <__aeabi_dmul>
 23fe7e6:	4606      	mov	r6, r0
 23fe7e8:	460f      	mov	r7, r1
 23fe7ea:	a381      	add	r3, pc, #516	; (adr r3, 23fe9f0 <__ieee754_pow+0x4f0>)
 23fe7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe7f0:	f7fc f9ca 	bl	23fab88 <__aeabi_dmul>
 23fe7f4:	a380      	add	r3, pc, #512	; (adr r3, 23fe9f8 <__ieee754_pow+0x4f8>)
 23fe7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe7fa:	f7fc f80f 	bl	23fa81c <__adddf3>
 23fe7fe:	4632      	mov	r2, r6
 23fe800:	463b      	mov	r3, r7
 23fe802:	f7fc f9c1 	bl	23fab88 <__aeabi_dmul>
 23fe806:	a37e      	add	r3, pc, #504	; (adr r3, 23fea00 <__ieee754_pow+0x500>)
 23fe808:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe80c:	f7fc f806 	bl	23fa81c <__adddf3>
 23fe810:	4632      	mov	r2, r6
 23fe812:	463b      	mov	r3, r7
 23fe814:	f7fc f9b8 	bl	23fab88 <__aeabi_dmul>
 23fe818:	a37b      	add	r3, pc, #492	; (adr r3, 23fea08 <__ieee754_pow+0x508>)
 23fe81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe81e:	f7fb fffd 	bl	23fa81c <__adddf3>
 23fe822:	4632      	mov	r2, r6
 23fe824:	463b      	mov	r3, r7
 23fe826:	f7fc f9af 	bl	23fab88 <__aeabi_dmul>
 23fe82a:	a379      	add	r3, pc, #484	; (adr r3, 23fea10 <__ieee754_pow+0x510>)
 23fe82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe830:	f7fb fff4 	bl	23fa81c <__adddf3>
 23fe834:	4632      	mov	r2, r6
 23fe836:	463b      	mov	r3, r7
 23fe838:	f7fc f9a6 	bl	23fab88 <__aeabi_dmul>
 23fe83c:	a376      	add	r3, pc, #472	; (adr r3, 23fea18 <__ieee754_pow+0x518>)
 23fe83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe842:	f7fb ffeb 	bl	23fa81c <__adddf3>
 23fe846:	4680      	mov	r8, r0
 23fe848:	4689      	mov	r9, r1
 23fe84a:	4632      	mov	r2, r6
 23fe84c:	463b      	mov	r3, r7
 23fe84e:	4630      	mov	r0, r6
 23fe850:	4639      	mov	r1, r7
 23fe852:	f7fc f999 	bl	23fab88 <__aeabi_dmul>
 23fe856:	4602      	mov	r2, r0
 23fe858:	460b      	mov	r3, r1
 23fe85a:	4640      	mov	r0, r8
 23fe85c:	4649      	mov	r1, r9
 23fe85e:	f04f 0800 	mov.w	r8, #0
 23fe862:	f7fc f991 	bl	23fab88 <__aeabi_dmul>
 23fe866:	4652      	mov	r2, sl
 23fe868:	4606      	mov	r6, r0
 23fe86a:	460f      	mov	r7, r1
 23fe86c:	465b      	mov	r3, fp
 23fe86e:	ec51 0b18 	vmov	r0, r1, d8
 23fe872:	f7fb ffd3 	bl	23fa81c <__adddf3>
 23fe876:	ec53 2b1a 	vmov	r2, r3, d10
 23fe87a:	f7fc f985 	bl	23fab88 <__aeabi_dmul>
 23fe87e:	4632      	mov	r2, r6
 23fe880:	463b      	mov	r3, r7
 23fe882:	f7fb ffcb 	bl	23fa81c <__adddf3>
 23fe886:	4652      	mov	r2, sl
 23fe888:	465b      	mov	r3, fp
 23fe88a:	ec41 0b19 	vmov	d9, r0, r1
 23fe88e:	4650      	mov	r0, sl
 23fe890:	4659      	mov	r1, fp
 23fe892:	f7fc f979 	bl	23fab88 <__aeabi_dmul>
 23fe896:	2200      	movs	r2, #0
 23fe898:	4b6e      	ldr	r3, [pc, #440]	; (23fea54 <__ieee754_pow+0x554>)
 23fe89a:	4606      	mov	r6, r0
 23fe89c:	460f      	mov	r7, r1
 23fe89e:	f7fb ffbd 	bl	23fa81c <__adddf3>
 23fe8a2:	ec53 2b19 	vmov	r2, r3, d9
 23fe8a6:	f7fb ffb9 	bl	23fa81c <__adddf3>
 23fe8aa:	4689      	mov	r9, r1
 23fe8ac:	4642      	mov	r2, r8
 23fe8ae:	4650      	mov	r0, sl
 23fe8b0:	464b      	mov	r3, r9
 23fe8b2:	4659      	mov	r1, fp
 23fe8b4:	f7fc f968 	bl	23fab88 <__aeabi_dmul>
 23fe8b8:	2200      	movs	r2, #0
 23fe8ba:	4682      	mov	sl, r0
 23fe8bc:	468b      	mov	fp, r1
 23fe8be:	4b65      	ldr	r3, [pc, #404]	; (23fea54 <__ieee754_pow+0x554>)
 23fe8c0:	4640      	mov	r0, r8
 23fe8c2:	4649      	mov	r1, r9
 23fe8c4:	f7fb ffa8 	bl	23fa818 <__aeabi_dsub>
 23fe8c8:	4632      	mov	r2, r6
 23fe8ca:	463b      	mov	r3, r7
 23fe8cc:	f7fb ffa4 	bl	23fa818 <__aeabi_dsub>
 23fe8d0:	4602      	mov	r2, r0
 23fe8d2:	460b      	mov	r3, r1
 23fe8d4:	ec51 0b19 	vmov	r0, r1, d9
 23fe8d8:	f7fb ff9e 	bl	23fa818 <__aeabi_dsub>
 23fe8dc:	ec53 2b18 	vmov	r2, r3, d8
 23fe8e0:	f7fc f952 	bl	23fab88 <__aeabi_dmul>
 23fe8e4:	4606      	mov	r6, r0
 23fe8e6:	460f      	mov	r7, r1
 23fe8e8:	4642      	mov	r2, r8
 23fe8ea:	464b      	mov	r3, r9
 23fe8ec:	ec51 0b1a 	vmov	r0, r1, d10
 23fe8f0:	f7fc f94a 	bl	23fab88 <__aeabi_dmul>
 23fe8f4:	4602      	mov	r2, r0
 23fe8f6:	460b      	mov	r3, r1
 23fe8f8:	4630      	mov	r0, r6
 23fe8fa:	4639      	mov	r1, r7
 23fe8fc:	f7fb ff8e 	bl	23fa81c <__adddf3>
 23fe900:	4680      	mov	r8, r0
 23fe902:	4689      	mov	r9, r1
 23fe904:	4650      	mov	r0, sl
 23fe906:	4642      	mov	r2, r8
 23fe908:	4659      	mov	r1, fp
 23fe90a:	464b      	mov	r3, r9
 23fe90c:	f7fb ff86 	bl	23fa81c <__adddf3>
 23fe910:	2000      	movs	r0, #0
 23fe912:	460f      	mov	r7, r1
 23fe914:	4606      	mov	r6, r0
 23fe916:	a342      	add	r3, pc, #264	; (adr r3, 23fea20 <__ieee754_pow+0x520>)
 23fe918:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe91c:	f7fc f934 	bl	23fab88 <__aeabi_dmul>
 23fe920:	4652      	mov	r2, sl
 23fe922:	465b      	mov	r3, fp
 23fe924:	ec41 0b19 	vmov	d9, r0, r1
 23fe928:	4630      	mov	r0, r6
 23fe92a:	4639      	mov	r1, r7
 23fe92c:	f7fb ff74 	bl	23fa818 <__aeabi_dsub>
 23fe930:	4602      	mov	r2, r0
 23fe932:	460b      	mov	r3, r1
 23fe934:	4640      	mov	r0, r8
 23fe936:	4649      	mov	r1, r9
 23fe938:	f7fb ff6e 	bl	23fa818 <__aeabi_dsub>
 23fe93c:	a33a      	add	r3, pc, #232	; (adr r3, 23fea28 <__ieee754_pow+0x528>)
 23fe93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe942:	f7fc f921 	bl	23fab88 <__aeabi_dmul>
 23fe946:	4680      	mov	r8, r0
 23fe948:	4689      	mov	r9, r1
 23fe94a:	4630      	mov	r0, r6
 23fe94c:	4639      	mov	r1, r7
 23fe94e:	a338      	add	r3, pc, #224	; (adr r3, 23fea30 <__ieee754_pow+0x530>)
 23fe950:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe954:	f7fc f918 	bl	23fab88 <__aeabi_dmul>
 23fe958:	4602      	mov	r2, r0
 23fe95a:	460b      	mov	r3, r1
 23fe95c:	4640      	mov	r0, r8
 23fe95e:	4649      	mov	r1, r9
 23fe960:	f7fb ff5c 	bl	23fa81c <__adddf3>
 23fe964:	ec53 2b1c 	vmov	r2, r3, d12
 23fe968:	f7fb ff58 	bl	23fa81c <__adddf3>
 23fe96c:	4606      	mov	r6, r0
 23fe96e:	460f      	mov	r7, r1
 23fe970:	9805      	ldr	r0, [sp, #20]
 23fe972:	f7fc f89f 	bl	23faab4 <__aeabi_i2d>
 23fe976:	4632      	mov	r2, r6
 23fe978:	4680      	mov	r8, r0
 23fe97a:	4689      	mov	r9, r1
 23fe97c:	463b      	mov	r3, r7
 23fe97e:	ec51 0b19 	vmov	r0, r1, d9
 23fe982:	f7fb ff4b 	bl	23fa81c <__adddf3>
 23fe986:	ec53 2b1d 	vmov	r2, r3, d13
 23fe98a:	f7fb ff47 	bl	23fa81c <__adddf3>
 23fe98e:	4642      	mov	r2, r8
 23fe990:	464b      	mov	r3, r9
 23fe992:	f7fb ff43 	bl	23fa81c <__adddf3>
 23fe996:	2000      	movs	r0, #0
 23fe998:	4642      	mov	r2, r8
 23fe99a:	464b      	mov	r3, r9
 23fe99c:	4682      	mov	sl, r0
 23fe99e:	468b      	mov	fp, r1
 23fe9a0:	f7fb ff3a 	bl	23fa818 <__aeabi_dsub>
 23fe9a4:	ec53 2b1d 	vmov	r2, r3, d13
 23fe9a8:	f7fb ff36 	bl	23fa818 <__aeabi_dsub>
 23fe9ac:	ec53 2b19 	vmov	r2, r3, d9
 23fe9b0:	f7fb ff32 	bl	23fa818 <__aeabi_dsub>
 23fe9b4:	4602      	mov	r2, r0
 23fe9b6:	460b      	mov	r3, r1
 23fe9b8:	4630      	mov	r0, r6
 23fe9ba:	4639      	mov	r1, r7
 23fe9bc:	f7fb ff2c 	bl	23fa818 <__aeabi_dsub>
 23fe9c0:	9b00      	ldr	r3, [sp, #0]
 23fe9c2:	9a04      	ldr	r2, [sp, #16]
 23fe9c4:	3b01      	subs	r3, #1
 23fe9c6:	4313      	orrs	r3, r2
 23fe9c8:	ec41 0b18 	vmov	d8, r0, r1
 23fe9cc:	f040 81dc 	bne.w	23fed88 <__ieee754_pow+0x888>
 23fe9d0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fea38 <__ieee754_pow+0x538>
 23fe9d4:	eeb0 9a47 	vmov.f32	s18, s14
 23fe9d8:	eef0 9a67 	vmov.f32	s19, s15
 23fe9dc:	e03c      	b.n	23fea58 <__ieee754_pow+0x558>
 23fe9de:	bf00      	nop
	...
 23fe9ec:	3ff00000 	.word	0x3ff00000
 23fe9f0:	4a454eef 	.word	0x4a454eef
 23fe9f4:	3fca7e28 	.word	0x3fca7e28
 23fe9f8:	93c9db65 	.word	0x93c9db65
 23fe9fc:	3fcd864a 	.word	0x3fcd864a
 23fea00:	a91d4101 	.word	0xa91d4101
 23fea04:	3fd17460 	.word	0x3fd17460
 23fea08:	518f264d 	.word	0x518f264d
 23fea0c:	3fd55555 	.word	0x3fd55555
 23fea10:	db6fabff 	.word	0xdb6fabff
 23fea14:	3fdb6db6 	.word	0x3fdb6db6
 23fea18:	33333303 	.word	0x33333303
 23fea1c:	3fe33333 	.word	0x3fe33333
 23fea20:	e0000000 	.word	0xe0000000
 23fea24:	3feec709 	.word	0x3feec709
 23fea28:	dc3a03fd 	.word	0xdc3a03fd
 23fea2c:	3feec709 	.word	0x3feec709
 23fea30:	145b01f5 	.word	0x145b01f5
 23fea34:	be3e2fe0 	.word	0xbe3e2fe0
 23fea38:	00000000 	.word	0x00000000
 23fea3c:	bff00000 	.word	0xbff00000
 23fea40:	7ff00000 	.word	0x7ff00000
 23fea44:	43400000 	.word	0x43400000
 23fea48:	3ff00000 	.word	0x3ff00000
 23fea4c:	0003988e 	.word	0x0003988e
 23fea50:	000bb679 	.word	0x000bb679
 23fea54:	40080000 	.word	0x40080000
 23fea58:	2300      	movs	r3, #0
 23fea5a:	4620      	mov	r0, r4
 23fea5c:	4629      	mov	r1, r5
 23fea5e:	e9cd 4500 	strd	r4, r5, [sp]
 23fea62:	9300      	str	r3, [sp, #0]
 23fea64:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fea68:	4642      	mov	r2, r8
 23fea6a:	464b      	mov	r3, r9
 23fea6c:	f7fb fed4 	bl	23fa818 <__aeabi_dsub>
 23fea70:	465b      	mov	r3, fp
 23fea72:	4652      	mov	r2, sl
 23fea74:	f7fc f888 	bl	23fab88 <__aeabi_dmul>
 23fea78:	4606      	mov	r6, r0
 23fea7a:	460f      	mov	r7, r1
 23fea7c:	4622      	mov	r2, r4
 23fea7e:	462b      	mov	r3, r5
 23fea80:	ec51 0b18 	vmov	r0, r1, d8
 23fea84:	f7fc f880 	bl	23fab88 <__aeabi_dmul>
 23fea88:	4602      	mov	r2, r0
 23fea8a:	460b      	mov	r3, r1
 23fea8c:	4630      	mov	r0, r6
 23fea8e:	4639      	mov	r1, r7
 23fea90:	f7fb fec4 	bl	23fa81c <__adddf3>
 23fea94:	4642      	mov	r2, r8
 23fea96:	4604      	mov	r4, r0
 23fea98:	460d      	mov	r5, r1
 23fea9a:	464b      	mov	r3, r9
 23fea9c:	4659      	mov	r1, fp
 23fea9e:	4650      	mov	r0, sl
 23feaa0:	46a0      	mov	r8, r4
 23feaa2:	f7fc f871 	bl	23fab88 <__aeabi_dmul>
 23feaa6:	4606      	mov	r6, r0
 23feaa8:	460f      	mov	r7, r1
 23feaaa:	4620      	mov	r0, r4
 23feaac:	4629      	mov	r1, r5
 23feaae:	4632      	mov	r2, r6
 23feab0:	463b      	mov	r3, r7
 23feab2:	46a9      	mov	r9, r5
 23feab4:	f7fb feb2 	bl	23fa81c <__adddf3>
 23feab8:	4bd5      	ldr	r3, [pc, #852]	; (23fee10 <__ieee754_pow+0x910>)
 23feaba:	4604      	mov	r4, r0
 23feabc:	460d      	mov	r5, r1
 23feabe:	4299      	cmp	r1, r3
 23feac0:	468b      	mov	fp, r1
 23feac2:	f340 813b 	ble.w	23fed3c <__ieee754_pow+0x83c>
 23feac6:	4bd3      	ldr	r3, [pc, #844]	; (23fee14 <__ieee754_pow+0x914>)
 23feac8:	440b      	add	r3, r1
 23feaca:	4303      	orrs	r3, r0
 23feacc:	f040 8235 	bne.w	23fef3a <__ieee754_pow+0xa3a>
 23fead0:	4640      	mov	r0, r8
 23fead2:	4649      	mov	r1, r9
 23fead4:	a3b6      	add	r3, pc, #728	; (adr r3, 23fedb0 <__ieee754_pow+0x8b0>)
 23fead6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feada:	f7fb fe9f 	bl	23fa81c <__adddf3>
 23feade:	4632      	mov	r2, r6
 23feae0:	463b      	mov	r3, r7
 23feae2:	ec41 0b18 	vmov	d8, r0, r1
 23feae6:	4620      	mov	r0, r4
 23feae8:	4629      	mov	r1, r5
 23feaea:	f7fb fe95 	bl	23fa818 <__aeabi_dsub>
 23feaee:	4602      	mov	r2, r0
 23feaf0:	460b      	mov	r3, r1
 23feaf2:	ec51 0b18 	vmov	r0, r1, d8
 23feaf6:	f7fc fad7 	bl	23fb0a8 <__aeabi_dcmpgt>
 23feafa:	2800      	cmp	r0, #0
 23feafc:	f040 821d 	bne.w	23fef3a <__ieee754_pow+0xa3a>
 23feb00:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23feb04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23feb08:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23feb0c:	4cc2      	ldr	r4, [pc, #776]	; (23fee18 <__ieee754_pow+0x918>)
 23feb0e:	f1bb 0f00 	cmp.w	fp, #0
 23feb12:	fa42 f303 	asr.w	r3, r2, r3
 23feb16:	f04f 0000 	mov.w	r0, #0
 23feb1a:	445b      	add	r3, fp
 23feb1c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23feb20:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23feb24:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23feb28:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23feb2c:	fa44 f402 	asr.w	r4, r4, r2
 23feb30:	f1c2 0214 	rsb	r2, r2, #20
 23feb34:	ea23 0104 	bic.w	r1, r3, r4
 23feb38:	fa4a fa02 	asr.w	sl, sl, r2
 23feb3c:	4602      	mov	r2, r0
 23feb3e:	4630      	mov	r0, r6
 23feb40:	460b      	mov	r3, r1
 23feb42:	bfb8      	it	lt
 23feb44:	f1ca 0a00 	rsblt	sl, sl, #0
 23feb48:	4639      	mov	r1, r7
 23feb4a:	f7fb fe65 	bl	23fa818 <__aeabi_dsub>
 23feb4e:	4602      	mov	r2, r0
 23feb50:	460b      	mov	r3, r1
 23feb52:	4606      	mov	r6, r0
 23feb54:	460f      	mov	r7, r1
 23feb56:	4640      	mov	r0, r8
 23feb58:	4649      	mov	r1, r9
 23feb5a:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23feb5e:	f7fb fe5d 	bl	23fa81c <__adddf3>
 23feb62:	460d      	mov	r5, r1
 23feb64:	2400      	movs	r4, #0
 23feb66:	4629      	mov	r1, r5
 23feb68:	a393      	add	r3, pc, #588	; (adr r3, 23fedb8 <__ieee754_pow+0x8b8>)
 23feb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb6e:	4620      	mov	r0, r4
 23feb70:	f7fc f80a 	bl	23fab88 <__aeabi_dmul>
 23feb74:	4632      	mov	r2, r6
 23feb76:	463b      	mov	r3, r7
 23feb78:	4606      	mov	r6, r0
 23feb7a:	460f      	mov	r7, r1
 23feb7c:	4620      	mov	r0, r4
 23feb7e:	4629      	mov	r1, r5
 23feb80:	f7fb fe4a 	bl	23fa818 <__aeabi_dsub>
 23feb84:	4602      	mov	r2, r0
 23feb86:	460b      	mov	r3, r1
 23feb88:	4640      	mov	r0, r8
 23feb8a:	4649      	mov	r1, r9
 23feb8c:	f7fb fe44 	bl	23fa818 <__aeabi_dsub>
 23feb90:	a38b      	add	r3, pc, #556	; (adr r3, 23fedc0 <__ieee754_pow+0x8c0>)
 23feb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb96:	f7fb fff7 	bl	23fab88 <__aeabi_dmul>
 23feb9a:	4680      	mov	r8, r0
 23feb9c:	4689      	mov	r9, r1
 23feb9e:	4620      	mov	r0, r4
 23feba0:	4629      	mov	r1, r5
 23feba2:	a389      	add	r3, pc, #548	; (adr r3, 23fedc8 <__ieee754_pow+0x8c8>)
 23feba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feba8:	f7fb ffee 	bl	23fab88 <__aeabi_dmul>
 23febac:	4602      	mov	r2, r0
 23febae:	460b      	mov	r3, r1
 23febb0:	4640      	mov	r0, r8
 23febb2:	4649      	mov	r1, r9
 23febb4:	f7fb fe32 	bl	23fa81c <__adddf3>
 23febb8:	4680      	mov	r8, r0
 23febba:	4689      	mov	r9, r1
 23febbc:	4630      	mov	r0, r6
 23febbe:	4642      	mov	r2, r8
 23febc0:	4639      	mov	r1, r7
 23febc2:	464b      	mov	r3, r9
 23febc4:	f7fb fe2a 	bl	23fa81c <__adddf3>
 23febc8:	4632      	mov	r2, r6
 23febca:	4604      	mov	r4, r0
 23febcc:	460d      	mov	r5, r1
 23febce:	463b      	mov	r3, r7
 23febd0:	f7fb fe22 	bl	23fa818 <__aeabi_dsub>
 23febd4:	4602      	mov	r2, r0
 23febd6:	460b      	mov	r3, r1
 23febd8:	4640      	mov	r0, r8
 23febda:	4649      	mov	r1, r9
 23febdc:	f7fb fe1c 	bl	23fa818 <__aeabi_dsub>
 23febe0:	4622      	mov	r2, r4
 23febe2:	4680      	mov	r8, r0
 23febe4:	4689      	mov	r9, r1
 23febe6:	462b      	mov	r3, r5
 23febe8:	4620      	mov	r0, r4
 23febea:	4629      	mov	r1, r5
 23febec:	f7fb ffcc 	bl	23fab88 <__aeabi_dmul>
 23febf0:	4606      	mov	r6, r0
 23febf2:	460f      	mov	r7, r1
 23febf4:	a376      	add	r3, pc, #472	; (adr r3, 23fedd0 <__ieee754_pow+0x8d0>)
 23febf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23febfa:	f7fb ffc5 	bl	23fab88 <__aeabi_dmul>
 23febfe:	a376      	add	r3, pc, #472	; (adr r3, 23fedd8 <__ieee754_pow+0x8d8>)
 23fec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec04:	f7fb fe08 	bl	23fa818 <__aeabi_dsub>
 23fec08:	4632      	mov	r2, r6
 23fec0a:	463b      	mov	r3, r7
 23fec0c:	f7fb ffbc 	bl	23fab88 <__aeabi_dmul>
 23fec10:	a373      	add	r3, pc, #460	; (adr r3, 23fede0 <__ieee754_pow+0x8e0>)
 23fec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec16:	f7fb fe01 	bl	23fa81c <__adddf3>
 23fec1a:	4632      	mov	r2, r6
 23fec1c:	463b      	mov	r3, r7
 23fec1e:	f7fb ffb3 	bl	23fab88 <__aeabi_dmul>
 23fec22:	a371      	add	r3, pc, #452	; (adr r3, 23fede8 <__ieee754_pow+0x8e8>)
 23fec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec28:	f7fb fdf6 	bl	23fa818 <__aeabi_dsub>
 23fec2c:	4632      	mov	r2, r6
 23fec2e:	463b      	mov	r3, r7
 23fec30:	f7fb ffaa 	bl	23fab88 <__aeabi_dmul>
 23fec34:	a36e      	add	r3, pc, #440	; (adr r3, 23fedf0 <__ieee754_pow+0x8f0>)
 23fec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fec3a:	f7fb fdef 	bl	23fa81c <__adddf3>
 23fec3e:	4632      	mov	r2, r6
 23fec40:	463b      	mov	r3, r7
 23fec42:	f7fb ffa1 	bl	23fab88 <__aeabi_dmul>
 23fec46:	4602      	mov	r2, r0
 23fec48:	460b      	mov	r3, r1
 23fec4a:	4620      	mov	r0, r4
 23fec4c:	4629      	mov	r1, r5
 23fec4e:	f7fb fde3 	bl	23fa818 <__aeabi_dsub>
 23fec52:	4606      	mov	r6, r0
 23fec54:	460f      	mov	r7, r1
 23fec56:	4620      	mov	r0, r4
 23fec58:	4632      	mov	r2, r6
 23fec5a:	4629      	mov	r1, r5
 23fec5c:	463b      	mov	r3, r7
 23fec5e:	f7fb ff93 	bl	23fab88 <__aeabi_dmul>
 23fec62:	2200      	movs	r2, #0
 23fec64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fec68:	ec41 0b18 	vmov	d8, r0, r1
 23fec6c:	4630      	mov	r0, r6
 23fec6e:	4639      	mov	r1, r7
 23fec70:	f7fb fdd2 	bl	23fa818 <__aeabi_dsub>
 23fec74:	4602      	mov	r2, r0
 23fec76:	460b      	mov	r3, r1
 23fec78:	ec51 0b18 	vmov	r0, r1, d8
 23fec7c:	f7fc f8ae 	bl	23faddc <__aeabi_ddiv>
 23fec80:	4642      	mov	r2, r8
 23fec82:	4606      	mov	r6, r0
 23fec84:	460f      	mov	r7, r1
 23fec86:	464b      	mov	r3, r9
 23fec88:	4620      	mov	r0, r4
 23fec8a:	4629      	mov	r1, r5
 23fec8c:	f7fb ff7c 	bl	23fab88 <__aeabi_dmul>
 23fec90:	4642      	mov	r2, r8
 23fec92:	464b      	mov	r3, r9
 23fec94:	f7fb fdc2 	bl	23fa81c <__adddf3>
 23fec98:	4602      	mov	r2, r0
 23fec9a:	460b      	mov	r3, r1
 23fec9c:	4630      	mov	r0, r6
 23fec9e:	4639      	mov	r1, r7
 23feca0:	f7fb fdba 	bl	23fa818 <__aeabi_dsub>
 23feca4:	4622      	mov	r2, r4
 23feca6:	462b      	mov	r3, r5
 23feca8:	f7fb fdb6 	bl	23fa818 <__aeabi_dsub>
 23fecac:	4602      	mov	r2, r0
 23fecae:	460b      	mov	r3, r1
 23fecb0:	2000      	movs	r0, #0
 23fecb2:	495a      	ldr	r1, [pc, #360]	; (23fee1c <__ieee754_pow+0x91c>)
 23fecb4:	f7fb fdb0 	bl	23fa818 <__aeabi_dsub>
 23fecb8:	448b      	add	fp, r1
 23fecba:	4602      	mov	r2, r0
 23fecbc:	460b      	mov	r3, r1
 23fecbe:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fecc2:	f2c0 816c 	blt.w	23fef9e <__ieee754_pow+0xa9e>
 23fecc6:	4659      	mov	r1, fp
 23fecc8:	ec53 2b19 	vmov	r2, r3, d9
 23feccc:	f7fb ff5c 	bl	23fab88 <__aeabi_dmul>
 23fecd0:	ec41 0b10 	vmov	d0, r0, r1
 23fecd4:	e442      	b.n	23fe55c <__ieee754_pow+0x5c>
 23fecd6:	ec47 6b10 	vmov	d0, r6, r7
 23fecda:	9200      	str	r2, [sp, #0]
 23fecdc:	f000 fc0c 	bl	23ff4f8 <fabs>
 23fece0:	9a00      	ldr	r2, [sp, #0]
 23fece2:	2a00      	cmp	r2, #0
 23fece4:	f47f acbd 	bne.w	23fe662 <__ieee754_pow+0x162>
 23fece8:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fecec:	4a4b      	ldr	r2, [pc, #300]	; (23fee1c <__ieee754_pow+0x91c>)
 23fecee:	4293      	cmp	r3, r2
 23fecf0:	d003      	beq.n	23fecfa <__ieee754_pow+0x7fa>
 23fecf2:	f1b8 0f00 	cmp.w	r8, #0
 23fecf6:	f47f acb4 	bne.w	23fe662 <__ieee754_pow+0x162>
 23fecfa:	2300      	movs	r3, #0
 23fecfc:	9300      	str	r3, [sp, #0]
 23fecfe:	f1bb 0f00 	cmp.w	fp, #0
 23fed02:	da07      	bge.n	23fed14 <__ieee754_pow+0x814>
 23fed04:	2000      	movs	r0, #0
 23fed06:	4945      	ldr	r1, [pc, #276]	; (23fee1c <__ieee754_pow+0x91c>)
 23fed08:	ec53 2b10 	vmov	r2, r3, d0
 23fed0c:	f7fc f866 	bl	23faddc <__aeabi_ddiv>
 23fed10:	ec41 0b10 	vmov	d0, r0, r1
 23fed14:	f1b9 0f00 	cmp.w	r9, #0
 23fed18:	f6bf ac20 	bge.w	23fe55c <__ieee754_pow+0x5c>
 23fed1c:	4b40      	ldr	r3, [pc, #256]	; (23fee20 <__ieee754_pow+0x920>)
 23fed1e:	9a00      	ldr	r2, [sp, #0]
 23fed20:	4443      	add	r3, r8
 23fed22:	4313      	orrs	r3, r2
 23fed24:	f040 812d 	bne.w	23fef82 <__ieee754_pow+0xa82>
 23fed28:	ec53 2b10 	vmov	r2, r3, d0
 23fed2c:	e49b      	b.n	23fe666 <__ieee754_pow+0x166>
 23fed2e:	f1bb 0f00 	cmp.w	fp, #0
 23fed32:	f6ff ac57 	blt.w	23fe5e4 <__ieee754_pow+0xe4>
 23fed36:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fedf8 <__ieee754_pow+0x8f8>
 23fed3a:	e40f      	b.n	23fe55c <__ieee754_pow+0x5c>
 23fed3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fed40:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fee28 <__ieee754_pow+0x928>
 23fed44:	4563      	cmp	r3, ip
 23fed46:	f340 80f0 	ble.w	23fef2a <__ieee754_pow+0xa2a>
 23fed4a:	4b36      	ldr	r3, [pc, #216]	; (23fee24 <__ieee754_pow+0x924>)
 23fed4c:	440b      	add	r3, r1
 23fed4e:	4303      	orrs	r3, r0
 23fed50:	d10a      	bne.n	23fed68 <__ieee754_pow+0x868>
 23fed52:	4632      	mov	r2, r6
 23fed54:	463b      	mov	r3, r7
 23fed56:	f7fb fd5f 	bl	23fa818 <__aeabi_dsub>
 23fed5a:	4642      	mov	r2, r8
 23fed5c:	464b      	mov	r3, r9
 23fed5e:	f7fc f999 	bl	23fb094 <__aeabi_dcmpge>
 23fed62:	2800      	cmp	r0, #0
 23fed64:	f43f aecc 	beq.w	23feb00 <__ieee754_pow+0x600>
 23fed68:	a325      	add	r3, pc, #148	; (adr r3, 23fee00 <__ieee754_pow+0x900>)
 23fed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fed6e:	ec51 0b19 	vmov	r0, r1, d9
 23fed72:	f7fb ff09 	bl	23fab88 <__aeabi_dmul>
 23fed76:	a322      	add	r3, pc, #136	; (adr r3, 23fee00 <__ieee754_pow+0x900>)
 23fed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fed7c:	f7fb ff04 	bl	23fab88 <__aeabi_dmul>
 23fed80:	ec41 0b10 	vmov	d0, r0, r1
 23fed84:	f7ff bbea 	b.w	23fe55c <__ieee754_pow+0x5c>
 23fed88:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fee08 <__ieee754_pow+0x908>
 23fed8c:	eeb0 9a47 	vmov.f32	s18, s14
 23fed90:	eef0 9a67 	vmov.f32	s19, s15
 23fed94:	e660      	b.n	23fea58 <__ieee754_pow+0x558>
 23fed96:	f1bb 0f00 	cmp.w	fp, #0
 23fed9a:	dacc      	bge.n	23fed36 <__ieee754_pow+0x836>
 23fed9c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23feda0:	ee00 4a10 	vmov	s0, r4
 23feda4:	ee00 3a90 	vmov	s1, r3
 23feda8:	f7ff bbd8 	b.w	23fe55c <__ieee754_pow+0x5c>
 23fedac:	f3af 8000 	nop.w
 23fedb0:	652b82fe 	.word	0x652b82fe
 23fedb4:	3c971547 	.word	0x3c971547
 23fedb8:	00000000 	.word	0x00000000
 23fedbc:	3fe62e43 	.word	0x3fe62e43
 23fedc0:	fefa39ef 	.word	0xfefa39ef
 23fedc4:	3fe62e42 	.word	0x3fe62e42
 23fedc8:	0ca86c39 	.word	0x0ca86c39
 23fedcc:	be205c61 	.word	0xbe205c61
 23fedd0:	72bea4d0 	.word	0x72bea4d0
 23fedd4:	3e663769 	.word	0x3e663769
 23fedd8:	c5d26bf1 	.word	0xc5d26bf1
 23feddc:	3ebbbd41 	.word	0x3ebbbd41
 23fede0:	af25de2c 	.word	0xaf25de2c
 23fede4:	3f11566a 	.word	0x3f11566a
 23fede8:	16bebd93 	.word	0x16bebd93
 23fedec:	3f66c16c 	.word	0x3f66c16c
 23fedf0:	5555553e 	.word	0x5555553e
 23fedf4:	3fc55555 	.word	0x3fc55555
	...
 23fee00:	c2f8f359 	.word	0xc2f8f359
 23fee04:	01a56e1f 	.word	0x01a56e1f
 23fee08:	00000000 	.word	0x00000000
 23fee0c:	3ff00000 	.word	0x3ff00000
 23fee10:	408fffff 	.word	0x408fffff
 23fee14:	bf700000 	.word	0xbf700000
 23fee18:	000fffff 	.word	0x000fffff
 23fee1c:	3ff00000 	.word	0x3ff00000
 23fee20:	c0100000 	.word	0xc0100000
 23fee24:	3f6f3400 	.word	0x3f6f3400
 23fee28:	4090cbff 	.word	0x4090cbff
 23fee2c:	4598      	cmp	r8, r3
 23fee2e:	f6ff af7e 	blt.w	23fed2e <__ieee754_pow+0x82e>
 23fee32:	4b79      	ldr	r3, [pc, #484]	; (23ff018 <__ieee754_pow+0xb18>)
 23fee34:	4598      	cmp	r8, r3
 23fee36:	f73f abd1 	bgt.w	23fe5dc <__ieee754_pow+0xdc>
 23fee3a:	2200      	movs	r2, #0
 23fee3c:	4b76      	ldr	r3, [pc, #472]	; (23ff018 <__ieee754_pow+0xb18>)
 23fee3e:	ec51 0b10 	vmov	r0, r1, d0
 23fee42:	f7fb fce9 	bl	23fa818 <__aeabi_dsub>
 23fee46:	4606      	mov	r6, r0
 23fee48:	460f      	mov	r7, r1
 23fee4a:	a363      	add	r3, pc, #396	; (adr r3, 23fefd8 <__ieee754_pow+0xad8>)
 23fee4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee50:	f7fb fe9a 	bl	23fab88 <__aeabi_dmul>
 23fee54:	4682      	mov	sl, r0
 23fee56:	468b      	mov	fp, r1
 23fee58:	4630      	mov	r0, r6
 23fee5a:	4639      	mov	r1, r7
 23fee5c:	a360      	add	r3, pc, #384	; (adr r3, 23fefe0 <__ieee754_pow+0xae0>)
 23fee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee62:	f7fb fe91 	bl	23fab88 <__aeabi_dmul>
 23fee66:	2200      	movs	r2, #0
 23fee68:	4b6c      	ldr	r3, [pc, #432]	; (23ff01c <__ieee754_pow+0xb1c>)
 23fee6a:	ec41 0b18 	vmov	d8, r0, r1
 23fee6e:	4630      	mov	r0, r6
 23fee70:	4639      	mov	r1, r7
 23fee72:	f7fb fe89 	bl	23fab88 <__aeabi_dmul>
 23fee76:	4602      	mov	r2, r0
 23fee78:	460b      	mov	r3, r1
 23fee7a:	a15b      	add	r1, pc, #364	; (adr r1, 23fefe8 <__ieee754_pow+0xae8>)
 23fee7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fee80:	f7fb fcca 	bl	23fa818 <__aeabi_dsub>
 23fee84:	4632      	mov	r2, r6
 23fee86:	463b      	mov	r3, r7
 23fee88:	f7fb fe7e 	bl	23fab88 <__aeabi_dmul>
 23fee8c:	4602      	mov	r2, r0
 23fee8e:	460b      	mov	r3, r1
 23fee90:	2000      	movs	r0, #0
 23fee92:	4963      	ldr	r1, [pc, #396]	; (23ff020 <__ieee754_pow+0xb20>)
 23fee94:	f7fb fcc0 	bl	23fa818 <__aeabi_dsub>
 23fee98:	4680      	mov	r8, r0
 23fee9a:	4689      	mov	r9, r1
 23fee9c:	4632      	mov	r2, r6
 23fee9e:	463b      	mov	r3, r7
 23feea0:	4630      	mov	r0, r6
 23feea2:	4639      	mov	r1, r7
 23feea4:	f7fb fe70 	bl	23fab88 <__aeabi_dmul>
 23feea8:	4602      	mov	r2, r0
 23feeaa:	460b      	mov	r3, r1
 23feeac:	4640      	mov	r0, r8
 23feeae:	4649      	mov	r1, r9
 23feeb0:	f7fb fe6a 	bl	23fab88 <__aeabi_dmul>
 23feeb4:	a34e      	add	r3, pc, #312	; (adr r3, 23feff0 <__ieee754_pow+0xaf0>)
 23feeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feeba:	f7fb fe65 	bl	23fab88 <__aeabi_dmul>
 23feebe:	4602      	mov	r2, r0
 23feec0:	460b      	mov	r3, r1
 23feec2:	ec51 0b18 	vmov	r0, r1, d8
 23feec6:	f7fb fca7 	bl	23fa818 <__aeabi_dsub>
 23feeca:	4606      	mov	r6, r0
 23feecc:	460f      	mov	r7, r1
 23feece:	4650      	mov	r0, sl
 23feed0:	4659      	mov	r1, fp
 23feed2:	4632      	mov	r2, r6
 23feed4:	463b      	mov	r3, r7
 23feed6:	f7fb fca1 	bl	23fa81c <__adddf3>
 23feeda:	2000      	movs	r0, #0
 23feedc:	4652      	mov	r2, sl
 23feede:	465b      	mov	r3, fp
 23feee0:	4682      	mov	sl, r0
 23feee2:	468b      	mov	fp, r1
 23feee4:	e564      	b.n	23fe9b0 <__ieee754_pow+0x4b0>
 23feee6:	4632      	mov	r2, r6
 23feee8:	463b      	mov	r3, r7
 23feeea:	4630      	mov	r0, r6
 23feeec:	4639      	mov	r1, r7
 23feeee:	f7fb fe4b 	bl	23fab88 <__aeabi_dmul>
 23feef2:	ec41 0b10 	vmov	d0, r0, r1
 23feef6:	f7ff bb31 	b.w	23fe55c <__ieee754_pow+0x5c>
 23feefa:	2000      	movs	r0, #0
 23feefc:	4946      	ldr	r1, [pc, #280]	; (23ff018 <__ieee754_pow+0xb18>)
 23feefe:	4632      	mov	r2, r6
 23fef00:	463b      	mov	r3, r7
 23fef02:	f7fb ff6b 	bl	23faddc <__aeabi_ddiv>
 23fef06:	ec41 0b10 	vmov	d0, r0, r1
 23fef0a:	f7ff bb27 	b.w	23fe55c <__ieee754_pow+0x5c>
 23fef0e:	2b00      	cmp	r3, #0
 23fef10:	f47f aee1 	bne.w	23fecd6 <__ieee754_pow+0x7d6>
 23fef14:	f1c1 0114 	rsb	r1, r1, #20
 23fef18:	fa4a f001 	asr.w	r0, sl, r1
 23fef1c:	fa00 f101 	lsl.w	r1, r0, r1
 23fef20:	4551      	cmp	r1, sl
 23fef22:	d04d      	beq.n	23fefc0 <__ieee754_pow+0xac0>
 23fef24:	9300      	str	r3, [sp, #0]
 23fef26:	f7ff bb27 	b.w	23fe578 <__ieee754_pow+0x78>
 23fef2a:	4a3d      	ldr	r2, [pc, #244]	; (23ff020 <__ieee754_pow+0xb20>)
 23fef2c:	4293      	cmp	r3, r2
 23fef2e:	dc4e      	bgt.n	23fefce <__ieee754_pow+0xace>
 23fef30:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fef34:	4693      	mov	fp, r2
 23fef36:	4692      	mov	sl, r2
 23fef38:	e614      	b.n	23feb64 <__ieee754_pow+0x664>
 23fef3a:	a32f      	add	r3, pc, #188	; (adr r3, 23feff8 <__ieee754_pow+0xaf8>)
 23fef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fef40:	ec51 0b19 	vmov	r0, r1, d9
 23fef44:	f7fb fe20 	bl	23fab88 <__aeabi_dmul>
 23fef48:	a32b      	add	r3, pc, #172	; (adr r3, 23feff8 <__ieee754_pow+0xaf8>)
 23fef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fef4e:	f7fb fe1b 	bl	23fab88 <__aeabi_dmul>
 23fef52:	ec41 0b10 	vmov	d0, r0, r1
 23fef56:	f7ff bb01 	b.w	23fe55c <__ieee754_pow+0x5c>
 23fef5a:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23ff000 <__ieee754_pow+0xb00>
 23fef5e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fef62:	eeb0 da47 	vmov.f32	s26, s14
 23fef66:	eef0 da67 	vmov.f32	s27, s15
 23fef6a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23ff008 <__ieee754_pow+0xb08>
 23fef6e:	eeb0 ca47 	vmov.f32	s24, s14
 23fef72:	eef0 ca67 	vmov.f32	s25, s15
 23fef76:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23ff010 <__ieee754_pow+0xb10>
 23fef7a:	ec51 0b17 	vmov	r0, r1, d7
 23fef7e:	f7ff bbcc 	b.w	23fe71a <__ieee754_pow+0x21a>
 23fef82:	9b00      	ldr	r3, [sp, #0]
 23fef84:	2b01      	cmp	r3, #1
 23fef86:	f47f aae9 	bne.w	23fe55c <__ieee754_pow+0x5c>
 23fef8a:	ee10 1a90 	vmov	r1, s1
 23fef8e:	ee10 2a10 	vmov	r2, s0
 23fef92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fef96:	ec43 2b10 	vmov	d0, r2, r3
 23fef9a:	f7ff badf 	b.w	23fe55c <__ieee754_pow+0x5c>
 23fef9e:	4650      	mov	r0, sl
 23fefa0:	ec43 2b10 	vmov	d0, r2, r3
 23fefa4:	f000 fb64 	bl	23ff670 <scalbn>
 23fefa8:	ec51 0b10 	vmov	r0, r1, d0
 23fefac:	e68c      	b.n	23fecc8 <__ieee754_pow+0x7c8>
 23fefae:	ec47 6b10 	vmov	d0, r6, r7
 23fefb2:	b007      	add	sp, #28
 23fefb4:	ecbd 8b0c 	vpop	{d8-d13}
 23fefb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fefbc:	f000 b832 	b.w	23ff024 <__ieee754_sqrt>
 23fefc0:	f000 0001 	and.w	r0, r0, #1
 23fefc4:	f1c0 0302 	rsb	r3, r0, #2
 23fefc8:	9300      	str	r3, [sp, #0]
 23fefca:	f7ff bad5 	b.w	23fe578 <__ieee754_pow+0x78>
 23fefce:	151b      	asrs	r3, r3, #20
 23fefd0:	e598      	b.n	23feb04 <__ieee754_pow+0x604>
 23fefd2:	bf00      	nop
 23fefd4:	f3af 8000 	nop.w
 23fefd8:	60000000 	.word	0x60000000
 23fefdc:	3ff71547 	.word	0x3ff71547
 23fefe0:	f85ddf44 	.word	0xf85ddf44
 23fefe4:	3e54ae0b 	.word	0x3e54ae0b
 23fefe8:	55555555 	.word	0x55555555
 23fefec:	3fd55555 	.word	0x3fd55555
 23feff0:	652b82fe 	.word	0x652b82fe
 23feff4:	3ff71547 	.word	0x3ff71547
 23feff8:	8800759c 	.word	0x8800759c
 23feffc:	7e37e43c 	.word	0x7e37e43c
 23ff000:	40000000 	.word	0x40000000
 23ff004:	3fe2b803 	.word	0x3fe2b803
 23ff008:	43cfd006 	.word	0x43cfd006
 23ff00c:	3e4cfdeb 	.word	0x3e4cfdeb
 23ff010:	00000000 	.word	0x00000000
 23ff014:	3ff80000 	.word	0x3ff80000
 23ff018:	3ff00000 	.word	0x3ff00000
 23ff01c:	3fd00000 	.word	0x3fd00000
 23ff020:	3fe00000 	.word	0x3fe00000

023ff024 <__ieee754_sqrt>:
 23ff024:	495e      	ldr	r1, [pc, #376]	; (23ff1a0 <__ieee754_sqrt+0x17c>)
 23ff026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff02a:	ec55 4b10 	vmov	r4, r5, d0
 23ff02e:	43a9      	bics	r1, r5
 23ff030:	f000 8094 	beq.w	23ff15c <__ieee754_sqrt+0x138>
 23ff034:	2d00      	cmp	r5, #0
 23ff036:	462b      	mov	r3, r5
 23ff038:	ee10 2a10 	vmov	r2, s0
 23ff03c:	dd5a      	ble.n	23ff0f4 <__ieee754_sqrt+0xd0>
 23ff03e:	1528      	asrs	r0, r5, #20
 23ff040:	d067      	beq.n	23ff112 <__ieee754_sqrt+0xee>
 23ff042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff046:	07c1      	lsls	r1, r0, #31
 23ff048:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23ff04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ff050:	d403      	bmi.n	23ff05a <__ieee754_sqrt+0x36>
 23ff052:	005b      	lsls	r3, r3, #1
 23ff054:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23ff058:	0052      	lsls	r2, r2, #1
 23ff05a:	0fd1      	lsrs	r1, r2, #31
 23ff05c:	2600      	movs	r6, #0
 23ff05e:	107f      	asrs	r7, r7, #1
 23ff060:	f04f 0c16 	mov.w	ip, #22
 23ff064:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23ff068:	46b6      	mov	lr, r6
 23ff06a:	0052      	lsls	r2, r2, #1
 23ff06c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23ff070:	eb0e 0001 	add.w	r0, lr, r1
 23ff074:	4298      	cmp	r0, r3
 23ff076:	dc03      	bgt.n	23ff080 <__ieee754_sqrt+0x5c>
 23ff078:	1a1b      	subs	r3, r3, r0
 23ff07a:	eb00 0e01 	add.w	lr, r0, r1
 23ff07e:	440e      	add	r6, r1
 23ff080:	005b      	lsls	r3, r3, #1
 23ff082:	f1bc 0c01 	subs.w	ip, ip, #1
 23ff086:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23ff08a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23ff08e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ff092:	d1ed      	bne.n	23ff070 <__ieee754_sqrt+0x4c>
 23ff094:	4665      	mov	r5, ip
 23ff096:	2420      	movs	r4, #32
 23ff098:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23ff09c:	e014      	b.n	23ff0c8 <__ieee754_sqrt+0xa4>
 23ff09e:	d10a      	bne.n	23ff0b6 <__ieee754_sqrt+0x92>
 23ff0a0:	4290      	cmp	r0, r2
 23ff0a2:	d808      	bhi.n	23ff0b6 <__ieee754_sqrt+0x92>
 23ff0a4:	2800      	cmp	r0, #0
 23ff0a6:	eb00 0c01 	add.w	ip, r0, r1
 23ff0aa:	db1d      	blt.n	23ff0e8 <__ieee754_sqrt+0xc4>
 23ff0ac:	46f0      	mov	r8, lr
 23ff0ae:	2300      	movs	r3, #0
 23ff0b0:	1a12      	subs	r2, r2, r0
 23ff0b2:	440d      	add	r5, r1
 23ff0b4:	46c6      	mov	lr, r8
 23ff0b6:	0fd0      	lsrs	r0, r2, #31
 23ff0b8:	3c01      	subs	r4, #1
 23ff0ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23ff0be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23ff0c2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ff0c6:	d033      	beq.n	23ff130 <__ieee754_sqrt+0x10c>
 23ff0c8:	4573      	cmp	r3, lr
 23ff0ca:	eb01 000c 	add.w	r0, r1, ip
 23ff0ce:	dde6      	ble.n	23ff09e <__ieee754_sqrt+0x7a>
 23ff0d0:	2800      	cmp	r0, #0
 23ff0d2:	eb00 0c01 	add.w	ip, r0, r1
 23ff0d6:	db07      	blt.n	23ff0e8 <__ieee754_sqrt+0xc4>
 23ff0d8:	46f0      	mov	r8, lr
 23ff0da:	eba3 030e 	sub.w	r3, r3, lr
 23ff0de:	4290      	cmp	r0, r2
 23ff0e0:	bf88      	it	hi
 23ff0e2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23ff0e6:	e7e3      	b.n	23ff0b0 <__ieee754_sqrt+0x8c>
 23ff0e8:	f1bc 0f00 	cmp.w	ip, #0
 23ff0ec:	dbf4      	blt.n	23ff0d8 <__ieee754_sqrt+0xb4>
 23ff0ee:	f10e 0801 	add.w	r8, lr, #1
 23ff0f2:	e7f2      	b.n	23ff0da <__ieee754_sqrt+0xb6>
 23ff0f4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23ff0f8:	4321      	orrs	r1, r4
 23ff0fa:	d028      	beq.n	23ff14e <__ieee754_sqrt+0x12a>
 23ff0fc:	2d00      	cmp	r5, #0
 23ff0fe:	d13d      	bne.n	23ff17c <__ieee754_sqrt+0x158>
 23ff100:	4628      	mov	r0, r5
 23ff102:	0ad1      	lsrs	r1, r2, #11
 23ff104:	3815      	subs	r0, #21
 23ff106:	0552      	lsls	r2, r2, #21
 23ff108:	460b      	mov	r3, r1
 23ff10a:	2900      	cmp	r1, #0
 23ff10c:	d0f9      	beq.n	23ff102 <__ieee754_sqrt+0xde>
 23ff10e:	02cf      	lsls	r7, r1, #11
 23ff110:	d441      	bmi.n	23ff196 <__ieee754_sqrt+0x172>
 23ff112:	2400      	movs	r4, #0
 23ff114:	005b      	lsls	r3, r3, #1
 23ff116:	4625      	mov	r5, r4
 23ff118:	3401      	adds	r4, #1
 23ff11a:	02de      	lsls	r6, r3, #11
 23ff11c:	d5fa      	bpl.n	23ff114 <__ieee754_sqrt+0xf0>
 23ff11e:	4619      	mov	r1, r3
 23ff120:	4613      	mov	r3, r2
 23ff122:	40a2      	lsls	r2, r4
 23ff124:	f1c4 0420 	rsb	r4, r4, #32
 23ff128:	40e3      	lsrs	r3, r4
 23ff12a:	1b40      	subs	r0, r0, r5
 23ff12c:	430b      	orrs	r3, r1
 23ff12e:	e788      	b.n	23ff042 <__ieee754_sqrt+0x1e>
 23ff130:	4313      	orrs	r3, r2
 23ff132:	d10e      	bne.n	23ff152 <__ieee754_sqrt+0x12e>
 23ff134:	086c      	lsrs	r4, r5, #1
 23ff136:	07f3      	lsls	r3, r6, #31
 23ff138:	491a      	ldr	r1, [pc, #104]	; (23ff1a4 <__ieee754_sqrt+0x180>)
 23ff13a:	bf48      	it	mi
 23ff13c:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23ff140:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23ff144:	4622      	mov	r2, r4
 23ff146:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23ff14a:	ec43 2b10 	vmov	d0, r2, r3
 23ff14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff152:	1c6a      	adds	r2, r5, #1
 23ff154:	d01d      	beq.n	23ff192 <__ieee754_sqrt+0x16e>
 23ff156:	1c6c      	adds	r4, r5, #1
 23ff158:	0864      	lsrs	r4, r4, #1
 23ff15a:	e7ec      	b.n	23ff136 <__ieee754_sqrt+0x112>
 23ff15c:	ee10 2a10 	vmov	r2, s0
 23ff160:	462b      	mov	r3, r5
 23ff162:	ee10 0a10 	vmov	r0, s0
 23ff166:	4629      	mov	r1, r5
 23ff168:	f7fb fd0e 	bl	23fab88 <__aeabi_dmul>
 23ff16c:	4622      	mov	r2, r4
 23ff16e:	462b      	mov	r3, r5
 23ff170:	f7fb fb54 	bl	23fa81c <__adddf3>
 23ff174:	ec41 0b10 	vmov	d0, r0, r1
 23ff178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff17c:	4620      	mov	r0, r4
 23ff17e:	4629      	mov	r1, r5
 23ff180:	f7fb fb4a 	bl	23fa818 <__aeabi_dsub>
 23ff184:	4602      	mov	r2, r0
 23ff186:	460b      	mov	r3, r1
 23ff188:	f7fb fe28 	bl	23faddc <__aeabi_ddiv>
 23ff18c:	ec41 0b10 	vmov	d0, r0, r1
 23ff190:	e7dd      	b.n	23ff14e <__ieee754_sqrt+0x12a>
 23ff192:	3601      	adds	r6, #1
 23ff194:	e7cf      	b.n	23ff136 <__ieee754_sqrt+0x112>
 23ff196:	4613      	mov	r3, r2
 23ff198:	2420      	movs	r4, #32
 23ff19a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23ff19e:	e7c3      	b.n	23ff128 <__ieee754_sqrt+0x104>
 23ff1a0:	7ff00000 	.word	0x7ff00000
 23ff1a4:	3fe00000 	.word	0x3fe00000

023ff1a8 <atan>:
 23ff1a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff1ac:	ec55 4b10 	vmov	r4, r5, d0
 23ff1b0:	4bc7      	ldr	r3, [pc, #796]	; (23ff4d0 <atan+0x328>)
 23ff1b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23ff1b6:	46aa      	mov	sl, r5
 23ff1b8:	429e      	cmp	r6, r3
 23ff1ba:	dd16      	ble.n	23ff1ea <atan+0x42>
 23ff1bc:	4bc5      	ldr	r3, [pc, #788]	; (23ff4d4 <atan+0x32c>)
 23ff1be:	429e      	cmp	r6, r3
 23ff1c0:	dc01      	bgt.n	23ff1c6 <atan+0x1e>
 23ff1c2:	d10a      	bne.n	23ff1da <atan+0x32>
 23ff1c4:	b14c      	cbz	r4, 23ff1da <atan+0x32>
 23ff1c6:	4622      	mov	r2, r4
 23ff1c8:	462b      	mov	r3, r5
 23ff1ca:	4620      	mov	r0, r4
 23ff1cc:	4629      	mov	r1, r5
 23ff1ce:	f7fb fb25 	bl	23fa81c <__adddf3>
 23ff1d2:	ec41 0b10 	vmov	d0, r0, r1
 23ff1d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff1da:	f1ba 0f00 	cmp.w	sl, #0
 23ff1de:	f340 80bf 	ble.w	23ff360 <atan+0x1b8>
 23ff1e2:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23ff460 <atan+0x2b8>
 23ff1e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff1ea:	4bbb      	ldr	r3, [pc, #748]	; (23ff4d8 <atan+0x330>)
 23ff1ec:	429e      	cmp	r6, r3
 23ff1ee:	f300 80ba 	bgt.w	23ff366 <atan+0x1be>
 23ff1f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23ff1f6:	429e      	cmp	r6, r3
 23ff1f8:	f340 80a0 	ble.w	23ff33c <atan+0x194>
 23ff1fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23ff200:	4622      	mov	r2, r4
 23ff202:	462b      	mov	r3, r5
 23ff204:	4620      	mov	r0, r4
 23ff206:	4629      	mov	r1, r5
 23ff208:	f7fb fcbe 	bl	23fab88 <__aeabi_dmul>
 23ff20c:	4602      	mov	r2, r0
 23ff20e:	460b      	mov	r3, r1
 23ff210:	4680      	mov	r8, r0
 23ff212:	4689      	mov	r9, r1
 23ff214:	f7fb fcb8 	bl	23fab88 <__aeabi_dmul>
 23ff218:	4606      	mov	r6, r0
 23ff21a:	460f      	mov	r7, r1
 23ff21c:	a392      	add	r3, pc, #584	; (adr r3, 23ff468 <atan+0x2c0>)
 23ff21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff222:	f7fb fcb1 	bl	23fab88 <__aeabi_dmul>
 23ff226:	a392      	add	r3, pc, #584	; (adr r3, 23ff470 <atan+0x2c8>)
 23ff228:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff22c:	f7fb faf6 	bl	23fa81c <__adddf3>
 23ff230:	4632      	mov	r2, r6
 23ff232:	463b      	mov	r3, r7
 23ff234:	f7fb fca8 	bl	23fab88 <__aeabi_dmul>
 23ff238:	a38f      	add	r3, pc, #572	; (adr r3, 23ff478 <atan+0x2d0>)
 23ff23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff23e:	f7fb faed 	bl	23fa81c <__adddf3>
 23ff242:	4632      	mov	r2, r6
 23ff244:	463b      	mov	r3, r7
 23ff246:	f7fb fc9f 	bl	23fab88 <__aeabi_dmul>
 23ff24a:	a38d      	add	r3, pc, #564	; (adr r3, 23ff480 <atan+0x2d8>)
 23ff24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff250:	f7fb fae4 	bl	23fa81c <__adddf3>
 23ff254:	4632      	mov	r2, r6
 23ff256:	463b      	mov	r3, r7
 23ff258:	f7fb fc96 	bl	23fab88 <__aeabi_dmul>
 23ff25c:	a38a      	add	r3, pc, #552	; (adr r3, 23ff488 <atan+0x2e0>)
 23ff25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff262:	f7fb fadb 	bl	23fa81c <__adddf3>
 23ff266:	4632      	mov	r2, r6
 23ff268:	463b      	mov	r3, r7
 23ff26a:	f7fb fc8d 	bl	23fab88 <__aeabi_dmul>
 23ff26e:	a388      	add	r3, pc, #544	; (adr r3, 23ff490 <atan+0x2e8>)
 23ff270:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff274:	f7fb fad2 	bl	23fa81c <__adddf3>
 23ff278:	4642      	mov	r2, r8
 23ff27a:	464b      	mov	r3, r9
 23ff27c:	f7fb fc84 	bl	23fab88 <__aeabi_dmul>
 23ff280:	4680      	mov	r8, r0
 23ff282:	4689      	mov	r9, r1
 23ff284:	4630      	mov	r0, r6
 23ff286:	4639      	mov	r1, r7
 23ff288:	a383      	add	r3, pc, #524	; (adr r3, 23ff498 <atan+0x2f0>)
 23ff28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff28e:	f7fb fc7b 	bl	23fab88 <__aeabi_dmul>
 23ff292:	a383      	add	r3, pc, #524	; (adr r3, 23ff4a0 <atan+0x2f8>)
 23ff294:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff298:	f7fb fabe 	bl	23fa818 <__aeabi_dsub>
 23ff29c:	4632      	mov	r2, r6
 23ff29e:	463b      	mov	r3, r7
 23ff2a0:	f7fb fc72 	bl	23fab88 <__aeabi_dmul>
 23ff2a4:	a380      	add	r3, pc, #512	; (adr r3, 23ff4a8 <atan+0x300>)
 23ff2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2aa:	f7fb fab5 	bl	23fa818 <__aeabi_dsub>
 23ff2ae:	4632      	mov	r2, r6
 23ff2b0:	463b      	mov	r3, r7
 23ff2b2:	f7fb fc69 	bl	23fab88 <__aeabi_dmul>
 23ff2b6:	a37e      	add	r3, pc, #504	; (adr r3, 23ff4b0 <atan+0x308>)
 23ff2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2bc:	f7fb faac 	bl	23fa818 <__aeabi_dsub>
 23ff2c0:	4632      	mov	r2, r6
 23ff2c2:	463b      	mov	r3, r7
 23ff2c4:	f7fb fc60 	bl	23fab88 <__aeabi_dmul>
 23ff2c8:	a37b      	add	r3, pc, #492	; (adr r3, 23ff4b8 <atan+0x310>)
 23ff2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2ce:	f7fb faa3 	bl	23fa818 <__aeabi_dsub>
 23ff2d2:	4632      	mov	r2, r6
 23ff2d4:	463b      	mov	r3, r7
 23ff2d6:	f7fb fc57 	bl	23fab88 <__aeabi_dmul>
 23ff2da:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23ff2de:	4602      	mov	r2, r0
 23ff2e0:	460b      	mov	r3, r1
 23ff2e2:	4640      	mov	r0, r8
 23ff2e4:	4649      	mov	r1, r9
 23ff2e6:	d063      	beq.n	23ff3b0 <atan+0x208>
 23ff2e8:	4e7c      	ldr	r6, [pc, #496]	; (23ff4dc <atan+0x334>)
 23ff2ea:	f7fb fa97 	bl	23fa81c <__adddf3>
 23ff2ee:	4622      	mov	r2, r4
 23ff2f0:	462b      	mov	r3, r5
 23ff2f2:	f7fb fc49 	bl	23fab88 <__aeabi_dmul>
 23ff2f6:	4b7a      	ldr	r3, [pc, #488]	; (23ff4e0 <atan+0x338>)
 23ff2f8:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23ff2fc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23ff300:	449b      	add	fp, r3
 23ff302:	e9db 2300 	ldrd	r2, r3, [fp]
 23ff306:	f7fb fa87 	bl	23fa818 <__aeabi_dsub>
 23ff30a:	4622      	mov	r2, r4
 23ff30c:	462b      	mov	r3, r5
 23ff30e:	f7fb fa83 	bl	23fa818 <__aeabi_dsub>
 23ff312:	4602      	mov	r2, r0
 23ff314:	460b      	mov	r3, r1
 23ff316:	e9d6 0100 	ldrd	r0, r1, [r6]
 23ff31a:	f7fb fa7d 	bl	23fa818 <__aeabi_dsub>
 23ff31e:	f1ba 0f00 	cmp.w	sl, #0
 23ff322:	ec41 0b10 	vmov	d0, r0, r1
 23ff326:	f6bf af56 	bge.w	23ff1d6 <atan+0x2e>
 23ff32a:	ee10 1a90 	vmov	r1, s1
 23ff32e:	4602      	mov	r2, r0
 23ff330:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23ff334:	ec43 2b10 	vmov	d0, r2, r3
 23ff338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff33c:	a360      	add	r3, pc, #384	; (adr r3, 23ff4c0 <atan+0x318>)
 23ff33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff342:	ee10 0a10 	vmov	r0, s0
 23ff346:	4629      	mov	r1, r5
 23ff348:	f7fb fa68 	bl	23fa81c <__adddf3>
 23ff34c:	2200      	movs	r2, #0
 23ff34e:	4b65      	ldr	r3, [pc, #404]	; (23ff4e4 <atan+0x33c>)
 23ff350:	f7fb feaa 	bl	23fb0a8 <__aeabi_dcmpgt>
 23ff354:	2800      	cmp	r0, #0
 23ff356:	f43f af51 	beq.w	23ff1fc <atan+0x54>
 23ff35a:	ec45 4b10 	vmov	d0, r4, r5
 23ff35e:	e73a      	b.n	23ff1d6 <atan+0x2e>
 23ff360:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23ff4c8 <atan+0x320>
 23ff364:	e737      	b.n	23ff1d6 <atan+0x2e>
 23ff366:	f000 f8c7 	bl	23ff4f8 <fabs>
 23ff36a:	4b5f      	ldr	r3, [pc, #380]	; (23ff4e8 <atan+0x340>)
 23ff36c:	429e      	cmp	r6, r3
 23ff36e:	ec55 4b10 	vmov	r4, r5, d0
 23ff372:	dc2d      	bgt.n	23ff3d0 <atan+0x228>
 23ff374:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23ff378:	429e      	cmp	r6, r3
 23ff37a:	dd58      	ble.n	23ff42e <atan+0x286>
 23ff37c:	2200      	movs	r2, #0
 23ff37e:	4b59      	ldr	r3, [pc, #356]	; (23ff4e4 <atan+0x33c>)
 23ff380:	ee10 0a10 	vmov	r0, s0
 23ff384:	4629      	mov	r1, r5
 23ff386:	f7fb fa47 	bl	23fa818 <__aeabi_dsub>
 23ff38a:	f04f 0b01 	mov.w	fp, #1
 23ff38e:	4606      	mov	r6, r0
 23ff390:	460f      	mov	r7, r1
 23ff392:	4620      	mov	r0, r4
 23ff394:	4629      	mov	r1, r5
 23ff396:	2200      	movs	r2, #0
 23ff398:	4b52      	ldr	r3, [pc, #328]	; (23ff4e4 <atan+0x33c>)
 23ff39a:	f7fb fa3f 	bl	23fa81c <__adddf3>
 23ff39e:	4602      	mov	r2, r0
 23ff3a0:	460b      	mov	r3, r1
 23ff3a2:	4630      	mov	r0, r6
 23ff3a4:	4639      	mov	r1, r7
 23ff3a6:	f7fb fd19 	bl	23faddc <__aeabi_ddiv>
 23ff3aa:	4604      	mov	r4, r0
 23ff3ac:	460d      	mov	r5, r1
 23ff3ae:	e727      	b.n	23ff200 <atan+0x58>
 23ff3b0:	f7fb fa34 	bl	23fa81c <__adddf3>
 23ff3b4:	4622      	mov	r2, r4
 23ff3b6:	462b      	mov	r3, r5
 23ff3b8:	f7fb fbe6 	bl	23fab88 <__aeabi_dmul>
 23ff3bc:	4602      	mov	r2, r0
 23ff3be:	460b      	mov	r3, r1
 23ff3c0:	4620      	mov	r0, r4
 23ff3c2:	4629      	mov	r1, r5
 23ff3c4:	f7fb fa28 	bl	23fa818 <__aeabi_dsub>
 23ff3c8:	ec41 0b10 	vmov	d0, r0, r1
 23ff3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff3d0:	4b46      	ldr	r3, [pc, #280]	; (23ff4ec <atan+0x344>)
 23ff3d2:	429e      	cmp	r6, r3
 23ff3d4:	da1f      	bge.n	23ff416 <atan+0x26e>
 23ff3d6:	ee10 0a10 	vmov	r0, s0
 23ff3da:	2200      	movs	r2, #0
 23ff3dc:	4b44      	ldr	r3, [pc, #272]	; (23ff4f0 <atan+0x348>)
 23ff3de:	4629      	mov	r1, r5
 23ff3e0:	f7fb fa1a 	bl	23fa818 <__aeabi_dsub>
 23ff3e4:	4602      	mov	r2, r0
 23ff3e6:	460b      	mov	r3, r1
 23ff3e8:	4620      	mov	r0, r4
 23ff3ea:	4629      	mov	r1, r5
 23ff3ec:	4614      	mov	r4, r2
 23ff3ee:	461d      	mov	r5, r3
 23ff3f0:	2200      	movs	r2, #0
 23ff3f2:	4b3f      	ldr	r3, [pc, #252]	; (23ff4f0 <atan+0x348>)
 23ff3f4:	f04f 0b02 	mov.w	fp, #2
 23ff3f8:	f7fb fbc6 	bl	23fab88 <__aeabi_dmul>
 23ff3fc:	2200      	movs	r2, #0
 23ff3fe:	4b39      	ldr	r3, [pc, #228]	; (23ff4e4 <atan+0x33c>)
 23ff400:	f7fb fa0c 	bl	23fa81c <__adddf3>
 23ff404:	4602      	mov	r2, r0
 23ff406:	460b      	mov	r3, r1
 23ff408:	4620      	mov	r0, r4
 23ff40a:	4629      	mov	r1, r5
 23ff40c:	f7fb fce6 	bl	23faddc <__aeabi_ddiv>
 23ff410:	4604      	mov	r4, r0
 23ff412:	460d      	mov	r5, r1
 23ff414:	e6f4      	b.n	23ff200 <atan+0x58>
 23ff416:	462b      	mov	r3, r5
 23ff418:	2000      	movs	r0, #0
 23ff41a:	4936      	ldr	r1, [pc, #216]	; (23ff4f4 <atan+0x34c>)
 23ff41c:	ee10 2a10 	vmov	r2, s0
 23ff420:	f7fb fcdc 	bl	23faddc <__aeabi_ddiv>
 23ff424:	f04f 0b03 	mov.w	fp, #3
 23ff428:	4604      	mov	r4, r0
 23ff42a:	460d      	mov	r5, r1
 23ff42c:	e6e8      	b.n	23ff200 <atan+0x58>
 23ff42e:	ee10 2a10 	vmov	r2, s0
 23ff432:	462b      	mov	r3, r5
 23ff434:	ee10 0a10 	vmov	r0, s0
 23ff438:	4629      	mov	r1, r5
 23ff43a:	f7fb f9ef 	bl	23fa81c <__adddf3>
 23ff43e:	2200      	movs	r2, #0
 23ff440:	4b28      	ldr	r3, [pc, #160]	; (23ff4e4 <atan+0x33c>)
 23ff442:	f04f 0b00 	mov.w	fp, #0
 23ff446:	f7fb f9e7 	bl	23fa818 <__aeabi_dsub>
 23ff44a:	2200      	movs	r2, #0
 23ff44c:	4606      	mov	r6, r0
 23ff44e:	460f      	mov	r7, r1
 23ff450:	4620      	mov	r0, r4
 23ff452:	4629      	mov	r1, r5
 23ff454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23ff458:	e79f      	b.n	23ff39a <atan+0x1f2>
 23ff45a:	bf00      	nop
 23ff45c:	f3af 8000 	nop.w
 23ff460:	54442d18 	.word	0x54442d18
 23ff464:	3ff921fb 	.word	0x3ff921fb
 23ff468:	e322da11 	.word	0xe322da11
 23ff46c:	3f90ad3a 	.word	0x3f90ad3a
 23ff470:	24760deb 	.word	0x24760deb
 23ff474:	3fa97b4b 	.word	0x3fa97b4b
 23ff478:	a0d03d51 	.word	0xa0d03d51
 23ff47c:	3fb10d66 	.word	0x3fb10d66
 23ff480:	c54c206e 	.word	0xc54c206e
 23ff484:	3fb745cd 	.word	0x3fb745cd
 23ff488:	920083ff 	.word	0x920083ff
 23ff48c:	3fc24924 	.word	0x3fc24924
 23ff490:	5555550d 	.word	0x5555550d
 23ff494:	3fd55555 	.word	0x3fd55555
 23ff498:	2c6a6c2f 	.word	0x2c6a6c2f
 23ff49c:	bfa2b444 	.word	0xbfa2b444
 23ff4a0:	52defd9a 	.word	0x52defd9a
 23ff4a4:	3fadde2d 	.word	0x3fadde2d
 23ff4a8:	af749a6d 	.word	0xaf749a6d
 23ff4ac:	3fb3b0f2 	.word	0x3fb3b0f2
 23ff4b0:	fe231671 	.word	0xfe231671
 23ff4b4:	3fbc71c6 	.word	0x3fbc71c6
 23ff4b8:	9998ebc4 	.word	0x9998ebc4
 23ff4bc:	3fc99999 	.word	0x3fc99999
 23ff4c0:	8800759c 	.word	0x8800759c
 23ff4c4:	7e37e43c 	.word	0x7e37e43c
 23ff4c8:	54442d18 	.word	0x54442d18
 23ff4cc:	bff921fb 	.word	0xbff921fb
 23ff4d0:	440fffff 	.word	0x440fffff
 23ff4d4:	7ff00000 	.word	0x7ff00000
 23ff4d8:	3fdbffff 	.word	0x3fdbffff
 23ff4dc:	023ffe08 	.word	0x023ffe08
 23ff4e0:	023ffe28 	.word	0x023ffe28
 23ff4e4:	3ff00000 	.word	0x3ff00000
 23ff4e8:	3ff2ffff 	.word	0x3ff2ffff
 23ff4ec:	40038000 	.word	0x40038000
 23ff4f0:	3ff80000 	.word	0x3ff80000
 23ff4f4:	bff00000 	.word	0xbff00000

023ff4f8 <fabs>:
 23ff4f8:	ec51 0b10 	vmov	r0, r1, d0
 23ff4fc:	ee10 2a10 	vmov	r2, s0
 23ff500:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23ff504:	ec43 2b10 	vmov	d0, r2, r3
 23ff508:	4770      	bx	lr
 23ff50a:	bf00      	nop

023ff50c <finite>:
 23ff50c:	b082      	sub	sp, #8
 23ff50e:	4805      	ldr	r0, [pc, #20]	; (23ff524 <finite+0x18>)
 23ff510:	ed8d 0b00 	vstr	d0, [sp]
 23ff514:	9b01      	ldr	r3, [sp, #4]
 23ff516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23ff51a:	4418      	add	r0, r3
 23ff51c:	0fc0      	lsrs	r0, r0, #31
 23ff51e:	b002      	add	sp, #8
 23ff520:	4770      	bx	lr
 23ff522:	bf00      	nop
 23ff524:	80100000 	.word	0x80100000

023ff528 <nan>:
 23ff528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23ff530 <nan+0x8>
 23ff52c:	4770      	bx	lr
 23ff52e:	bf00      	nop
 23ff530:	00000000 	.word	0x00000000
 23ff534:	7ff80000 	.word	0x7ff80000

023ff538 <rint>:
 23ff538:	ec53 2b10 	vmov	r2, r3, d0
 23ff53c:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23ff540:	ee10 0a10 	vmov	r0, s0
 23ff544:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23ff548:	2913      	cmp	r1, #19
 23ff54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff54c:	461c      	mov	r4, r3
 23ff54e:	b083      	sub	sp, #12
 23ff550:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23ff554:	dc3a      	bgt.n	23ff5cc <rint+0x94>
 23ff556:	2900      	cmp	r1, #0
 23ff558:	db30      	blt.n	23ff5bc <rint+0x84>
 23ff55a:	4d42      	ldr	r5, [pc, #264]	; (23ff664 <rint+0x12c>)
 23ff55c:	fa45 fc01 	asr.w	ip, r5, r1
 23ff560:	ea03 050c 	and.w	r5, r3, ip
 23ff564:	4315      	orrs	r5, r2
 23ff566:	d02d      	beq.n	23ff5c4 <rint+0x8c>
 23ff568:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23ff56c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23ff570:	4318      	orrs	r0, r3
 23ff572:	d00c      	beq.n	23ff58e <rint+0x56>
 23ff574:	ea24 0c0c 	bic.w	ip, r4, ip
 23ff578:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23ff57c:	2913      	cmp	r1, #19
 23ff57e:	fa44 f101 	asr.w	r1, r4, r1
 23ff582:	bf0c      	ite	eq
 23ff584:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23ff588:	2000      	movne	r0, #0
 23ff58a:	ea4c 0401 	orr.w	r4, ip, r1
 23ff58e:	4936      	ldr	r1, [pc, #216]	; (23ff668 <rint+0x130>)
 23ff590:	4623      	mov	r3, r4
 23ff592:	4602      	mov	r2, r0
 23ff594:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23ff598:	e9de 4500 	ldrd	r4, r5, [lr]
 23ff59c:	4620      	mov	r0, r4
 23ff59e:	4629      	mov	r1, r5
 23ff5a0:	f7fb f93c 	bl	23fa81c <__adddf3>
 23ff5a4:	4622      	mov	r2, r4
 23ff5a6:	462b      	mov	r3, r5
 23ff5a8:	e9cd 0100 	strd	r0, r1, [sp]
 23ff5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff5b0:	f7fb f932 	bl	23fa818 <__aeabi_dsub>
 23ff5b4:	ec41 0b10 	vmov	d0, r0, r1
 23ff5b8:	b003      	add	sp, #12
 23ff5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff5bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23ff5c0:	4311      	orrs	r1, r2
 23ff5c2:	d124      	bne.n	23ff60e <rint+0xd6>
 23ff5c4:	ec43 2b10 	vmov	d0, r2, r3
 23ff5c8:	b003      	add	sp, #12
 23ff5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff5cc:	2933      	cmp	r1, #51	; 0x33
 23ff5ce:	dd08      	ble.n	23ff5e2 <rint+0xaa>
 23ff5d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23ff5d4:	d1f6      	bne.n	23ff5c4 <rint+0x8c>
 23ff5d6:	4619      	mov	r1, r3
 23ff5d8:	f7fb f920 	bl	23fa81c <__adddf3>
 23ff5dc:	ec41 0b10 	vmov	d0, r0, r1
 23ff5e0:	e7f2      	b.n	23ff5c8 <rint+0x90>
 23ff5e2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23ff5e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ff5ea:	fa21 f10c 	lsr.w	r1, r1, ip
 23ff5ee:	420a      	tst	r2, r1
 23ff5f0:	d0e8      	beq.n	23ff5c4 <rint+0x8c>
 23ff5f2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23ff5f6:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23ff5fa:	d0c8      	beq.n	23ff58e <rint+0x56>
 23ff5fc:	ea20 0303 	bic.w	r3, r0, r3
 23ff600:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ff604:	fa40 fc0c 	asr.w	ip, r0, ip
 23ff608:	ea43 000c 	orr.w	r0, r3, ip
 23ff60c:	e7bf      	b.n	23ff58e <rint+0x56>
 23ff60e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff612:	4a16      	ldr	r2, [pc, #88]	; (23ff66c <rint+0x134>)
 23ff614:	4318      	orrs	r0, r3
 23ff616:	4022      	ands	r2, r4
 23ff618:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23ff61c:	4243      	negs	r3, r0
 23ff61e:	4303      	orrs	r3, r0
 23ff620:	0b1b      	lsrs	r3, r3, #12
 23ff622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23ff626:	ea43 0702 	orr.w	r7, r3, r2
 23ff62a:	4b0f      	ldr	r3, [pc, #60]	; (23ff668 <rint+0x130>)
 23ff62c:	ee10 2a10 	vmov	r2, s0
 23ff630:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23ff634:	463b      	mov	r3, r7
 23ff636:	e9de 6700 	ldrd	r6, r7, [lr]
 23ff63a:	4630      	mov	r0, r6
 23ff63c:	4639      	mov	r1, r7
 23ff63e:	f7fb f8ed 	bl	23fa81c <__adddf3>
 23ff642:	4632      	mov	r2, r6
 23ff644:	463b      	mov	r3, r7
 23ff646:	e9cd 0100 	strd	r0, r1, [sp]
 23ff64a:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff64e:	f7fb f8e3 	bl	23fa818 <__aeabi_dsub>
 23ff652:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ff656:	4602      	mov	r2, r0
 23ff658:	ea41 0304 	orr.w	r3, r1, r4
 23ff65c:	ec43 2b10 	vmov	d0, r2, r3
 23ff660:	b003      	add	sp, #12
 23ff662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff664:	000fffff 	.word	0x000fffff
 23ff668:	023ffe48 	.word	0x023ffe48
 23ff66c:	fffe0000 	.word	0xfffe0000

023ff670 <scalbn>:
 23ff670:	b538      	push	{r3, r4, r5, lr}
 23ff672:	ec53 2b10 	vmov	r2, r3, d0
 23ff676:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23ff67a:	469c      	mov	ip, r3
 23ff67c:	4604      	mov	r4, r0
 23ff67e:	bb89      	cbnz	r1, 23ff6e4 <scalbn+0x74>
 23ff680:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23ff684:	ee10 1a10 	vmov	r1, s0
 23ff688:	ea5c 0101 	orrs.w	r1, ip, r1
 23ff68c:	d029      	beq.n	23ff6e2 <scalbn+0x72>
 23ff68e:	4d3e      	ldr	r5, [pc, #248]	; (23ff788 <scalbn+0x118>)
 23ff690:	4619      	mov	r1, r3
 23ff692:	2200      	movs	r2, #0
 23ff694:	4b3d      	ldr	r3, [pc, #244]	; (23ff78c <scalbn+0x11c>)
 23ff696:	ee10 0a10 	vmov	r0, s0
 23ff69a:	f7fb fa75 	bl	23fab88 <__aeabi_dmul>
 23ff69e:	42ac      	cmp	r4, r5
 23ff6a0:	4602      	mov	r2, r0
 23ff6a2:	460b      	mov	r3, r1
 23ff6a4:	db16      	blt.n	23ff6d4 <scalbn+0x64>
 23ff6a6:	468c      	mov	ip, r1
 23ff6a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23ff6ac:	3936      	subs	r1, #54	; 0x36
 23ff6ae:	4421      	add	r1, r4
 23ff6b0:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23ff6b4:	4281      	cmp	r1, r0
 23ff6b6:	dc21      	bgt.n	23ff6fc <scalbn+0x8c>
 23ff6b8:	2900      	cmp	r1, #0
 23ff6ba:	dc47      	bgt.n	23ff74c <scalbn+0xdc>
 23ff6bc:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23ff6c0:	da34      	bge.n	23ff72c <scalbn+0xbc>
 23ff6c2:	f24c 3150 	movw	r1, #50000	; 0xc350
 23ff6c6:	428c      	cmp	r4, r1
 23ff6c8:	dc18      	bgt.n	23ff6fc <scalbn+0x8c>
 23ff6ca:	2b00      	cmp	r3, #0
 23ff6cc:	a126      	add	r1, pc, #152	; (adr r1, 23ff768 <scalbn+0xf8>)
 23ff6ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff6d2:	db43      	blt.n	23ff75c <scalbn+0xec>
 23ff6d4:	a324      	add	r3, pc, #144	; (adr r3, 23ff768 <scalbn+0xf8>)
 23ff6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff6da:	f7fb fa55 	bl	23fab88 <__aeabi_dmul>
 23ff6de:	ec41 0b10 	vmov	d0, r0, r1
 23ff6e2:	bd38      	pop	{r3, r4, r5, pc}
 23ff6e4:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23ff6e8:	4571      	cmp	r1, lr
 23ff6ea:	d1e0      	bne.n	23ff6ae <scalbn+0x3e>
 23ff6ec:	ee10 0a10 	vmov	r0, s0
 23ff6f0:	4619      	mov	r1, r3
 23ff6f2:	f7fb f893 	bl	23fa81c <__adddf3>
 23ff6f6:	ec41 0b10 	vmov	d0, r0, r1
 23ff6fa:	bd38      	pop	{r3, r4, r5, pc}
 23ff6fc:	2b00      	cmp	r3, #0
 23ff6fe:	a11c      	add	r1, pc, #112	; (adr r1, 23ff770 <scalbn+0x100>)
 23ff700:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff704:	db07      	blt.n	23ff716 <scalbn+0xa6>
 23ff706:	a31a      	add	r3, pc, #104	; (adr r3, 23ff770 <scalbn+0x100>)
 23ff708:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff70c:	f7fb fa3c 	bl	23fab88 <__aeabi_dmul>
 23ff710:	ec41 0b10 	vmov	d0, r0, r1
 23ff714:	bd38      	pop	{r3, r4, r5, pc}
 23ff716:	a118      	add	r1, pc, #96	; (adr r1, 23ff778 <scalbn+0x108>)
 23ff718:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff71c:	a314      	add	r3, pc, #80	; (adr r3, 23ff770 <scalbn+0x100>)
 23ff71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff722:	f7fb fa31 	bl	23fab88 <__aeabi_dmul>
 23ff726:	ec41 0b10 	vmov	d0, r0, r1
 23ff72a:	e7f3      	b.n	23ff714 <scalbn+0xa4>
 23ff72c:	4818      	ldr	r0, [pc, #96]	; (23ff790 <scalbn+0x120>)
 23ff72e:	3136      	adds	r1, #54	; 0x36
 23ff730:	4614      	mov	r4, r2
 23ff732:	4b18      	ldr	r3, [pc, #96]	; (23ff794 <scalbn+0x124>)
 23ff734:	ea0c 0000 	and.w	r0, ip, r0
 23ff738:	2200      	movs	r2, #0
 23ff73a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23ff73e:	4620      	mov	r0, r4
 23ff740:	4629      	mov	r1, r5
 23ff742:	f7fb fa21 	bl	23fab88 <__aeabi_dmul>
 23ff746:	ec41 0b10 	vmov	d0, r0, r1
 23ff74a:	bd38      	pop	{r3, r4, r5, pc}
 23ff74c:	4810      	ldr	r0, [pc, #64]	; (23ff790 <scalbn+0x120>)
 23ff74e:	ea0c 0000 	and.w	r0, ip, r0
 23ff752:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23ff756:	ec43 2b10 	vmov	d0, r2, r3
 23ff75a:	bd38      	pop	{r3, r4, r5, pc}
 23ff75c:	a108      	add	r1, pc, #32	; (adr r1, 23ff780 <scalbn+0x110>)
 23ff75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff762:	e7b7      	b.n	23ff6d4 <scalbn+0x64>
 23ff764:	f3af 8000 	nop.w
 23ff768:	c2f8f359 	.word	0xc2f8f359
 23ff76c:	01a56e1f 	.word	0x01a56e1f
 23ff770:	8800759c 	.word	0x8800759c
 23ff774:	7e37e43c 	.word	0x7e37e43c
 23ff778:	8800759c 	.word	0x8800759c
 23ff77c:	fe37e43c 	.word	0xfe37e43c
 23ff780:	c2f8f359 	.word	0xc2f8f359
 23ff784:	81a56e1f 	.word	0x81a56e1f
 23ff788:	ffff3cb0 	.word	0xffff3cb0
 23ff78c:	43500000 	.word	0x43500000
 23ff790:	800fffff 	.word	0x800fffff
 23ff794:	3c900000 	.word	0x3c900000

023ff798 <atexit>:
 23ff798:	2300      	movs	r3, #0
 23ff79a:	4601      	mov	r1, r0
 23ff79c:	461a      	mov	r2, r3
 23ff79e:	4618      	mov	r0, r3
 23ff7a0:	f000 b93a 	b.w	23ffa18 <__register_exitproc>

023ff7a4 <isprint>:
 23ff7a4:	4b02      	ldr	r3, [pc, #8]	; (23ff7b0 <isprint+0xc>)
 23ff7a6:	4418      	add	r0, r3
 23ff7a8:	7840      	ldrb	r0, [r0, #1]
 23ff7aa:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff7ae:	4770      	bx	lr
 23ff7b0:	023ffec8 	.word	0x023ffec8

023ff7b4 <memcpy>:
 23ff7b4:	440a      	add	r2, r1
 23ff7b6:	1e43      	subs	r3, r0, #1
 23ff7b8:	4291      	cmp	r1, r2
 23ff7ba:	d100      	bne.n	23ff7be <memcpy+0xa>
 23ff7bc:	4770      	bx	lr
 23ff7be:	b510      	push	{r4, lr}
 23ff7c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff7c4:	4291      	cmp	r1, r2
 23ff7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff7ca:	d1f9      	bne.n	23ff7c0 <memcpy+0xc>
 23ff7cc:	bd10      	pop	{r4, pc}

023ff7ce <memmove>:
 23ff7ce:	4288      	cmp	r0, r1
 23ff7d0:	b510      	push	{r4, lr}
 23ff7d2:	eb01 0402 	add.w	r4, r1, r2
 23ff7d6:	d902      	bls.n	23ff7de <memmove+0x10>
 23ff7d8:	4284      	cmp	r4, r0
 23ff7da:	4623      	mov	r3, r4
 23ff7dc:	d807      	bhi.n	23ff7ee <memmove+0x20>
 23ff7de:	1e43      	subs	r3, r0, #1
 23ff7e0:	42a1      	cmp	r1, r4
 23ff7e2:	d008      	beq.n	23ff7f6 <memmove+0x28>
 23ff7e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff7e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff7ec:	e7f8      	b.n	23ff7e0 <memmove+0x12>
 23ff7ee:	4402      	add	r2, r0
 23ff7f0:	4601      	mov	r1, r0
 23ff7f2:	428a      	cmp	r2, r1
 23ff7f4:	d100      	bne.n	23ff7f8 <memmove+0x2a>
 23ff7f6:	bd10      	pop	{r4, pc}
 23ff7f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff7fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff800:	e7f7      	b.n	23ff7f2 <memmove+0x24>

023ff802 <memset>:
 23ff802:	4402      	add	r2, r0
 23ff804:	4603      	mov	r3, r0
 23ff806:	4293      	cmp	r3, r2
 23ff808:	d100      	bne.n	23ff80c <memset+0xa>
 23ff80a:	4770      	bx	lr
 23ff80c:	f803 1b01 	strb.w	r1, [r3], #1
 23ff810:	e7f9      	b.n	23ff806 <memset+0x4>
	...

023ff814 <srand>:
 23ff814:	b538      	push	{r3, r4, r5, lr}
 23ff816:	4b10      	ldr	r3, [pc, #64]	; (23ff858 <srand+0x44>)
 23ff818:	4604      	mov	r4, r0
 23ff81a:	681d      	ldr	r5, [r3, #0]
 23ff81c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff81e:	b9b3      	cbnz	r3, 23ff84e <srand+0x3a>
 23ff820:	2018      	movs	r0, #24
 23ff822:	f7fc fbed 	bl	23fc000 <malloc>
 23ff826:	4602      	mov	r2, r0
 23ff828:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff82a:	b920      	cbnz	r0, 23ff836 <srand+0x22>
 23ff82c:	4b0b      	ldr	r3, [pc, #44]	; (23ff85c <srand+0x48>)
 23ff82e:	2142      	movs	r1, #66	; 0x42
 23ff830:	480b      	ldr	r0, [pc, #44]	; (23ff860 <srand+0x4c>)
 23ff832:	f7fc fc2b 	bl	23fc08c <__assert_func>
 23ff836:	490b      	ldr	r1, [pc, #44]	; (23ff864 <srand+0x50>)
 23ff838:	4b0b      	ldr	r3, [pc, #44]	; (23ff868 <srand+0x54>)
 23ff83a:	e9c0 1300 	strd	r1, r3, [r0]
 23ff83e:	4b0b      	ldr	r3, [pc, #44]	; (23ff86c <srand+0x58>)
 23ff840:	2100      	movs	r1, #0
 23ff842:	6083      	str	r3, [r0, #8]
 23ff844:	230b      	movs	r3, #11
 23ff846:	8183      	strh	r3, [r0, #12]
 23ff848:	2001      	movs	r0, #1
 23ff84a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff84e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff850:	2200      	movs	r2, #0
 23ff852:	611c      	str	r4, [r3, #16]
 23ff854:	615a      	str	r2, [r3, #20]
 23ff856:	bd38      	pop	{r3, r4, r5, pc}
 23ff858:	1007adbc 	.word	0x1007adbc
 23ff85c:	023ffe58 	.word	0x023ffe58
 23ff860:	023ffe6f 	.word	0x023ffe6f
 23ff864:	abcd330e 	.word	0xabcd330e
 23ff868:	e66d1234 	.word	0xe66d1234
 23ff86c:	0005deec 	.word	0x0005deec

023ff870 <strchr>:
 23ff870:	b2c9      	uxtb	r1, r1
 23ff872:	4603      	mov	r3, r0
 23ff874:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff878:	b11a      	cbz	r2, 23ff882 <strchr+0x12>
 23ff87a:	428a      	cmp	r2, r1
 23ff87c:	d1f9      	bne.n	23ff872 <strchr+0x2>
 23ff87e:	4618      	mov	r0, r3
 23ff880:	4770      	bx	lr
 23ff882:	2900      	cmp	r1, #0
 23ff884:	bf18      	it	ne
 23ff886:	2300      	movne	r3, #0
 23ff888:	e7f9      	b.n	23ff87e <strchr+0xe>

023ff88a <strchrnul>:
 23ff88a:	b510      	push	{r4, lr}
 23ff88c:	4604      	mov	r4, r0
 23ff88e:	f7ff ffef 	bl	23ff870 <strchr>
 23ff892:	b918      	cbnz	r0, 23ff89c <strchrnul+0x12>
 23ff894:	4620      	mov	r0, r4
 23ff896:	f7fb fc81 	bl	23fb19c <strlen>
 23ff89a:	4420      	add	r0, r4
 23ff89c:	bd10      	pop	{r4, pc}

023ff89e <strcpy>:
 23ff89e:	4603      	mov	r3, r0
 23ff8a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff8a4:	f803 2b01 	strb.w	r2, [r3], #1
 23ff8a8:	2a00      	cmp	r2, #0
 23ff8aa:	d1f9      	bne.n	23ff8a0 <strcpy+0x2>
 23ff8ac:	4770      	bx	lr

023ff8ae <strncmp>:
 23ff8ae:	b510      	push	{r4, lr}
 23ff8b0:	b17a      	cbz	r2, 23ff8d2 <strncmp+0x24>
 23ff8b2:	4603      	mov	r3, r0
 23ff8b4:	3901      	subs	r1, #1
 23ff8b6:	1884      	adds	r4, r0, r2
 23ff8b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff8bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff8c0:	4290      	cmp	r0, r2
 23ff8c2:	d101      	bne.n	23ff8c8 <strncmp+0x1a>
 23ff8c4:	42a3      	cmp	r3, r4
 23ff8c6:	d101      	bne.n	23ff8cc <strncmp+0x1e>
 23ff8c8:	1a80      	subs	r0, r0, r2
 23ff8ca:	bd10      	pop	{r4, pc}
 23ff8cc:	2800      	cmp	r0, #0
 23ff8ce:	d1f3      	bne.n	23ff8b8 <strncmp+0xa>
 23ff8d0:	e7fa      	b.n	23ff8c8 <strncmp+0x1a>
 23ff8d2:	4610      	mov	r0, r2
 23ff8d4:	e7f9      	b.n	23ff8ca <strncmp+0x1c>

023ff8d6 <strrchr>:
 23ff8d6:	b538      	push	{r3, r4, r5, lr}
 23ff8d8:	4603      	mov	r3, r0
 23ff8da:	460c      	mov	r4, r1
 23ff8dc:	b969      	cbnz	r1, 23ff8fa <strrchr+0x24>
 23ff8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff8e2:	f7ff bfc5 	b.w	23ff870 <strchr>
 23ff8e6:	1c43      	adds	r3, r0, #1
 23ff8e8:	4605      	mov	r5, r0
 23ff8ea:	4621      	mov	r1, r4
 23ff8ec:	4618      	mov	r0, r3
 23ff8ee:	f7ff ffbf 	bl	23ff870 <strchr>
 23ff8f2:	2800      	cmp	r0, #0
 23ff8f4:	d1f7      	bne.n	23ff8e6 <strrchr+0x10>
 23ff8f6:	4628      	mov	r0, r5
 23ff8f8:	bd38      	pop	{r3, r4, r5, pc}
 23ff8fa:	2500      	movs	r5, #0
 23ff8fc:	e7f5      	b.n	23ff8ea <strrchr+0x14>
	...

023ff900 <_strtol_l.constprop.0>:
 23ff900:	2b01      	cmp	r3, #1
 23ff902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff906:	d001      	beq.n	23ff90c <_strtol_l.constprop.0+0xc>
 23ff908:	2b24      	cmp	r3, #36	; 0x24
 23ff90a:	d906      	bls.n	23ff91a <_strtol_l.constprop.0+0x1a>
 23ff90c:	f7fc fbb0 	bl	23fc070 <__errno>
 23ff910:	2316      	movs	r3, #22
 23ff912:	6003      	str	r3, [r0, #0]
 23ff914:	2000      	movs	r0, #0
 23ff916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff91a:	460d      	mov	r5, r1
 23ff91c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ffa00 <_strtol_l.constprop.0+0x100>
 23ff920:	462e      	mov	r6, r5
 23ff922:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff926:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff92a:	f017 0708 	ands.w	r7, r7, #8
 23ff92e:	d1f7      	bne.n	23ff920 <_strtol_l.constprop.0+0x20>
 23ff930:	2c2d      	cmp	r4, #45	; 0x2d
 23ff932:	d132      	bne.n	23ff99a <_strtol_l.constprop.0+0x9a>
 23ff934:	782c      	ldrb	r4, [r5, #0]
 23ff936:	2701      	movs	r7, #1
 23ff938:	1cb5      	adds	r5, r6, #2
 23ff93a:	2b00      	cmp	r3, #0
 23ff93c:	d05b      	beq.n	23ff9f6 <_strtol_l.constprop.0+0xf6>
 23ff93e:	2b10      	cmp	r3, #16
 23ff940:	d109      	bne.n	23ff956 <_strtol_l.constprop.0+0x56>
 23ff942:	2c30      	cmp	r4, #48	; 0x30
 23ff944:	d107      	bne.n	23ff956 <_strtol_l.constprop.0+0x56>
 23ff946:	782c      	ldrb	r4, [r5, #0]
 23ff948:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff94c:	2c58      	cmp	r4, #88	; 0x58
 23ff94e:	d14d      	bne.n	23ff9ec <_strtol_l.constprop.0+0xec>
 23ff950:	786c      	ldrb	r4, [r5, #1]
 23ff952:	2310      	movs	r3, #16
 23ff954:	3502      	adds	r5, #2
 23ff956:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff95a:	f04f 0c00 	mov.w	ip, #0
 23ff95e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff962:	4666      	mov	r6, ip
 23ff964:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff968:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff96c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff970:	f1be 0f09 	cmp.w	lr, #9
 23ff974:	d816      	bhi.n	23ff9a4 <_strtol_l.constprop.0+0xa4>
 23ff976:	4674      	mov	r4, lr
 23ff978:	42a3      	cmp	r3, r4
 23ff97a:	dd24      	ble.n	23ff9c6 <_strtol_l.constprop.0+0xc6>
 23ff97c:	f1bc 0f00 	cmp.w	ip, #0
 23ff980:	db1e      	blt.n	23ff9c0 <_strtol_l.constprop.0+0xc0>
 23ff982:	45b1      	cmp	r9, r6
 23ff984:	d31c      	bcc.n	23ff9c0 <_strtol_l.constprop.0+0xc0>
 23ff986:	d101      	bne.n	23ff98c <_strtol_l.constprop.0+0x8c>
 23ff988:	45a2      	cmp	sl, r4
 23ff98a:	db19      	blt.n	23ff9c0 <_strtol_l.constprop.0+0xc0>
 23ff98c:	fb06 4603 	mla	r6, r6, r3, r4
 23ff990:	f04f 0c01 	mov.w	ip, #1
 23ff994:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff998:	e7e8      	b.n	23ff96c <_strtol_l.constprop.0+0x6c>
 23ff99a:	2c2b      	cmp	r4, #43	; 0x2b
 23ff99c:	bf04      	itt	eq
 23ff99e:	782c      	ldrbeq	r4, [r5, #0]
 23ff9a0:	1cb5      	addeq	r5, r6, #2
 23ff9a2:	e7ca      	b.n	23ff93a <_strtol_l.constprop.0+0x3a>
 23ff9a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff9a8:	f1be 0f19 	cmp.w	lr, #25
 23ff9ac:	d801      	bhi.n	23ff9b2 <_strtol_l.constprop.0+0xb2>
 23ff9ae:	3c37      	subs	r4, #55	; 0x37
 23ff9b0:	e7e2      	b.n	23ff978 <_strtol_l.constprop.0+0x78>
 23ff9b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff9b6:	f1be 0f19 	cmp.w	lr, #25
 23ff9ba:	d804      	bhi.n	23ff9c6 <_strtol_l.constprop.0+0xc6>
 23ff9bc:	3c57      	subs	r4, #87	; 0x57
 23ff9be:	e7db      	b.n	23ff978 <_strtol_l.constprop.0+0x78>
 23ff9c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff9c4:	e7e6      	b.n	23ff994 <_strtol_l.constprop.0+0x94>
 23ff9c6:	f1bc 0f00 	cmp.w	ip, #0
 23ff9ca:	da05      	bge.n	23ff9d8 <_strtol_l.constprop.0+0xd8>
 23ff9cc:	2322      	movs	r3, #34	; 0x22
 23ff9ce:	4646      	mov	r6, r8
 23ff9d0:	6003      	str	r3, [r0, #0]
 23ff9d2:	b942      	cbnz	r2, 23ff9e6 <_strtol_l.constprop.0+0xe6>
 23ff9d4:	4630      	mov	r0, r6
 23ff9d6:	e79e      	b.n	23ff916 <_strtol_l.constprop.0+0x16>
 23ff9d8:	b107      	cbz	r7, 23ff9dc <_strtol_l.constprop.0+0xdc>
 23ff9da:	4276      	negs	r6, r6
 23ff9dc:	2a00      	cmp	r2, #0
 23ff9de:	d0f9      	beq.n	23ff9d4 <_strtol_l.constprop.0+0xd4>
 23ff9e0:	f1bc 0f00 	cmp.w	ip, #0
 23ff9e4:	d000      	beq.n	23ff9e8 <_strtol_l.constprop.0+0xe8>
 23ff9e6:	1e69      	subs	r1, r5, #1
 23ff9e8:	6011      	str	r1, [r2, #0]
 23ff9ea:	e7f3      	b.n	23ff9d4 <_strtol_l.constprop.0+0xd4>
 23ff9ec:	2430      	movs	r4, #48	; 0x30
 23ff9ee:	2b00      	cmp	r3, #0
 23ff9f0:	d1b1      	bne.n	23ff956 <_strtol_l.constprop.0+0x56>
 23ff9f2:	2308      	movs	r3, #8
 23ff9f4:	e7af      	b.n	23ff956 <_strtol_l.constprop.0+0x56>
 23ff9f6:	2c30      	cmp	r4, #48	; 0x30
 23ff9f8:	d0a5      	beq.n	23ff946 <_strtol_l.constprop.0+0x46>
 23ff9fa:	230a      	movs	r3, #10
 23ff9fc:	e7ab      	b.n	23ff956 <_strtol_l.constprop.0+0x56>
 23ff9fe:	bf00      	nop
 23ffa00:	023ffec9 	.word	0x023ffec9

023ffa04 <strtol>:
 23ffa04:	4613      	mov	r3, r2
 23ffa06:	460a      	mov	r2, r1
 23ffa08:	4601      	mov	r1, r0
 23ffa0a:	4802      	ldr	r0, [pc, #8]	; (23ffa14 <strtol+0x10>)
 23ffa0c:	6800      	ldr	r0, [r0, #0]
 23ffa0e:	f7ff bf77 	b.w	23ff900 <_strtol_l.constprop.0>
 23ffa12:	bf00      	nop
 23ffa14:	1007adbc 	.word	0x1007adbc

023ffa18 <__register_exitproc>:
 23ffa18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffa1c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffadc <__register_exitproc+0xc4>
 23ffa20:	4606      	mov	r6, r0
 23ffa22:	461f      	mov	r7, r3
 23ffa24:	460d      	mov	r5, r1
 23ffa26:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa2a:	4691      	mov	r9, r2
 23ffa2c:	f000 f858 	bl	23ffae0 <__retarget_lock_acquire_recursive>
 23ffa30:	4b26      	ldr	r3, [pc, #152]	; (23ffacc <__register_exitproc+0xb4>)
 23ffa32:	681c      	ldr	r4, [r3, #0]
 23ffa34:	b934      	cbnz	r4, 23ffa44 <__register_exitproc+0x2c>
 23ffa36:	4c26      	ldr	r4, [pc, #152]	; (23ffad0 <__register_exitproc+0xb8>)
 23ffa38:	601c      	str	r4, [r3, #0]
 23ffa3a:	4b26      	ldr	r3, [pc, #152]	; (23ffad4 <__register_exitproc+0xbc>)
 23ffa3c:	b113      	cbz	r3, 23ffa44 <__register_exitproc+0x2c>
 23ffa3e:	681b      	ldr	r3, [r3, #0]
 23ffa40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffa44:	6863      	ldr	r3, [r4, #4]
 23ffa46:	2b1f      	cmp	r3, #31
 23ffa48:	dd07      	ble.n	23ffa5a <__register_exitproc+0x42>
 23ffa4a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa4e:	f000 f849 	bl	23ffae4 <__retarget_lock_release_recursive>
 23ffa52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffa5a:	b35e      	cbz	r6, 23ffab4 <__register_exitproc+0x9c>
 23ffa5c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffa60:	b988      	cbnz	r0, 23ffa86 <__register_exitproc+0x6e>
 23ffa62:	4b1d      	ldr	r3, [pc, #116]	; (23ffad8 <__register_exitproc+0xc0>)
 23ffa64:	b923      	cbnz	r3, 23ffa70 <__register_exitproc+0x58>
 23ffa66:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa6a:	f000 f83a 	bl	23ffae2 <__retarget_lock_release>
 23ffa6e:	e7f0      	b.n	23ffa52 <__register_exitproc+0x3a>
 23ffa70:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffa74:	f7fc fac4 	bl	23fc000 <malloc>
 23ffa78:	2800      	cmp	r0, #0
 23ffa7a:	d0f4      	beq.n	23ffa66 <__register_exitproc+0x4e>
 23ffa7c:	2300      	movs	r3, #0
 23ffa7e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffa82:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffa86:	6863      	ldr	r3, [r4, #4]
 23ffa88:	2201      	movs	r2, #1
 23ffa8a:	2e02      	cmp	r6, #2
 23ffa8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffa90:	fa02 f203 	lsl.w	r2, r2, r3
 23ffa94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffa98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffa9c:	ea43 0302 	orr.w	r3, r3, r2
 23ffaa0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffaa4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffaa8:	bf02      	ittt	eq
 23ffaaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffaae:	4313      	orreq	r3, r2
 23ffab0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffab4:	6863      	ldr	r3, [r4, #4]
 23ffab6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffaba:	1c5a      	adds	r2, r3, #1
 23ffabc:	3302      	adds	r3, #2
 23ffabe:	6062      	str	r2, [r4, #4]
 23ffac0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffac4:	f000 f80e 	bl	23ffae4 <__retarget_lock_release_recursive>
 23ffac8:	2000      	movs	r0, #0
 23ffaca:	e7c4      	b.n	23ffa56 <__register_exitproc+0x3e>
 23ffacc:	1007afe0 	.word	0x1007afe0
 23ffad0:	1007af54 	.word	0x1007af54
 23ffad4:	00000000 	.word	0x00000000
 23ffad8:	023fc001 	.word	0x023fc001
 23ffadc:	1007ae20 	.word	0x1007ae20

023ffae0 <__retarget_lock_acquire_recursive>:
 23ffae0:	4770      	bx	lr

023ffae2 <__retarget_lock_release>:
 23ffae2:	4770      	bx	lr

023ffae4 <__retarget_lock_release_recursive>:
 23ffae4:	4770      	bx	lr
	...

023ffae8 <dynalib_user>:
 23ffae8:	b1ad 023f b1d5 023f b1d9 023f 0000 0000     ..?...?...?.....
 23ffaf8:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffb08:	7574 6c61 5300 7265 6169 206c 6f63 6e6e     tual.Serial conn
 23ffb18:	6365 6574 2064 726f 7420 6d69 6465 6f20     ected or timed o
 23ffb28:	7475 0021 6425 202c 6425 202c 6425 0000     ut!.%d, %d, %d..

023ffb38 <_ZTVN5spark10LogHandlerE>:
	...
 23ffb48:	b1f5 023f b21d 023f                         ..?...?.

023ffb50 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffb58:	b221 023f b255 023f d329 023f d4d1 023f     !.?.U.?.).?...?.

023ffb68 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb70:	c1b3 023f c1a9 023f c19f 023f c195 023f     ..?...?...?...?.
 23ffb80:	c189 023f c17d 023f d6bd 023f d6c5 023f     ..?.}.?...?...?.
 23ffb90:	c171 023f c169 023f c15f 023f c155 023f     q.?.i.?._.?.U.?.
 23ffba0:	d6f5 023f                                   ..?.

023ffba4 <_ZTV7TwoWire>:
	...
 23ffbac:	c1d1 023f c21b 023f c1f3 023f c1d3 023f     ..?...?...?...?.
 23ffbbc:	c1fb 023f c203 023f c20b 023f c213 023f     ..?...?...?...?.

023ffbcc <_ZTV9IPAddress>:
	...
 23ffbd4:	c275 023f c265 023f c267 023f 7525 7500     u.?.e.?.g.?.%u.u
 23ffbe4:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
 23ffbf4:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
 23ffc04:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 23ffc14:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 23ffc24:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 23ffc34:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 23ffc44:	006d 0066 6e6c 6600 006e 0074 6f63 6564     m.f.ln.fn.t.code
 23ffc54:	6400 7465 6961 006c                         .detail.

023ffc5c <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc64:	c721 023f c747 023f c705 023f c383 023f     !.?.G.?...?...?.

023ffc74 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc7c:	cbd5 023f cbed 023f d329 023f d4d1 023f     ..?...?.).?...?.

023ffc8c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc94:	cc01 023f cc15 023f d509 023f c70d 023f     ..?...?...?...?.

023ffca4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcac:	c71f 023f c755 023f d28d 023f c70f 023f     ..?.U.?...?...?.

023ffcbc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcc4:	c71d 023f c763 023f cb3d 023f c785 023f     ..?.c.?.=.?...?.

023ffcd4 <_ZTVN5spark12NetworkClassE>:
	...
 23ffcdc:	d67d 023f d687 023f d691 023f d69b 023f     }.?...?...?...?.
 23ffcec:	d6a5 023f d6b1 023f d6bd 023f d6c5 023f     ..?...?...?...?.
 23ffcfc:	d6cd 023f d6d9 023f d6e1 023f d6eb 023f     ..?...?...?...?.
 23ffd0c:	d6f5 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffd1c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffd2c <_ZTV11USARTSerial>:
	...
 23ffd34:	dac9 023f db35 023f db0d 023f d7e1 023f     ..?.5.?...?...?.
 23ffd44:	dadd 023f daf9 023f daeb 023f db07 023f     ..?...?...?...?.
 23ffd54:	dacb 023f dacf 023f                         ..?...?.

023ffd5c <_ZTV9USBSerial>:
	...
 23ffd64:	db8d 023f dbf5 023f dbcb 023f d7e1 023f     ..?...?...?...?.
 23ffd74:	dbbd 023f db8f 023f db9f 023f dbef 023f     ..?...?...?...?.
 23ffd84:	dbaf 023f db87 023f                         ..?...?.

023ffd8c <_ZTVN5spark9WiFiClassE>:
	...
 23ffd94:	dcf7 023f dced 023f dce3 023f dc99 023f     ..?...?...?...?.
 23ffda4:	dcd7 023f dccb 023f d6bd 023f d6c5 023f     ..?...?...?...?.
 23ffdb4:	dcbf 023f dcb7 023f dcad 023f dca3 023f     ..?...?...?...?.
 23ffdc4:	d6f5 023f                                   ..?.

023ffdc8 <_ZSt7nothrow>:
	...

023ffdd0 <CSWTCH.8>:
 23ffdd0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
 23ffde0:	21d2 7f33 d97c c002                         .!3.|...

023ffde8 <CSWTCH.9>:
 23ffde8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
 23ffdf8:	2d18 5444 21fb c009 0000 0000 0000 0000     .-DT.!..........

023ffe08 <atanhi>:
 23ffe08:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 23ffe18:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

023ffe28 <atanlo>:
 23ffe28:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 23ffe38:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

023ffe48 <TWO52>:
 23ffe48:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
 23ffe58:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 23ffe68:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
 23ffe78:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
 23ffe88:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
 23ffe98:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
 23ffea8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
 23ffeb8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

023ffec8 <_ctype_>:
 23ffec8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffed8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffee8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffef8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff08:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff18:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff28:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff38:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fb485 	.word	0x023fb485
 23fffd0:	023fc145 	.word	0x023fc145
 23fffd4:	023fc1bd 	.word	0x023fc1bd
 23fffd8:	023fd319 	.word	0x023fd319
 23fffdc:	023fd7cd 	.word	0x023fd7cd
 23fffe0:	023fd8ed 	.word	0x023fd8ed
 23fffe4:	023fda91 	.word	0x023fda91
 23fffe8:	023fdab5 	.word	0x023fdab5
 23fffec:	023fdd01 	.word	0x023fdd01
