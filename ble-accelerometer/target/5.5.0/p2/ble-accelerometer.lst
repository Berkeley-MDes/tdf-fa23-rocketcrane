
/Users/lingxiu/Documents/0-documents/2023-2024-MDes/TDF/tdf-fa23-rocketcrane/ble-accelerometer/target/5.5.0/p2/ble-accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f8000  085f8000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f8018  085f8018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f8aa8  085f80a8  00008aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00007540  023f8ab0  085f80b0  00008ab0  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         0000007c  10079d70  085ff5f0  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011fc  10079dec  10079dec  00029dec  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff66c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000948  085ff670  085ff670  0001f670  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f670  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00156084  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00015491  00000000  00000000  00176084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00040c9e  00000000  00000000  0018b515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003318  00000000  00000000  001cc1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000c050  00000000  00000000  001cf4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025fbb  00000000  00000000  001db51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000440da  00000000  00000000  002014d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d19bf  00000000  00000000  002455b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009888  00000000  00000000  00316f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f8018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f8018:	4813      	ldr	r0, [pc, #76]	; (85f8068 <module_user_pre_init+0x50>)
 85f801a:	4914      	ldr	r1, [pc, #80]	; (85f806c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f801c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f801e:	4288      	cmp	r0, r1
 85f8020:	d005      	beq.n	85f802e <module_user_pre_init+0x16>
 85f8022:	4a13      	ldr	r2, [pc, #76]	; (85f8070 <module_user_pre_init+0x58>)
 85f8024:	4282      	cmp	r2, r0
 85f8026:	d002      	beq.n	85f802e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f8028:	4b12      	ldr	r3, [pc, #72]	; (85f8074 <module_user_pre_init+0x5c>)
 85f802a:	1a12      	subs	r2, r2, r0
 85f802c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f802e:	4812      	ldr	r0, [pc, #72]	; (85f8078 <module_user_pre_init+0x60>)
 85f8030:	4a12      	ldr	r2, [pc, #72]	; (85f807c <module_user_pre_init+0x64>)
 85f8032:	2100      	movs	r1, #0
 85f8034:	4b12      	ldr	r3, [pc, #72]	; (85f8080 <module_user_pre_init+0x68>)
 85f8036:	1a12      	subs	r2, r2, r0
 85f8038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f803a:	4812      	ldr	r0, [pc, #72]	; (85f8084 <module_user_pre_init+0x6c>)
 85f803c:	4912      	ldr	r1, [pc, #72]	; (85f8088 <module_user_pre_init+0x70>)
 85f803e:	4288      	cmp	r0, r1
 85f8040:	d005      	beq.n	85f804e <module_user_pre_init+0x36>
 85f8042:	4a12      	ldr	r2, [pc, #72]	; (85f808c <module_user_pre_init+0x74>)
 85f8044:	4282      	cmp	r2, r0
 85f8046:	d002      	beq.n	85f804e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f8048:	4b0a      	ldr	r3, [pc, #40]	; (85f8074 <module_user_pre_init+0x5c>)
 85f804a:	1a12      	subs	r2, r2, r0
 85f804c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f804e:	4810      	ldr	r0, [pc, #64]	; (85f8090 <module_user_pre_init+0x78>)
 85f8050:	4910      	ldr	r1, [pc, #64]	; (85f8094 <module_user_pre_init+0x7c>)
 85f8052:	4288      	cmp	r0, r1
 85f8054:	d005      	beq.n	85f8062 <module_user_pre_init+0x4a>
 85f8056:	4a10      	ldr	r2, [pc, #64]	; (85f8098 <module_user_pre_init+0x80>)
 85f8058:	4282      	cmp	r2, r0
 85f805a:	d002      	beq.n	85f8062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f805c:	4b05      	ldr	r3, [pc, #20]	; (85f8074 <module_user_pre_init+0x5c>)
 85f805e:	1a12      	subs	r2, r2, r0
 85f8060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f8062:	4801      	ldr	r0, [pc, #4]	; (85f8068 <module_user_pre_init+0x50>)
 85f8064:	bd08      	pop	{r3, pc}
 85f8066:	bf00      	nop
 85f8068:	10079d70 	.word	0x10079d70
 85f806c:	085ff5f0 	.word	0x085ff5f0
 85f8070:	10079dec 	.word	0x10079dec
 85f8074:	10110d2d 	.word	0x10110d2d
 85f8078:	10079dec 	.word	0x10079dec
 85f807c:	1007afe8 	.word	0x1007afe8
 85f8080:	10110ea1 	.word	0x10110ea1
 85f8084:	023f8aa8 	.word	0x023f8aa8
 85f8088:	085f80a8 	.word	0x085f80a8
 85f808c:	023f8ab0 	.word	0x023f8ab0
 85f8090:	023f8ab0 	.word	0x023f8ab0
 85f8094:	085f80b0 	.word	0x085f80b0
 85f8098:	023ffff0 	.word	0x023ffff0

085f809c <dynalib_preinit>:
 85f809c:	085f8019 00000000                       .._.....

Disassembly of section .psram_text:

023f8ab0 <__aeabi_drsub>:
 23f8ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f8ab4:	e002      	b.n	23f8abc <__adddf3>
 23f8ab6:	bf00      	nop

023f8ab8 <__aeabi_dsub>:
 23f8ab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f8abc <__adddf3>:
 23f8abc:	b530      	push	{r4, r5, lr}
 23f8abe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f8ac2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f8ac6:	ea94 0f05 	teq	r4, r5
 23f8aca:	bf08      	it	eq
 23f8acc:	ea90 0f02 	teqeq	r0, r2
 23f8ad0:	bf1f      	itttt	ne
 23f8ad2:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f8ad6:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f8ada:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f8ade:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f8ae2:	f000 80e2 	beq.w	23f8caa <__adddf3+0x1ee>
 23f8ae6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f8aea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f8aee:	bfb8      	it	lt
 23f8af0:	426d      	neglt	r5, r5
 23f8af2:	dd0c      	ble.n	23f8b0e <__adddf3+0x52>
 23f8af4:	442c      	add	r4, r5
 23f8af6:	ea80 0202 	eor.w	r2, r0, r2
 23f8afa:	ea81 0303 	eor.w	r3, r1, r3
 23f8afe:	ea82 0000 	eor.w	r0, r2, r0
 23f8b02:	ea83 0101 	eor.w	r1, r3, r1
 23f8b06:	ea80 0202 	eor.w	r2, r0, r2
 23f8b0a:	ea81 0303 	eor.w	r3, r1, r3
 23f8b0e:	2d36      	cmp	r5, #54	; 0x36
 23f8b10:	bf88      	it	hi
 23f8b12:	bd30      	pophi	{r4, r5, pc}
 23f8b14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f8b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f8b1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f8b20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f8b24:	d002      	beq.n	23f8b2c <__adddf3+0x70>
 23f8b26:	4240      	negs	r0, r0
 23f8b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f8b2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f8b30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f8b34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f8b38:	d002      	beq.n	23f8b40 <__adddf3+0x84>
 23f8b3a:	4252      	negs	r2, r2
 23f8b3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f8b40:	ea94 0f05 	teq	r4, r5
 23f8b44:	f000 80a7 	beq.w	23f8c96 <__adddf3+0x1da>
 23f8b48:	f1a4 0401 	sub.w	r4, r4, #1
 23f8b4c:	f1d5 0e20 	rsbs	lr, r5, #32
 23f8b50:	db0d      	blt.n	23f8b6e <__adddf3+0xb2>
 23f8b52:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f8b56:	fa22 f205 	lsr.w	r2, r2, r5
 23f8b5a:	1880      	adds	r0, r0, r2
 23f8b5c:	f141 0100 	adc.w	r1, r1, #0
 23f8b60:	fa03 f20e 	lsl.w	r2, r3, lr
 23f8b64:	1880      	adds	r0, r0, r2
 23f8b66:	fa43 f305 	asr.w	r3, r3, r5
 23f8b6a:	4159      	adcs	r1, r3
 23f8b6c:	e00e      	b.n	23f8b8c <__adddf3+0xd0>
 23f8b6e:	f1a5 0520 	sub.w	r5, r5, #32
 23f8b72:	f10e 0e20 	add.w	lr, lr, #32
 23f8b76:	2a01      	cmp	r2, #1
 23f8b78:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f8b7c:	bf28      	it	cs
 23f8b7e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f8b82:	fa43 f305 	asr.w	r3, r3, r5
 23f8b86:	18c0      	adds	r0, r0, r3
 23f8b88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f8b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8b90:	d507      	bpl.n	23f8ba2 <__adddf3+0xe6>
 23f8b92:	f04f 0e00 	mov.w	lr, #0
 23f8b96:	f1dc 0c00 	rsbs	ip, ip, #0
 23f8b9a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f8b9e:	eb6e 0101 	sbc.w	r1, lr, r1
 23f8ba2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f8ba6:	d31b      	bcc.n	23f8be0 <__adddf3+0x124>
 23f8ba8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f8bac:	d30c      	bcc.n	23f8bc8 <__adddf3+0x10c>
 23f8bae:	0849      	lsrs	r1, r1, #1
 23f8bb0:	ea5f 0030 	movs.w	r0, r0, rrx
 23f8bb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f8bb8:	f104 0401 	add.w	r4, r4, #1
 23f8bbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f8bc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f8bc4:	f080 809a 	bcs.w	23f8cfc <__adddf3+0x240>
 23f8bc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f8bcc:	bf08      	it	eq
 23f8bce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f8bd2:	f150 0000 	adcs.w	r0, r0, #0
 23f8bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f8bda:	ea41 0105 	orr.w	r1, r1, r5
 23f8bde:	bd30      	pop	{r4, r5, pc}
 23f8be0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f8be4:	4140      	adcs	r0, r0
 23f8be6:	eb41 0101 	adc.w	r1, r1, r1
 23f8bea:	3c01      	subs	r4, #1
 23f8bec:	bf28      	it	cs
 23f8bee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f8bf2:	d2e9      	bcs.n	23f8bc8 <__adddf3+0x10c>
 23f8bf4:	f091 0f00 	teq	r1, #0
 23f8bf8:	bf04      	itt	eq
 23f8bfa:	4601      	moveq	r1, r0
 23f8bfc:	2000      	moveq	r0, #0
 23f8bfe:	fab1 f381 	clz	r3, r1
 23f8c02:	bf08      	it	eq
 23f8c04:	3320      	addeq	r3, #32
 23f8c06:	f1a3 030b 	sub.w	r3, r3, #11
 23f8c0a:	f1b3 0220 	subs.w	r2, r3, #32
 23f8c0e:	da0c      	bge.n	23f8c2a <__adddf3+0x16e>
 23f8c10:	320c      	adds	r2, #12
 23f8c12:	dd08      	ble.n	23f8c26 <__adddf3+0x16a>
 23f8c14:	f102 0c14 	add.w	ip, r2, #20
 23f8c18:	f1c2 020c 	rsb	r2, r2, #12
 23f8c1c:	fa01 f00c 	lsl.w	r0, r1, ip
 23f8c20:	fa21 f102 	lsr.w	r1, r1, r2
 23f8c24:	e00c      	b.n	23f8c40 <__adddf3+0x184>
 23f8c26:	f102 0214 	add.w	r2, r2, #20
 23f8c2a:	bfd8      	it	le
 23f8c2c:	f1c2 0c20 	rsble	ip, r2, #32
 23f8c30:	fa01 f102 	lsl.w	r1, r1, r2
 23f8c34:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f8c38:	bfdc      	itt	le
 23f8c3a:	ea41 010c 	orrle.w	r1, r1, ip
 23f8c3e:	4090      	lslle	r0, r2
 23f8c40:	1ae4      	subs	r4, r4, r3
 23f8c42:	bfa2      	ittt	ge
 23f8c44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f8c48:	4329      	orrge	r1, r5
 23f8c4a:	bd30      	popge	{r4, r5, pc}
 23f8c4c:	ea6f 0404 	mvn.w	r4, r4
 23f8c50:	3c1f      	subs	r4, #31
 23f8c52:	da1c      	bge.n	23f8c8e <__adddf3+0x1d2>
 23f8c54:	340c      	adds	r4, #12
 23f8c56:	dc0e      	bgt.n	23f8c76 <__adddf3+0x1ba>
 23f8c58:	f104 0414 	add.w	r4, r4, #20
 23f8c5c:	f1c4 0220 	rsb	r2, r4, #32
 23f8c60:	fa20 f004 	lsr.w	r0, r0, r4
 23f8c64:	fa01 f302 	lsl.w	r3, r1, r2
 23f8c68:	ea40 0003 	orr.w	r0, r0, r3
 23f8c6c:	fa21 f304 	lsr.w	r3, r1, r4
 23f8c70:	ea45 0103 	orr.w	r1, r5, r3
 23f8c74:	bd30      	pop	{r4, r5, pc}
 23f8c76:	f1c4 040c 	rsb	r4, r4, #12
 23f8c7a:	f1c4 0220 	rsb	r2, r4, #32
 23f8c7e:	fa20 f002 	lsr.w	r0, r0, r2
 23f8c82:	fa01 f304 	lsl.w	r3, r1, r4
 23f8c86:	ea40 0003 	orr.w	r0, r0, r3
 23f8c8a:	4629      	mov	r1, r5
 23f8c8c:	bd30      	pop	{r4, r5, pc}
 23f8c8e:	fa21 f004 	lsr.w	r0, r1, r4
 23f8c92:	4629      	mov	r1, r5
 23f8c94:	bd30      	pop	{r4, r5, pc}
 23f8c96:	f094 0f00 	teq	r4, #0
 23f8c9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f8c9e:	bf06      	itte	eq
 23f8ca0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f8ca4:	3401      	addeq	r4, #1
 23f8ca6:	3d01      	subne	r5, #1
 23f8ca8:	e74e      	b.n	23f8b48 <__adddf3+0x8c>
 23f8caa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f8cae:	bf18      	it	ne
 23f8cb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f8cb4:	d029      	beq.n	23f8d0a <__adddf3+0x24e>
 23f8cb6:	ea94 0f05 	teq	r4, r5
 23f8cba:	bf08      	it	eq
 23f8cbc:	ea90 0f02 	teqeq	r0, r2
 23f8cc0:	d005      	beq.n	23f8cce <__adddf3+0x212>
 23f8cc2:	ea54 0c00 	orrs.w	ip, r4, r0
 23f8cc6:	bf04      	itt	eq
 23f8cc8:	4619      	moveq	r1, r3
 23f8cca:	4610      	moveq	r0, r2
 23f8ccc:	bd30      	pop	{r4, r5, pc}
 23f8cce:	ea91 0f03 	teq	r1, r3
 23f8cd2:	bf1e      	ittt	ne
 23f8cd4:	2100      	movne	r1, #0
 23f8cd6:	2000      	movne	r0, #0
 23f8cd8:	bd30      	popne	{r4, r5, pc}
 23f8cda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f8cde:	d105      	bne.n	23f8cec <__adddf3+0x230>
 23f8ce0:	0040      	lsls	r0, r0, #1
 23f8ce2:	4149      	adcs	r1, r1
 23f8ce4:	bf28      	it	cs
 23f8ce6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f8cea:	bd30      	pop	{r4, r5, pc}
 23f8cec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f8cf0:	bf3c      	itt	cc
 23f8cf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f8cf6:	bd30      	popcc	{r4, r5, pc}
 23f8cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8cfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f8d00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f8d04:	f04f 0000 	mov.w	r0, #0
 23f8d08:	bd30      	pop	{r4, r5, pc}
 23f8d0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f8d0e:	bf1a      	itte	ne
 23f8d10:	4619      	movne	r1, r3
 23f8d12:	4610      	movne	r0, r2
 23f8d14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f8d18:	bf1c      	itt	ne
 23f8d1a:	460b      	movne	r3, r1
 23f8d1c:	4602      	movne	r2, r0
 23f8d1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f8d22:	bf06      	itte	eq
 23f8d24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f8d28:	ea91 0f03 	teqeq	r1, r3
 23f8d2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f8d30:	bd30      	pop	{r4, r5, pc}
 23f8d32:	bf00      	nop

023f8d34 <__aeabi_ui2d>:
 23f8d34:	f090 0f00 	teq	r0, #0
 23f8d38:	bf04      	itt	eq
 23f8d3a:	2100      	moveq	r1, #0
 23f8d3c:	4770      	bxeq	lr
 23f8d3e:	b530      	push	{r4, r5, lr}
 23f8d40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8d44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8d48:	f04f 0500 	mov.w	r5, #0
 23f8d4c:	f04f 0100 	mov.w	r1, #0
 23f8d50:	e750      	b.n	23f8bf4 <__adddf3+0x138>
 23f8d52:	bf00      	nop

023f8d54 <__aeabi_i2d>:
 23f8d54:	f090 0f00 	teq	r0, #0
 23f8d58:	bf04      	itt	eq
 23f8d5a:	2100      	moveq	r1, #0
 23f8d5c:	4770      	bxeq	lr
 23f8d5e:	b530      	push	{r4, r5, lr}
 23f8d60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8d64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8d68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f8d6c:	bf48      	it	mi
 23f8d6e:	4240      	negmi	r0, r0
 23f8d70:	f04f 0100 	mov.w	r1, #0
 23f8d74:	e73e      	b.n	23f8bf4 <__adddf3+0x138>
 23f8d76:	bf00      	nop

023f8d78 <__aeabi_f2d>:
 23f8d78:	0042      	lsls	r2, r0, #1
 23f8d7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f8d7e:	ea4f 0131 	mov.w	r1, r1, rrx
 23f8d82:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f8d86:	bf1f      	itttt	ne
 23f8d88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f8d8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f8d90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f8d94:	4770      	bxne	lr
 23f8d96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f8d9a:	bf08      	it	eq
 23f8d9c:	4770      	bxeq	lr
 23f8d9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f8da2:	bf04      	itt	eq
 23f8da4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f8da8:	4770      	bxeq	lr
 23f8daa:	b530      	push	{r4, r5, lr}
 23f8dac:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f8db0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8db4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f8db8:	e71c      	b.n	23f8bf4 <__adddf3+0x138>
 23f8dba:	bf00      	nop

023f8dbc <__aeabi_ul2d>:
 23f8dbc:	ea50 0201 	orrs.w	r2, r0, r1
 23f8dc0:	bf08      	it	eq
 23f8dc2:	4770      	bxeq	lr
 23f8dc4:	b530      	push	{r4, r5, lr}
 23f8dc6:	f04f 0500 	mov.w	r5, #0
 23f8dca:	e00a      	b.n	23f8de2 <__aeabi_l2d+0x16>

023f8dcc <__aeabi_l2d>:
 23f8dcc:	ea50 0201 	orrs.w	r2, r0, r1
 23f8dd0:	bf08      	it	eq
 23f8dd2:	4770      	bxeq	lr
 23f8dd4:	b530      	push	{r4, r5, lr}
 23f8dd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f8dda:	d502      	bpl.n	23f8de2 <__aeabi_l2d+0x16>
 23f8ddc:	4240      	negs	r0, r0
 23f8dde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f8de2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8de6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8dea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f8dee:	f43f aed8 	beq.w	23f8ba2 <__adddf3+0xe6>
 23f8df2:	f04f 0203 	mov.w	r2, #3
 23f8df6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f8dfa:	bf18      	it	ne
 23f8dfc:	3203      	addne	r2, #3
 23f8dfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f8e02:	bf18      	it	ne
 23f8e04:	3203      	addne	r2, #3
 23f8e06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f8e0a:	f1c2 0320 	rsb	r3, r2, #32
 23f8e0e:	fa00 fc03 	lsl.w	ip, r0, r3
 23f8e12:	fa20 f002 	lsr.w	r0, r0, r2
 23f8e16:	fa01 fe03 	lsl.w	lr, r1, r3
 23f8e1a:	ea40 000e 	orr.w	r0, r0, lr
 23f8e1e:	fa21 f102 	lsr.w	r1, r1, r2
 23f8e22:	4414      	add	r4, r2
 23f8e24:	e6bd      	b.n	23f8ba2 <__adddf3+0xe6>
 23f8e26:	bf00      	nop

023f8e28 <__aeabi_dmul>:
 23f8e28:	b570      	push	{r4, r5, r6, lr}
 23f8e2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f8e2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f8e32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f8e36:	bf1d      	ittte	ne
 23f8e38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f8e3c:	ea94 0f0c 	teqne	r4, ip
 23f8e40:	ea95 0f0c 	teqne	r5, ip
 23f8e44:	f000 f8de 	bleq	23f9004 <__aeabi_dmul+0x1dc>
 23f8e48:	442c      	add	r4, r5
 23f8e4a:	ea81 0603 	eor.w	r6, r1, r3
 23f8e4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f8e52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f8e56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f8e5a:	bf18      	it	ne
 23f8e5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f8e60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f8e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f8e68:	d038      	beq.n	23f8edc <__aeabi_dmul+0xb4>
 23f8e6a:	fba0 ce02 	umull	ip, lr, r0, r2
 23f8e6e:	f04f 0500 	mov.w	r5, #0
 23f8e72:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f8e76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f8e7a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f8e7e:	f04f 0600 	mov.w	r6, #0
 23f8e82:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f8e86:	f09c 0f00 	teq	ip, #0
 23f8e8a:	bf18      	it	ne
 23f8e8c:	f04e 0e01 	orrne.w	lr, lr, #1
 23f8e90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f8e94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f8e98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f8e9c:	d204      	bcs.n	23f8ea8 <__aeabi_dmul+0x80>
 23f8e9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f8ea2:	416d      	adcs	r5, r5
 23f8ea4:	eb46 0606 	adc.w	r6, r6, r6
 23f8ea8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f8eac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f8eb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f8eb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f8eb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f8ebc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f8ec0:	bf88      	it	hi
 23f8ec2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f8ec6:	d81e      	bhi.n	23f8f06 <__aeabi_dmul+0xde>
 23f8ec8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f8ecc:	bf08      	it	eq
 23f8ece:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f8ed2:	f150 0000 	adcs.w	r0, r0, #0
 23f8ed6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f8eda:	bd70      	pop	{r4, r5, r6, pc}
 23f8edc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f8ee0:	ea46 0101 	orr.w	r1, r6, r1
 23f8ee4:	ea40 0002 	orr.w	r0, r0, r2
 23f8ee8:	ea81 0103 	eor.w	r1, r1, r3
 23f8eec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f8ef0:	bfc2      	ittt	gt
 23f8ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f8ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f8efa:	bd70      	popgt	{r4, r5, r6, pc}
 23f8efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f8f00:	f04f 0e00 	mov.w	lr, #0
 23f8f04:	3c01      	subs	r4, #1
 23f8f06:	f300 80ab 	bgt.w	23f9060 <__aeabi_dmul+0x238>
 23f8f0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f8f0e:	bfde      	ittt	le
 23f8f10:	2000      	movle	r0, #0
 23f8f12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f8f16:	bd70      	pople	{r4, r5, r6, pc}
 23f8f18:	f1c4 0400 	rsb	r4, r4, #0
 23f8f1c:	3c20      	subs	r4, #32
 23f8f1e:	da35      	bge.n	23f8f8c <__aeabi_dmul+0x164>
 23f8f20:	340c      	adds	r4, #12
 23f8f22:	dc1b      	bgt.n	23f8f5c <__aeabi_dmul+0x134>
 23f8f24:	f104 0414 	add.w	r4, r4, #20
 23f8f28:	f1c4 0520 	rsb	r5, r4, #32
 23f8f2c:	fa00 f305 	lsl.w	r3, r0, r5
 23f8f30:	fa20 f004 	lsr.w	r0, r0, r4
 23f8f34:	fa01 f205 	lsl.w	r2, r1, r5
 23f8f38:	ea40 0002 	orr.w	r0, r0, r2
 23f8f3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f8f40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f8f44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f8f48:	fa21 f604 	lsr.w	r6, r1, r4
 23f8f4c:	eb42 0106 	adc.w	r1, r2, r6
 23f8f50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f8f54:	bf08      	it	eq
 23f8f56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f8f5a:	bd70      	pop	{r4, r5, r6, pc}
 23f8f5c:	f1c4 040c 	rsb	r4, r4, #12
 23f8f60:	f1c4 0520 	rsb	r5, r4, #32
 23f8f64:	fa00 f304 	lsl.w	r3, r0, r4
 23f8f68:	fa20 f005 	lsr.w	r0, r0, r5
 23f8f6c:	fa01 f204 	lsl.w	r2, r1, r4
 23f8f70:	ea40 0002 	orr.w	r0, r0, r2
 23f8f74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f8f78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f8f7c:	f141 0100 	adc.w	r1, r1, #0
 23f8f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f8f84:	bf08      	it	eq
 23f8f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f8f8a:	bd70      	pop	{r4, r5, r6, pc}
 23f8f8c:	f1c4 0520 	rsb	r5, r4, #32
 23f8f90:	fa00 f205 	lsl.w	r2, r0, r5
 23f8f94:	ea4e 0e02 	orr.w	lr, lr, r2
 23f8f98:	fa20 f304 	lsr.w	r3, r0, r4
 23f8f9c:	fa01 f205 	lsl.w	r2, r1, r5
 23f8fa0:	ea43 0302 	orr.w	r3, r3, r2
 23f8fa4:	fa21 f004 	lsr.w	r0, r1, r4
 23f8fa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f8fac:	fa21 f204 	lsr.w	r2, r1, r4
 23f8fb0:	ea20 0002 	bic.w	r0, r0, r2
 23f8fb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f8fb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f8fbc:	bf08      	it	eq
 23f8fbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f8fc2:	bd70      	pop	{r4, r5, r6, pc}
 23f8fc4:	f094 0f00 	teq	r4, #0
 23f8fc8:	d10f      	bne.n	23f8fea <__aeabi_dmul+0x1c2>
 23f8fca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f8fce:	0040      	lsls	r0, r0, #1
 23f8fd0:	eb41 0101 	adc.w	r1, r1, r1
 23f8fd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f8fd8:	bf08      	it	eq
 23f8fda:	3c01      	subeq	r4, #1
 23f8fdc:	d0f7      	beq.n	23f8fce <__aeabi_dmul+0x1a6>
 23f8fde:	ea41 0106 	orr.w	r1, r1, r6
 23f8fe2:	f095 0f00 	teq	r5, #0
 23f8fe6:	bf18      	it	ne
 23f8fe8:	4770      	bxne	lr
 23f8fea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f8fee:	0052      	lsls	r2, r2, #1
 23f8ff0:	eb43 0303 	adc.w	r3, r3, r3
 23f8ff4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f8ff8:	bf08      	it	eq
 23f8ffa:	3d01      	subeq	r5, #1
 23f8ffc:	d0f7      	beq.n	23f8fee <__aeabi_dmul+0x1c6>
 23f8ffe:	ea43 0306 	orr.w	r3, r3, r6
 23f9002:	4770      	bx	lr
 23f9004:	ea94 0f0c 	teq	r4, ip
 23f9008:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f900c:	bf18      	it	ne
 23f900e:	ea95 0f0c 	teqne	r5, ip
 23f9012:	d00c      	beq.n	23f902e <__aeabi_dmul+0x206>
 23f9014:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f9018:	bf18      	it	ne
 23f901a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f901e:	d1d1      	bne.n	23f8fc4 <__aeabi_dmul+0x19c>
 23f9020:	ea81 0103 	eor.w	r1, r1, r3
 23f9024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f9028:	f04f 0000 	mov.w	r0, #0
 23f902c:	bd70      	pop	{r4, r5, r6, pc}
 23f902e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f9032:	bf06      	itte	eq
 23f9034:	4610      	moveq	r0, r2
 23f9036:	4619      	moveq	r1, r3
 23f9038:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f903c:	d019      	beq.n	23f9072 <__aeabi_dmul+0x24a>
 23f903e:	ea94 0f0c 	teq	r4, ip
 23f9042:	d102      	bne.n	23f904a <__aeabi_dmul+0x222>
 23f9044:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f9048:	d113      	bne.n	23f9072 <__aeabi_dmul+0x24a>
 23f904a:	ea95 0f0c 	teq	r5, ip
 23f904e:	d105      	bne.n	23f905c <__aeabi_dmul+0x234>
 23f9050:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f9054:	bf1c      	itt	ne
 23f9056:	4610      	movne	r0, r2
 23f9058:	4619      	movne	r1, r3
 23f905a:	d10a      	bne.n	23f9072 <__aeabi_dmul+0x24a>
 23f905c:	ea81 0103 	eor.w	r1, r1, r3
 23f9060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f9064:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f9068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f906c:	f04f 0000 	mov.w	r0, #0
 23f9070:	bd70      	pop	{r4, r5, r6, pc}
 23f9072:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f9076:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f907a:	bd70      	pop	{r4, r5, r6, pc}

023f907c <__aeabi_ddiv>:
 23f907c:	b570      	push	{r4, r5, r6, lr}
 23f907e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f9082:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f9086:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f908a:	bf1d      	ittte	ne
 23f908c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f9090:	ea94 0f0c 	teqne	r4, ip
 23f9094:	ea95 0f0c 	teqne	r5, ip
 23f9098:	f000 f8a7 	bleq	23f91ea <__aeabi_ddiv+0x16e>
 23f909c:	eba4 0405 	sub.w	r4, r4, r5
 23f90a0:	ea81 0e03 	eor.w	lr, r1, r3
 23f90a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f90a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f90ac:	f000 8088 	beq.w	23f91c0 <__aeabi_ddiv+0x144>
 23f90b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f90b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f90b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f90bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f90c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f90c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f90c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f90cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f90d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f90d4:	429d      	cmp	r5, r3
 23f90d6:	bf08      	it	eq
 23f90d8:	4296      	cmpeq	r6, r2
 23f90da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f90de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f90e2:	d202      	bcs.n	23f90ea <__aeabi_ddiv+0x6e>
 23f90e4:	085b      	lsrs	r3, r3, #1
 23f90e6:	ea4f 0232 	mov.w	r2, r2, rrx
 23f90ea:	1ab6      	subs	r6, r6, r2
 23f90ec:	eb65 0503 	sbc.w	r5, r5, r3
 23f90f0:	085b      	lsrs	r3, r3, #1
 23f90f2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f90f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f90fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f90fe:	ebb6 0e02 	subs.w	lr, r6, r2
 23f9102:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f9106:	bf22      	ittt	cs
 23f9108:	1ab6      	subcs	r6, r6, r2
 23f910a:	4675      	movcs	r5, lr
 23f910c:	ea40 000c 	orrcs.w	r0, r0, ip
 23f9110:	085b      	lsrs	r3, r3, #1
 23f9112:	ea4f 0232 	mov.w	r2, r2, rrx
 23f9116:	ebb6 0e02 	subs.w	lr, r6, r2
 23f911a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f911e:	bf22      	ittt	cs
 23f9120:	1ab6      	subcs	r6, r6, r2
 23f9122:	4675      	movcs	r5, lr
 23f9124:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f9128:	085b      	lsrs	r3, r3, #1
 23f912a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f912e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f9132:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f9136:	bf22      	ittt	cs
 23f9138:	1ab6      	subcs	r6, r6, r2
 23f913a:	4675      	movcs	r5, lr
 23f913c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f9140:	085b      	lsrs	r3, r3, #1
 23f9142:	ea4f 0232 	mov.w	r2, r2, rrx
 23f9146:	ebb6 0e02 	subs.w	lr, r6, r2
 23f914a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f914e:	bf22      	ittt	cs
 23f9150:	1ab6      	subcs	r6, r6, r2
 23f9152:	4675      	movcs	r5, lr
 23f9154:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f9158:	ea55 0e06 	orrs.w	lr, r5, r6
 23f915c:	d018      	beq.n	23f9190 <__aeabi_ddiv+0x114>
 23f915e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f9162:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f9166:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f916a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f916e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f9172:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f9176:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f917a:	d1c0      	bne.n	23f90fe <__aeabi_ddiv+0x82>
 23f917c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f9180:	d10b      	bne.n	23f919a <__aeabi_ddiv+0x11e>
 23f9182:	ea41 0100 	orr.w	r1, r1, r0
 23f9186:	f04f 0000 	mov.w	r0, #0
 23f918a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f918e:	e7b6      	b.n	23f90fe <__aeabi_ddiv+0x82>
 23f9190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f9194:	bf04      	itt	eq
 23f9196:	4301      	orreq	r1, r0
 23f9198:	2000      	moveq	r0, #0
 23f919a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f919e:	bf88      	it	hi
 23f91a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f91a4:	f63f aeaf 	bhi.w	23f8f06 <__aeabi_dmul+0xde>
 23f91a8:	ebb5 0c03 	subs.w	ip, r5, r3
 23f91ac:	bf04      	itt	eq
 23f91ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f91b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f91b6:	f150 0000 	adcs.w	r0, r0, #0
 23f91ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f91be:	bd70      	pop	{r4, r5, r6, pc}
 23f91c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f91c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f91c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f91cc:	bfc2      	ittt	gt
 23f91ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f91d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f91d6:	bd70      	popgt	{r4, r5, r6, pc}
 23f91d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f91dc:	f04f 0e00 	mov.w	lr, #0
 23f91e0:	3c01      	subs	r4, #1
 23f91e2:	e690      	b.n	23f8f06 <__aeabi_dmul+0xde>
 23f91e4:	ea45 0e06 	orr.w	lr, r5, r6
 23f91e8:	e68d      	b.n	23f8f06 <__aeabi_dmul+0xde>
 23f91ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f91ee:	ea94 0f0c 	teq	r4, ip
 23f91f2:	bf08      	it	eq
 23f91f4:	ea95 0f0c 	teqeq	r5, ip
 23f91f8:	f43f af3b 	beq.w	23f9072 <__aeabi_dmul+0x24a>
 23f91fc:	ea94 0f0c 	teq	r4, ip
 23f9200:	d10a      	bne.n	23f9218 <__aeabi_ddiv+0x19c>
 23f9202:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f9206:	f47f af34 	bne.w	23f9072 <__aeabi_dmul+0x24a>
 23f920a:	ea95 0f0c 	teq	r5, ip
 23f920e:	f47f af25 	bne.w	23f905c <__aeabi_dmul+0x234>
 23f9212:	4610      	mov	r0, r2
 23f9214:	4619      	mov	r1, r3
 23f9216:	e72c      	b.n	23f9072 <__aeabi_dmul+0x24a>
 23f9218:	ea95 0f0c 	teq	r5, ip
 23f921c:	d106      	bne.n	23f922c <__aeabi_ddiv+0x1b0>
 23f921e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f9222:	f43f aefd 	beq.w	23f9020 <__aeabi_dmul+0x1f8>
 23f9226:	4610      	mov	r0, r2
 23f9228:	4619      	mov	r1, r3
 23f922a:	e722      	b.n	23f9072 <__aeabi_dmul+0x24a>
 23f922c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f9230:	bf18      	it	ne
 23f9232:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f9236:	f47f aec5 	bne.w	23f8fc4 <__aeabi_dmul+0x19c>
 23f923a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f923e:	f47f af0d 	bne.w	23f905c <__aeabi_dmul+0x234>
 23f9242:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f9246:	f47f aeeb 	bne.w	23f9020 <__aeabi_dmul+0x1f8>
 23f924a:	e712      	b.n	23f9072 <__aeabi_dmul+0x24a>

023f924c <__gedf2>:
 23f924c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f9250:	e006      	b.n	23f9260 <__cmpdf2+0x4>
 23f9252:	bf00      	nop

023f9254 <__ledf2>:
 23f9254:	f04f 0c01 	mov.w	ip, #1
 23f9258:	e002      	b.n	23f9260 <__cmpdf2+0x4>
 23f925a:	bf00      	nop

023f925c <__cmpdf2>:
 23f925c:	f04f 0c01 	mov.w	ip, #1
 23f9260:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f9264:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f9268:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f926c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f9270:	bf18      	it	ne
 23f9272:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f9276:	d01b      	beq.n	23f92b0 <__cmpdf2+0x54>
 23f9278:	b001      	add	sp, #4
 23f927a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f927e:	bf0c      	ite	eq
 23f9280:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f9284:	ea91 0f03 	teqne	r1, r3
 23f9288:	bf02      	ittt	eq
 23f928a:	ea90 0f02 	teqeq	r0, r2
 23f928e:	2000      	moveq	r0, #0
 23f9290:	4770      	bxeq	lr
 23f9292:	f110 0f00 	cmn.w	r0, #0
 23f9296:	ea91 0f03 	teq	r1, r3
 23f929a:	bf58      	it	pl
 23f929c:	4299      	cmppl	r1, r3
 23f929e:	bf08      	it	eq
 23f92a0:	4290      	cmpeq	r0, r2
 23f92a2:	bf2c      	ite	cs
 23f92a4:	17d8      	asrcs	r0, r3, #31
 23f92a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f92aa:	f040 0001 	orr.w	r0, r0, #1
 23f92ae:	4770      	bx	lr
 23f92b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f92b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f92b8:	d102      	bne.n	23f92c0 <__cmpdf2+0x64>
 23f92ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f92be:	d107      	bne.n	23f92d0 <__cmpdf2+0x74>
 23f92c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f92c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f92c8:	d1d6      	bne.n	23f9278 <__cmpdf2+0x1c>
 23f92ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f92ce:	d0d3      	beq.n	23f9278 <__cmpdf2+0x1c>
 23f92d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f92d4:	4770      	bx	lr
 23f92d6:	bf00      	nop

023f92d8 <__aeabi_cdrcmple>:
 23f92d8:	4684      	mov	ip, r0
 23f92da:	4610      	mov	r0, r2
 23f92dc:	4662      	mov	r2, ip
 23f92de:	468c      	mov	ip, r1
 23f92e0:	4619      	mov	r1, r3
 23f92e2:	4663      	mov	r3, ip
 23f92e4:	e000      	b.n	23f92e8 <__aeabi_cdcmpeq>
 23f92e6:	bf00      	nop

023f92e8 <__aeabi_cdcmpeq>:
 23f92e8:	b501      	push	{r0, lr}
 23f92ea:	f7ff ffb7 	bl	23f925c <__cmpdf2>
 23f92ee:	2800      	cmp	r0, #0
 23f92f0:	bf48      	it	mi
 23f92f2:	f110 0f00 	cmnmi.w	r0, #0
 23f92f6:	bd01      	pop	{r0, pc}

023f92f8 <__aeabi_dcmpeq>:
 23f92f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f92fc:	f7ff fff4 	bl	23f92e8 <__aeabi_cdcmpeq>
 23f9300:	bf0c      	ite	eq
 23f9302:	2001      	moveq	r0, #1
 23f9304:	2000      	movne	r0, #0
 23f9306:	f85d fb08 	ldr.w	pc, [sp], #8
 23f930a:	bf00      	nop

023f930c <__aeabi_dcmplt>:
 23f930c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9310:	f7ff ffea 	bl	23f92e8 <__aeabi_cdcmpeq>
 23f9314:	bf34      	ite	cc
 23f9316:	2001      	movcc	r0, #1
 23f9318:	2000      	movcs	r0, #0
 23f931a:	f85d fb08 	ldr.w	pc, [sp], #8
 23f931e:	bf00      	nop

023f9320 <__aeabi_dcmple>:
 23f9320:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9324:	f7ff ffe0 	bl	23f92e8 <__aeabi_cdcmpeq>
 23f9328:	bf94      	ite	ls
 23f932a:	2001      	movls	r0, #1
 23f932c:	2000      	movhi	r0, #0
 23f932e:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9332:	bf00      	nop

023f9334 <__aeabi_dcmpge>:
 23f9334:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9338:	f7ff ffce 	bl	23f92d8 <__aeabi_cdrcmple>
 23f933c:	bf94      	ite	ls
 23f933e:	2001      	movls	r0, #1
 23f9340:	2000      	movhi	r0, #0
 23f9342:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9346:	bf00      	nop

023f9348 <__aeabi_dcmpgt>:
 23f9348:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f934c:	f7ff ffc4 	bl	23f92d8 <__aeabi_cdrcmple>
 23f9350:	bf34      	ite	cc
 23f9352:	2001      	movcc	r0, #1
 23f9354:	2000      	movcs	r0, #0
 23f9356:	f85d fb08 	ldr.w	pc, [sp], #8
 23f935a:	bf00      	nop

023f935c <__aeabi_dcmpun>:
 23f935c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f9360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9364:	d102      	bne.n	23f936c <__aeabi_dcmpun+0x10>
 23f9366:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f936a:	d10a      	bne.n	23f9382 <__aeabi_dcmpun+0x26>
 23f936c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f9370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9374:	d102      	bne.n	23f937c <__aeabi_dcmpun+0x20>
 23f9376:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f937a:	d102      	bne.n	23f9382 <__aeabi_dcmpun+0x26>
 23f937c:	f04f 0000 	mov.w	r0, #0
 23f9380:	4770      	bx	lr
 23f9382:	f04f 0001 	mov.w	r0, #1
 23f9386:	4770      	bx	lr

023f9388 <__aeabi_d2f>:
 23f9388:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f938c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f9390:	bf24      	itt	cs
 23f9392:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f9396:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f939a:	d90d      	bls.n	23f93b8 <__aeabi_d2f+0x30>
 23f939c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f93a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f93a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f93a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f93ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f93b0:	bf08      	it	eq
 23f93b2:	f020 0001 	biceq.w	r0, r0, #1
 23f93b6:	4770      	bx	lr
 23f93b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f93bc:	d121      	bne.n	23f9402 <__aeabi_d2f+0x7a>
 23f93be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f93c2:	bfbc      	itt	lt
 23f93c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f93c8:	4770      	bxlt	lr
 23f93ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f93ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f93d2:	f1c2 0218 	rsb	r2, r2, #24
 23f93d6:	f1c2 0c20 	rsb	ip, r2, #32
 23f93da:	fa10 f30c 	lsls.w	r3, r0, ip
 23f93de:	fa20 f002 	lsr.w	r0, r0, r2
 23f93e2:	bf18      	it	ne
 23f93e4:	f040 0001 	orrne.w	r0, r0, #1
 23f93e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f93ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f93f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f93f4:	ea40 000c 	orr.w	r0, r0, ip
 23f93f8:	fa23 f302 	lsr.w	r3, r3, r2
 23f93fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f9400:	e7cc      	b.n	23f939c <__aeabi_d2f+0x14>
 23f9402:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f9406:	d107      	bne.n	23f9418 <__aeabi_d2f+0x90>
 23f9408:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f940c:	bf1e      	ittt	ne
 23f940e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f9412:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f9416:	4770      	bxne	lr
 23f9418:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f941c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f9420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f9424:	4770      	bx	lr
 23f9426:	bf00      	nop

023f9428 <strcmp>:
 23f9428:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f942c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f9430:	2a01      	cmp	r2, #1
 23f9432:	bf28      	it	cs
 23f9434:	429a      	cmpcs	r2, r3
 23f9436:	d0f7      	beq.n	23f9428 <strcmp>
 23f9438:	1ad0      	subs	r0, r2, r3
 23f943a:	4770      	bx	lr

023f943c <strlen>:
 23f943c:	4603      	mov	r3, r0
 23f943e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f9442:	2a00      	cmp	r2, #0
 23f9444:	d1fb      	bne.n	23f943e <strlen+0x2>
 23f9446:	1a18      	subs	r0, r3, r0
 23f9448:	3801      	subs	r0, #1
 23f944a:	4770      	bx	lr

023f944c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f944c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f944e:	f004 f9e5 	bl	23fd81c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f9452:	2500      	movs	r5, #0
 23f9454:	4e05      	ldr	r6, [pc, #20]	; (23f946c <module_user_init+0x20>)
 23f9456:	4c06      	ldr	r4, [pc, #24]	; (23f9470 <module_user_init+0x24>)
 23f9458:	1ba4      	subs	r4, r4, r6
 23f945a:	08a4      	lsrs	r4, r4, #2
 23f945c:	42ac      	cmp	r4, r5
 23f945e:	d100      	bne.n	23f9462 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f9460:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f9462:	f856 3b04 	ldr.w	r3, [r6], #4
 23f9466:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f9468:	3501      	adds	r5, #1
 23f946a:	e7f7      	b.n	23f945c <module_user_init+0x10>
 23f946c:	023fffcc 	.word	0x023fffcc
 23f9470:	023ffff0 	.word	0x023ffff0

023f9474 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f9474:	f000 b858 	b.w	23f9528 <setup>

023f9478 <module_user_loop>:
}

void module_user_loop() {
 23f9478:	b508      	push	{r3, lr}
    loop();
 23f947a:	f000 f86d 	bl	23f9558 <loop>
    _post_loop();
}
 23f947e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f9482:	f004 b983 	b.w	23fd78c <_post_loop>

023f9486 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f9486:	f001 b8a3 	b.w	23fa5d0 <malloc>

023f948a <_Znaj>:
 23f948a:	f001 b8a1 	b.w	23fa5d0 <malloc>

023f948e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f948e:	f001 b8ad 	b.w	23fa5ec <free>
	...

023f9494 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f9494:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f9496:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f9498:	4a02      	ldr	r2, [pc, #8]	; (23f94a4 <__cxa_pure_virtual+0x10>)
 23f949a:	4903      	ldr	r1, [pc, #12]	; (23f94a8 <__cxa_pure_virtual+0x14>)
 23f949c:	f000 ff56 	bl	23fa34c <panic_>
  while (1);
 23f94a0:	e7fe      	b.n	23f94a0 <__cxa_pure_virtual+0xc>
 23f94a2:	bf00      	nop
 23f94a4:	023f9eed 	.word	0x023f9eed
 23f94a8:	023ff790 	.word	0x023ff790

023f94ac <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f94ac:	7800      	ldrb	r0, [r0, #0]
 23f94ae:	fab0 f080 	clz	r0, r0
 23f94b2:	0940      	lsrs	r0, r0, #5
 23f94b4:	4770      	bx	lr

023f94b6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f94b6:	2301      	movs	r3, #1
 23f94b8:	7003      	strb	r3, [r0, #0]
 23f94ba:	4770      	bx	lr

023f94bc <_ZN10BleLoggingILj4096EED1Ev>:
    BleCharacteristic txCharacteristic;
    BleCharacteristic rxCharacteristic;
};

template <size_t BUFFER_SIZE>
class BleLogging : public BleLoggingBase {
 23f94bc:	b510      	push	{r4, lr}
 23f94be:	4604      	mov	r4, r0
 23f94c0:	4b03      	ldr	r3, [pc, #12]	; (23f94d0 <_ZN10BleLoggingILj4096EED1Ev+0x14>)
 23f94c2:	6003      	str	r3, [r0, #0]
 23f94c4:	331c      	adds	r3, #28
 23f94c6:	6243      	str	r3, [r0, #36]	; 0x24
 23f94c8:	f000 f94e 	bl	23f9768 <_ZN14BleLoggingBaseD1Ev>
 23f94cc:	4620      	mov	r0, r4
 23f94ce:	bd10      	pop	{r4, pc}
 23f94d0:	023ff7d8 	.word	0x023ff7d8

023f94d4 <_ZThn36_N10BleLoggingILj4096EED1Ev>:
 23f94d4:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f94d8:	e7f0      	b.n	23f94bc <_ZN10BleLoggingILj4096EED1Ev>
 23f94da:	bf00      	nop

023f94dc <_ZN10BleLoggingILj4096EED0Ev>:
 23f94dc:	b510      	push	{r4, lr}
 23f94de:	4604      	mov	r4, r0
 23f94e0:	f7ff ffec 	bl	23f94bc <_ZN10BleLoggingILj4096EED1Ev>
 23f94e4:	4620      	mov	r0, r4
 23f94e6:	f241 014c 	movw	r1, #4172	; 0x104c
 23f94ea:	f7ff ffd0 	bl	23f948e <_ZdlPvj>
 23f94ee:	4620      	mov	r0, r4
 23f94f0:	bd10      	pop	{r4, pc}

023f94f2 <_ZThn36_N10BleLoggingILj4096EED0Ev>:
 23f94f2:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f94f6:	e7f1      	b.n	23f94dc <_ZN10BleLoggingILj4096EED0Ev>

023f94f8 <_ZNK5spark6Logger4warnEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
 23f94f8:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f94fa:	f04f 0c20 	mov.w	ip, #32
 23f94fe:	2300      	movs	r3, #0
inline void spark::Logger::warn(const char *fmt, ...) const {
 23f9500:	b500      	push	{lr}
 23f9502:	b08c      	sub	sp, #48	; 0x30
 23f9504:	aa0d      	add	r2, sp, #52	; 0x34
 23f9506:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f950a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f950e:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f9512:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f9514:	6801      	ldr	r1, [r0, #0]
 23f9516:	aa04      	add	r2, sp, #16
 23f9518:	2028      	movs	r0, #40	; 0x28
 23f951a:	f000 ff33 	bl	23fa384 <log_message_v>
}
 23f951e:	b00c      	add	sp, #48	; 0x30
 23f9520:	f85d eb04 	ldr.w	lr, [sp], #4
 23f9524:	b003      	add	sp, #12
 23f9526:	4770      	bx	lr

023f9528 <setup>:

// accelerometer setup
#include "ADXL362.h"
ADXL362 adxl362;

void setup() {
 23f9528:	b508      	push	{r3, lr}
	BLE.on();
 23f952a:	f001 fcc1 	bl	23faeb0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f952e:	f001 fd09 	bl	23faf44 <_ZNK8particle14BleLocalDevice2onEv>

	// You must add this to your setup() to initialize the library
	bleLogHandler.setup();
 23f9532:	4807      	ldr	r0, [pc, #28]	; (23f9550 <setup+0x28>)
 23f9534:	f000 f948 	bl	23f97c8 <_ZN14BleLoggingBase5setupEv>

	 // necessary - starts accelerometer measurement
	adxl362.begin();
 23f9538:	4806      	ldr	r0, [pc, #24]	; (23f9554 <setup+0x2c>)
 23f953a:	f000 fbbb 	bl	23f9cb4 <_ZN7ADXL3625beginEv>
  	adxl362.beginMeasure();
 23f953e:	4805      	ldr	r0, [pc, #20]	; (23f9554 <setup+0x2c>)
 23f9540:	f000 fb44 	bl	23f9bcc <_ZN7ADXL36212beginMeasureEv>
	adxl362.setRange(XL362_FILTER_FLAG_8G); //sets range to 8G - other options are 2G and 4G
}
 23f9544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adxl362.setRange(XL362_FILTER_FLAG_8G); //sets range to 8G - other options are 2G and 4G
 23f9548:	2180      	movs	r1, #128	; 0x80
 23f954a:	4802      	ldr	r0, [pc, #8]	; (23f9554 <setup+0x2c>)
 23f954c:	f000 bb50 	b.w	23f9bf0 <_ZN7ADXL3628setRangeEh>
 23f9550:	10079df0 	.word	0x10079df0
 23f9554:	10079dec 	.word	0x10079dec

023f9558 <loop>:

void loop() {
 23f9558:	b510      	push	{r4, lr}
	// You must add this to your loop to process BLE requests and data
	bleLogHandler.loop();
 23f955a:	481c      	ldr	r0, [pc, #112]	; (23f95cc <loop+0x74>)
void loop() {
 23f955c:	b08e      	sub	sp, #56	; 0x38
	bleLogHandler.loop();
 23f955e:	f000 f97d 	bl	23f985c <_ZN14BleLoggingBase4loopEv>

	// accelerometer variables
	int x, y, z;
  	float r, p, t;

	adxl362.readXYZmg(x, y, z); // burst read of axes - REQUIRED to guarantee all measurements correspond to same sample time 
 23f9562:	481b      	ldr	r0, [pc, #108]	; (23f95d0 <loop+0x78>)
 23f9564:	ab0a      	add	r3, sp, #40	; 0x28
 23f9566:	aa09      	add	r2, sp, #36	; 0x24
 23f9568:	a908      	add	r1, sp, #32
 23f956a:	f000 fb5d 	bl	23f9c28 <_ZN7ADXL3629readXYZmgERiS0_S0_>
  	adxl362.XYZmgtoRPT(x, y, z, r, p, t); // converts raw data to roll, pitch, tilt
 23f956e:	ab0d      	add	r3, sp, #52	; 0x34
 23f9570:	9302      	str	r3, [sp, #8]
 23f9572:	ab0c      	add	r3, sp, #48	; 0x30
 23f9574:	9301      	str	r3, [sp, #4]
 23f9576:	ab0b      	add	r3, sp, #44	; 0x2c
 23f9578:	9908      	ldr	r1, [sp, #32]
 23f957a:	4815      	ldr	r0, [pc, #84]	; (23f95d0 <loop+0x78>)
 23f957c:	9300      	str	r3, [sp, #0]
 23f957e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 23f9582:	f000 fa25 	bl	23f99d0 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f9586:	f000 fcbf 	bl	23f9f08 <HAL_Timer_Get_Milli_Seconds>

	if (millis() - lastLog >= LOG_INTERVAL) {
 23f958a:	4c12      	ldr	r4, [pc, #72]	; (23f95d4 <loop+0x7c>)
 23f958c:	6823      	ldr	r3, [r4, #0]
 23f958e:	1ac0      	subs	r0, r0, r3
 23f9590:	2863      	cmp	r0, #99	; 0x63
 23f9592:	d919      	bls.n	23f95c8 <loop+0x70>
 23f9594:	f000 fcb8 	bl	23f9f08 <HAL_Timer_Get_Milli_Seconds>
		lastLog = millis();
 23f9598:	6020      	str	r0, [r4, #0]

		Log.warn("x: %d, y: %d, z: %d, r: %f, p: %f, t: %f", x, y, z, r, p, t); // all the data!
 23f959a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23f959c:	f7ff fbec 	bl	23f8d78 <__aeabi_f2d>
 23f95a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 23f95a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 23f95a6:	f7ff fbe7 	bl	23f8d78 <__aeabi_f2d>
 23f95aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 23f95ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23f95b0:	f7ff fbe2 	bl	23f8d78 <__aeabi_f2d>
 23f95b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f95b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f95ba:	9300      	str	r3, [sp, #0]
 23f95bc:	4906      	ldr	r1, [pc, #24]	; (23f95d8 <loop+0x80>)
 23f95be:	4807      	ldr	r0, [pc, #28]	; (23f95dc <loop+0x84>)
 23f95c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 23f95c4:	f7ff ff98 	bl	23f94f8 <_ZNK5spark6Logger4warnEPKcz>
	}
 23f95c8:	b00e      	add	sp, #56	; 0x38
 23f95ca:	bd10      	pop	{r4, pc}
 23f95cc:	10079df0 	.word	0x10079df0
 23f95d0:	10079dec 	.word	0x10079dec
 23f95d4:	1007ae3c 	.word	0x1007ae3c
 23f95d8:	023ff7a5 	.word	0x023ff7a5
 23f95dc:	1007ae70 	.word	0x1007ae70

023f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f95e0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f95e2:	2614      	movs	r6, #20
 23f95e4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f95e8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f95ea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f95ee:	42ae      	cmp	r6, r5
 23f95f0:	d004      	beq.n	23f95fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f95f2:	4628      	mov	r0, r5
 23f95f4:	f003 fea8 	bl	23fd348 <_ZN6StringD1Ev>
 23f95f8:	3514      	adds	r5, #20
 23f95fa:	e7f8      	b.n	23f95ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f95fc:	6820      	ldr	r0, [r4, #0]
 23f95fe:	f000 fff5 	bl	23fa5ec <free>
    AllocatorT::free(data_);
}
 23f9602:	4620      	mov	r0, r4
 23f9604:	bd70      	pop	{r4, r5, r6, pc}

023f9606 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f9606:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f9608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f960a:	4604      	mov	r4, r0
 23f960c:	460d      	mov	r5, r1
 23f960e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f9610:	d916      	bls.n	23f9640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f9612:	4290      	cmp	r0, r2
 23f9614:	d215      	bcs.n	23f9642 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f9616:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f961a:	1a75      	subs	r5, r6, r1
 23f961c:	f1a1 0714 	sub.w	r7, r1, #20
 23f9620:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f9622:	42b7      	cmp	r7, r6
 23f9624:	d01c      	beq.n	23f9660 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f9626:	b12c      	cbz	r4, 23f9634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f9628:	4631      	mov	r1, r6
 23f962a:	4620      	mov	r0, r4
 23f962c:	f003 ff09 	bl	23fd442 <_ZN6StringC1EOS_>
 23f9630:	7c33      	ldrb	r3, [r6, #16]
 23f9632:	7423      	strb	r3, [r4, #16]
 23f9634:	4630      	mov	r0, r6
 23f9636:	f003 fe87 	bl	23fd348 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f963a:	3e14      	subs	r6, #20
 23f963c:	3c14      	subs	r4, #20
 23f963e:	e7f0      	b.n	23f9622 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f9640:	d00e      	beq.n	23f9660 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f9642:	42b5      	cmp	r5, r6
 23f9644:	d00c      	beq.n	23f9660 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f9646:	b12c      	cbz	r4, 23f9654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f9648:	4629      	mov	r1, r5
 23f964a:	4620      	mov	r0, r4
 23f964c:	f003 fef9 	bl	23fd442 <_ZN6StringC1EOS_>
 23f9650:	7c2b      	ldrb	r3, [r5, #16]
 23f9652:	7423      	strb	r3, [r4, #16]
 23f9654:	4628      	mov	r0, r5
 23f9656:	f003 fe77 	bl	23fd348 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f965a:	3514      	adds	r5, #20
 23f965c:	3414      	adds	r4, #20
 23f965e:	e7f0      	b.n	23f9642 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f9660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f9662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f9662:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f9664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f9668:	e9c0 3300 	strd	r3, r3, [r0]
 23f966c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f966e:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f9670:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f9672:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f9674:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f9676:	dd24      	ble.n	23f96c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f9678:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f967c:	fb08 f007 	mul.w	r0, r8, r7
 23f9680:	f000 ffa6 	bl	23fa5d0 <malloc>
            if (!d) {
 23f9684:	4605      	mov	r5, r0
 23f9686:	b1e0      	cbz	r0, 23f96c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f9688:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f968c:	fb08 1202 	mla	r2, r8, r2, r1
 23f9690:	f7ff ffb9 	bl	23f9606 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f9694:	6820      	ldr	r0, [r4, #0]
 23f9696:	f000 ffa9 	bl	23fa5ec <free>
        data_ = d;
 23f969a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f969c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f969e:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f96a2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f96a6:	45b8      	cmp	r8, r7
 23f96a8:	d009      	beq.n	23f96be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f96aa:	4639      	mov	r1, r7
 23f96ac:	4628      	mov	r0, r5
 23f96ae:	f003 fee2 	bl	23fd476 <_ZN6StringC1ERKS_>
 23f96b2:	7c3b      	ldrb	r3, [r7, #16]
 23f96b4:	3514      	adds	r5, #20
 23f96b6:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f96ba:	3714      	adds	r7, #20
 23f96bc:	e7f3      	b.n	23f96a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f96be:	6873      	ldr	r3, [r6, #4]
 23f96c0:	6063      	str	r3, [r4, #4]
}
 23f96c2:	4620      	mov	r0, r4
 23f96c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f96c8 <_GLOBAL__sub_I_bleLogHandler>:
 23f96c8:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23f96ca:	2100      	movs	r1, #0
 23f96cc:	b088      	sub	sp, #32
SYSTEM_THREAD(ENABLED);
 23f96ce:	2001      	movs	r0, #1
 23f96d0:	f000 fe9e 	bl	23fa410 <system_thread_set_state>
        capacity_(0) {
 23f96d4:	2300      	movs	r3, #0
public:
	explicit BleLogging(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) : BleLoggingBase(staticBuf, BUFFER_SIZE, level, filters) {};
 23f96d6:	4c13      	ldr	r4, [pc, #76]	; (23f9724 <_GLOBAL__sub_I_bleLogHandler+0x5c>)
 23f96d8:	ad05      	add	r5, sp, #20
 23f96da:	a902      	add	r1, sp, #8
 23f96dc:	4628      	mov	r0, r5
 23f96de:	f1a4 064c 	sub.w	r6, r4, #76	; 0x4c
 23f96e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 23f96e6:	9304      	str	r3, [sp, #16]
 23f96e8:	f7ff ffbb 	bl	23f9662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f96ec:	4621      	mov	r1, r4
 23f96ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 23f96f2:	2328      	movs	r3, #40	; 0x28
 23f96f4:	4630      	mov	r0, r6
 23f96f6:	9500      	str	r5, [sp, #0]
 23f96f8:	f000 f8d0 	bl	23f989c <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>
 23f96fc:	4628      	mov	r0, r5
 23f96fe:	f7ff ff6f 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9702:	4b09      	ldr	r3, [pc, #36]	; (23f9728 <_GLOBAL__sub_I_bleLogHandler+0x60>)
BleLogging<4096> bleLogHandler(LOG_LEVEL_WARN);
 23f9704:	a802      	add	r0, sp, #8
 23f9706:	f844 3c4c 	str.w	r3, [r4, #-76]
 23f970a:	331c      	adds	r3, #28
 23f970c:	f844 3c28 	str.w	r3, [r4, #-40]
 23f9710:	f7ff ff66 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
ADXL362 adxl362;
 23f9714:	2112      	movs	r1, #18
 23f9716:	4805      	ldr	r0, [pc, #20]	; (23f972c <_GLOBAL__sub_I_bleLogHandler+0x64>)
 23f9718:	b008      	add	sp, #32
 23f971a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ADXL362 adxl362;
 23f971e:	f000 b93d 	b.w	23f999c <_ZN7ADXL362C1Ei>
 23f9722:	bf00      	nop
 23f9724:	10079e3c 	.word	0x10079e3c
 23f9728:	023ff7d8 	.word	0x023ff7d8
 23f972c:	10079dec 	.word	0x10079dec

023f9730 <_ZN5spark10LogHandler5writeEPKcj>:
}
 23f9730:	4770      	bx	lr

023f9732 <_ZN14BleLoggingBase5writeEh>:
    }

}


size_t BleLoggingBase::write(uint8_t c) {
 23f9732:	b530      	push	{r4, r5, lr}
	// Make sure you don't Log.info, etc. anywhere in this function, otherwise you'll recursively log

	if ((writeIndex - readIndex) >= bufSize) {
 23f9734:	6b04      	ldr	r4, [r0, #48]	; 0x30
 23f9736:	e9d0 230d 	ldrd	r2, r3, [r0, #52]	; 0x34
 23f973a:	1a9d      	subs	r5, r3, r2
 23f973c:	42a5      	cmp	r5, r4
		// Buffer is full, discard oldest byte
		readIndex++;
 23f973e:	bf28      	it	cs
 23f9740:	3201      	addcs	r2, #1
	}

	buf[writeIndex++ % bufSize] = c;
 23f9742:	f103 0501 	add.w	r5, r3, #1
		readIndex++;
 23f9746:	bf28      	it	cs
 23f9748:	6342      	strcs	r2, [r0, #52]	; 0x34
	buf[writeIndex++ % bufSize] = c;
 23f974a:	6385      	str	r5, [r0, #56]	; 0x38
 23f974c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f974e:	fbb3 f0f4 	udiv	r0, r3, r4
 23f9752:	fb04 3310 	mls	r3, r4, r0, r3
 23f9756:	54d1      	strb	r1, [r2, r3]

	return 1;
}
 23f9758:	2001      	movs	r0, #1
 23f975a:	bd30      	pop	{r4, r5, pc}

023f975c <_ZThn36_N14BleLoggingBase5writeEh>:
    virtual size_t write(uint8_t);
 23f975c:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f9760:	f7ff bfe7 	b.w	23f9732 <_ZN14BleLoggingBase5writeEh>

023f9764 <_ZN14BleLoggingBase20onDataReceivedStaticEPKhjRKN8particle13BlePeerDeviceEPv>:
// [static]
void BleLoggingBase::onDataReceivedStatic(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
	BleLoggingBase *This = (BleLoggingBase *) context;

	This->onDataReceived(data, len, peer);
}
 23f9764:	4770      	bx	lr
	...

023f9768 <_ZN14BleLoggingBaseD1Ev>:
BleLoggingBase::~BleLoggingBase() {
 23f9768:	b510      	push	{r4, lr}
 23f976a:	4604      	mov	r4, r0
 23f976c:	4b0b      	ldr	r3, [pc, #44]	; (23f979c <_ZN14BleLoggingBaseD1Ev+0x34>)
 23f976e:	3044      	adds	r0, #68	; 0x44
 23f9770:	f103 0208 	add.w	r2, r3, #8
 23f9774:	3324      	adds	r3, #36	; 0x24
 23f9776:	f840 2c44 	str.w	r2, [r0, #-68]
 23f977a:	f840 3c20 	str.w	r3, [r0, #-32]
 23f977e:	f001 fc98 	bl	23fb0b2 <_ZN8particle17BleCharacteristicD1Ev>
 23f9782:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23f9786:	f001 fc94 	bl	23fb0b2 <_ZN8particle17BleCharacteristicD1Ev>
    virtual ~LogHandler() = default;
 23f978a:	4620      	mov	r0, r4
 23f978c:	4b04      	ldr	r3, [pc, #16]	; (23f97a0 <_ZN14BleLoggingBaseD1Ev+0x38>)
 23f978e:	f840 3b04 	str.w	r3, [r0], #4
 23f9792:	f002 ff51 	bl	23fc638 <_ZN5spark6detail9LogFilterD1Ev>
}
 23f9796:	4620      	mov	r0, r4
 23f9798:	bd10      	pop	{r4, pc}
 23f979a:	bf00      	nop
 23f979c:	023ff894 	.word	0x023ff894
 23f97a0:	023ff884 	.word	0x023ff884

023f97a4 <_ZThn36_N14BleLoggingBaseD1Ev>:
	virtual ~BleLoggingBase();
 23f97a4:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f97a8:	f7ff bfde 	b.w	23f9768 <_ZN14BleLoggingBaseD1Ev>

023f97ac <_ZN14BleLoggingBaseD0Ev>:
BleLoggingBase::~BleLoggingBase() {
 23f97ac:	b510      	push	{r4, lr}
 23f97ae:	4604      	mov	r4, r0
}
 23f97b0:	f7ff ffda 	bl	23f9768 <_ZN14BleLoggingBaseD1Ev>
 23f97b4:	4620      	mov	r0, r4
 23f97b6:	214c      	movs	r1, #76	; 0x4c
 23f97b8:	f7ff fe69 	bl	23f948e <_ZdlPvj>
 23f97bc:	4620      	mov	r0, r4
 23f97be:	bd10      	pop	{r4, pc}

023f97c0 <_ZThn36_N14BleLoggingBaseD0Ev>:
 23f97c0:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
 23f97c4:	f7ff bff2 	b.w	23f97ac <_ZN14BleLoggingBaseD0Ev>

023f97c8 <_ZN14BleLoggingBase5setupEv>:
void BleLoggingBase::setup() {
 23f97c8:	b510      	push	{r4, lr}
 23f97ca:	b08c      	sub	sp, #48	; 0x30
 23f97cc:	4604      	mov	r4, r0
    BLE.addCharacteristic(txCharacteristic);
 23f97ce:	f001 fb6f 	bl	23faeb0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f97d2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 23f97d6:	4601      	mov	r1, r0
 23f97d8:	a807      	add	r0, sp, #28
 23f97da:	f002 f8e7 	bl	23fb9ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
 23f97de:	a807      	add	r0, sp, #28
 23f97e0:	f001 fc67 	bl	23fb0b2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
 23f97e4:	f001 fb64 	bl	23faeb0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f97e8:	f104 0244 	add.w	r2, r4, #68	; 0x44
 23f97ec:	4601      	mov	r1, r0
 23f97ee:	a807      	add	r0, sp, #28
 23f97f0:	f002 f8dc 	bl	23fb9ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
 23f97f4:	a807      	add	r0, sp, #28
 23f97f6:	f001 fc5c 	bl	23fb0b2 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData data;
 23f97fa:	a804      	add	r0, sp, #16
 23f97fc:	f001 fd5d 	bl	23fb2ba <_ZN8particle18BleAdvertisingDataC1Ev>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
 23f9800:	4915      	ldr	r1, [pc, #84]	; (23f9858 <_ZN14BleLoggingBase5setupEv+0x90>)
 23f9802:	a807      	add	r0, sp, #28
 23f9804:	f001 f9fe 	bl	23fac04 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
 23f9808:	a807      	add	r0, sp, #28
 23f980a:	f001 f95d 	bl	23faac8 <_ZNK8particle7BleUuid4typeEv>
 23f980e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
 23f9810:	a807      	add	r0, sp, #28
        if (tempUUID.type() == BleUuidType::SHORT) {
 23f9812:	b9b4      	cbnz	r4, 23f9842 <_ZN14BleLoggingBase5setupEv+0x7a>
            uint16_t uuid16 = tempUUID.shorted();
 23f9814:	f001 f974 	bl	23fab00 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
 23f9818:	2302      	movs	r3, #2
 23f981a:	2103      	movs	r1, #3
            uint16_t uuid16 = tempUUID.shorted();
 23f981c:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
 23f9820:	9400      	str	r4, [sp, #0]
 23f9822:	f10d 020e 	add.w	r2, sp, #14
 23f9826:	a804      	add	r0, sp, #16
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
 23f9828:	f001 fd3c 	bl	23fb2a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
 23f982c:	f001 fb40 	bl	23faeb0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f9830:	2200      	movs	r2, #0
 23f9832:	a904      	add	r1, sp, #16
 23f9834:	f001 fbe9 	bl	23fb00a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    ::free(ptr);
 23f9838:	9804      	ldr	r0, [sp, #16]
 23f983a:	f000 fed7 	bl	23fa5ec <free>
}
 23f983e:	b00c      	add	sp, #48	; 0x30
 23f9840:	bd10      	pop	{r4, pc}
 23f9842:	f001 f95f 	bl	23fab04 <_ZNK8particle7BleUuid8rawBytesEv>
 23f9846:	2300      	movs	r3, #0
 23f9848:	9300      	str	r3, [sp, #0]
 23f984a:	2310      	movs	r3, #16
 23f984c:	4602      	mov	r2, r0
 23f984e:	2107      	movs	r1, #7
 23f9850:	eb0d 0003 	add.w	r0, sp, r3
 23f9854:	e7e8      	b.n	23f9828 <_ZN14BleLoggingBase5setupEv+0x60>
 23f9856:	bf00      	nop
 23f9858:	023ff804 	.word	0x023ff804

023f985c <_ZN14BleLoggingBase4loopEv>:
void BleLoggingBase::loop() {
 23f985c:	b538      	push	{r3, r4, r5, lr}
 23f985e:	4604      	mov	r4, r0
    if (BLE.connected()) {
 23f9860:	f001 fb26 	bl	23faeb0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f9864:	f001 fb7e 	bl	23faf64 <_ZNK8particle14BleLocalDevice9connectedEv>
 23f9868:	b1b0      	cbz	r0, 23f9898 <_ZN14BleLoggingBase4loopEv+0x3c>
    	size_t numToSend = writeIndex - readIndex;
 23f986a:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
    	if (numToSend > 0) {
 23f986e:	1a55      	subs	r5, r2, r1
 23f9870:	d012      	beq.n	23f9898 <_ZN14BleLoggingBase4loopEv+0x3c>
            txCharacteristic.setValue(&buf[readIndex % bufSize], numToSend);
 23f9872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 23f9874:	2d14      	cmp	r5, #20
 23f9876:	fbb1 f2f3 	udiv	r2, r1, r3
 23f987a:	bf28      	it	cs
 23f987c:	2514      	movcs	r5, #20
 23f987e:	fb03 1112 	mls	r1, r3, r2, r1
 23f9882:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 23f9884:	462a      	mov	r2, r5
 23f9886:	4401      	add	r1, r0
 23f9888:	2300      	movs	r3, #0
 23f988a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23f988e:	f001 f9f5 	bl	23fac7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            readIndex += numToSend;
 23f9892:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23f9894:	442a      	add	r2, r5
 23f9896:	6362      	str	r2, [r4, #52]	; 0x34
}
 23f9898:	bd38      	pop	{r3, r4, r5, pc}
	...

023f989c <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>:
BleLoggingBase::BleLoggingBase(uint8_t *buf, size_t bufSize, LogLevel level, LogCategoryFilters filters) :
 23f989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f98a0:	4604      	mov	r4, r0
        filter_(level, filters) {
 23f98a2:	4625      	mov	r5, r4
 23f98a4:	4698      	mov	r8, r3
 23f98a6:	b092      	sub	sp, #72	; 0x48
 23f98a8:	460f      	mov	r7, r1
	rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceivedStatic, this) {
 23f98aa:	a805      	add	r0, sp, #20
 23f98ac:	9918      	ldr	r1, [sp, #96]	; 0x60
BleLoggingBase::BleLoggingBase(uint8_t *buf, size_t bufSize, LogLevel level, LogCategoryFilters filters) :
 23f98ae:	4616      	mov	r6, r2
	rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceivedStatic, this) {
 23f98b0:	f7ff fed7 	bl	23f9662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23f98b4:	a905      	add	r1, sp, #20
 23f98b6:	a808      	add	r0, sp, #32
 23f98b8:	f7ff fed3 	bl	23f9662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f98bc:	4b2e      	ldr	r3, [pc, #184]	; (23f9978 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xdc>)
 23f98be:	a908      	add	r1, sp, #32
 23f98c0:	f845 3b04 	str.w	r3, [r5], #4
 23f98c4:	a80d      	add	r0, sp, #52	; 0x34
 23f98c6:	f7ff fecc 	bl	23f9662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f98ca:	4641      	mov	r1, r8
 23f98cc:	aa0d      	add	r2, sp, #52	; 0x34
 23f98ce:	4628      	mov	r0, r5
 23f98d0:	f003 f8e2 	bl	23fca98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f98d4:	a80d      	add	r0, sp, #52	; 0x34
 23f98d6:	f7ff fe83 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f98da:	a808      	add	r0, sp, #32
 23f98dc:	f7ff fe80 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f98e0:	4623      	mov	r3, r4
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 23f98e2:	2500      	movs	r5, #0
 23f98e4:	4a25      	ldr	r2, [pc, #148]	; (23f997c <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xe0>)
 23f98e6:	a805      	add	r0, sp, #20
 23f98e8:	f843 2b24 	str.w	r2, [r3], #36
 23f98ec:	6223      	str	r3, [r4, #32]
 23f98ee:	f7ff fe77 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f98f2:	4b23      	ldr	r3, [pc, #140]	; (23f9980 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xe4>)
 23f98f4:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
 23f98f8:	f103 0208 	add.w	r2, r3, #8
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
 23f98fc:	4e21      	ldr	r6, [pc, #132]	; (23f9984 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xe8>)
 23f98fe:	3324      	adds	r3, #36	; 0x24
 23f9900:	6022      	str	r2, [r4, #0]
 23f9902:	6263      	str	r3, [r4, #36]	; 0x24
 23f9904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34

      template<typename _Tp>
	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };

    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 23f9908:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
        BleUuid cUuid(charUuid);
 23f990c:	491e      	ldr	r1, [pc, #120]	; (23f9988 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xec>)
 23f990e:	62a5      	str	r5, [r4, #40]	; 0x28
 23f9910:	a808      	add	r0, sp, #32
 23f9912:	f001 f977 	bl	23fac04 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
 23f9916:	4631      	mov	r1, r6
 23f9918:	a80d      	add	r0, sp, #52	; 0x34
 23f991a:	f001 f973 	bl	23fac04 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
 23f991e:	ab0d      	add	r3, sp, #52	; 0x34
 23f9920:	f04f 0210 	mov.w	r2, #16
 23f9924:	9300      	str	r3, [sp, #0]
 23f9926:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23f992a:	ab08      	add	r3, sp, #32
 23f992c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23f9930:	4916      	ldr	r1, [pc, #88]	; (23f998c <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xf0>)
 23f9932:	f001 ff11 	bl	23fb758 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
 23f9936:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
        BleUuid cUuid(charUuid);
 23f993a:	4915      	ldr	r1, [pc, #84]	; (23f9990 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xf4>)
 23f993c:	a808      	add	r0, sp, #32
 23f993e:	f001 f961 	bl	23fac04 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
 23f9942:	4631      	mov	r1, r6
 23f9944:	a80d      	add	r0, sp, #52	; 0x34
 23f9946:	f001 f95d 	bl	23fac04 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
 23f994a:	4b12      	ldr	r3, [pc, #72]	; (23f9994 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xf8>)
 23f994c:	f04f 0204 	mov.w	r2, #4
 23f9950:	9301      	str	r3, [sp, #4]
 23f9952:	ab0d      	add	r3, sp, #52	; 0x34
 23f9954:	4910      	ldr	r1, [pc, #64]	; (23f9998 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xfc>)
 23f9956:	9300      	str	r3, [sp, #0]
 23f9958:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23f995c:	ab08      	add	r3, sp, #32
 23f995e:	9402      	str	r4, [sp, #8]
 23f9960:	f001 fefa 	bl	23fb758 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
	LogManager::instance()->addHandler(this);
 23f9964:	f002 fd92 	bl	23fc48c <_ZN5spark10LogManager8instanceEv>
 23f9968:	4621      	mov	r1, r4
 23f996a:	f002 ff83 	bl	23fc874 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
}
 23f996e:	4620      	mov	r0, r4
 23f9970:	b012      	add	sp, #72	; 0x48
 23f9972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9976:	bf00      	nop
 23f9978:	023ff884 	.word	0x023ff884
 23f997c:	023ffb8c 	.word	0x023ffb8c
 23f9980:	023ff894 	.word	0x023ff894
 23f9984:	023ff804 	.word	0x023ff804
 23f9988:	023ff829 	.word	0x023ff829
 23f998c:	023ff84e 	.word	0x023ff84e
 23f9990:	023ff851 	.word	0x023ff851
 23f9994:	023f9765 	.word	0x023f9765
 23f9998:	023ff876 	.word	0x023ff876

023f999c <_ZN7ADXL362C1Ei>:
#define XL362_FILTER_CTL    0x2C
#define XL362_POWER_CTL     0x2D
#define XL362_SELF_TEST     0x2E


ADXL362::ADXL362(int slaveSelectPin) : slaveSelectPin(uint16_t(slaveSelectPin)) {}
 23f999c:	8041      	strh	r1, [r0, #2]
 23f999e:	4770      	bx	lr

023f99a0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 23f99a0:	b510      	push	{r4, lr}
 23f99a2:	ed2d 8b02 	vpush	{d8}
 23f99a6:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23f99aa:	f7ff f9d3 	bl	23f8d54 <__aeabi_i2d>
 23f99ae:	ec41 0b18 	vmov	d8, r0, r1
 23f99b2:	4620      	mov	r0, r4
 23f99b4:	f7ff f9e0 	bl	23f8d78 <__aeabi_f2d>
 23f99b8:	eeb0 1a48 	vmov.f32	s2, s16
 23f99bc:	eef0 1a68 	vmov.f32	s3, s17
    }
 23f99c0:	ecbd 8b02 	vpop	{d8}
 23f99c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
 23f99c8:	ec41 0b10 	vmov	d0, r0, r1
 23f99cc:	f004 b9dc 	b.w	23fdd88 <pow>

023f99d0 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_>:
  output.println("\tz = "); output.print(Z);
#endif
}

void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23f99d0:	ee07 1a90 	vmov	s15, r1
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23f99d4:	b530      	push	{r4, r5, lr}
 23f99d6:	ed2d 8b04 	vpush	{d8-d9}
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23f99da:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 23f99de:	ee07 2a90 	vmov	s15, r2
 23f99e2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
void ADXL362::XYZmgtoRPT(int X, int Y, int Z, float &Rho, float &Phi, float &Theta){
 23f99e6:	ee08 3a10 	vmov	s16, r3
 23f99ea:	b083      	sub	sp, #12
  Rho = atan2(float(X), sqrt(pow(float(Y),2)+pow(float(Z),2)));
 23f99ec:	2002      	movs	r0, #2
 23f99ee:	eeb0 0a68 	vmov.f32	s0, s17
 23f99f2:	f7ff ffd5 	bl	23f99a0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23f99f6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f99fa:	ec55 4b10 	vmov	r4, r5, d0
 23f99fe:	2002      	movs	r0, #2
 23f9a00:	eeb0 0a48 	vmov.f32	s0, s16
 23f9a04:	f7ff ffcc 	bl	23f99a0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23f9a08:	4620      	mov	r0, r4
 23f9a0a:	ec53 2b10 	vmov	r2, r3, d0
 23f9a0e:	4629      	mov	r1, r5
 23f9a10:	f7ff f854 	bl	23f8abc <__adddf3>
 23f9a14:	ec41 0b10 	vmov	d0, r0, r1
 23f9a18:	f004 fa88 	bl	23fdf2c <sqrt>
      return atan2(__type(__y), __type(__x));
 23f9a1c:	ee19 0a10 	vmov	r0, s18
 23f9a20:	ed8d 0b00 	vstr	d0, [sp]
 23f9a24:	f7ff f9a8 	bl	23f8d78 <__aeabi_f2d>
 23f9a28:	ed9d 1b00 	vldr	d1, [sp]
 23f9a2c:	ec41 0b10 	vmov	d0, r0, r1
 23f9a30:	f004 f9a8 	bl	23fdd84 <atan2>
 23f9a34:	ec51 0b10 	vmov	r0, r1, d0
 23f9a38:	f7ff fca6 	bl	23f9388 <__aeabi_d2f>
  Rho *= 180/M_PI;
 23f9a3c:	f7ff f99c 	bl	23f8d78 <__aeabi_f2d>
 23f9a40:	a337      	add	r3, pc, #220	; (adr r3, 23f9b20 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23f9a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a46:	f7ff f9ef 	bl	23f8e28 <__aeabi_dmul>
 23f9a4a:	f7ff fc9d 	bl	23f9388 <__aeabi_d2f>
 23f9a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23f9a50:	eeb0 0a49 	vmov.f32	s0, s18
  Rho *= 180/M_PI;
 23f9a54:	6018      	str	r0, [r3, #0]
  Phi = atan2(float(Y), sqrt(pow(float(X),2)+pow(float(Z),2)));
 23f9a56:	2002      	movs	r0, #2
 23f9a58:	f7ff ffa2 	bl	23f99a0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23f9a5c:	2002      	movs	r0, #2
 23f9a5e:	ec55 4b10 	vmov	r4, r5, d0
 23f9a62:	eeb0 0a48 	vmov.f32	s0, s16
 23f9a66:	f7ff ff9b 	bl	23f99a0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23f9a6a:	4620      	mov	r0, r4
 23f9a6c:	ec53 2b10 	vmov	r2, r3, d0
 23f9a70:	4629      	mov	r1, r5
 23f9a72:	f7ff f823 	bl	23f8abc <__adddf3>
 23f9a76:	ec41 0b10 	vmov	d0, r0, r1
 23f9a7a:	f004 fa57 	bl	23fdf2c <sqrt>
 23f9a7e:	ee18 0a90 	vmov	r0, s17
 23f9a82:	ed8d 0b00 	vstr	d0, [sp]
 23f9a86:	f7ff f977 	bl	23f8d78 <__aeabi_f2d>
 23f9a8a:	ed9d 1b00 	vldr	d1, [sp]
 23f9a8e:	ec41 0b10 	vmov	d0, r0, r1
 23f9a92:	f004 f977 	bl	23fdd84 <atan2>
 23f9a96:	ec51 0b10 	vmov	r0, r1, d0
 23f9a9a:	f7ff fc75 	bl	23f9388 <__aeabi_d2f>
  Phi *= 180/M_PI;
 23f9a9e:	f7ff f96b 	bl	23f8d78 <__aeabi_f2d>
 23f9aa2:	a31f      	add	r3, pc, #124	; (adr r3, 23f9b20 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23f9aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9aa8:	f7ff f9be 	bl	23f8e28 <__aeabi_dmul>
 23f9aac:	f7ff fc6c 	bl	23f9388 <__aeabi_d2f>
 23f9ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23f9ab2:	eeb0 0a49 	vmov.f32	s0, s18
  Phi *= 180/M_PI;
 23f9ab6:	6018      	str	r0, [r3, #0]
  Theta = atan2(sqrt(pow(float(X),2)+pow(float(Y),2)),float(Z));
 23f9ab8:	2002      	movs	r0, #2
 23f9aba:	f7ff ff71 	bl	23f99a0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23f9abe:	2002      	movs	r0, #2
 23f9ac0:	ec55 4b10 	vmov	r4, r5, d0
 23f9ac4:	eeb0 0a68 	vmov.f32	s0, s17
 23f9ac8:	f7ff ff6a 	bl	23f99a0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 23f9acc:	4620      	mov	r0, r4
 23f9ace:	ec53 2b10 	vmov	r2, r3, d0
 23f9ad2:	4629      	mov	r1, r5
 23f9ad4:	f7fe fff2 	bl	23f8abc <__adddf3>
 23f9ad8:	ec41 0b10 	vmov	d0, r0, r1
 23f9adc:	f004 fa26 	bl	23fdf2c <sqrt>
 23f9ae0:	ee18 0a10 	vmov	r0, s16
 23f9ae4:	ed8d 0b00 	vstr	d0, [sp]
 23f9ae8:	f7ff f946 	bl	23f8d78 <__aeabi_f2d>
 23f9aec:	ed9d 0b00 	vldr	d0, [sp]
 23f9af0:	ec41 0b11 	vmov	d1, r0, r1
 23f9af4:	f004 f946 	bl	23fdd84 <atan2>
 23f9af8:	ec51 0b10 	vmov	r0, r1, d0
 23f9afc:	f7ff fc44 	bl	23f9388 <__aeabi_d2f>
  Theta *= 180/M_PI;
 23f9b00:	f7ff f93a 	bl	23f8d78 <__aeabi_f2d>
 23f9b04:	a306      	add	r3, pc, #24	; (adr r3, 23f9b20 <_ZN7ADXL36210XYZmgtoRPTEiiiRfS0_S0_+0x150>)
 23f9b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9b0a:	f7ff f98d 	bl	23f8e28 <__aeabi_dmul>
 23f9b0e:	f7ff fc3b 	bl	23f9388 <__aeabi_d2f>
 23f9b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f9b14:	6018      	str	r0, [r3, #0]
}
 23f9b16:	b003      	add	sp, #12
 23f9b18:	ecbd 8b04 	vpop	{d8-d9}
 23f9b1c:	bd30      	pop	{r4, r5, pc}
 23f9b1e:	bf00      	nop
 23f9b20:	1a63c1f8 	.word	0x1a63c1f8
 23f9b24:	404ca5dc 	.word	0x404ca5dc

023f9b28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23f9b28:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23f9b2a:	4c0a      	ldr	r4, [pc, #40]	; (23f9b54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23f9b2c:	e8d4 1f8f 	ldab	r1, [r4]
 23f9b30:	f011 0101 	ands.w	r1, r1, #1
 23f9b34:	d10b      	bne.n	23f9b4e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23f9b36:	4620      	mov	r0, r4
 23f9b38:	9101      	str	r1, [sp, #4]
 23f9b3a:	f7ff fcb7 	bl	23f94ac <__cxa_guard_acquire>
 23f9b3e:	9901      	ldr	r1, [sp, #4]
 23f9b40:	b128      	cbz	r0, 23f9b4e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23f9b42:	4805      	ldr	r0, [pc, #20]	; (23f9b58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23f9b44:	f003 fbc8 	bl	23fd2d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f9b48:	4620      	mov	r0, r4
 23f9b4a:	f7ff fcb4 	bl	23f94b6 <__cxa_guard_release>
        return instance;
    }
 23f9b4e:	4802      	ldr	r0, [pc, #8]	; (23f9b58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23f9b50:	b002      	add	sp, #8
 23f9b52:	bd10      	pop	{r4, pc}
 23f9b54:	1007ae40 	.word	0x1007ae40
 23f9b58:	1007ae44 	.word	0x1007ae44

023f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 23f9b5c:	b507      	push	{r0, r1, r2, lr}
 23f9b5e:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
 23f9b60:	f7ff ffe2 	bl	23f9b28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9b64:	9901      	ldr	r1, [sp, #4]
    }
 23f9b66:	b003      	add	sp, #12
 23f9b68:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
 23f9b6c:	f003 bbe6 	b.w	23fd33c <_ZN8SPIClass8transferEh>

023f9b70 <_ZN7ADXL36219SPIwriteOneRegisterEhh>:
  digitalWrite(slaveSelectPin, HIGH);

  return regValue;
}

void ADXL362::SPIwriteOneRegister(uint8_t regAddress, uint8_t regValue){
 23f9b70:	b570      	push	{r4, r5, r6, lr}
 23f9b72:	460e      	mov	r6, r1
 23f9b74:	4615      	mov	r5, r2
 23f9b76:	4604      	mov	r4, r0

  digitalWrite(slaveSelectPin, LOW);
 23f9b78:	2100      	movs	r1, #0
 23f9b7a:	8840      	ldrh	r0, [r0, #2]
 23f9b7c:	f003 fecf 	bl	23fd91e <digitalWrite>
  SPI.transfer(0x0A);  // write instruction
 23f9b80:	200a      	movs	r0, #10
 23f9b82:	f7ff ffeb 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23f9b86:	4630      	mov	r0, r6
 23f9b88:	f7ff ffe8 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regValue);
 23f9b8c:	4628      	mov	r0, r5
 23f9b8e:	f7ff ffe5 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  digitalWrite(slaveSelectPin, HIGH);
 23f9b92:	8860      	ldrh	r0, [r4, #2]
 23f9b94:	2101      	movs	r1, #1
}
 23f9b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(slaveSelectPin, HIGH);
 23f9b9a:	f003 bec0 	b.w	23fd91e <digitalWrite>

023f9b9e <_ZN7ADXL36218SPIreadOneRegisterEh>:
uint8_t ADXL362::SPIreadOneRegister(uint8_t regAddress){
 23f9b9e:	b538      	push	{r3, r4, r5, lr}
 23f9ba0:	460d      	mov	r5, r1
 23f9ba2:	4604      	mov	r4, r0
  digitalWrite(slaveSelectPin, LOW);
 23f9ba4:	2100      	movs	r1, #0
 23f9ba6:	8840      	ldrh	r0, [r0, #2]
 23f9ba8:	f003 feb9 	bl	23fd91e <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23f9bac:	200b      	movs	r0, #11
 23f9bae:	f7ff ffd5 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(regAddress);
 23f9bb2:	4628      	mov	r0, r5
 23f9bb4:	f7ff ffd2 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  regValue = SPI.transfer(0x00);
 23f9bb8:	2000      	movs	r0, #0
 23f9bba:	f7ff ffcf 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23f9bbe:	4605      	mov	r5, r0
  digitalWrite(slaveSelectPin, HIGH);
 23f9bc0:	2101      	movs	r1, #1
 23f9bc2:	8860      	ldrh	r0, [r4, #2]
 23f9bc4:	f003 feab 	bl	23fd91e <digitalWrite>
}
 23f9bc8:	4628      	mov	r0, r5
 23f9bca:	bd38      	pop	{r3, r4, r5, pc}

023f9bcc <_ZN7ADXL36212beginMeasureEv>:
void ADXL362::beginMeasure() {
 23f9bcc:	b510      	push	{r4, lr}
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23f9bce:	212d      	movs	r1, #45	; 0x2d
void ADXL362::beginMeasure() {
 23f9bd0:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 23f9bd2:	f7ff ffe4 	bl	23f9b9e <_ZN7ADXL36218SPIreadOneRegisterEh>
  temp = (temp & 0b11111100) | XL362_POWER_FLAG_MEASURE_RUNING;     // turn on measurement bit in Reg XL362_POWER_CTL
 23f9bd6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  SPIwriteOneRegister(XL362_POWER_CTL, temp); // Write to XL362_POWER_CTL, Measurement Mode
 23f9bda:	f040 0202 	orr.w	r2, r0, #2
 23f9bde:	212d      	movs	r1, #45	; 0x2d
 23f9be0:	4620      	mov	r0, r4
 23f9be2:	f7ff ffc5 	bl	23f9b70 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23f9be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23f9bea:	200a      	movs	r0, #10
 23f9bec:	f000 bd60 	b.w	23fa6b0 <delay>

023f9bf0 <_ZN7ADXL3628setRangeEh>:
void ADXL362::setRange(uint8_t Range){
 23f9bf0:	b538      	push	{r3, r4, r5, lr}
 23f9bf2:	460d      	mov	r5, r1
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23f9bf4:	212c      	movs	r1, #44	; 0x2c
void ADXL362::setRange(uint8_t Range){
 23f9bf6:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_FILTER_CTL);  // read Reg XL362_FILTER_CTL before modifying
 23f9bf8:	f7ff ffd1 	bl	23f9b9e <_ZN7ADXL36218SPIreadOneRegisterEh>
  switch ( Range ) { // Range affects converting LSB to mg
 23f9bfc:	2d40      	cmp	r5, #64	; 0x40
 23f9bfe:	d00f      	beq.n	23f9c20 <_ZN7ADXL3628setRangeEh+0x30>
 23f9c00:	2d80      	cmp	r5, #128	; 0x80
 23f9c02:	d00f      	beq.n	23f9c24 <_ZN7ADXL3628setRangeEh+0x34>
    mgperLSB = 1;
 23f9c04:	2301      	movs	r3, #1
  temp = (temp & 0b00111111) | Range;
 23f9c06:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    mgperLSB = 4;
 23f9c0a:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_FILTER_CTL, temp); // Write to XL362_FILTER_CTL
 23f9c0c:	4620      	mov	r0, r4
 23f9c0e:	432a      	orrs	r2, r5
 23f9c10:	212c      	movs	r1, #44	; 0x2c
 23f9c12:	f7ff ffad 	bl	23f9b70 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 23f9c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(10);
 23f9c1a:	200a      	movs	r0, #10
 23f9c1c:	f000 bd48 	b.w	23fa6b0 <delay>
    mgperLSB = 2;
 23f9c20:	2302      	movs	r3, #2
 23f9c22:	e7f0      	b.n	23f9c06 <_ZN7ADXL3628setRangeEh+0x16>
    mgperLSB = 4;
 23f9c24:	2304      	movs	r3, #4
 23f9c26:	e7ee      	b.n	23f9c06 <_ZN7ADXL3628setRangeEh+0x16>

023f9c28 <_ZN7ADXL3629readXYZmgERiS0_S0_>:
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23f9c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9c2c:	4604      	mov	r4, r0
 23f9c2e:	468b      	mov	fp, r1
  digitalWrite(slaveSelectPin, LOW);
 23f9c30:	8840      	ldrh	r0, [r0, #2]
 23f9c32:	2100      	movs	r1, #0
void ADXL362::readXYZmg(int &X, int &Y, int &Z){
 23f9c34:	4691      	mov	r9, r2
 23f9c36:	4698      	mov	r8, r3
  digitalWrite(slaveSelectPin, LOW);
 23f9c38:	f003 fe71 	bl	23fd91e <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 23f9c3c:	200b      	movs	r0, #11
 23f9c3e:	f7ff ff8d 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  SPI.transfer(XL362_XDATA_L);  // Start at XData Reg
 23f9c42:	200e      	movs	r0, #14
 23f9c44:	f7ff ff8a 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  short XData = SPI.transfer(0x00);
 23f9c48:	2000      	movs	r0, #0
 23f9c4a:	f7ff ff87 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23f9c4e:	4607      	mov	r7, r0
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23f9c50:	2000      	movs	r0, #0
 23f9c52:	f7ff ff83 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23f9c56:	9001      	str	r0, [sp, #4]
  short YData = SPI.transfer(0x00);
 23f9c58:	2000      	movs	r0, #0
 23f9c5a:	f7ff ff7f 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23f9c5e:	4606      	mov	r6, r0
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23f9c60:	2000      	movs	r0, #0
 23f9c62:	f7ff ff7b 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23f9c66:	9000      	str	r0, [sp, #0]
  short ZData = SPI.transfer(0x00);
 23f9c68:	2000      	movs	r0, #0
 23f9c6a:	f7ff ff77 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23f9c6e:	4605      	mov	r5, r0
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23f9c70:	2000      	movs	r0, #0
 23f9c72:	f7ff ff73 	bl	23f9b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
 23f9c76:	4682      	mov	sl, r0
  digitalWrite(slaveSelectPin, HIGH);
 23f9c78:	2101      	movs	r1, #1
 23f9c7a:	8860      	ldrh	r0, [r4, #2]
 23f9c7c:	f003 fe4f 	bl	23fd91e <digitalWrite>
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23f9c80:	9a01      	ldr	r2, [sp, #4]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23f9c82:	9b00      	ldr	r3, [sp, #0]
  XData = XData + ((short)SPI.transfer(0x00) << 8);
 23f9c84:	eb07 2702 	add.w	r7, r7, r2, lsl #8
  X = (int)XData * mgperLSB;
 23f9c88:	7822      	ldrb	r2, [r4, #0]
  YData = YData + ((short)SPI.transfer(0x00) << 8);
 23f9c8a:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  X = (int)XData * mgperLSB;
 23f9c8e:	fb12 f707 	smulbb	r7, r2, r7
 23f9c92:	f8cb 7000 	str.w	r7, [fp]
  Y = (int)YData * mgperLSB;
 23f9c96:	7823      	ldrb	r3, [r4, #0]
  ZData = ZData + ((short)SPI.transfer(0x00) << 8);
 23f9c98:	eb05 250a 	add.w	r5, r5, sl, lsl #8
  Y = (int)YData * mgperLSB;
 23f9c9c:	fb13 f606 	smulbb	r6, r3, r6
 23f9ca0:	f8c9 6000 	str.w	r6, [r9]
  Z = (int)ZData * mgperLSB;
 23f9ca4:	7822      	ldrb	r2, [r4, #0]
 23f9ca6:	fb12 f505 	smulbb	r5, r2, r5
 23f9caa:	f8c8 5000 	str.w	r5, [r8]
}
 23f9cae:	b003      	add	sp, #12
 23f9cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f9cb4 <_ZN7ADXL3625beginEv>:
void ADXL362::begin() {
 23f9cb4:	b510      	push	{r4, lr}
  pinMode(slaveSelectPin, OUTPUT);
 23f9cb6:	2101      	movs	r1, #1
void ADXL362::begin() {
 23f9cb8:	4604      	mov	r4, r0
  pinMode(slaveSelectPin, OUTPUT);
 23f9cba:	8840      	ldrh	r0, [r0, #2]
 23f9cbc:	f003 fe1e 	bl	23fd8fc <pinMode>
        instance().begin();
 23f9cc0:	f7ff ff32 	bl	23f9b28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9cc4:	f003 fb12 	bl	23fd2ec <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
 23f9cc8:	f7ff ff2e 	bl	23f9b28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9ccc:	2100      	movs	r1, #0
 23f9cce:	f003 fb21 	bl	23fd314 <_ZN8SPIClass11setDataModeEh>
  delay(500);
 23f9cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f9cd6:	f000 fceb 	bl	23fa6b0 <delay>
  mgperLSB = 1;
 23f9cda:	2301      	movs	r3, #1
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23f9cdc:	4620      	mov	r0, r4
  mgperLSB = 1;
 23f9cde:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 23f9ce0:	2252      	movs	r2, #82	; 0x52
 23f9ce2:	211f      	movs	r1, #31
 23f9ce4:	f7ff ff44 	bl	23f9b70 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
 }
 23f9ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23f9cec:	200a      	movs	r0, #10
 23f9cee:	f000 bcdf 	b.w	23fa6b0 <delay>
	...

023f9cf4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23f9cf4:	b509      	push	{r0, r3, lr}
 23f9cf6:	4804      	ldr	r0, [pc, #16]	; (23f9d08 <hal_ble_stack_init+0x14>)
 23f9cf8:	6800      	ldr	r0, [r0, #0]
 23f9cfa:	4b04      	ldr	r3, [pc, #16]	; (23f9d0c <hal_ble_stack_init+0x18>)
 23f9cfc:	4403      	add	r3, r0
 23f9cfe:	681b      	ldr	r3, [r3, #0]
 23f9d00:	689b      	ldr	r3, [r3, #8]
 23f9d02:	9302      	str	r3, [sp, #8]
 23f9d04:	bd09      	pop	{r0, r3, pc}
 23f9d06:	0000      	.short	0x0000
 23f9d08:	10079d70 	.word	0x10079d70
 23f9d0c:	00000060 	.word	0x00000060

023f9d10 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
 23f9d10:	b509      	push	{r0, r3, lr}
 23f9d12:	4804      	ldr	r0, [pc, #16]	; (23f9d24 <hal_ble_gap_set_advertising_data+0x14>)
 23f9d14:	6800      	ldr	r0, [r0, #0]
 23f9d16:	4b04      	ldr	r3, [pc, #16]	; (23f9d28 <hal_ble_gap_set_advertising_data+0x18>)
 23f9d18:	4403      	add	r3, r0
 23f9d1a:	681b      	ldr	r3, [r3, #0]
 23f9d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f9d1e:	9302      	str	r3, [sp, #8]
 23f9d20:	bd09      	pop	{r0, r3, pc}
 23f9d22:	0000      	.short	0x0000
 23f9d24:	10079d70 	.word	0x10079d70
 23f9d28:	00000060 	.word	0x00000060

023f9d2c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
 23f9d2c:	b509      	push	{r0, r3, lr}
 23f9d2e:	4804      	ldr	r0, [pc, #16]	; (23f9d40 <hal_ble_gap_set_scan_response_data+0x14>)
 23f9d30:	6800      	ldr	r0, [r0, #0]
 23f9d32:	4b04      	ldr	r3, [pc, #16]	; (23f9d44 <hal_ble_gap_set_scan_response_data+0x18>)
 23f9d34:	4403      	add	r3, r0
 23f9d36:	681b      	ldr	r3, [r3, #0]
 23f9d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f9d3a:	9302      	str	r3, [sp, #8]
 23f9d3c:	bd09      	pop	{r0, r3, pc}
 23f9d3e:	0000      	.short	0x0000
 23f9d40:	10079d70 	.word	0x10079d70
 23f9d44:	00000060 	.word	0x00000060

023f9d48 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
 23f9d48:	b509      	push	{r0, r3, lr}
 23f9d4a:	4804      	ldr	r0, [pc, #16]	; (23f9d5c <hal_ble_gap_start_advertising+0x14>)
 23f9d4c:	6800      	ldr	r0, [r0, #0]
 23f9d4e:	4b04      	ldr	r3, [pc, #16]	; (23f9d60 <hal_ble_gap_start_advertising+0x18>)
 23f9d50:	4403      	add	r3, r0
 23f9d52:	681b      	ldr	r3, [r3, #0]
 23f9d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 23f9d56:	9302      	str	r3, [sp, #8]
 23f9d58:	bd09      	pop	{r0, r3, pc}
 23f9d5a:	0000      	.short	0x0000
 23f9d5c:	10079d70 	.word	0x10079d70
 23f9d60:	00000060 	.word	0x00000060

023f9d64 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23f9d64:	b509      	push	{r0, r3, lr}
 23f9d66:	4804      	ldr	r0, [pc, #16]	; (23f9d78 <hal_ble_gap_disconnect+0x14>)
 23f9d68:	6800      	ldr	r0, [r0, #0]
 23f9d6a:	4b04      	ldr	r3, [pc, #16]	; (23f9d7c <hal_ble_gap_disconnect+0x18>)
 23f9d6c:	4403      	add	r3, r0
 23f9d6e:	681b      	ldr	r3, [r3, #0]
 23f9d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f9d74:	9302      	str	r3, [sp, #8]
 23f9d76:	bd09      	pop	{r0, r3, pc}
 23f9d78:	10079d70 	.word	0x10079d70
 23f9d7c:	00000060 	.word	0x00000060

023f9d80 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
 23f9d80:	b509      	push	{r0, r3, lr}
 23f9d82:	4804      	ldr	r0, [pc, #16]	; (23f9d94 <hal_ble_gatt_server_add_service+0x14>)
 23f9d84:	6800      	ldr	r0, [r0, #0]
 23f9d86:	4b04      	ldr	r3, [pc, #16]	; (23f9d98 <hal_ble_gatt_server_add_service+0x18>)
 23f9d88:	4403      	add	r3, r0
 23f9d8a:	681b      	ldr	r3, [r3, #0]
 23f9d8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23f9d90:	9302      	str	r3, [sp, #8]
 23f9d92:	bd09      	pop	{r0, r3, pc}
 23f9d94:	10079d70 	.word	0x10079d70
 23f9d98:	00000060 	.word	0x00000060

023f9d9c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f9d9c:	b509      	push	{r0, r3, lr}
 23f9d9e:	4804      	ldr	r0, [pc, #16]	; (23f9db0 <hal_ble_gatt_server_set_characteristic_value+0x14>)
 23f9da0:	6800      	ldr	r0, [r0, #0]
 23f9da2:	4b04      	ldr	r3, [pc, #16]	; (23f9db4 <hal_ble_gatt_server_set_characteristic_value+0x18>)
 23f9da4:	4403      	add	r3, r0
 23f9da6:	681b      	ldr	r3, [r3, #0]
 23f9da8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23f9dac:	9302      	str	r3, [sp, #8]
 23f9dae:	bd09      	pop	{r0, r3, pc}
 23f9db0:	10079d70 	.word	0x10079d70
 23f9db4:	00000060 	.word	0x00000060

023f9db8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f9db8:	b509      	push	{r0, r3, lr}
 23f9dba:	4804      	ldr	r0, [pc, #16]	; (23f9dcc <hal_ble_gatt_client_write_with_response+0x14>)
 23f9dbc:	6800      	ldr	r0, [r0, #0]
 23f9dbe:	4b04      	ldr	r3, [pc, #16]	; (23f9dd0 <hal_ble_gatt_client_write_with_response+0x18>)
 23f9dc0:	4403      	add	r3, r0
 23f9dc2:	681b      	ldr	r3, [r3, #0]
 23f9dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 23f9dc8:	9302      	str	r3, [sp, #8]
 23f9dca:	bd09      	pop	{r0, r3, pc}
 23f9dcc:	10079d70 	.word	0x10079d70
 23f9dd0:	00000060 	.word	0x00000060

023f9dd4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f9dd4:	b509      	push	{r0, r3, lr}
 23f9dd6:	4804      	ldr	r0, [pc, #16]	; (23f9de8 <hal_ble_gatt_client_write_without_response+0x14>)
 23f9dd8:	6800      	ldr	r0, [r0, #0]
 23f9dda:	4b04      	ldr	r3, [pc, #16]	; (23f9dec <hal_ble_gatt_client_write_without_response+0x18>)
 23f9ddc:	4403      	add	r3, r0
 23f9dde:	681b      	ldr	r3, [r3, #0]
 23f9de0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 23f9de4:	9302      	str	r3, [sp, #8]
 23f9de6:	bd09      	pop	{r0, r3, pc}
 23f9de8:	10079d70 	.word	0x10079d70
 23f9dec:	00000060 	.word	0x00000060

023f9df0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
 23f9df0:	b509      	push	{r0, r3, lr}
 23f9df2:	4804      	ldr	r0, [pc, #16]	; (23f9e04 <hal_ble_gatt_server_add_characteristic+0x14>)
 23f9df4:	6800      	ldr	r0, [r0, #0]
 23f9df6:	4b04      	ldr	r3, [pc, #16]	; (23f9e08 <hal_ble_gatt_server_add_characteristic+0x18>)
 23f9df8:	4403      	add	r3, r0
 23f9dfa:	681b      	ldr	r3, [r3, #0]
 23f9dfc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 23f9e00:	9302      	str	r3, [sp, #8]
 23f9e02:	bd09      	pop	{r0, r3, pc}
 23f9e04:	10079d70 	.word	0x10079d70
 23f9e08:	00000060 	.word	0x00000060

023f9e0c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23f9e0c:	b509      	push	{r0, r3, lr}
 23f9e0e:	4804      	ldr	r0, [pc, #16]	; (23f9e20 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23f9e10:	6800      	ldr	r0, [r0, #0]
 23f9e12:	4b04      	ldr	r3, [pc, #16]	; (23f9e24 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23f9e14:	4403      	add	r3, r0
 23f9e16:	681b      	ldr	r3, [r3, #0]
 23f9e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23f9e1c:	9302      	str	r3, [sp, #8]
 23f9e1e:	bd09      	pop	{r0, r3, pc}
 23f9e20:	10079d70 	.word	0x10079d70
 23f9e24:	00000060 	.word	0x00000060

023f9e28 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f9e28:	b509      	push	{r0, r3, lr}
 23f9e2a:	4804      	ldr	r0, [pc, #16]	; (23f9e3c <hal_ble_gatt_server_notify_characteristic_value+0x14>)
 23f9e2c:	6800      	ldr	r0, [r0, #0]
 23f9e2e:	4b04      	ldr	r3, [pc, #16]	; (23f9e40 <hal_ble_gatt_server_notify_characteristic_value+0x18>)
 23f9e30:	4403      	add	r3, r0
 23f9e32:	681b      	ldr	r3, [r3, #0]
 23f9e34:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 23f9e38:	9302      	str	r3, [sp, #8]
 23f9e3a:	bd09      	pop	{r0, r3, pc}
 23f9e3c:	10079d70 	.word	0x10079d70
 23f9e40:	00000060 	.word	0x00000060

023f9e44 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f9e44:	b509      	push	{r0, r3, lr}
 23f9e46:	4804      	ldr	r0, [pc, #16]	; (23f9e58 <hal_ble_gatt_server_indicate_characteristic_value+0x14>)
 23f9e48:	6800      	ldr	r0, [r0, #0]
 23f9e4a:	4b04      	ldr	r3, [pc, #16]	; (23f9e5c <hal_ble_gatt_server_indicate_characteristic_value+0x18>)
 23f9e4c:	4403      	add	r3, r0
 23f9e4e:	681b      	ldr	r3, [r3, #0]
 23f9e50:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 23f9e54:	9302      	str	r3, [sp, #8]
 23f9e56:	bd09      	pop	{r0, r3, pc}
 23f9e58:	10079d70 	.word	0x10079d70
 23f9e5c:	00000060 	.word	0x00000060

023f9e60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f9e60:	b509      	push	{r0, r3, lr}
 23f9e62:	4804      	ldr	r0, [pc, #16]	; (23f9e74 <os_mutex_recursive_create+0x14>)
 23f9e64:	6800      	ldr	r0, [r0, #0]
 23f9e66:	4b04      	ldr	r3, [pc, #16]	; (23f9e78 <os_mutex_recursive_create+0x18>)
 23f9e68:	4403      	add	r3, r0
 23f9e6a:	681b      	ldr	r3, [r3, #0]
 23f9e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9e6e:	9302      	str	r3, [sp, #8]
 23f9e70:	bd09      	pop	{r0, r3, pc}
 23f9e72:	0000      	.short	0x0000
 23f9e74:	10079d70 	.word	0x10079d70
 23f9e78:	00000030 	.word	0x00000030

023f9e7c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f9e7c:	b509      	push	{r0, r3, lr}
 23f9e7e:	4804      	ldr	r0, [pc, #16]	; (23f9e90 <os_mutex_recursive_destroy+0x14>)
 23f9e80:	6800      	ldr	r0, [r0, #0]
 23f9e82:	4b04      	ldr	r3, [pc, #16]	; (23f9e94 <os_mutex_recursive_destroy+0x18>)
 23f9e84:	4403      	add	r3, r0
 23f9e86:	681b      	ldr	r3, [r3, #0]
 23f9e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9e8a:	9302      	str	r3, [sp, #8]
 23f9e8c:	bd09      	pop	{r0, r3, pc}
 23f9e8e:	0000      	.short	0x0000
 23f9e90:	10079d70 	.word	0x10079d70
 23f9e94:	00000030 	.word	0x00000030

023f9e98 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f9e98:	b509      	push	{r0, r3, lr}
 23f9e9a:	4804      	ldr	r0, [pc, #16]	; (23f9eac <os_mutex_recursive_lock+0x14>)
 23f9e9c:	6800      	ldr	r0, [r0, #0]
 23f9e9e:	4b04      	ldr	r3, [pc, #16]	; (23f9eb0 <os_mutex_recursive_lock+0x18>)
 23f9ea0:	4403      	add	r3, r0
 23f9ea2:	681b      	ldr	r3, [r3, #0]
 23f9ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f9ea6:	9302      	str	r3, [sp, #8]
 23f9ea8:	bd09      	pop	{r0, r3, pc}
 23f9eaa:	0000      	.short	0x0000
 23f9eac:	10079d70 	.word	0x10079d70
 23f9eb0:	00000030 	.word	0x00000030

023f9eb4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f9eb4:	b509      	push	{r0, r3, lr}
 23f9eb6:	4804      	ldr	r0, [pc, #16]	; (23f9ec8 <os_mutex_recursive_unlock+0x14>)
 23f9eb8:	6800      	ldr	r0, [r0, #0]
 23f9eba:	4b04      	ldr	r3, [pc, #16]	; (23f9ecc <os_mutex_recursive_unlock+0x18>)
 23f9ebc:	4403      	add	r3, r0
 23f9ebe:	681b      	ldr	r3, [r3, #0]
 23f9ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9ec2:	9302      	str	r3, [sp, #8]
 23f9ec4:	bd09      	pop	{r0, r3, pc}
 23f9ec6:	0000      	.short	0x0000
 23f9ec8:	10079d70 	.word	0x10079d70
 23f9ecc:	00000030 	.word	0x00000030

023f9ed0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f9ed0:	b509      	push	{r0, r3, lr}
 23f9ed2:	4804      	ldr	r0, [pc, #16]	; (23f9ee4 <HAL_RNG_GetRandomNumber+0x14>)
 23f9ed4:	6800      	ldr	r0, [r0, #0]
 23f9ed6:	4b04      	ldr	r3, [pc, #16]	; (23f9ee8 <HAL_RNG_GetRandomNumber+0x18>)
 23f9ed8:	4403      	add	r3, r0
 23f9eda:	681b      	ldr	r3, [r3, #0]
 23f9edc:	685b      	ldr	r3, [r3, #4]
 23f9ede:	9302      	str	r3, [sp, #8]
 23f9ee0:	bd09      	pop	{r0, r3, pc}
 23f9ee2:	0000      	.short	0x0000
 23f9ee4:	10079d70 	.word	0x10079d70
 23f9ee8:	00000000 	.word	0x00000000

023f9eec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f9eec:	b509      	push	{r0, r3, lr}
 23f9eee:	4804      	ldr	r0, [pc, #16]	; (23f9f00 <HAL_Delay_Microseconds+0x14>)
 23f9ef0:	6800      	ldr	r0, [r0, #0]
 23f9ef2:	4b04      	ldr	r3, [pc, #16]	; (23f9f04 <HAL_Delay_Microseconds+0x18>)
 23f9ef4:	4403      	add	r3, r0
 23f9ef6:	681b      	ldr	r3, [r3, #0]
 23f9ef8:	68db      	ldr	r3, [r3, #12]
 23f9efa:	9302      	str	r3, [sp, #8]
 23f9efc:	bd09      	pop	{r0, r3, pc}
 23f9efe:	0000      	.short	0x0000
 23f9f00:	10079d70 	.word	0x10079d70
 23f9f04:	00000000 	.word	0x00000000

023f9f08 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f9f08:	b509      	push	{r0, r3, lr}
 23f9f0a:	4804      	ldr	r0, [pc, #16]	; (23f9f1c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f9f0c:	6800      	ldr	r0, [r0, #0]
 23f9f0e:	4b04      	ldr	r3, [pc, #16]	; (23f9f20 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f9f10:	4403      	add	r3, r0
 23f9f12:	681b      	ldr	r3, [r3, #0]
 23f9f14:	695b      	ldr	r3, [r3, #20]
 23f9f16:	9302      	str	r3, [sp, #8]
 23f9f18:	bd09      	pop	{r0, r3, pc}
 23f9f1a:	0000      	.short	0x0000
 23f9f1c:	10079d70 	.word	0x10079d70
 23f9f20:	00000000 	.word	0x00000000

023f9f24 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f9f24:	b509      	push	{r0, r3, lr}
 23f9f26:	4804      	ldr	r0, [pc, #16]	; (23f9f38 <hal_gpio_mode+0x14>)
 23f9f28:	6800      	ldr	r0, [r0, #0]
 23f9f2a:	4b04      	ldr	r3, [pc, #16]	; (23f9f3c <hal_gpio_mode+0x18>)
 23f9f2c:	4403      	add	r3, r0
 23f9f2e:	681b      	ldr	r3, [r3, #0]
 23f9f30:	689b      	ldr	r3, [r3, #8]
 23f9f32:	9302      	str	r3, [sp, #8]
 23f9f34:	bd09      	pop	{r0, r3, pc}
 23f9f36:	0000      	.short	0x0000
 23f9f38:	10079d70 	.word	0x10079d70
 23f9f3c:	00000014 	.word	0x00000014

023f9f40 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f9f40:	b509      	push	{r0, r3, lr}
 23f9f42:	4804      	ldr	r0, [pc, #16]	; (23f9f54 <hal_gpio_get_mode+0x14>)
 23f9f44:	6800      	ldr	r0, [r0, #0]
 23f9f46:	4b04      	ldr	r3, [pc, #16]	; (23f9f58 <hal_gpio_get_mode+0x18>)
 23f9f48:	4403      	add	r3, r0
 23f9f4a:	681b      	ldr	r3, [r3, #0]
 23f9f4c:	68db      	ldr	r3, [r3, #12]
 23f9f4e:	9302      	str	r3, [sp, #8]
 23f9f50:	bd09      	pop	{r0, r3, pc}
 23f9f52:	0000      	.short	0x0000
 23f9f54:	10079d70 	.word	0x10079d70
 23f9f58:	00000014 	.word	0x00000014

023f9f5c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f9f5c:	b509      	push	{r0, r3, lr}
 23f9f5e:	4804      	ldr	r0, [pc, #16]	; (23f9f70 <hal_gpio_write+0x14>)
 23f9f60:	6800      	ldr	r0, [r0, #0]
 23f9f62:	4b04      	ldr	r3, [pc, #16]	; (23f9f74 <hal_gpio_write+0x18>)
 23f9f64:	4403      	add	r3, r0
 23f9f66:	681b      	ldr	r3, [r3, #0]
 23f9f68:	691b      	ldr	r3, [r3, #16]
 23f9f6a:	9302      	str	r3, [sp, #8]
 23f9f6c:	bd09      	pop	{r0, r3, pc}
 23f9f6e:	0000      	.short	0x0000
 23f9f70:	10079d70 	.word	0x10079d70
 23f9f74:	00000014 	.word	0x00000014

023f9f78 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f9f78:	b509      	push	{r0, r3, lr}
 23f9f7a:	4804      	ldr	r0, [pc, #16]	; (23f9f8c <hal_i2c_write+0x14>)
 23f9f7c:	6800      	ldr	r0, [r0, #0]
 23f9f7e:	4b04      	ldr	r3, [pc, #16]	; (23f9f90 <hal_i2c_write+0x18>)
 23f9f80:	4403      	add	r3, r0
 23f9f82:	681b      	ldr	r3, [r3, #0]
 23f9f84:	6a1b      	ldr	r3, [r3, #32]
 23f9f86:	9302      	str	r3, [sp, #8]
 23f9f88:	bd09      	pop	{r0, r3, pc}
 23f9f8a:	0000      	.short	0x0000
 23f9f8c:	10079d70 	.word	0x10079d70
 23f9f90:	00000010 	.word	0x00000010

023f9f94 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f9f94:	b509      	push	{r0, r3, lr}
 23f9f96:	4804      	ldr	r0, [pc, #16]	; (23f9fa8 <hal_i2c_available+0x14>)
 23f9f98:	6800      	ldr	r0, [r0, #0]
 23f9f9a:	4b04      	ldr	r3, [pc, #16]	; (23f9fac <hal_i2c_available+0x18>)
 23f9f9c:	4403      	add	r3, r0
 23f9f9e:	681b      	ldr	r3, [r3, #0]
 23f9fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9fa2:	9302      	str	r3, [sp, #8]
 23f9fa4:	bd09      	pop	{r0, r3, pc}
 23f9fa6:	0000      	.short	0x0000
 23f9fa8:	10079d70 	.word	0x10079d70
 23f9fac:	00000010 	.word	0x00000010

023f9fb0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f9fb0:	b509      	push	{r0, r3, lr}
 23f9fb2:	4804      	ldr	r0, [pc, #16]	; (23f9fc4 <hal_i2c_read+0x14>)
 23f9fb4:	6800      	ldr	r0, [r0, #0]
 23f9fb6:	4b04      	ldr	r3, [pc, #16]	; (23f9fc8 <hal_i2c_read+0x18>)
 23f9fb8:	4403      	add	r3, r0
 23f9fba:	681b      	ldr	r3, [r3, #0]
 23f9fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9fbe:	9302      	str	r3, [sp, #8]
 23f9fc0:	bd09      	pop	{r0, r3, pc}
 23f9fc2:	0000      	.short	0x0000
 23f9fc4:	10079d70 	.word	0x10079d70
 23f9fc8:	00000010 	.word	0x00000010

023f9fcc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f9fcc:	b509      	push	{r0, r3, lr}
 23f9fce:	4804      	ldr	r0, [pc, #16]	; (23f9fe0 <hal_i2c_peek+0x14>)
 23f9fd0:	6800      	ldr	r0, [r0, #0]
 23f9fd2:	4b04      	ldr	r3, [pc, #16]	; (23f9fe4 <hal_i2c_peek+0x18>)
 23f9fd4:	4403      	add	r3, r0
 23f9fd6:	681b      	ldr	r3, [r3, #0]
 23f9fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9fda:	9302      	str	r3, [sp, #8]
 23f9fdc:	bd09      	pop	{r0, r3, pc}
 23f9fde:	0000      	.short	0x0000
 23f9fe0:	10079d70 	.word	0x10079d70
 23f9fe4:	00000010 	.word	0x00000010

023f9fe8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f9fe8:	b509      	push	{r0, r3, lr}
 23f9fea:	4804      	ldr	r0, [pc, #16]	; (23f9ffc <hal_i2c_flush+0x14>)
 23f9fec:	6800      	ldr	r0, [r0, #0]
 23f9fee:	4b04      	ldr	r3, [pc, #16]	; (23fa000 <hal_i2c_flush+0x18>)
 23f9ff0:	4403      	add	r3, r0
 23f9ff2:	681b      	ldr	r3, [r3, #0]
 23f9ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9ff6:	9302      	str	r3, [sp, #8]
 23f9ff8:	bd09      	pop	{r0, r3, pc}
 23f9ffa:	0000      	.short	0x0000
 23f9ffc:	10079d70 	.word	0x10079d70
 23fa000:	00000010 	.word	0x00000010

023fa004 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fa004:	b509      	push	{r0, r3, lr}
 23fa006:	4804      	ldr	r0, [pc, #16]	; (23fa018 <hal_i2c_is_enabled+0x14>)
 23fa008:	6800      	ldr	r0, [r0, #0]
 23fa00a:	4b04      	ldr	r3, [pc, #16]	; (23fa01c <hal_i2c_is_enabled+0x18>)
 23fa00c:	4403      	add	r3, r0
 23fa00e:	681b      	ldr	r3, [r3, #0]
 23fa010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fa012:	9302      	str	r3, [sp, #8]
 23fa014:	bd09      	pop	{r0, r3, pc}
 23fa016:	0000      	.short	0x0000
 23fa018:	10079d70 	.word	0x10079d70
 23fa01c:	00000010 	.word	0x00000010

023fa020 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fa020:	b509      	push	{r0, r3, lr}
 23fa022:	4804      	ldr	r0, [pc, #16]	; (23fa034 <hal_i2c_init+0x14>)
 23fa024:	6800      	ldr	r0, [r0, #0]
 23fa026:	4b04      	ldr	r3, [pc, #16]	; (23fa038 <hal_i2c_init+0x18>)
 23fa028:	4403      	add	r3, r0
 23fa02a:	681b      	ldr	r3, [r3, #0]
 23fa02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa02e:	9302      	str	r3, [sp, #8]
 23fa030:	bd09      	pop	{r0, r3, pc}
 23fa032:	0000      	.short	0x0000
 23fa034:	10079d70 	.word	0x10079d70
 23fa038:	00000010 	.word	0x00000010

023fa03c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fa03c:	b509      	push	{r0, r3, lr}
 23fa03e:	4804      	ldr	r0, [pc, #16]	; (23fa050 <inet_inet_ntop+0x14>)
 23fa040:	6800      	ldr	r0, [r0, #0]
 23fa042:	4b04      	ldr	r3, [pc, #16]	; (23fa054 <inet_inet_ntop+0x18>)
 23fa044:	4403      	add	r3, r0
 23fa046:	681b      	ldr	r3, [r3, #0]
 23fa048:	695b      	ldr	r3, [r3, #20]
 23fa04a:	9302      	str	r3, [sp, #8]
 23fa04c:	bd09      	pop	{r0, r3, pc}
 23fa04e:	0000      	.short	0x0000
 23fa050:	10079d70 	.word	0x10079d70
 23fa054:	0000004c 	.word	0x0000004c

023fa058 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fa058:	b509      	push	{r0, r3, lr}
 23fa05a:	4804      	ldr	r0, [pc, #16]	; (23fa06c <netdb_freeaddrinfo+0x14>)
 23fa05c:	6800      	ldr	r0, [r0, #0]
 23fa05e:	4b04      	ldr	r3, [pc, #16]	; (23fa070 <netdb_freeaddrinfo+0x18>)
 23fa060:	4403      	add	r3, r0
 23fa062:	681b      	ldr	r3, [r3, #0]
 23fa064:	689b      	ldr	r3, [r3, #8]
 23fa066:	9302      	str	r3, [sp, #8]
 23fa068:	bd09      	pop	{r0, r3, pc}
 23fa06a:	0000      	.short	0x0000
 23fa06c:	10079d70 	.word	0x10079d70
 23fa070:	00000050 	.word	0x00000050

023fa074 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fa074:	b509      	push	{r0, r3, lr}
 23fa076:	4804      	ldr	r0, [pc, #16]	; (23fa088 <netdb_getaddrinfo+0x14>)
 23fa078:	6800      	ldr	r0, [r0, #0]
 23fa07a:	4b04      	ldr	r3, [pc, #16]	; (23fa08c <netdb_getaddrinfo+0x18>)
 23fa07c:	4403      	add	r3, r0
 23fa07e:	681b      	ldr	r3, [r3, #0]
 23fa080:	68db      	ldr	r3, [r3, #12]
 23fa082:	9302      	str	r3, [sp, #8]
 23fa084:	bd09      	pop	{r0, r3, pc}
 23fa086:	0000      	.short	0x0000
 23fa088:	10079d70 	.word	0x10079d70
 23fa08c:	00000050 	.word	0x00000050

023fa090 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fa090:	b509      	push	{r0, r3, lr}
 23fa092:	4804      	ldr	r0, [pc, #16]	; (23fa0a4 <hal_spi_begin+0x14>)
 23fa094:	6800      	ldr	r0, [r0, #0]
 23fa096:	4b04      	ldr	r3, [pc, #16]	; (23fa0a8 <hal_spi_begin+0x18>)
 23fa098:	4403      	add	r3, r0
 23fa09a:	681b      	ldr	r3, [r3, #0]
 23fa09c:	681b      	ldr	r3, [r3, #0]
 23fa09e:	9302      	str	r3, [sp, #8]
 23fa0a0:	bd09      	pop	{r0, r3, pc}
 23fa0a2:	0000      	.short	0x0000
 23fa0a4:	10079d70 	.word	0x10079d70
 23fa0a8:	00000018 	.word	0x00000018

023fa0ac <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fa0ac:	b509      	push	{r0, r3, lr}
 23fa0ae:	4804      	ldr	r0, [pc, #16]	; (23fa0c0 <hal_spi_set_data_mode+0x14>)
 23fa0b0:	6800      	ldr	r0, [r0, #0]
 23fa0b2:	4b04      	ldr	r3, [pc, #16]	; (23fa0c4 <hal_spi_set_data_mode+0x18>)
 23fa0b4:	4403      	add	r3, r0
 23fa0b6:	681b      	ldr	r3, [r3, #0]
 23fa0b8:	68db      	ldr	r3, [r3, #12]
 23fa0ba:	9302      	str	r3, [sp, #8]
 23fa0bc:	bd09      	pop	{r0, r3, pc}
 23fa0be:	0000      	.short	0x0000
 23fa0c0:	10079d70 	.word	0x10079d70
 23fa0c4:	00000018 	.word	0x00000018

023fa0c8 <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fa0c8:	b509      	push	{r0, r3, lr}
 23fa0ca:	4804      	ldr	r0, [pc, #16]	; (23fa0dc <hal_spi_transfer+0x14>)
 23fa0cc:	6800      	ldr	r0, [r0, #0]
 23fa0ce:	4b04      	ldr	r3, [pc, #16]	; (23fa0e0 <hal_spi_transfer+0x18>)
 23fa0d0:	4403      	add	r3, r0
 23fa0d2:	681b      	ldr	r3, [r3, #0]
 23fa0d4:	695b      	ldr	r3, [r3, #20]
 23fa0d6:	9302      	str	r3, [sp, #8]
 23fa0d8:	bd09      	pop	{r0, r3, pc}
 23fa0da:	0000      	.short	0x0000
 23fa0dc:	10079d70 	.word	0x10079d70
 23fa0e0:	00000018 	.word	0x00000018

023fa0e4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fa0e4:	b509      	push	{r0, r3, lr}
 23fa0e6:	4804      	ldr	r0, [pc, #16]	; (23fa0f8 <hal_spi_init+0x14>)
 23fa0e8:	6800      	ldr	r0, [r0, #0]
 23fa0ea:	4b04      	ldr	r3, [pc, #16]	; (23fa0fc <hal_spi_init+0x18>)
 23fa0ec:	4403      	add	r3, r0
 23fa0ee:	681b      	ldr	r3, [r3, #0]
 23fa0f0:	69db      	ldr	r3, [r3, #28]
 23fa0f2:	9302      	str	r3, [sp, #8]
 23fa0f4:	bd09      	pop	{r0, r3, pc}
 23fa0f6:	0000      	.short	0x0000
 23fa0f8:	10079d70 	.word	0x10079d70
 23fa0fc:	00000018 	.word	0x00000018

023fa100 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fa100:	b509      	push	{r0, r3, lr}
 23fa102:	4804      	ldr	r0, [pc, #16]	; (23fa114 <hal_spi_is_enabled+0x14>)
 23fa104:	6800      	ldr	r0, [r0, #0]
 23fa106:	4b04      	ldr	r3, [pc, #16]	; (23fa118 <hal_spi_is_enabled+0x18>)
 23fa108:	4403      	add	r3, r0
 23fa10a:	681b      	ldr	r3, [r3, #0]
 23fa10c:	6a1b      	ldr	r3, [r3, #32]
 23fa10e:	9302      	str	r3, [sp, #8]
 23fa110:	bd09      	pop	{r0, r3, pc}
 23fa112:	0000      	.short	0x0000
 23fa114:	10079d70 	.word	0x10079d70
 23fa118:	00000018 	.word	0x00000018

023fa11c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fa11c:	b509      	push	{r0, r3, lr}
 23fa11e:	4804      	ldr	r0, [pc, #16]	; (23fa130 <hal_spi_acquire+0x14>)
 23fa120:	6800      	ldr	r0, [r0, #0]
 23fa122:	4b04      	ldr	r3, [pc, #16]	; (23fa134 <hal_spi_acquire+0x18>)
 23fa124:	4403      	add	r3, r0
 23fa126:	681b      	ldr	r3, [r3, #0]
 23fa128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa12a:	9302      	str	r3, [sp, #8]
 23fa12c:	bd09      	pop	{r0, r3, pc}
 23fa12e:	0000      	.short	0x0000
 23fa130:	10079d70 	.word	0x10079d70
 23fa134:	00000018 	.word	0x00000018

023fa138 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fa138:	b509      	push	{r0, r3, lr}
 23fa13a:	4804      	ldr	r0, [pc, #16]	; (23fa14c <hal_spi_release+0x14>)
 23fa13c:	6800      	ldr	r0, [r0, #0]
 23fa13e:	4b04      	ldr	r3, [pc, #16]	; (23fa150 <hal_spi_release+0x18>)
 23fa140:	4403      	add	r3, r0
 23fa142:	681b      	ldr	r3, [r3, #0]
 23fa144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa146:	9302      	str	r3, [sp, #8]
 23fa148:	bd09      	pop	{r0, r3, pc}
 23fa14a:	0000      	.short	0x0000
 23fa14c:	10079d70 	.word	0x10079d70
 23fa150:	00000018 	.word	0x00000018

023fa154 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fa154:	b509      	push	{r0, r3, lr}
 23fa156:	4804      	ldr	r0, [pc, #16]	; (23fa168 <hal_usart_end+0x14>)
 23fa158:	6800      	ldr	r0, [r0, #0]
 23fa15a:	4b04      	ldr	r3, [pc, #16]	; (23fa16c <hal_usart_end+0x18>)
 23fa15c:	4403      	add	r3, r0
 23fa15e:	681b      	ldr	r3, [r3, #0]
 23fa160:	689b      	ldr	r3, [r3, #8]
 23fa162:	9302      	str	r3, [sp, #8]
 23fa164:	bd09      	pop	{r0, r3, pc}
 23fa166:	0000      	.short	0x0000
 23fa168:	10079d70 	.word	0x10079d70
 23fa16c:	00000024 	.word	0x00000024

023fa170 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fa170:	b509      	push	{r0, r3, lr}
 23fa172:	4804      	ldr	r0, [pc, #16]	; (23fa184 <hal_usart_write+0x14>)
 23fa174:	6800      	ldr	r0, [r0, #0]
 23fa176:	4b04      	ldr	r3, [pc, #16]	; (23fa188 <hal_usart_write+0x18>)
 23fa178:	4403      	add	r3, r0
 23fa17a:	681b      	ldr	r3, [r3, #0]
 23fa17c:	68db      	ldr	r3, [r3, #12]
 23fa17e:	9302      	str	r3, [sp, #8]
 23fa180:	bd09      	pop	{r0, r3, pc}
 23fa182:	0000      	.short	0x0000
 23fa184:	10079d70 	.word	0x10079d70
 23fa188:	00000024 	.word	0x00000024

023fa18c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fa18c:	b509      	push	{r0, r3, lr}
 23fa18e:	4804      	ldr	r0, [pc, #16]	; (23fa1a0 <hal_usart_available+0x14>)
 23fa190:	6800      	ldr	r0, [r0, #0]
 23fa192:	4b04      	ldr	r3, [pc, #16]	; (23fa1a4 <hal_usart_available+0x18>)
 23fa194:	4403      	add	r3, r0
 23fa196:	681b      	ldr	r3, [r3, #0]
 23fa198:	691b      	ldr	r3, [r3, #16]
 23fa19a:	9302      	str	r3, [sp, #8]
 23fa19c:	bd09      	pop	{r0, r3, pc}
 23fa19e:	0000      	.short	0x0000
 23fa1a0:	10079d70 	.word	0x10079d70
 23fa1a4:	00000024 	.word	0x00000024

023fa1a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fa1a8:	b509      	push	{r0, r3, lr}
 23fa1aa:	4804      	ldr	r0, [pc, #16]	; (23fa1bc <hal_usart_read+0x14>)
 23fa1ac:	6800      	ldr	r0, [r0, #0]
 23fa1ae:	4b04      	ldr	r3, [pc, #16]	; (23fa1c0 <hal_usart_read+0x18>)
 23fa1b0:	4403      	add	r3, r0
 23fa1b2:	681b      	ldr	r3, [r3, #0]
 23fa1b4:	695b      	ldr	r3, [r3, #20]
 23fa1b6:	9302      	str	r3, [sp, #8]
 23fa1b8:	bd09      	pop	{r0, r3, pc}
 23fa1ba:	0000      	.short	0x0000
 23fa1bc:	10079d70 	.word	0x10079d70
 23fa1c0:	00000024 	.word	0x00000024

023fa1c4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fa1c4:	b509      	push	{r0, r3, lr}
 23fa1c6:	4804      	ldr	r0, [pc, #16]	; (23fa1d8 <hal_usart_peek+0x14>)
 23fa1c8:	6800      	ldr	r0, [r0, #0]
 23fa1ca:	4b04      	ldr	r3, [pc, #16]	; (23fa1dc <hal_usart_peek+0x18>)
 23fa1cc:	4403      	add	r3, r0
 23fa1ce:	681b      	ldr	r3, [r3, #0]
 23fa1d0:	699b      	ldr	r3, [r3, #24]
 23fa1d2:	9302      	str	r3, [sp, #8]
 23fa1d4:	bd09      	pop	{r0, r3, pc}
 23fa1d6:	0000      	.short	0x0000
 23fa1d8:	10079d70 	.word	0x10079d70
 23fa1dc:	00000024 	.word	0x00000024

023fa1e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fa1e0:	b509      	push	{r0, r3, lr}
 23fa1e2:	4804      	ldr	r0, [pc, #16]	; (23fa1f4 <hal_usart_flush+0x14>)
 23fa1e4:	6800      	ldr	r0, [r0, #0]
 23fa1e6:	4b04      	ldr	r3, [pc, #16]	; (23fa1f8 <hal_usart_flush+0x18>)
 23fa1e8:	4403      	add	r3, r0
 23fa1ea:	681b      	ldr	r3, [r3, #0]
 23fa1ec:	69db      	ldr	r3, [r3, #28]
 23fa1ee:	9302      	str	r3, [sp, #8]
 23fa1f0:	bd09      	pop	{r0, r3, pc}
 23fa1f2:	0000      	.short	0x0000
 23fa1f4:	10079d70 	.word	0x10079d70
 23fa1f8:	00000024 	.word	0x00000024

023fa1fc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fa1fc:	b509      	push	{r0, r3, lr}
 23fa1fe:	4804      	ldr	r0, [pc, #16]	; (23fa210 <hal_usart_is_enabled+0x14>)
 23fa200:	6800      	ldr	r0, [r0, #0]
 23fa202:	4b04      	ldr	r3, [pc, #16]	; (23fa214 <hal_usart_is_enabled+0x18>)
 23fa204:	4403      	add	r3, r0
 23fa206:	681b      	ldr	r3, [r3, #0]
 23fa208:	6a1b      	ldr	r3, [r3, #32]
 23fa20a:	9302      	str	r3, [sp, #8]
 23fa20c:	bd09      	pop	{r0, r3, pc}
 23fa20e:	0000      	.short	0x0000
 23fa210:	10079d70 	.word	0x10079d70
 23fa214:	00000024 	.word	0x00000024

023fa218 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fa218:	b509      	push	{r0, r3, lr}
 23fa21a:	4804      	ldr	r0, [pc, #16]	; (23fa22c <hal_usart_available_data_for_write+0x14>)
 23fa21c:	6800      	ldr	r0, [r0, #0]
 23fa21e:	4b04      	ldr	r3, [pc, #16]	; (23fa230 <hal_usart_available_data_for_write+0x18>)
 23fa220:	4403      	add	r3, r0
 23fa222:	681b      	ldr	r3, [r3, #0]
 23fa224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fa226:	9302      	str	r3, [sp, #8]
 23fa228:	bd09      	pop	{r0, r3, pc}
 23fa22a:	0000      	.short	0x0000
 23fa22c:	10079d70 	.word	0x10079d70
 23fa230:	00000024 	.word	0x00000024

023fa234 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fa234:	b509      	push	{r0, r3, lr}
 23fa236:	4804      	ldr	r0, [pc, #16]	; (23fa248 <hal_usart_begin_config+0x14>)
 23fa238:	6800      	ldr	r0, [r0, #0]
 23fa23a:	4b04      	ldr	r3, [pc, #16]	; (23fa24c <hal_usart_begin_config+0x18>)
 23fa23c:	4403      	add	r3, r0
 23fa23e:	681b      	ldr	r3, [r3, #0]
 23fa240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fa242:	9302      	str	r3, [sp, #8]
 23fa244:	bd09      	pop	{r0, r3, pc}
 23fa246:	0000      	.short	0x0000
 23fa248:	10079d70 	.word	0x10079d70
 23fa24c:	00000024 	.word	0x00000024

023fa250 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fa250:	b509      	push	{r0, r3, lr}
 23fa252:	4804      	ldr	r0, [pc, #16]	; (23fa264 <hal_usart_init_ex+0x14>)
 23fa254:	6800      	ldr	r0, [r0, #0]
 23fa256:	4b04      	ldr	r3, [pc, #16]	; (23fa268 <hal_usart_init_ex+0x18>)
 23fa258:	4403      	add	r3, r0
 23fa25a:	681b      	ldr	r3, [r3, #0]
 23fa25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa25e:	9302      	str	r3, [sp, #8]
 23fa260:	bd09      	pop	{r0, r3, pc}
 23fa262:	0000      	.short	0x0000
 23fa264:	10079d70 	.word	0x10079d70
 23fa268:	00000024 	.word	0x00000024

023fa26c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fa26c:	b509      	push	{r0, r3, lr}
 23fa26e:	4804      	ldr	r0, [pc, #16]	; (23fa280 <HAL_USB_USART_Init+0x14>)
 23fa270:	6800      	ldr	r0, [r0, #0]
 23fa272:	4b04      	ldr	r3, [pc, #16]	; (23fa284 <HAL_USB_USART_Init+0x18>)
 23fa274:	4403      	add	r3, r0
 23fa276:	681b      	ldr	r3, [r3, #0]
 23fa278:	681b      	ldr	r3, [r3, #0]
 23fa27a:	9302      	str	r3, [sp, #8]
 23fa27c:	bd09      	pop	{r0, r3, pc}
 23fa27e:	0000      	.short	0x0000
 23fa280:	10079d70 	.word	0x10079d70
 23fa284:	00000034 	.word	0x00000034

023fa288 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fa288:	b509      	push	{r0, r3, lr}
 23fa28a:	4804      	ldr	r0, [pc, #16]	; (23fa29c <HAL_USB_USART_Begin+0x14>)
 23fa28c:	6800      	ldr	r0, [r0, #0]
 23fa28e:	4b04      	ldr	r3, [pc, #16]	; (23fa2a0 <HAL_USB_USART_Begin+0x18>)
 23fa290:	4403      	add	r3, r0
 23fa292:	681b      	ldr	r3, [r3, #0]
 23fa294:	685b      	ldr	r3, [r3, #4]
 23fa296:	9302      	str	r3, [sp, #8]
 23fa298:	bd09      	pop	{r0, r3, pc}
 23fa29a:	0000      	.short	0x0000
 23fa29c:	10079d70 	.word	0x10079d70
 23fa2a0:	00000034 	.word	0x00000034

023fa2a4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fa2a4:	b509      	push	{r0, r3, lr}
 23fa2a6:	4804      	ldr	r0, [pc, #16]	; (23fa2b8 <HAL_USB_USART_End+0x14>)
 23fa2a8:	6800      	ldr	r0, [r0, #0]
 23fa2aa:	4b04      	ldr	r3, [pc, #16]	; (23fa2bc <HAL_USB_USART_End+0x18>)
 23fa2ac:	4403      	add	r3, r0
 23fa2ae:	681b      	ldr	r3, [r3, #0]
 23fa2b0:	689b      	ldr	r3, [r3, #8]
 23fa2b2:	9302      	str	r3, [sp, #8]
 23fa2b4:	bd09      	pop	{r0, r3, pc}
 23fa2b6:	0000      	.short	0x0000
 23fa2b8:	10079d70 	.word	0x10079d70
 23fa2bc:	00000034 	.word	0x00000034

023fa2c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fa2c0:	b509      	push	{r0, r3, lr}
 23fa2c2:	4804      	ldr	r0, [pc, #16]	; (23fa2d4 <HAL_USB_USART_Available_Data+0x14>)
 23fa2c4:	6800      	ldr	r0, [r0, #0]
 23fa2c6:	4b04      	ldr	r3, [pc, #16]	; (23fa2d8 <HAL_USB_USART_Available_Data+0x18>)
 23fa2c8:	4403      	add	r3, r0
 23fa2ca:	681b      	ldr	r3, [r3, #0]
 23fa2cc:	691b      	ldr	r3, [r3, #16]
 23fa2ce:	9302      	str	r3, [sp, #8]
 23fa2d0:	bd09      	pop	{r0, r3, pc}
 23fa2d2:	0000      	.short	0x0000
 23fa2d4:	10079d70 	.word	0x10079d70
 23fa2d8:	00000034 	.word	0x00000034

023fa2dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fa2dc:	b509      	push	{r0, r3, lr}
 23fa2de:	4804      	ldr	r0, [pc, #16]	; (23fa2f0 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fa2e0:	6800      	ldr	r0, [r0, #0]
 23fa2e2:	4b04      	ldr	r3, [pc, #16]	; (23fa2f4 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fa2e4:	4403      	add	r3, r0
 23fa2e6:	681b      	ldr	r3, [r3, #0]
 23fa2e8:	695b      	ldr	r3, [r3, #20]
 23fa2ea:	9302      	str	r3, [sp, #8]
 23fa2ec:	bd09      	pop	{r0, r3, pc}
 23fa2ee:	0000      	.short	0x0000
 23fa2f0:	10079d70 	.word	0x10079d70
 23fa2f4:	00000034 	.word	0x00000034

023fa2f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fa2f8:	b509      	push	{r0, r3, lr}
 23fa2fa:	4804      	ldr	r0, [pc, #16]	; (23fa30c <HAL_USB_USART_Receive_Data+0x14>)
 23fa2fc:	6800      	ldr	r0, [r0, #0]
 23fa2fe:	4b04      	ldr	r3, [pc, #16]	; (23fa310 <HAL_USB_USART_Receive_Data+0x18>)
 23fa300:	4403      	add	r3, r0
 23fa302:	681b      	ldr	r3, [r3, #0]
 23fa304:	699b      	ldr	r3, [r3, #24]
 23fa306:	9302      	str	r3, [sp, #8]
 23fa308:	bd09      	pop	{r0, r3, pc}
 23fa30a:	0000      	.short	0x0000
 23fa30c:	10079d70 	.word	0x10079d70
 23fa310:	00000034 	.word	0x00000034

023fa314 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fa314:	b509      	push	{r0, r3, lr}
 23fa316:	4804      	ldr	r0, [pc, #16]	; (23fa328 <HAL_USB_USART_Send_Data+0x14>)
 23fa318:	6800      	ldr	r0, [r0, #0]
 23fa31a:	4b04      	ldr	r3, [pc, #16]	; (23fa32c <HAL_USB_USART_Send_Data+0x18>)
 23fa31c:	4403      	add	r3, r0
 23fa31e:	681b      	ldr	r3, [r3, #0]
 23fa320:	69db      	ldr	r3, [r3, #28]
 23fa322:	9302      	str	r3, [sp, #8]
 23fa324:	bd09      	pop	{r0, r3, pc}
 23fa326:	0000      	.short	0x0000
 23fa328:	10079d70 	.word	0x10079d70
 23fa32c:	00000034 	.word	0x00000034

023fa330 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fa330:	b509      	push	{r0, r3, lr}
 23fa332:	4804      	ldr	r0, [pc, #16]	; (23fa344 <HAL_USB_USART_Flush_Data+0x14>)
 23fa334:	6800      	ldr	r0, [r0, #0]
 23fa336:	4b04      	ldr	r3, [pc, #16]	; (23fa348 <HAL_USB_USART_Flush_Data+0x18>)
 23fa338:	4403      	add	r3, r0
 23fa33a:	681b      	ldr	r3, [r3, #0]
 23fa33c:	6a1b      	ldr	r3, [r3, #32]
 23fa33e:	9302      	str	r3, [sp, #8]
 23fa340:	bd09      	pop	{r0, r3, pc}
 23fa342:	0000      	.short	0x0000
 23fa344:	10079d70 	.word	0x10079d70
 23fa348:	00000034 	.word	0x00000034

023fa34c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fa34c:	b509      	push	{r0, r3, lr}
 23fa34e:	4804      	ldr	r0, [pc, #16]	; (23fa360 <panic_+0x14>)
 23fa350:	6800      	ldr	r0, [r0, #0]
 23fa352:	4b04      	ldr	r3, [pc, #16]	; (23fa364 <panic_+0x18>)
 23fa354:	4403      	add	r3, r0
 23fa356:	681b      	ldr	r3, [r3, #0]
 23fa358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fa35a:	9302      	str	r3, [sp, #8]
 23fa35c:	bd09      	pop	{r0, r3, pc}
 23fa35e:	0000      	.short	0x0000
 23fa360:	10079d70 	.word	0x10079d70
 23fa364:	00000048 	.word	0x00000048

023fa368 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fa368:	b509      	push	{r0, r3, lr}
 23fa36a:	4804      	ldr	r0, [pc, #16]	; (23fa37c <log_message+0x14>)
 23fa36c:	6800      	ldr	r0, [r0, #0]
 23fa36e:	4b04      	ldr	r3, [pc, #16]	; (23fa380 <log_message+0x18>)
 23fa370:	4403      	add	r3, r0
 23fa372:	681b      	ldr	r3, [r3, #0]
 23fa374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fa376:	9302      	str	r3, [sp, #8]
 23fa378:	bd09      	pop	{r0, r3, pc}
 23fa37a:	0000      	.short	0x0000
 23fa37c:	10079d70 	.word	0x10079d70
 23fa380:	00000048 	.word	0x00000048

023fa384 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fa384:	b509      	push	{r0, r3, lr}
 23fa386:	4804      	ldr	r0, [pc, #16]	; (23fa398 <log_message_v+0x14>)
 23fa388:	6800      	ldr	r0, [r0, #0]
 23fa38a:	4b04      	ldr	r3, [pc, #16]	; (23fa39c <log_message_v+0x18>)
 23fa38c:	4403      	add	r3, r0
 23fa38e:	681b      	ldr	r3, [r3, #0]
 23fa390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fa392:	9302      	str	r3, [sp, #8]
 23fa394:	bd09      	pop	{r0, r3, pc}
 23fa396:	0000      	.short	0x0000
 23fa398:	10079d70 	.word	0x10079d70
 23fa39c:	00000048 	.word	0x00000048

023fa3a0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fa3a0:	b509      	push	{r0, r3, lr}
 23fa3a2:	4804      	ldr	r0, [pc, #16]	; (23fa3b4 <log_level_name+0x14>)
 23fa3a4:	6800      	ldr	r0, [r0, #0]
 23fa3a6:	4b04      	ldr	r3, [pc, #16]	; (23fa3b8 <log_level_name+0x18>)
 23fa3a8:	4403      	add	r3, r0
 23fa3aa:	681b      	ldr	r3, [r3, #0]
 23fa3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fa3ae:	9302      	str	r3, [sp, #8]
 23fa3b0:	bd09      	pop	{r0, r3, pc}
 23fa3b2:	0000      	.short	0x0000
 23fa3b4:	10079d70 	.word	0x10079d70
 23fa3b8:	00000048 	.word	0x00000048

023fa3bc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fa3bc:	b509      	push	{r0, r3, lr}
 23fa3be:	4804      	ldr	r0, [pc, #16]	; (23fa3d0 <log_set_callbacks+0x14>)
 23fa3c0:	6800      	ldr	r0, [r0, #0]
 23fa3c2:	4b04      	ldr	r3, [pc, #16]	; (23fa3d4 <log_set_callbacks+0x18>)
 23fa3c4:	4403      	add	r3, r0
 23fa3c6:	681b      	ldr	r3, [r3, #0]
 23fa3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fa3ca:	9302      	str	r3, [sp, #8]
 23fa3cc:	bd09      	pop	{r0, r3, pc}
 23fa3ce:	0000      	.short	0x0000
 23fa3d0:	10079d70 	.word	0x10079d70
 23fa3d4:	00000048 	.word	0x00000048

023fa3d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fa3d8:	b509      	push	{r0, r3, lr}
 23fa3da:	4804      	ldr	r0, [pc, #16]	; (23fa3ec <set_system_mode+0x14>)
 23fa3dc:	6800      	ldr	r0, [r0, #0]
 23fa3de:	4b04      	ldr	r3, [pc, #16]	; (23fa3f0 <set_system_mode+0x18>)
 23fa3e0:	4403      	add	r3, r0
 23fa3e2:	681b      	ldr	r3, [r3, #0]
 23fa3e4:	685b      	ldr	r3, [r3, #4]
 23fa3e6:	9302      	str	r3, [sp, #8]
 23fa3e8:	bd09      	pop	{r0, r3, pc}
 23fa3ea:	0000      	.short	0x0000
 23fa3ec:	10079d70 	.word	0x10079d70
 23fa3f0:	00000008 	.word	0x00000008

023fa3f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fa3f4:	b509      	push	{r0, r3, lr}
 23fa3f6:	4804      	ldr	r0, [pc, #16]	; (23fa408 <system_delay_ms+0x14>)
 23fa3f8:	6800      	ldr	r0, [r0, #0]
 23fa3fa:	4b04      	ldr	r3, [pc, #16]	; (23fa40c <system_delay_ms+0x18>)
 23fa3fc:	4403      	add	r3, r0
 23fa3fe:	681b      	ldr	r3, [r3, #0]
 23fa400:	695b      	ldr	r3, [r3, #20]
 23fa402:	9302      	str	r3, [sp, #8]
 23fa404:	bd09      	pop	{r0, r3, pc}
 23fa406:	0000      	.short	0x0000
 23fa408:	10079d70 	.word	0x10079d70
 23fa40c:	00000008 	.word	0x00000008

023fa410 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fa410:	b509      	push	{r0, r3, lr}
 23fa412:	4804      	ldr	r0, [pc, #16]	; (23fa424 <system_thread_set_state+0x14>)
 23fa414:	6800      	ldr	r0, [r0, #0]
 23fa416:	4b04      	ldr	r3, [pc, #16]	; (23fa428 <system_thread_set_state+0x18>)
 23fa418:	4403      	add	r3, r0
 23fa41a:	681b      	ldr	r3, [r3, #0]
 23fa41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fa41e:	9302      	str	r3, [sp, #8]
 23fa420:	bd09      	pop	{r0, r3, pc}
 23fa422:	0000      	.short	0x0000
 23fa424:	10079d70 	.word	0x10079d70
 23fa428:	00000008 	.word	0x00000008

023fa42c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fa42c:	b509      	push	{r0, r3, lr}
 23fa42e:	4804      	ldr	r0, [pc, #16]	; (23fa440 <system_ctrl_set_app_request_handler+0x14>)
 23fa430:	6800      	ldr	r0, [r0, #0]
 23fa432:	4b04      	ldr	r3, [pc, #16]	; (23fa444 <system_ctrl_set_app_request_handler+0x18>)
 23fa434:	4403      	add	r3, r0
 23fa436:	681b      	ldr	r3, [r3, #0]
 23fa438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fa43c:	9302      	str	r3, [sp, #8]
 23fa43e:	bd09      	pop	{r0, r3, pc}
 23fa440:	10079d70 	.word	0x10079d70
 23fa444:	00000008 	.word	0x00000008

023fa448 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fa448:	b509      	push	{r0, r3, lr}
 23fa44a:	4804      	ldr	r0, [pc, #16]	; (23fa45c <system_ctrl_set_result+0x14>)
 23fa44c:	6800      	ldr	r0, [r0, #0]
 23fa44e:	4b04      	ldr	r3, [pc, #16]	; (23fa460 <system_ctrl_set_result+0x18>)
 23fa450:	4403      	add	r3, r0
 23fa452:	681b      	ldr	r3, [r3, #0]
 23fa454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fa458:	9302      	str	r3, [sp, #8]
 23fa45a:	bd09      	pop	{r0, r3, pc}
 23fa45c:	10079d70 	.word	0x10079d70
 23fa460:	00000008 	.word	0x00000008

023fa464 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fa464:	b509      	push	{r0, r3, lr}
 23fa466:	4804      	ldr	r0, [pc, #16]	; (23fa478 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fa468:	6800      	ldr	r0, [r0, #0]
 23fa46a:	4b04      	ldr	r3, [pc, #16]	; (23fa47c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fa46c:	4403      	add	r3, r0
 23fa46e:	681b      	ldr	r3, [r3, #0]
 23fa470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fa472:	9302      	str	r3, [sp, #8]
 23fa474:	bd09      	pop	{r0, r3, pc}
 23fa476:	0000      	.short	0x0000
 23fa478:	10079d70 	.word	0x10079d70
 23fa47c:	0000002c 	.word	0x0000002c

023fa480 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fa480:	b509      	push	{r0, r3, lr}
 23fa482:	4804      	ldr	r0, [pc, #16]	; (23fa494 <network_connect+0x14>)
 23fa484:	6800      	ldr	r0, [r0, #0]
 23fa486:	4b04      	ldr	r3, [pc, #16]	; (23fa498 <network_connect+0x18>)
 23fa488:	4403      	add	r3, r0
 23fa48a:	681b      	ldr	r3, [r3, #0]
 23fa48c:	685b      	ldr	r3, [r3, #4]
 23fa48e:	9302      	str	r3, [sp, #8]
 23fa490:	bd09      	pop	{r0, r3, pc}
 23fa492:	0000      	.short	0x0000
 23fa494:	10079d70 	.word	0x10079d70
 23fa498:	00000028 	.word	0x00000028

023fa49c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fa49c:	b509      	push	{r0, r3, lr}
 23fa49e:	4804      	ldr	r0, [pc, #16]	; (23fa4b0 <network_connecting+0x14>)
 23fa4a0:	6800      	ldr	r0, [r0, #0]
 23fa4a2:	4b04      	ldr	r3, [pc, #16]	; (23fa4b4 <network_connecting+0x18>)
 23fa4a4:	4403      	add	r3, r0
 23fa4a6:	681b      	ldr	r3, [r3, #0]
 23fa4a8:	689b      	ldr	r3, [r3, #8]
 23fa4aa:	9302      	str	r3, [sp, #8]
 23fa4ac:	bd09      	pop	{r0, r3, pc}
 23fa4ae:	0000      	.short	0x0000
 23fa4b0:	10079d70 	.word	0x10079d70
 23fa4b4:	00000028 	.word	0x00000028

023fa4b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fa4b8:	b509      	push	{r0, r3, lr}
 23fa4ba:	4804      	ldr	r0, [pc, #16]	; (23fa4cc <network_disconnect+0x14>)
 23fa4bc:	6800      	ldr	r0, [r0, #0]
 23fa4be:	4b04      	ldr	r3, [pc, #16]	; (23fa4d0 <network_disconnect+0x18>)
 23fa4c0:	4403      	add	r3, r0
 23fa4c2:	681b      	ldr	r3, [r3, #0]
 23fa4c4:	68db      	ldr	r3, [r3, #12]
 23fa4c6:	9302      	str	r3, [sp, #8]
 23fa4c8:	bd09      	pop	{r0, r3, pc}
 23fa4ca:	0000      	.short	0x0000
 23fa4cc:	10079d70 	.word	0x10079d70
 23fa4d0:	00000028 	.word	0x00000028

023fa4d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fa4d4:	b509      	push	{r0, r3, lr}
 23fa4d6:	4804      	ldr	r0, [pc, #16]	; (23fa4e8 <network_ready+0x14>)
 23fa4d8:	6800      	ldr	r0, [r0, #0]
 23fa4da:	4b04      	ldr	r3, [pc, #16]	; (23fa4ec <network_ready+0x18>)
 23fa4dc:	4403      	add	r3, r0
 23fa4de:	681b      	ldr	r3, [r3, #0]
 23fa4e0:	691b      	ldr	r3, [r3, #16]
 23fa4e2:	9302      	str	r3, [sp, #8]
 23fa4e4:	bd09      	pop	{r0, r3, pc}
 23fa4e6:	0000      	.short	0x0000
 23fa4e8:	10079d70 	.word	0x10079d70
 23fa4ec:	00000028 	.word	0x00000028

023fa4f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fa4f0:	b509      	push	{r0, r3, lr}
 23fa4f2:	4804      	ldr	r0, [pc, #16]	; (23fa504 <network_on+0x14>)
 23fa4f4:	6800      	ldr	r0, [r0, #0]
 23fa4f6:	4b04      	ldr	r3, [pc, #16]	; (23fa508 <network_on+0x18>)
 23fa4f8:	4403      	add	r3, r0
 23fa4fa:	681b      	ldr	r3, [r3, #0]
 23fa4fc:	695b      	ldr	r3, [r3, #20]
 23fa4fe:	9302      	str	r3, [sp, #8]
 23fa500:	bd09      	pop	{r0, r3, pc}
 23fa502:	0000      	.short	0x0000
 23fa504:	10079d70 	.word	0x10079d70
 23fa508:	00000028 	.word	0x00000028

023fa50c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fa50c:	b509      	push	{r0, r3, lr}
 23fa50e:	4804      	ldr	r0, [pc, #16]	; (23fa520 <network_off+0x14>)
 23fa510:	6800      	ldr	r0, [r0, #0]
 23fa512:	4b04      	ldr	r3, [pc, #16]	; (23fa524 <network_off+0x18>)
 23fa514:	4403      	add	r3, r0
 23fa516:	681b      	ldr	r3, [r3, #0]
 23fa518:	699b      	ldr	r3, [r3, #24]
 23fa51a:	9302      	str	r3, [sp, #8]
 23fa51c:	bd09      	pop	{r0, r3, pc}
 23fa51e:	0000      	.short	0x0000
 23fa520:	10079d70 	.word	0x10079d70
 23fa524:	00000028 	.word	0x00000028

023fa528 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fa528:	b509      	push	{r0, r3, lr}
 23fa52a:	4804      	ldr	r0, [pc, #16]	; (23fa53c <network_listen+0x14>)
 23fa52c:	6800      	ldr	r0, [r0, #0]
 23fa52e:	4b04      	ldr	r3, [pc, #16]	; (23fa540 <network_listen+0x18>)
 23fa530:	4403      	add	r3, r0
 23fa532:	681b      	ldr	r3, [r3, #0]
 23fa534:	69db      	ldr	r3, [r3, #28]
 23fa536:	9302      	str	r3, [sp, #8]
 23fa538:	bd09      	pop	{r0, r3, pc}
 23fa53a:	0000      	.short	0x0000
 23fa53c:	10079d70 	.word	0x10079d70
 23fa540:	00000028 	.word	0x00000028

023fa544 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fa544:	b509      	push	{r0, r3, lr}
 23fa546:	4804      	ldr	r0, [pc, #16]	; (23fa558 <network_listening+0x14>)
 23fa548:	6800      	ldr	r0, [r0, #0]
 23fa54a:	4b04      	ldr	r3, [pc, #16]	; (23fa55c <network_listening+0x18>)
 23fa54c:	4403      	add	r3, r0
 23fa54e:	681b      	ldr	r3, [r3, #0]
 23fa550:	6a1b      	ldr	r3, [r3, #32]
 23fa552:	9302      	str	r3, [sp, #8]
 23fa554:	bd09      	pop	{r0, r3, pc}
 23fa556:	0000      	.short	0x0000
 23fa558:	10079d70 	.word	0x10079d70
 23fa55c:	00000028 	.word	0x00000028

023fa560 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fa560:	b509      	push	{r0, r3, lr}
 23fa562:	4804      	ldr	r0, [pc, #16]	; (23fa574 <network_set_listen_timeout+0x14>)
 23fa564:	6800      	ldr	r0, [r0, #0]
 23fa566:	4b04      	ldr	r3, [pc, #16]	; (23fa578 <network_set_listen_timeout+0x18>)
 23fa568:	4403      	add	r3, r0
 23fa56a:	681b      	ldr	r3, [r3, #0]
 23fa56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fa56e:	9302      	str	r3, [sp, #8]
 23fa570:	bd09      	pop	{r0, r3, pc}
 23fa572:	0000      	.short	0x0000
 23fa574:	10079d70 	.word	0x10079d70
 23fa578:	00000028 	.word	0x00000028

023fa57c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fa57c:	b509      	push	{r0, r3, lr}
 23fa57e:	4804      	ldr	r0, [pc, #16]	; (23fa590 <network_get_listen_timeout+0x14>)
 23fa580:	6800      	ldr	r0, [r0, #0]
 23fa582:	4b04      	ldr	r3, [pc, #16]	; (23fa594 <network_get_listen_timeout+0x18>)
 23fa584:	4403      	add	r3, r0
 23fa586:	681b      	ldr	r3, [r3, #0]
 23fa588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fa58a:	9302      	str	r3, [sp, #8]
 23fa58c:	bd09      	pop	{r0, r3, pc}
 23fa58e:	0000      	.short	0x0000
 23fa590:	10079d70 	.word	0x10079d70
 23fa594:	00000028 	.word	0x00000028

023fa598 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fa598:	b509      	push	{r0, r3, lr}
 23fa59a:	4804      	ldr	r0, [pc, #16]	; (23fa5ac <network_is_on+0x14>)
 23fa59c:	6800      	ldr	r0, [r0, #0]
 23fa59e:	4b04      	ldr	r3, [pc, #16]	; (23fa5b0 <network_is_on+0x18>)
 23fa5a0:	4403      	add	r3, r0
 23fa5a2:	681b      	ldr	r3, [r3, #0]
 23fa5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa5a6:	9302      	str	r3, [sp, #8]
 23fa5a8:	bd09      	pop	{r0, r3, pc}
 23fa5aa:	0000      	.short	0x0000
 23fa5ac:	10079d70 	.word	0x10079d70
 23fa5b0:	00000028 	.word	0x00000028

023fa5b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fa5b4:	b509      	push	{r0, r3, lr}
 23fa5b6:	4804      	ldr	r0, [pc, #16]	; (23fa5c8 <network_is_off+0x14>)
 23fa5b8:	6800      	ldr	r0, [r0, #0]
 23fa5ba:	4b04      	ldr	r3, [pc, #16]	; (23fa5cc <network_is_off+0x18>)
 23fa5bc:	4403      	add	r3, r0
 23fa5be:	681b      	ldr	r3, [r3, #0]
 23fa5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa5c2:	9302      	str	r3, [sp, #8]
 23fa5c4:	bd09      	pop	{r0, r3, pc}
 23fa5c6:	0000      	.short	0x0000
 23fa5c8:	10079d70 	.word	0x10079d70
 23fa5cc:	00000028 	.word	0x00000028

023fa5d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fa5d0:	b509      	push	{r0, r3, lr}
 23fa5d2:	4804      	ldr	r0, [pc, #16]	; (23fa5e4 <malloc+0x14>)
 23fa5d4:	6800      	ldr	r0, [r0, #0]
 23fa5d6:	4b04      	ldr	r3, [pc, #16]	; (23fa5e8 <malloc+0x18>)
 23fa5d8:	4403      	add	r3, r0
 23fa5da:	681b      	ldr	r3, [r3, #0]
 23fa5dc:	681b      	ldr	r3, [r3, #0]
 23fa5de:	9302      	str	r3, [sp, #8]
 23fa5e0:	bd09      	pop	{r0, r3, pc}
 23fa5e2:	0000      	.short	0x0000
 23fa5e4:	10079d70 	.word	0x10079d70
 23fa5e8:	00000004 	.word	0x00000004

023fa5ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fa5ec:	b509      	push	{r0, r3, lr}
 23fa5ee:	4804      	ldr	r0, [pc, #16]	; (23fa600 <free+0x14>)
 23fa5f0:	6800      	ldr	r0, [r0, #0]
 23fa5f2:	4b04      	ldr	r3, [pc, #16]	; (23fa604 <free+0x18>)
 23fa5f4:	4403      	add	r3, r0
 23fa5f6:	681b      	ldr	r3, [r3, #0]
 23fa5f8:	685b      	ldr	r3, [r3, #4]
 23fa5fa:	9302      	str	r3, [sp, #8]
 23fa5fc:	bd09      	pop	{r0, r3, pc}
 23fa5fe:	0000      	.short	0x0000
 23fa600:	10079d70 	.word	0x10079d70
 23fa604:	00000004 	.word	0x00000004

023fa608 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fa608:	b509      	push	{r0, r3, lr}
 23fa60a:	4804      	ldr	r0, [pc, #16]	; (23fa61c <realloc+0x14>)
 23fa60c:	6800      	ldr	r0, [r0, #0]
 23fa60e:	4b04      	ldr	r3, [pc, #16]	; (23fa620 <realloc+0x18>)
 23fa610:	4403      	add	r3, r0
 23fa612:	681b      	ldr	r3, [r3, #0]
 23fa614:	689b      	ldr	r3, [r3, #8]
 23fa616:	9302      	str	r3, [sp, #8]
 23fa618:	bd09      	pop	{r0, r3, pc}
 23fa61a:	0000      	.short	0x0000
 23fa61c:	10079d70 	.word	0x10079d70
 23fa620:	00000004 	.word	0x00000004

023fa624 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fa624:	b509      	push	{r0, r3, lr}
 23fa626:	4804      	ldr	r0, [pc, #16]	; (23fa638 <vsnprintf+0x14>)
 23fa628:	6800      	ldr	r0, [r0, #0]
 23fa62a:	4b04      	ldr	r3, [pc, #16]	; (23fa63c <vsnprintf+0x18>)
 23fa62c:	4403      	add	r3, r0
 23fa62e:	681b      	ldr	r3, [r3, #0]
 23fa630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fa632:	9302      	str	r3, [sp, #8]
 23fa634:	bd09      	pop	{r0, r3, pc}
 23fa636:	0000      	.short	0x0000
 23fa638:	10079d70 	.word	0x10079d70
 23fa63c:	00000004 	.word	0x00000004

023fa640 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fa640:	b509      	push	{r0, r3, lr}
 23fa642:	4804      	ldr	r0, [pc, #16]	; (23fa654 <abort+0x14>)
 23fa644:	6800      	ldr	r0, [r0, #0]
 23fa646:	4b04      	ldr	r3, [pc, #16]	; (23fa658 <abort+0x18>)
 23fa648:	4403      	add	r3, r0
 23fa64a:	681b      	ldr	r3, [r3, #0]
 23fa64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fa64e:	9302      	str	r3, [sp, #8]
 23fa650:	bd09      	pop	{r0, r3, pc}
 23fa652:	0000      	.short	0x0000
 23fa654:	10079d70 	.word	0x10079d70
 23fa658:	00000004 	.word	0x00000004

023fa65c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fa65c:	b509      	push	{r0, r3, lr}
 23fa65e:	4804      	ldr	r0, [pc, #16]	; (23fa670 <__errno+0x14>)
 23fa660:	6800      	ldr	r0, [r0, #0]
 23fa662:	4b04      	ldr	r3, [pc, #16]	; (23fa674 <__errno+0x18>)
 23fa664:	4403      	add	r3, r0
 23fa666:	681b      	ldr	r3, [r3, #0]
 23fa668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fa66a:	9302      	str	r3, [sp, #8]
 23fa66c:	bd09      	pop	{r0, r3, pc}
 23fa66e:	0000      	.short	0x0000
 23fa670:	10079d70 	.word	0x10079d70
 23fa674:	00000004 	.word	0x00000004

023fa678 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fa678:	b509      	push	{r0, r3, lr}
 23fa67a:	4804      	ldr	r0, [pc, #16]	; (23fa68c <__assert_func+0x14>)
 23fa67c:	6800      	ldr	r0, [r0, #0]
 23fa67e:	4b04      	ldr	r3, [pc, #16]	; (23fa690 <__assert_func+0x18>)
 23fa680:	4403      	add	r3, r0
 23fa682:	681b      	ldr	r3, [r3, #0]
 23fa684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa686:	9302      	str	r3, [sp, #8]
 23fa688:	bd09      	pop	{r0, r3, pc}
 23fa68a:	0000      	.short	0x0000
 23fa68c:	10079d70 	.word	0x10079d70
 23fa690:	00000004 	.word	0x00000004

023fa694 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fa694:	b509      	push	{r0, r3, lr}
 23fa696:	4804      	ldr	r0, [pc, #16]	; (23fa6a8 <newlib_impure_ptr_callback+0x14>)
 23fa698:	6800      	ldr	r0, [r0, #0]
 23fa69a:	4b04      	ldr	r3, [pc, #16]	; (23fa6ac <newlib_impure_ptr_callback+0x18>)
 23fa69c:	4403      	add	r3, r0
 23fa69e:	681b      	ldr	r3, [r3, #0]
 23fa6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa6a2:	9302      	str	r3, [sp, #8]
 23fa6a4:	bd09      	pop	{r0, r3, pc}
 23fa6a6:	0000      	.short	0x0000
 23fa6a8:	10079d70 	.word	0x10079d70
 23fa6ac:	00000004 	.word	0x00000004

023fa6b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fa6b0:	2100      	movs	r1, #0
 23fa6b2:	f7ff be9f 	b.w	23fa3f4 <system_delay_ms>

023fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fa6b6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fa6b8:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fa6ba:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fa6bc:	b17c      	cbz	r4, 23fa6de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fa6be:	6863      	ldr	r3, [r4, #4]
 23fa6c0:	3b01      	subs	r3, #1
 23fa6c2:	6063      	str	r3, [r4, #4]
 23fa6c4:	b95b      	cbnz	r3, 23fa6de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fa6c6:	6823      	ldr	r3, [r4, #0]
 23fa6c8:	4620      	mov	r0, r4
 23fa6ca:	689b      	ldr	r3, [r3, #8]
 23fa6cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa6ce:	68a3      	ldr	r3, [r4, #8]
 23fa6d0:	3b01      	subs	r3, #1
 23fa6d2:	60a3      	str	r3, [r4, #8]
 23fa6d4:	b91b      	cbnz	r3, 23fa6de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fa6d6:	6823      	ldr	r3, [r4, #0]
 23fa6d8:	4620      	mov	r0, r4
 23fa6da:	68db      	ldr	r3, [r3, #12]
 23fa6dc:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fa6de:	4628      	mov	r0, r5
 23fa6e0:	bd38      	pop	{r3, r4, r5, pc}

023fa6e2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa6e2:	4770      	bx	lr

023fa6e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 23fa6e4:	4770      	bx	lr

023fa6e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
 23fa6e6:	4770      	bx	lr

023fa6e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa6e8:	4770      	bx	lr
	...

023fa6ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fa6ec:	4b06      	ldr	r3, [pc, #24]	; (23fa708 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fa6ee:	b510      	push	{r4, lr}
	    ||
 23fa6f0:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fa6f2:	f100 040c 	add.w	r4, r0, #12
 23fa6f6:	d005      	beq.n	23fa704 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fa6f8:	4608      	mov	r0, r1
 23fa6fa:	f003 fa31 	bl	23fdb60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fa6fe:	2800      	cmp	r0, #0
 23fa700:	bf08      	it	eq
 23fa702:	2400      	moveq	r4, #0
      }
 23fa704:	4620      	mov	r0, r4
 23fa706:	bd10      	pop	{r4, pc}
 23fa708:	023ff8c8 	.word	0x023ff8c8

023fa70c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fa70c:	4b06      	ldr	r3, [pc, #24]	; (23fa728 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fa70e:	b510      	push	{r4, lr}
	    ||
 23fa710:	4299      	cmp	r1, r3
 23fa712:	f100 040c 	add.w	r4, r0, #12
 23fa716:	d005      	beq.n	23fa724 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fa718:	4608      	mov	r0, r1
 23fa71a:	f003 fa21 	bl	23fdb60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fa71e:	2800      	cmp	r0, #0
 23fa720:	bf08      	it	eq
 23fa722:	2400      	moveq	r4, #0
      }
 23fa724:	4620      	mov	r0, r4
 23fa726:	bd10      	pop	{r4, pc}
 23fa728:	023ff8c8 	.word	0x023ff8c8

023fa72c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fa72c:	4b06      	ldr	r3, [pc, #24]	; (23fa748 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fa72e:	b510      	push	{r4, lr}
	    ||
 23fa730:	4299      	cmp	r1, r3
 23fa732:	f100 040c 	add.w	r4, r0, #12
 23fa736:	d005      	beq.n	23fa744 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fa738:	4608      	mov	r0, r1
 23fa73a:	f003 fa11 	bl	23fdb60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fa73e:	2800      	cmp	r0, #0
 23fa740:	bf08      	it	eq
 23fa742:	2400      	moveq	r4, #0
      }
 23fa744:	4620      	mov	r0, r4
 23fa746:	bd10      	pop	{r4, pc}
 23fa748:	023ff8c8 	.word	0x023ff8c8

023fa74c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa74c:	b510      	push	{r4, lr}
 23fa74e:	4604      	mov	r4, r0
 23fa750:	2168      	movs	r1, #104	; 0x68
 23fa752:	f7fe fe9c 	bl	23f948e <_ZdlPvj>
 23fa756:	4620      	mov	r0, r4
 23fa758:	bd10      	pop	{r4, pc}

023fa75a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fa75a:	b510      	push	{r4, lr}
 23fa75c:	4604      	mov	r4, r0
 23fa75e:	2128      	movs	r1, #40	; 0x28
 23fa760:	f7fe fe95 	bl	23f948e <_ZdlPvj>
 23fa764:	4620      	mov	r0, r4
 23fa766:	bd10      	pop	{r4, pc}

023fa768 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fa768:	b510      	push	{r4, lr}
 23fa76a:	4604      	mov	r4, r0
 23fa76c:	2130      	movs	r1, #48	; 0x30
 23fa76e:	f7fe fe8e 	bl	23f948e <_ZdlPvj>
 23fa772:	4620      	mov	r0, r4
 23fa774:	bd10      	pop	{r4, pc}

023fa776 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fa776:	2168      	movs	r1, #104	; 0x68
 23fa778:	f7fe be89 	b.w	23f948e <_ZdlPvj>

023fa77c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fa77c:	2128      	movs	r1, #40	; 0x28
 23fa77e:	f7fe be86 	b.w	23f948e <_ZdlPvj>

023fa782 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fa782:	2130      	movs	r1, #48	; 0x30
 23fa784:	f7fe be83 	b.w	23f948e <_ZdlPvj>

023fa788 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fa788:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fa78a:	2500      	movs	r5, #0
 23fa78c:	1cec      	adds	r4, r5, #3
 23fa78e:	428c      	cmp	r4, r1
 23fa790:	d80d      	bhi.n	23fa7ae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fa792:	1c6e      	adds	r6, r5, #1
 23fa794:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fa796:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fa798:	4297      	cmp	r7, r2
 23fa79a:	d105      	bne.n	23fa7a8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fa79c:	4426      	add	r6, r4
 23fa79e:	42b1      	cmp	r1, r6
 23fa7a0:	d305      	bcc.n	23fa7ae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fa7a2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fa7a4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fa7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fa7a8:	3401      	adds	r4, #1
 23fa7aa:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fa7ac:	e7ee      	b.n	23fa78c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fa7ae:	2000      	movs	r0, #0
 23fa7b0:	e7f9      	b.n	23fa7a6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

023fa7b4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
 23fa7b4:	200a      	movs	r0, #10
 23fa7b6:	4a02      	ldr	r2, [pc, #8]	; (23fa7c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
 23fa7b8:	4902      	ldr	r1, [pc, #8]	; (23fa7c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
 23fa7ba:	f7ff bdc7 	b.w	23fa34c <panic_>
 23fa7be:	bf00      	nop
 23fa7c0:	023f9eed 	.word	0x023f9eed
 23fa7c4:	023ff8d0 	.word	0x023ff8d0

023fa7c8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fa7c8:	b430      	push	{r4, r5}
 23fa7ca:	460d      	mov	r5, r1
 23fa7cc:	4611      	mov	r1, r2
 23fa7ce:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
 23fa7d0:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fa7d2:	6809      	ldr	r1, [r1, #0]
 23fa7d4:	e9d3 4300 	ldrd	r4, r3, [r3]
 23fa7d8:	6828      	ldr	r0, [r5, #0]
 23fa7da:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23fa7dc:	bc30      	pop	{r4, r5}
 23fa7de:	4760      	bx	ip

023fa7e0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
 23fa7e0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fa7e2:	b538      	push	{r3, r4, r5, lr}
 23fa7e4:	4604      	mov	r4, r0
	switch (__op)
 23fa7e6:	d102      	bne.n	23fa7ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 23fa7e8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 23fa7ea:	6023      	str	r3, [r4, #0]
	}
 23fa7ec:	e003      	b.n	23fa7f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
 23fa7ee:	2a02      	cmp	r2, #2
 23fa7f0:	d003      	beq.n	23fa7fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
 23fa7f2:	2a03      	cmp	r2, #3
 23fa7f4:	d00d      	beq.n	23fa812 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
 23fa7f6:	2000      	movs	r0, #0
 23fa7f8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa7fa:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
 23fa7fc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa7fe:	f7fe fe42 	bl	23f9486 <_Znwj>
 23fa802:	4603      	mov	r3, r0
 23fa804:	2800      	cmp	r0, #0
 23fa806:	d0f0      	beq.n	23fa7ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
 23fa808:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fa80c:	e883 0003 	stmia.w	r3, {r0, r1}
 23fa810:	e7eb      	b.n	23fa7ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 23fa812:	6800      	ldr	r0, [r0, #0]
 23fa814:	2800      	cmp	r0, #0
 23fa816:	d0ee      	beq.n	23fa7f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
 23fa818:	2108      	movs	r1, #8
 23fa81a:	f7fe fe38 	bl	23f948e <_ZdlPvj>
 23fa81e:	e7ea      	b.n	23fa7f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

023fa820 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fa820:	b510      	push	{r4, lr}
      if (_M_manager)
 23fa822:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fa824:	4604      	mov	r4, r0
      if (_M_manager)
 23fa826:	b113      	cbz	r3, 23fa82e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fa828:	2203      	movs	r2, #3
 23fa82a:	4601      	mov	r1, r0
 23fa82c:	4798      	blx	r3
    }
 23fa82e:	4620      	mov	r0, r4
 23fa830:	bd10      	pop	{r4, pc}

023fa832 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fa832:	b510      	push	{r4, lr}
 23fa834:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 23fa836:	3058      	adds	r0, #88	; 0x58
 23fa838:	f7ff fff2 	bl	23fa820 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
 23fa83c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
 23fa840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fa844:	f002 bd80 	b.w	23fd348 <_ZN6StringD1Ev>

023fa848 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fa848:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fa84a:	6843      	ldr	r3, [r0, #4]
    {
 23fa84c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fa84e:	3b01      	subs	r3, #1
 23fa850:	6043      	str	r3, [r0, #4]
 23fa852:	b963      	cbnz	r3, 23fa86e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fa854:	6803      	ldr	r3, [r0, #0]
 23fa856:	689b      	ldr	r3, [r3, #8]
 23fa858:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa85a:	68a3      	ldr	r3, [r4, #8]
 23fa85c:	3b01      	subs	r3, #1
 23fa85e:	60a3      	str	r3, [r4, #8]
 23fa860:	b92b      	cbnz	r3, 23fa86e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fa862:	6823      	ldr	r3, [r4, #0]
 23fa864:	4620      	mov	r0, r4
    }
 23fa866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fa86a:	68db      	ldr	r3, [r3, #12]
 23fa86c:	4718      	bx	r3
    }
 23fa86e:	bd10      	pop	{r4, pc}

023fa870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 23fa870:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 23fa872:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fa874:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fa876:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fa878:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fa87a:	d008      	beq.n	23fa88e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	  {
	    if (__tmp != 0)
 23fa87c:	b111      	cbz	r1, 23fa884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fa87e:	684b      	ldr	r3, [r1, #4]
 23fa880:	3301      	adds	r3, #1
 23fa882:	604b      	str	r3, [r1, #4]
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 23fa884:	6828      	ldr	r0, [r5, #0]
 23fa886:	b108      	cbz	r0, 23fa88c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fa888:	f7ff ffde 	bl	23fa848 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fa88c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 23fa88e:	bd38      	pop	{r3, r4, r5, pc}

023fa890 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
 23fa890:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fa894:	b2da      	uxtb	r2, r3
 23fa896:	2a09      	cmp	r2, #9
 23fa898:	d801      	bhi.n	23fa89e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
 23fa89a:	4618      	mov	r0, r3
 23fa89c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 23fa89e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fa8a2:	2b05      	cmp	r3, #5
 23fa8a4:	d801      	bhi.n	23fa8aa <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
 23fa8a6:	3857      	subs	r0, #87	; 0x57
 23fa8a8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 23fa8aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fa8ae:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
 23fa8b0:	bf94      	ite	ls
 23fa8b2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
 23fa8b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23fa8b8:	4770      	bx	lr
	...

023fa8bc <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fa8bc:	2300      	movs	r3, #0
    WiringBleLock() :
 23fa8be:	b510      	push	{r4, lr}
            locked_(false) {
 23fa8c0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fa8c2:	4b04      	ldr	r3, [pc, #16]	; (23fa8d4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fa8c4:	4604      	mov	r4, r0
 23fa8c6:	6818      	ldr	r0, [r3, #0]
 23fa8c8:	f7ff fae6 	bl	23f9e98 <os_mutex_recursive_lock>
        locked_ = true;
 23fa8cc:	2301      	movs	r3, #1
    }
 23fa8ce:	4620      	mov	r0, r4
        locked_ = true;
 23fa8d0:	7023      	strb	r3, [r4, #0]
    }
 23fa8d2:	bd10      	pop	{r4, pc}
 23fa8d4:	1007ae54 	.word	0x1007ae54

023fa8d8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fa8d8:	b510      	push	{r4, lr}
        if (locked_) {
 23fa8da:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fa8dc:	4604      	mov	r4, r0
        if (locked_) {
 23fa8de:	b11b      	cbz	r3, 23fa8e8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fa8e0:	4b02      	ldr	r3, [pc, #8]	; (23fa8ec <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fa8e2:	6818      	ldr	r0, [r3, #0]
 23fa8e4:	f7ff fae6 	bl	23f9eb4 <os_mutex_recursive_unlock>
    }
 23fa8e8:	4620      	mov	r0, r4
 23fa8ea:	bd10      	pop	{r4, pc}
 23fa8ec:	1007ae54 	.word	0x1007ae54

023fa8f0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fa8f0:	b082      	sub	sp, #8
    address_ = addr;
 23fa8f2:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fa8f4:	4603      	mov	r3, r0
    address_ = addr;
 23fa8f6:	6808      	ldr	r0, [r1, #0]
 23fa8f8:	6849      	ldr	r1, [r1, #4]
 23fa8fa:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fa8fc:	466a      	mov	r2, sp
 23fa8fe:	ca03      	ldmia	r2!, {r0, r1}
 23fa900:	6018      	str	r0, [r3, #0]
}
 23fa902:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fa904:	6059      	str	r1, [r3, #4]
}
 23fa906:	b002      	add	sp, #8
 23fa908:	4770      	bx	lr

023fa90a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fa90a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fa90c:	7982      	ldrb	r2, [r0, #6]
 23fa90e:	798b      	ldrb	r3, [r1, #6]
 23fa910:	429a      	cmp	r2, r3
 23fa912:	d106      	bne.n	23fa922 <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fa914:	2206      	movs	r2, #6
 23fa916:	f004 fd71 	bl	23ff3fc <memcmp>
 23fa91a:	fab0 f080 	clz	r0, r0
 23fa91e:	0940      	lsrs	r0, r0, #5
}
 23fa920:	bd08      	pop	{r3, pc}
    return false;
 23fa922:	2000      	movs	r0, #0
 23fa924:	e7fc      	b.n	23fa920 <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

023fa928 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fa928:	b570      	push	{r4, r5, r6, lr}
 23fa92a:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fa92c:	4b38      	ldr	r3, [pc, #224]	; (23faa10 <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fa92e:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fa930:	6818      	ldr	r0, [r3, #0]
 23fa932:	889b      	ldrh	r3, [r3, #4]
 23fa934:	9000      	str	r0, [sp, #0]
 23fa936:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fa93a:	4b36      	ldr	r3, [pc, #216]	; (23faa14 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fa93c:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fa93e:	6818      	ldr	r0, [r3, #0]
 23fa940:	889b      	ldrh	r3, [r3, #4]
 23fa942:	9002      	str	r0, [sp, #8]
 23fa944:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fa948:	b97e      	cbnz	r6, 23fa96a <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fa94a:	2206      	movs	r2, #6
 23fa94c:	4669      	mov	r1, sp
 23fa94e:	4620      	mov	r0, r4
 23fa950:	f004 fd54 	bl	23ff3fc <memcmp>
 23fa954:	b138      	cbz	r0, 23fa966 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fa956:	2206      	movs	r2, #6
 23fa958:	4620      	mov	r0, r4
 23fa95a:	a902      	add	r1, sp, #8
 23fa95c:	f004 fd4e 	bl	23ff3fc <memcmp>
 23fa960:	3800      	subs	r0, #0
 23fa962:	bf18      	it	ne
 23fa964:	2001      	movne	r0, #1
}
 23fa966:	b006      	add	sp, #24
 23fa968:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fa96a:	88a3      	ldrh	r3, [r4, #4]
 23fa96c:	6820      	ldr	r0, [r4, #0]
 23fa96e:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fa972:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fa976:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fa978:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fa97a:	d124      	bne.n	23fa9c6 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fa97c:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fa980:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fa982:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fa986:	4669      	mov	r1, sp
 23fa988:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fa98a:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fa98e:	f004 fd35 	bl	23ff3fc <memcmp>
 23fa992:	2800      	cmp	r0, #0
 23fa994:	d03a      	beq.n	23faa0c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fa996:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fa99a:	2206      	movs	r2, #6
 23fa99c:	a902      	add	r1, sp, #8
 23fa99e:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fa9a0:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fa9a4:	f004 fd2a 	bl	23ff3fc <memcmp>
 23fa9a8:	b380      	cbz	r0, 23faa0c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fa9aa:	7960      	ldrb	r0, [r4, #5]
 23fa9ac:	2e01      	cmp	r6, #1
 23fa9ae:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fa9b2:	d104      	bne.n	23fa9be <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fa9b4:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fa9b6:	bf14      	ite	ne
 23fa9b8:	2000      	movne	r0, #0
 23fa9ba:	2001      	moveq	r0, #1
 23fa9bc:	e7d3      	b.n	23fa966 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fa9be:	fab0 f080 	clz	r0, r0
 23fa9c2:	0940      	lsrs	r0, r0, #5
 23fa9c4:	e7cf      	b.n	23fa966 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fa9c6:	2e02      	cmp	r6, #2
 23fa9c8:	d11e      	bne.n	23faa08 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa9ca:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fa9cc:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa9d0:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fa9d4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa9d8:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fa9dc:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa9e0:	f004 fd0c 	bl	23ff3fc <memcmp>
 23fa9e4:	b190      	cbz	r0, 23faa0c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fa9e6:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fa9ea:	2203      	movs	r2, #3
 23fa9ec:	f10d 010b 	add.w	r1, sp, #11
 23fa9f0:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fa9f4:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fa9f8:	f004 fd00 	bl	23ff3fc <memcmp>
 23fa9fc:	b130      	cbz	r0, 23faa0c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fa9fe:	7960      	ldrb	r0, [r4, #5]
 23faa00:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23faa04:	2840      	cmp	r0, #64	; 0x40
 23faa06:	e7d6      	b.n	23fa9b6 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23faa08:	2001      	movs	r0, #1
 23faa0a:	e7ac      	b.n	23fa966 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23faa0c:	2000      	movs	r0, #0
 23faa0e:	e7aa      	b.n	23fa966 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23faa10:	023ff768 	.word	0x023ff768
 23faa14:	023ff90e 	.word	0x023ff90e

023faa18 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23faa18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23faa1c:	6003      	str	r3, [r0, #0]
 23faa1e:	8083      	strh	r3, [r0, #4]
}
 23faa20:	2000      	movs	r0, #0
 23faa22:	4770      	bx	lr

023faa24 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23faa24:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23faa26:	4602      	mov	r2, r0
 23faa28:	b508      	push	{r3, lr}
        : address_{} {
 23faa2a:	6001      	str	r1, [r0, #0]
 23faa2c:	6041      	str	r1, [r0, #4]
    clear();
 23faa2e:	f7ff fff3 	bl	23faa18 <_ZN8particle10BleAddress5clearEv>
}
 23faa32:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23faa34:	7191      	strb	r1, [r2, #6]
}
 23faa36:	bd08      	pop	{r3, pc}

023faa38 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23faa38:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23faa3a:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23faa3c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23faa3e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23faa40:	4b04      	ldr	r3, [pc, #16]	; (23faa54 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23faa42:	f103 0110 	add.w	r1, r3, #16
 23faa46:	f853 4b04 	ldr.w	r4, [r3], #4
 23faa4a:	428b      	cmp	r3, r1
 23faa4c:	f842 4b04 	str.w	r4, [r2], #4
 23faa50:	d1f9      	bne.n	23faa46 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23faa52:	bd10      	pop	{r4, pc}
 23faa54:	023ff76e 	.word	0x023ff76e

023faa58 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23faa58:	b510      	push	{r4, lr}
    if (uuid128) {
 23faa5a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23faa5c:	4604      	mov	r4, r0
    if (uuid128) {
 23faa5e:	b1b1      	cbz	r1, 23faa8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23faa60:	2a01      	cmp	r2, #1
 23faa62:	f101 0210 	add.w	r2, r1, #16
 23faa66:	d10a      	bne.n	23faa7e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23faa68:	4601      	mov	r1, r0
 23faa6a:	f853 0b04 	ldr.w	r0, [r3], #4
 23faa6e:	4293      	cmp	r3, r2
 23faa70:	f841 0b04 	str.w	r0, [r1], #4
 23faa74:	d1f9      	bne.n	23faa6a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23faa76:	2301      	movs	r3, #1
 23faa78:	6123      	str	r3, [r4, #16]
}
 23faa7a:	4620      	mov	r0, r4
 23faa7c:	bd10      	pop	{r4, pc}
 23faa7e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23faa80:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23faa84:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23faa86:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23faa8a:	d1f9      	bne.n	23faa80 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23faa8c:	e7f3      	b.n	23faa76 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23faa8e:	2210      	movs	r2, #16
 23faa90:	f004 fceb 	bl	23ff46a <memset>
 23faa94:	e7f1      	b.n	23faa7a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023faa96 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
 23faa96:	b538      	push	{r3, r4, r5, lr}
 23faa98:	4604      	mov	r4, r0
 23faa9a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
 23faa9c:	461a      	mov	r2, r3
 23faa9e:	f7ff ffdb 	bl	23faa58 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
}
 23faaa2:	4620      	mov	r0, r4
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23faaa4:	81a5      	strh	r5, [r4, #12]
}
 23faaa6:	bd38      	pop	{r3, r4, r5, pc}

023faaa8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
 23faaa8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
 23faaaa:	6902      	ldr	r2, [r0, #16]
 23faaac:	b922      	cbnz	r2, 23faab8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
 23faaae:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23faab0:	3800      	subs	r0, #0
 23faab2:	bf18      	it	ne
 23faab4:	2001      	movne	r0, #1
}
 23faab6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23faab8:	2210      	movs	r2, #16
 23faaba:	4902      	ldr	r1, [pc, #8]	; (23faac4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
 23faabc:	f004 fc9e 	bl	23ff3fc <memcmp>
 23faac0:	e7f6      	b.n	23faab0 <_ZNK8particle7BleUuid7isValidEv+0x8>
 23faac2:	bf00      	nop
 23faac4:	023ffa64 	.word	0x023ffa64

023faac8 <_ZNK8particle7BleUuid4typeEv>:
}
 23faac8:	6900      	ldr	r0, [r0, #16]
 23faaca:	4770      	bx	lr

023faacc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
 23faacc:	b538      	push	{r3, r4, r5, lr}
 23faace:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
 23faad0:	2214      	movs	r2, #20
 23faad2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
 23faad4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
 23faad6:	f004 fcc8 	bl	23ff46a <memset>
    if (type_ == BleUuidType::SHORT) {
 23faada:	6923      	ldr	r3, [r4, #16]
 23faadc:	b91b      	cbnz	r3, 23faae6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
 23faade:	89a3      	ldrh	r3, [r4, #12]
 23faae0:	802b      	strh	r3, [r5, #0]
}
 23faae2:	4628      	mov	r0, r5
 23faae4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
 23faae6:	2301      	movs	r3, #1
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
 23faae8:	4621      	mov	r1, r4
        uuid.type = BLE_UUID_TYPE_128BIT;
 23faaea:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
 23faaec:	462b      	mov	r3, r5
 23faaee:	f104 0210 	add.w	r2, r4, #16
 23faaf2:	f851 0b04 	ldr.w	r0, [r1], #4
 23faaf6:	4291      	cmp	r1, r2
 23faaf8:	f843 0b04 	str.w	r0, [r3], #4
 23faafc:	d1f9      	bne.n	23faaf2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
 23faafe:	e7f0      	b.n	23faae2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

023fab00 <_ZNK8particle7BleUuid7shortedEv>:
}
 23fab00:	8980      	ldrh	r0, [r0, #12]
 23fab02:	4770      	bx	lr

023fab04 <_ZNK8particle7BleUuid8rawBytesEv>:
}
 23fab04:	4770      	bx	lr

023fab06 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fab06:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fab08:	6902      	ldr	r2, [r0, #16]
 23fab0a:	690b      	ldr	r3, [r1, #16]
 23fab0c:	429a      	cmp	r2, r3
 23fab0e:	d106      	bne.n	23fab1e <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fab10:	2210      	movs	r2, #16
 23fab12:	f004 fc73 	bl	23ff3fc <memcmp>
 23fab16:	fab0 f080 	clz	r0, r0
 23fab1a:	0940      	lsrs	r0, r0, #5
}
 23fab1c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fab1e:	2000      	movs	r0, #0
 23fab20:	e7fc      	b.n	23fab1c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

023fab24 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
 23fab24:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
 23fab26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fab2a:	4602      	mov	r2, r0
void BleUuid::construct(const char* uuid) {
 23fab2c:	4606      	mov	r6, r0
    type_ = BleUuidType::LONG;
 23fab2e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fab30:	4b33      	ldr	r3, [pc, #204]	; (23fac00 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
 23fab32:	460c      	mov	r4, r1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fab34:	f103 0110 	add.w	r1, r3, #16
 23fab38:	f853 0b04 	ldr.w	r0, [r3], #4
 23fab3c:	428b      	cmp	r3, r1
 23fab3e:	f842 0b04 	str.w	r0, [r2], #4
 23fab42:	d1f9      	bne.n	23fab38 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
 23fab44:	b344      	cbz	r4, 23fab98 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
 23fab46:	2124      	movs	r1, #36	; 0x24
 23fab48:	4620      	mov	r0, r4
 23fab4a:	f004 fcf8 	bl	23ff53e <strnlen>
 23fab4e:	2804      	cmp	r0, #4
 23fab50:	f04f 0500 	mov.w	r5, #0
 23fab54:	d123      	bne.n	23fab9e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
 23fab56:	f8ad 5004 	strh.w	r5, [sp, #4]
 23fab5a:	af01      	add	r7, sp, #4
 23fab5c:	1ca5      	adds	r5, r4, #2
 23fab5e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
 23fab60:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 23fab64:	f7ff fe94 	bl	23fa890 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
 23fab68:	f1b0 0800 	subs.w	r8, r0, #0
 23fab6c:	db12      	blt.n	23fab94 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
 23fab6e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 23fab72:	f7ff fe8d 	bl	23fa890 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
 23fab76:	2800      	cmp	r0, #0
 23fab78:	db0c      	blt.n	23fab94 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
 23fab7a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fab7c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
 23fab80:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fab82:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
 23fab86:	d1eb      	bne.n	23fab60 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
 23fab88:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23fab8c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
 23fab8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fab92:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
 23fab94:	2300      	movs	r3, #0
 23fab96:	6133      	str	r3, [r6, #16]
}
 23fab98:	b002      	add	sp, #8
 23fab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
 23fab9e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23faba2:	2124      	movs	r1, #36	; 0x24
 23faba4:	4620      	mov	r0, r4
 23faba6:	f004 fcca 	bl	23ff53e <strnlen>
 23fabaa:	42a8      	cmp	r0, r5
 23fabac:	d807      	bhi.n	23fabbe <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
 23fabae:	4642      	mov	r2, r8
 23fabb0:	2100      	movs	r1, #0
 23fabb2:	4630      	mov	r0, r6
}
 23fabb4:	b002      	add	sp, #8
 23fabb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
 23fabba:	f004 bc56 	b.w	23ff46a <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fabbe:	f1b8 0f00 	cmp.w	r8, #0
 23fabc2:	d0e9      	beq.n	23fab98 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
 23fabc4:	5d60      	ldrb	r0, [r4, r5]
 23fabc6:	f7ff fe63 	bl	23fa890 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
 23fabca:	0603      	lsls	r3, r0, #24
 23fabcc:	d415      	bmi.n	23fabfa <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
 23fabce:	0100      	lsls	r0, r0, #4
 23fabd0:	b2c7      	uxtb	r7, r0
 23fabd2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fabd6:	2124      	movs	r1, #36	; 0x24
 23fabd8:	4620      	mov	r0, r4
            uuid128_[len - 1] = hi << 4;
 23fabda:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fabde:	f004 fcae 	bl	23ff53e <strnlen>
 23fabe2:	3501      	adds	r5, #1
 23fabe4:	42a8      	cmp	r0, r5
 23fabe6:	d908      	bls.n	23fabfa <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
 23fabe8:	5d60      	ldrb	r0, [r4, r5]
 23fabea:	f7ff fe51 	bl	23fa890 <_ZN8particle11hexToNibbleEc>
 23fabee:	b240      	sxtb	r0, r0
                if (lo >= 0) {
 23fabf0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
 23fabf2:	bfa4      	itt	ge
 23fabf4:	4338      	orrge	r0, r7
 23fabf6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fabfa:	3501      	adds	r5, #1
 23fabfc:	e7d1      	b.n	23faba2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
 23fabfe:	bf00      	nop
 23fac00:	023ff76e 	.word	0x023ff76e

023fac04 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
 23fac04:	b513      	push	{r0, r1, r4, lr}
 23fac06:	4604      	mov	r4, r0
 23fac08:	9101      	str	r1, [sp, #4]
        : BleUuid() {
 23fac0a:	f7ff ff15 	bl	23faa38 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
 23fac0e:	4620      	mov	r0, r4
 23fac10:	9901      	ldr	r1, [sp, #4]
 23fac12:	f7ff ff87 	bl	23fab24 <_ZN8particle7BleUuid9constructEPKc>
}
 23fac16:	4620      	mov	r0, r4
 23fac18:	b002      	add	sp, #8
 23fac1a:	bd10      	pop	{r4, pc}

023fac1c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
 23fac1c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
 23fac1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fac22:	2500      	movs	r5, #0
    BleCharacteristicImpl()
 23fac24:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
 23fac26:	8043      	strh	r3, [r0, #2]
 23fac28:	220e      	movs	r2, #14
 23fac2a:	4629      	mov	r1, r5
 23fac2c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
 23fac2e:	7105      	strb	r5, [r0, #4]
 23fac30:	3006      	adds	r0, #6
 23fac32:	f004 fc1a 	bl	23ff46a <memset>
 23fac36:	f104 0014 	add.w	r0, r4, #20
 23fac3a:	f7ff fefd 	bl	23faa38 <_ZN8particle7BleUuidC1Ev>
 23fac3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fac42:	f7ff fef9 	bl	23faa38 <_ZN8particle7BleUuidC1Ev>
 23fac46:	4904      	ldr	r1, [pc, #16]	; (23fac58 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
 23fac48:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23fac4c:	f002 fbc7 	bl	23fd3de <_ZN6StringC1EPK19__FlashStringHelper>
    }
 23fac50:	4620      	mov	r0, r4
    _Function_base() : _M_manager(nullptr) { }
 23fac52:	6565      	str	r5, [r4, #84]	; 0x54
 23fac54:	bd38      	pop	{r3, r4, r5, pc}
 23fac56:	bf00      	nop
 23fac58:	023ffb52 	.word	0x023ffb52

023fac5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fac5c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 23fac5e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fac62:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fac66:	4293      	cmp	r3, r2
 23fac68:	4618      	mov	r0, r3
 23fac6a:	d005      	beq.n	23fac78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fac6c:	6804      	ldr	r4, [r0, #0]
 23fac6e:	3308      	adds	r3, #8
 23fac70:	8824      	ldrh	r4, [r4, #0]
 23fac72:	428c      	cmp	r4, r1
 23fac74:	d1f7      	bne.n	23fac66 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
 23fac76:	bd10      	pop	{r4, pc}
        return nullptr;
 23fac78:	2000      	movs	r0, #0
 23fac7a:	e7fc      	b.n	23fac76 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>

023fac7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fac7e:	4606      	mov	r6, r0
 23fac80:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
 23fac82:	460d      	mov	r5, r1
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fac84:	b085      	sub	sp, #20
    if (buf == nullptr || len == 0) {
 23fac86:	2900      	cmp	r1, #0
 23fac88:	d050      	beq.n	23fad2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
 23fac8a:	2a00      	cmp	r2, #0
 23fac8c:	d04e      	beq.n	23fad2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fac8e:	6804      	ldr	r4, [r0, #0]
 23fac90:	2af4      	cmp	r2, #244	; 0xf4
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
 23fac92:	7823      	ldrb	r3, [r4, #0]
 23fac94:	bf28      	it	cs
 23fac96:	22f4      	movcs	r2, #244	; 0xf4
 23fac98:	b343      	cbz	r3, 23facec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
 23fac9a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
 23fac9c:	0798      	lsls	r0, r3, #30
 23fac9e:	d509      	bpl.n	23facb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
 23faca0:	2300      	movs	r3, #0
 23faca2:	89a0      	ldrh	r0, [r4, #12]
 23faca4:	9203      	str	r2, [sp, #12]
 23faca6:	f7ff f879 	bl	23f9d9c <hal_ble_gatt_server_set_characteristic_value>
 23facaa:	2800      	cmp	r0, #0
 23facac:	9a03      	ldr	r2, [sp, #12]
 23facae:	da03      	bge.n	23facb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
 23facb0:	b005      	add	sp, #20
 23facb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
 23facb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23facb8:	6834      	ldr	r4, [r6, #0]
 23facba:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
 23facbc:	06d9      	lsls	r1, r3, #27
 23facbe:	d509      	bpl.n	23facd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
 23facc0:	2f01      	cmp	r7, #1
 23facc2:	d007      	beq.n	23facd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23facc4:	2300      	movs	r3, #0
 23facc6:	4629      	mov	r1, r5
 23facc8:	89a0      	ldrh	r0, [r4, #12]
}
 23facca:	b005      	add	sp, #20
 23faccc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23facd0:	f7ff b8aa 	b.w	23f9e28 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
 23facd4:	069b      	lsls	r3, r3, #26
 23facd6:	d5eb      	bpl.n	23facb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23facd8:	2f02      	cmp	r7, #2
 23facda:	d0e9      	beq.n	23facb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23facdc:	2300      	movs	r3, #0
 23facde:	4629      	mov	r1, r5
 23face0:	89a0      	ldrh	r0, [r4, #12]
}
 23face2:	b005      	add	sp, #20
 23face4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23face8:	f7ff b8ac 	b.w	23f9e44 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
 23facec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23facf0:	8860      	ldrh	r0, [r4, #2]
 23facf2:	4288      	cmp	r0, r1
 23facf4:	d01c      	beq.n	23fad30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
 23facf6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
 23facf8:	074e      	lsls	r6, r1, #29
 23facfa:	d501      	bpl.n	23fad00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
 23facfc:	2f01      	cmp	r7, #1
 23facfe:	d104      	bne.n	23fad0a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fad00:	070b      	lsls	r3, r1, #28
 23fad02:	d409      	bmi.n	23fad18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
 23fad04:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fad08:	e7d2      	b.n	23facb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fad0a:	89a1      	ldrh	r1, [r4, #12]
 23fad0c:	9300      	str	r3, [sp, #0]
 23fad0e:	4613      	mov	r3, r2
 23fad10:	462a      	mov	r2, r5
 23fad12:	f7ff f85f 	bl	23f9dd4 <hal_ble_gatt_client_write_without_response>
 23fad16:	e7cb      	b.n	23facb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fad18:	2f02      	cmp	r7, #2
 23fad1a:	d0f3      	beq.n	23fad04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fad1c:	2300      	movs	r3, #0
 23fad1e:	89a1      	ldrh	r1, [r4, #12]
 23fad20:	9300      	str	r3, [sp, #0]
 23fad22:	4613      	mov	r3, r2
 23fad24:	462a      	mov	r2, r5
 23fad26:	f7ff f847 	bl	23f9db8 <hal_ble_gatt_client_write_with_response>
 23fad2a:	e7c1      	b.n	23facb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fad2c:	4802      	ldr	r0, [pc, #8]	; (23fad38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
 23fad2e:	e7bf      	b.n	23facb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
 23fad30:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fad34:	e7bc      	b.n	23facb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fad36:	bf00      	nop
 23fad38:	fffffef2 	.word	0xfffffef2

023fad3c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
 23fad3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fad40:	2600      	movs	r6, #0
 23fad42:	4607      	mov	r7, r0
 23fad44:	6006      	str	r6, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fad46:	2028      	movs	r0, #40	; 0x28
 23fad48:	460c      	mov	r4, r1
 23fad4a:	f7fe fb9c 	bl	23f9486 <_Znwj>
	  auto __pi = ::new (__mem)
 23fad4e:	1e05      	subs	r5, r0, #0
 23fad50:	f105 080c 	add.w	r8, r5, #12
 23fad54:	d00f      	beq.n	23fad76 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fad56:	2301      	movs	r3, #1
 23fad58:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fad5c:	4b08      	ldr	r3, [pc, #32]	; (23fad80 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
              characteristicsDiscovered_(false) {
 23fad5e:	4640      	mov	r0, r8
 23fad60:	602b      	str	r3, [r5, #0]
 23fad62:	f7ff fe69 	bl	23faa38 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
 23fad66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
 23fad68:	622e      	str	r6, [r5, #32]
 23fad6a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
 23fad6e:	4646      	mov	r6, r8
 23fad70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23fad72:	6823      	ldr	r3, [r4, #0]
 23fad74:	6033      	str	r3, [r6, #0]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fad76:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
 23fad78:	e9c7 8500 	strd	r8, r5, [r7]
 23fad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fad80:	023ffa24 	.word	0x023ffa24

023fad84 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fad84:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fad86:	2500      	movs	r5, #0
 23fad88:	4606      	mov	r6, r0
 23fad8a:	6005      	str	r5, [r0, #0]
 23fad8c:	2030      	movs	r0, #48	; 0x30
 23fad8e:	f7fe fb7a 	bl	23f9486 <_Znwj>
	  auto __pi = ::new (__mem)
 23fad92:	4604      	mov	r4, r0
 23fad94:	b198      	cbz	r0, 23fadbe <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fad96:	2301      	movs	r3, #1
 23fad98:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fad9c:	4b0a      	ldr	r3, [pc, #40]	; (23fadc8 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fad9e:	300e      	adds	r0, #14
 23fada0:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fada4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fada8:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fadac:	f7ff fe3a 	bl	23faa24 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fadb0:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fadb4:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fadb8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fadbc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fadbe:	6074      	str	r4, [r6, #4]
 23fadc0:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fadc2:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fadc4:	6034      	str	r4, [r6, #0]
 23fadc6:	bd70      	pop	{r4, r5, r6, pc}
 23fadc8:	023ffa40 	.word	0x023ffa40

023fadcc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
 23fadcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fadce:	460d      	mov	r5, r1
 23fadd0:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fadd2:	a801      	add	r0, sp, #4
 23fadd4:	f7ff fd72 	bl	23fa8bc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fadd8:	682a      	ldr	r2, [r5, #0]
 23fadda:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23faddc:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fade0:	6023      	str	r3, [r4, #0]
 23fade2:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fade6:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fade8:	f7ff fd76 	bl	23fa8d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fadec:	4620      	mov	r0, r4
 23fadee:	b003      	add	sp, #12
 23fadf0:	bd30      	pop	{r4, r5, pc}

023fadf2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fadf2:	b530      	push	{r4, r5, lr}
 23fadf4:	4605      	mov	r5, r0
 23fadf6:	460c      	mov	r4, r1
 23fadf8:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fadfa:	a801      	add	r0, sp, #4
 23fadfc:	f7ff fd5e 	bl	23fa8bc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fae00:	682a      	ldr	r2, [r5, #0]
 23fae02:	6823      	ldr	r3, [r4, #0]
 23fae04:	8812      	ldrh	r2, [r2, #0]
 23fae06:	881b      	ldrh	r3, [r3, #0]
 23fae08:	429a      	cmp	r2, r3
 23fae0a:	d10d      	bne.n	23fae28 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fae0c:	4629      	mov	r1, r5
 23fae0e:	a802      	add	r0, sp, #8
 23fae10:	f7ff ffdc 	bl	23fadcc <_ZNK8particle13BlePeerDevice7addressEv>
 23fae14:	4621      	mov	r1, r4
 23fae16:	a804      	add	r0, sp, #16
 23fae18:	f7ff ffd8 	bl	23fadcc <_ZNK8particle13BlePeerDevice7addressEv>
 23fae1c:	a904      	add	r1, sp, #16
 23fae1e:	a802      	add	r0, sp, #8
 23fae20:	f7ff fd73 	bl	23fa90a <_ZNK8particle10BleAddresseqERKS0_>
 23fae24:	4604      	mov	r4, r0
 23fae26:	b900      	cbnz	r0, 23fae2a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fae28:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fae2a:	a801      	add	r0, sp, #4
 23fae2c:	f7ff fd54 	bl	23fa8d8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fae30:	4620      	mov	r0, r4
 23fae32:	b007      	add	sp, #28
 23fae34:	bd30      	pop	{r4, r5, pc}
	...

023fae38 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fae38:	b570      	push	{r4, r5, r6, lr}
 23fae3a:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fae3c:	2074      	movs	r0, #116	; 0x74
 23fae3e:	f7fe fb22 	bl	23f9486 <_Znwj>
 23fae42:	4604      	mov	r4, r0
 23fae44:	b1a0      	cbz	r0, 23fae70 <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fae46:	2500      	movs	r5, #0
 23fae48:	e9c0 5500 	strd	r5, r5, [r0]
 23fae4c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fae50:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fae54:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fae58:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fae5a:	3024      	adds	r0, #36	; 0x24
 23fae5c:	f7ff ff92 	bl	23fad84 <_ZN8particle13BlePeerDeviceC1Ev>
 23fae60:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fae64:	f7ff ff8e 	bl	23fad84 <_ZN8particle13BlePeerDeviceC1Ev>
 23fae68:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fae6a:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fae6c:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fae6e:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fae70:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fae72:	b924      	cbnz	r4, 23fae7e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fae74:	200a      	movs	r0, #10
 23fae76:	4a0a      	ldr	r2, [pc, #40]	; (23faea0 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fae78:	490a      	ldr	r1, [pc, #40]	; (23faea4 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fae7a:	f7ff fa67 	bl	23fa34c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fae7e:	2000      	movs	r0, #0
 23fae80:	f7fe ff38 	bl	23f9cf4 <hal_ble_stack_init>
 23fae84:	b120      	cbz	r0, 23fae90 <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fae86:	200a      	movs	r0, #10
 23fae88:	4a05      	ldr	r2, [pc, #20]	; (23faea0 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fae8a:	4907      	ldr	r1, [pc, #28]	; (23faea8 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fae8c:	f7ff fa5e 	bl	23fa34c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fae90:	2200      	movs	r2, #0
 23fae92:	6831      	ldr	r1, [r6, #0]
 23fae94:	4805      	ldr	r0, [pc, #20]	; (23faeac <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fae96:	f7fe ffb9 	bl	23f9e0c <hal_ble_set_callback_on_periph_link_events>
}
 23fae9a:	4630      	mov	r0, r6
 23fae9c:	bd70      	pop	{r4, r5, r6, pc}
 23fae9e:	bf00      	nop
 23faea0:	023f9eed 	.word	0x023f9eed
 23faea4:	023ff8d0 	.word	0x023ff8d0
 23faea8:	023ff915 	.word	0x023ff915
 23faeac:	023fb3ed 	.word	0x023fb3ed

023faeb0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23faeb0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23faeb2:	4c0a      	ldr	r4, [pc, #40]	; (23faedc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23faeb4:	e8d4 3f8f 	ldab	r3, [r4]
 23faeb8:	07db      	lsls	r3, r3, #31
 23faeba:	d40c      	bmi.n	23faed6 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23faebc:	4620      	mov	r0, r4
 23faebe:	f7fe faf5 	bl	23f94ac <__cxa_guard_acquire>
 23faec2:	b140      	cbz	r0, 23faed6 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23faec4:	4806      	ldr	r0, [pc, #24]	; (23faee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23faec6:	f7ff ffb7 	bl	23fae38 <_ZN8particle14BleLocalDeviceC1Ev>
 23faeca:	4620      	mov	r0, r4
 23faecc:	f7fe faf3 	bl	23f94b6 <__cxa_guard_release>
 23faed0:	4804      	ldr	r0, [pc, #16]	; (23faee4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23faed2:	f004 fa85 	bl	23ff3e0 <atexit>
    return instance;
}
 23faed6:	4802      	ldr	r0, [pc, #8]	; (23faee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23faed8:	bd10      	pop	{r4, pc}
 23faeda:	bf00      	nop
 23faedc:	1007ae4c 	.word	0x1007ae4c
 23faee0:	1007ae58 	.word	0x1007ae58
 23faee4:	023fb69d 	.word	0x023fb69d

023faee8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23faee8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
 23faeea:	6803      	ldr	r3, [r0, #0]
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23faeec:	4604      	mov	r4, r0
    switch (event->type) {
 23faeee:	3b09      	subs	r3, #9
 23faef0:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23faef2:	460d      	mov	r5, r1
 23faef4:	b08d      	sub	sp, #52	; 0x34
    switch (event->type) {
 23faef6:	d811      	bhi.n	23faf1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
 23faef8:	f7ff ffda 	bl	23faeb0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23faefc:	88a1      	ldrh	r1, [r4, #4]
 23faefe:	6800      	ldr	r0, [r0, #0]
 23faf00:	f7ff feac 	bl	23fac5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
 23faf04:	4603      	mov	r3, r0
 23faf06:	b958      	cbnz	r0, 23faf20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
 23faf08:	2220      	movs	r2, #32
 23faf0a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 23faf0e:	4a0b      	ldr	r2, [pc, #44]	; (23faf3c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
 23faf10:	2032      	movs	r0, #50	; 0x32
 23faf12:	9200      	str	r2, [sp, #0]
 23faf14:	490a      	ldr	r1, [pc, #40]	; (23faf40 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
 23faf16:	aa04      	add	r2, sp, #16
 23faf18:	f7ff fa26 	bl	23fa368 <log_message>
}
 23faf1c:	b00d      	add	sp, #52	; 0x34
 23faf1e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
 23faf20:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 23faf22:	2a00      	cmp	r2, #0
 23faf24:	d0fa      	beq.n	23faf1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
 23faf26:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23faf2a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 23faf2e:	e9cd 1203 	strd	r1, r2, [sp, #12]
 23faf32:	6dac      	ldr	r4, [r5, #88]	; 0x58
 23faf34:	aa04      	add	r2, sp, #16
 23faf36:	a903      	add	r1, sp, #12
 23faf38:	47a0      	blx	r4
}
 23faf3a:	e7ef      	b.n	23faf1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
 23faf3c:	023ff957 	.word	0x023ff957
 23faf40:	023ff8e7 	.word	0x023ff8e7

023faf44 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
 23faf44:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
 23faf46:	2000      	movs	r0, #0
 23faf48:	f7fe fed4 	bl	23f9cf4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
 23faf4c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23faf50:	bd08      	pop	{r3, pc}

023faf52 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
 23faf52:	b919      	cbnz	r1, 23faf5c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
 23faf54:	460a      	mov	r2, r1
 23faf56:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
 23faf58:	f7fe beda 	b.w	23f9d10 <hal_ble_gap_set_advertising_data>
 23faf5c:	2200      	movs	r2, #0
 23faf5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23faf62:	e7f9      	b.n	23faf58 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

023faf64 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
 23faf64:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
 23faf66:	69d8      	ldr	r0, [r3, #28]
}
 23faf68:	2800      	cmp	r0, #0
 23faf6a:	bfd4      	ite	le
 23faf6c:	2000      	movle	r0, #0
 23faf6e:	2001      	movgt	r0, #1
 23faf70:	4770      	bx	lr

023faf72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faf72:	b570      	push	{r4, r5, r6, lr}
 23faf74:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23faf76:	e9d0 5300 	ldrd	r5, r3, [r0]
 23faf7a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23faf7e:	42ae      	cmp	r6, r5
 23faf80:	d004      	beq.n	23faf8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23faf82:	4628      	mov	r0, r5
 23faf84:	f002 f9e0 	bl	23fd348 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23faf88:	3510      	adds	r5, #16
 23faf8a:	e7f8      	b.n	23faf7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23faf8c:	6820      	ldr	r0, [r4, #0]
 23faf8e:	f7ff fb2d 	bl	23fa5ec <free>
}
 23faf92:	4620      	mov	r0, r4
 23faf94:	bd70      	pop	{r4, r5, r6, pc}

023faf96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23faf96:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23faf98:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23faf9a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23faf9c:	6843      	ldr	r3, [r0, #4]
 23faf9e:	db02      	blt.n	23fafa6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fafa0:	1862      	adds	r2, r4, r1
 23fafa2:	429a      	cmp	r2, r3
 23fafa4:	dd00      	ble.n	23fafa8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fafa6:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fafa8:	682a      	ldr	r2, [r5, #0]
 23fafaa:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fafac:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fafae:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fafb0:	1a52      	subs	r2, r2, r1
 23fafb2:	f004 fa40 	bl	23ff436 <memmove>
    size_ -= n;
 23fafb6:	686a      	ldr	r2, [r5, #4]
 23fafb8:	1b12      	subs	r2, r2, r4
 23fafba:	606a      	str	r2, [r5, #4]
}
 23fafbc:	bd38      	pop	{r3, r4, r5, pc}

023fafbe <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
 23fafbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
 23fafc0:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
 23fafc2:	4604      	mov	r4, r0
 23fafc4:	460d      	mov	r5, r1
 23fafc6:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fafca:	ab01      	add	r3, sp, #4
 23fafcc:	f7ff fbdc 	bl	23fa788 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
 23fafd0:	4602      	mov	r2, r0
 23fafd2:	b138      	cbz	r0, 23fafe4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
 23fafd4:	4620      	mov	r0, r4
 23fafd6:	9901      	ldr	r1, [sp, #4]
 23fafd8:	f7ff ffdd 	bl	23faf96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
 23fafdc:	4629      	mov	r1, r5
 23fafde:	4620      	mov	r0, r4
 23fafe0:	f7ff ffed 	bl	23fafbe <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
 23fafe4:	b003      	add	sp, #12
 23fafe6:	bd30      	pop	{r4, r5, pc}

023fafe8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
 23fafe8:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
 23fafea:	460c      	mov	r4, r1
 23fafec:	b929      	cbnz	r1, 23faffa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
 23fafee:	460a      	mov	r2, r1
 23faff0:	4608      	mov	r0, r1
}
 23faff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
 23faff6:	f7fe be99 	b.w	23f9d2c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
 23faffa:	2101      	movs	r1, #1
 23faffc:	4620      	mov	r0, r4
 23faffe:	f7ff ffde 	bl	23fafbe <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
 23fb002:	e9d4 0100 	ldrd	r0, r1, [r4]
 23fb006:	2200      	movs	r2, #0
 23fb008:	e7f3      	b.n	23faff2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

023fb00a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
 23fb00a:	b538      	push	{r3, r4, r5, lr}
 23fb00c:	4604      	mov	r4, r0
 23fb00e:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
 23fb010:	f7ff ff9f 	bl	23faf52 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
 23fb014:	2800      	cmp	r0, #0
 23fb016:	db0a      	blt.n	23fb02e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
 23fb018:	4629      	mov	r1, r5
 23fb01a:	4620      	mov	r0, r4
 23fb01c:	f7ff ffe4 	bl	23fafe8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
 23fb020:	2800      	cmp	r0, #0
 23fb022:	db04      	blt.n	23fb02e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
 23fb024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
 23fb028:	2000      	movs	r0, #0
 23fb02a:	f7fe be8d 	b.w	23f9d48 <hal_ble_gap_start_advertising>
}
 23fb02e:	bd38      	pop	{r3, r4, r5, pc}

023fb030 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
 23fb030:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fb032:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
 23fb034:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 23fb036:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fb038:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
 23fb03a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fb03c:	f7fe fa23 	bl	23f9486 <_Znwj>
 23fb040:	b118      	cbz	r0, 23fb04a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 23fb042:	682b      	ldr	r3, [r5, #0]
 23fb044:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fb046:	686b      	ldr	r3, [r5, #4]
 23fb048:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
 23fb04a:	4b03      	ldr	r3, [pc, #12]	; (23fb058 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fb04c:	6020      	str	r0, [r4, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fb04e:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fb050:	4b02      	ldr	r3, [pc, #8]	; (23fb05c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
      }
 23fb052:	4620      	mov	r0, r4
	    _M_manager = &_My_handler::_M_manager;
 23fb054:	60a3      	str	r3, [r4, #8]
      }
 23fb056:	bd38      	pop	{r3, r4, r5, pc}
 23fb058:	023fa7c9 	.word	0x023fa7c9
 23fb05c:	023fa7e1 	.word	0x023fa7e1

023fb060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fb060:	680b      	ldr	r3, [r1, #0]
 23fb062:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fb064:	b113      	cbz	r3, 23fb06c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fb066:	685a      	ldr	r2, [r3, #4]
 23fb068:	3201      	adds	r2, #1
 23fb06a:	605a      	str	r2, [r3, #4]
      }
 23fb06c:	4770      	bx	lr

023fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
 23fb06e:	b510      	push	{r4, lr}
 23fb070:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fb072:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb076:	f840 3b04 	str.w	r3, [r0], #4
 23fb07a:	f7ff fff1 	bl	23fb060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
 23fb07e:	6823      	ldr	r3, [r4, #0]
 23fb080:	b90b      	cbnz	r3, 23fb086 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
 23fb082:	f7ff fb97 	bl	23fa7b4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
 23fb086:	4620      	mov	r0, r4
 23fb088:	bd10      	pop	{r4, pc}

023fb08a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fb08a:	b510      	push	{r4, lr}
 23fb08c:	4604      	mov	r4, r0
 23fb08e:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb092:	f840 3b04 	str.w	r3, [r0], #4
 23fb096:	f7ff ffe3 	bl	23fb060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fb09a:	4620      	mov	r0, r4
 23fb09c:	bd10      	pop	{r4, pc}

023fb09e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fb09e:	b510      	push	{r4, lr}
 23fb0a0:	4604      	mov	r4, r0
 23fb0a2:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb0a6:	f840 3b04 	str.w	r3, [r0], #4
 23fb0aa:	f7ff ffd9 	bl	23fb060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fb0ae:	4620      	mov	r0, r4
 23fb0b0:	bd10      	pop	{r4, pc}

023fb0b2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
 23fb0b2:	b510      	push	{r4, lr}
 23fb0b4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fb0b6:	3004      	adds	r0, #4
 23fb0b8:	f7ff fafd 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb0bc:	4620      	mov	r0, r4
 23fb0be:	bd10      	pop	{r4, pc}

023fb0c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb0c0:	b570      	push	{r4, r5, r6, lr}
 23fb0c2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb0c4:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb0c8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb0cc:	42ae      	cmp	r6, r5
 23fb0ce:	d004      	beq.n	23fb0da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
 23fb0d0:	1d28      	adds	r0, r5, #4
 23fb0d2:	f7ff faf0 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb0d6:	3508      	adds	r5, #8
 23fb0d8:	e7f8      	b.n	23fb0cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb0da:	6820      	ldr	r0, [r4, #0]
 23fb0dc:	f7ff fa86 	bl	23fa5ec <free>
}
 23fb0e0:	4620      	mov	r0, r4
 23fb0e2:	bd70      	pop	{r4, r5, r6, pc}

023fb0e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb0e4:	b570      	push	{r4, r5, r6, lr}
 23fb0e6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb0e8:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb0ec:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb0f0:	42ae      	cmp	r6, r5
 23fb0f2:	d004      	beq.n	23fb0fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fb0f4:	1d28      	adds	r0, r5, #4
 23fb0f6:	f7ff fade 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb0fa:	3508      	adds	r5, #8
 23fb0fc:	e7f8      	b.n	23fb0f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb0fe:	6820      	ldr	r0, [r4, #0]
 23fb100:	f7ff fa74 	bl	23fa5ec <free>
}
 23fb104:	4620      	mov	r0, r4
 23fb106:	bd70      	pop	{r4, r5, r6, pc}

023fb108 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fb108:	b510      	push	{r4, lr}
 23fb10a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fb10c:	3024      	adds	r0, #36	; 0x24
 23fb10e:	f7ff ffe9 	bl	23fb0e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fb112:	f104 0018 	add.w	r0, r4, #24
 23fb116:	f7ff ffd3 	bl	23fb0c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fb11a:	bd10      	pop	{r4, pc}

023fb11c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
	__r._M_pi = _M_pi;
 23fb11c:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
 23fb11e:	b513      	push	{r0, r1, r4, lr}
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fb120:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
 23fb124:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fb128:	6803      	ldr	r3, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb12a:	6004      	str	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb12c:	9300      	str	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fb12e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
 23fb130:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
 23fb132:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
 23fb134:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
 23fb136:	f7ff fabe 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 23fb13a:	b002      	add	sp, #8
 23fb13c:	bd10      	pop	{r4, pc}

023fb13e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23fb13e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fb140:	b510      	push	{r4, lr}
      if (_M_empty())
 23fb142:	b90a      	cbnz	r2, 23fb148 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fb144:	f002 fd08 	bl	23fdb58 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb148:	68c3      	ldr	r3, [r0, #12]
    }
 23fb14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb14e:	4718      	bx	r3

023fb150 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fb150:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fb152:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fb154:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fb156:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fb158:	dd03      	ble.n	23fb162 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fb15a:	f7ff fa55 	bl	23fa608 <realloc>
            if (!d) {
 23fb15e:	b918      	cbnz	r0, 23fb168 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fb160:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fb162:	f7ff fa43 	bl	23fa5ec <free>
        T* d = nullptr;
 23fb166:	2000      	movs	r0, #0
        data_ = d;
 23fb168:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb16a:	60a5      	str	r5, [r4, #8]
        return true;
 23fb16c:	2001      	movs	r0, #1
 23fb16e:	e7f7      	b.n	23fb160 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fb170 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fb170:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fb172:	6883      	ldr	r3, [r0, #8]
 23fb174:	428b      	cmp	r3, r1
 23fb176:	da02      	bge.n	23fb17e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fb178:	f7ff ffea 	bl	23fb150 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fb17c:	bd08      	pop	{r3, pc}
    return true;
 23fb17e:	2001      	movs	r0, #1
 23fb180:	e7fc      	b.n	23fb17c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fb182 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb186:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb188:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb18a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb18c:	4419      	add	r1, r3
 23fb18e:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb190:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb192:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb194:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb196:	dc12      	bgt.n	23fb1be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fb198:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb19a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb19c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb19e:	4631      	mov	r1, r6
 23fb1a0:	1bd2      	subs	r2, r2, r7
 23fb1a2:	1970      	adds	r0, r6, r5
 23fb1a4:	f004 f947 	bl	23ff436 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fb1a8:	462a      	mov	r2, r5
 23fb1aa:	4641      	mov	r1, r8
 23fb1ac:	4630      	mov	r0, r6
 23fb1ae:	f004 f935 	bl	23ff41c <memcpy>
    return true;
 23fb1b2:	2001      	movs	r0, #1
    size_ += n;
 23fb1b4:	6863      	ldr	r3, [r4, #4]
 23fb1b6:	442b      	add	r3, r5
 23fb1b8:	6063      	str	r3, [r4, #4]
}
 23fb1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb1be:	f7ff ffc7 	bl	23fb150 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fb1c2:	2800      	cmp	r0, #0
 23fb1c4:	d1e8      	bne.n	23fb198 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fb1c6:	e7f8      	b.n	23fb1ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fb1c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fb1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb1ca:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb1cc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fb1d0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fb1d2:	4604      	mov	r4, r0
 23fb1d4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb1d6:	da0b      	bge.n	23fb1f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fb1d8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb1da:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb1dc:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb1de:	1b52      	subs	r2, r2, r5
 23fb1e0:	1c48      	adds	r0, r1, #1
 23fb1e2:	f004 f928 	bl	23ff436 <memmove>
    new(p) T(std::move(value));
 23fb1e6:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fb1e8:	6863      	ldr	r3, [r4, #4]
 23fb1ea:	3301      	adds	r3, #1
 23fb1ec:	6063      	str	r3, [r4, #4]
}
 23fb1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb1f0:	3101      	adds	r1, #1
 23fb1f2:	f7ff ffad 	bl	23fb150 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fb1f6:	2800      	cmp	r0, #0
 23fb1f8:	d1ee      	bne.n	23fb1d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fb1fa:	e7f8      	b.n	23fb1ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fb1fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb1fc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fb1fe:	6841      	ldr	r1, [r0, #4]
 23fb200:	f7ff bfe2 	b.w	23fb1c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fb204 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fb204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fb208:	4604      	mov	r4, r0
 23fb20a:	461d      	mov	r5, r3
 23fb20c:	460f      	mov	r7, r1
 23fb20e:	ab01      	add	r3, sp, #4
 23fb210:	4690      	mov	r8, r2
 23fb212:	460a      	mov	r2, r1
 23fb214:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fb218:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fb21c:	f7ff fab4 	bl	23fa788 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fb220:	1cae      	adds	r6, r5, #2
 23fb222:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fb224:	6863      	ldr	r3, [r4, #4]
 23fb226:	f1b9 0f00 	cmp.w	r9, #0
 23fb22a:	d126      	bne.n	23fb27a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fb22c:	b328      	cbz	r0, 23fb27a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fb22e:	4433      	add	r3, r6
 23fb230:	1a1b      	subs	r3, r3, r0
 23fb232:	2bff      	cmp	r3, #255	; 0xff
 23fb234:	d809      	bhi.n	23fb24a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fb236:	4620      	mov	r0, r4
 23fb238:	9901      	ldr	r1, [sp, #4]
 23fb23a:	f7ff feac 	bl	23faf96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fb23e:	6861      	ldr	r1, [r4, #4]
 23fb240:	4620      	mov	r0, r4
 23fb242:	4431      	add	r1, r6
 23fb244:	f7ff ff94 	bl	23fb170 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fb248:	b918      	cbnz	r0, 23fb252 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fb24a:	6860      	ldr	r0, [r4, #4]
}
 23fb24c:	b003      	add	sp, #12
 23fb24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fb252:	1c6a      	adds	r2, r5, #1
 23fb254:	4620      	mov	r0, r4
 23fb256:	9901      	ldr	r1, [sp, #4]
 23fb258:	b2d2      	uxtb	r2, r2
 23fb25a:	f7ff ffb5 	bl	23fb1c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fb25e:	9901      	ldr	r1, [sp, #4]
 23fb260:	463a      	mov	r2, r7
 23fb262:	3101      	adds	r1, #1
 23fb264:	4620      	mov	r0, r4
 23fb266:	f7ff ffaf 	bl	23fb1c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fb26a:	462b      	mov	r3, r5
 23fb26c:	4642      	mov	r2, r8
 23fb26e:	9901      	ldr	r1, [sp, #4]
 23fb270:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fb272:	4620      	mov	r0, r4
 23fb274:	f7ff ff85 	bl	23fb182 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fb278:	e7e7      	b.n	23fb24a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fb27a:	18f1      	adds	r1, r6, r3
 23fb27c:	29ff      	cmp	r1, #255	; 0xff
 23fb27e:	d8e4      	bhi.n	23fb24a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fb280:	4620      	mov	r0, r4
 23fb282:	f7ff ff75 	bl	23fb170 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fb286:	2800      	cmp	r0, #0
 23fb288:	d0df      	beq.n	23fb24a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fb28a:	1c69      	adds	r1, r5, #1
 23fb28c:	4620      	mov	r0, r4
 23fb28e:	b2c9      	uxtb	r1, r1
 23fb290:	f7ff ffb4 	bl	23fb1fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fb294:	4639      	mov	r1, r7
 23fb296:	4620      	mov	r0, r4
 23fb298:	f7ff ffb0 	bl	23fb1fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fb29c:	462b      	mov	r3, r5
 23fb29e:	4642      	mov	r2, r8
 23fb2a0:	6861      	ldr	r1, [r4, #4]
 23fb2a2:	e7e6      	b.n	23fb272 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fb2a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fb2a4:	b430      	push	{r4, r5}
 23fb2a6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fb2aa:	b11a      	cbz	r2, 23fb2b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fb2ac:	9502      	str	r5, [sp, #8]
}
 23fb2ae:	bc30      	pop	{r4, r5}
 23fb2b0:	f7ff bfa8 	b.w	23fb204 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fb2b4:	6840      	ldr	r0, [r0, #4]
}
 23fb2b6:	bc30      	pop	{r4, r5}
 23fb2b8:	4770      	bx	lr

023fb2ba <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fb2ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fb2bc:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fb2be:	2206      	movs	r2, #6
 23fb2c0:	e9c0 3300 	strd	r3, r3, [r0]
 23fb2c4:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fb2c6:	9300      	str	r3, [sp, #0]
 23fb2c8:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fb2ca:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fb2cc:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fb2d0:	4619      	mov	r1, r3
 23fb2d2:	f10d 020f 	add.w	r2, sp, #15
 23fb2d6:	f7ff ffe5 	bl	23fb2a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fb2da:	4620      	mov	r0, r4
 23fb2dc:	b004      	add	sp, #16
 23fb2de:	bd10      	pop	{r4, pc}

023fb2e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fb2e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb2e4:	4604      	mov	r4, r0
 23fb2e6:	460d      	mov	r5, r1
 23fb2e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb2ea:	d914      	bls.n	23fb316 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fb2ec:	4290      	cmp	r0, r2
 23fb2ee:	d213      	bcs.n	23fb318 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fb2f0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fb2f4:	1a75      	subs	r5, r6, r1
 23fb2f6:	f1a1 0708 	sub.w	r7, r1, #8
 23fb2fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb2fc:	42b7      	cmp	r7, r6
 23fb2fe:	d018      	beq.n	23fb332 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fb300:	b11c      	cbz	r4, 23fb30a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fb302:	4631      	mov	r1, r6
 23fb304:	4620      	mov	r0, r4
 23fb306:	f7ff feca 	bl	23fb09e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fb30a:	1d30      	adds	r0, r6, #4
 23fb30c:	f7ff f9d3 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fb310:	3e08      	subs	r6, #8
 23fb312:	3c08      	subs	r4, #8
 23fb314:	e7f2      	b.n	23fb2fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fb316:	d00c      	beq.n	23fb332 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fb318:	42b5      	cmp	r5, r6
 23fb31a:	d00a      	beq.n	23fb332 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fb31c:	b11c      	cbz	r4, 23fb326 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fb31e:	4629      	mov	r1, r5
 23fb320:	4620      	mov	r0, r4
 23fb322:	f7ff febc 	bl	23fb09e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fb326:	1d28      	adds	r0, r5, #4
 23fb328:	f7ff f9c5 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fb32c:	3508      	adds	r5, #8
 23fb32e:	3408      	adds	r4, #8
 23fb330:	e7f2      	b.n	23fb318 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fb332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb334 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fb336:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fb338:	6846      	ldr	r6, [r0, #4]
 23fb33a:	4668      	mov	r0, sp
 23fb33c:	f7ff feaf 	bl	23fb09e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb340:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fb344:	429f      	cmp	r7, r3
 23fb346:	db12      	blt.n	23fb36e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fb348:	3701      	adds	r7, #1
        if (n > 0) {
 23fb34a:	2f00      	cmp	r7, #0
 23fb34c:	dd29      	ble.n	23fb3a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fb34e:	00f8      	lsls	r0, r7, #3
 23fb350:	f7ff f93e 	bl	23fa5d0 <malloc>
            if (!d) {
 23fb354:	4605      	mov	r5, r0
 23fb356:	b1f0      	cbz	r0, 23fb396 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fb358:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fb35c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fb360:	f7ff ffbe 	bl	23fb2e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fb364:	6820      	ldr	r0, [r4, #0]
 23fb366:	f7ff f941 	bl	23fa5ec <free>
        data_ = d;
 23fb36a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fb36c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fb36e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fb370:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb372:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fb376:	4631      	mov	r1, r6
 23fb378:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fb37c:	f106 0008 	add.w	r0, r6, #8
 23fb380:	f7ff ffae 	bl	23fb2e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fb384:	b11e      	cbz	r6, 23fb38e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23fb386:	4669      	mov	r1, sp
 23fb388:	4630      	mov	r0, r6
 23fb38a:	f7ff fe88 	bl	23fb09e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23fb38e:	2501      	movs	r5, #1
    ++size_;
 23fb390:	6863      	ldr	r3, [r4, #4]
 23fb392:	3301      	adds	r3, #1
 23fb394:	6063      	str	r3, [r4, #4]
 23fb396:	a801      	add	r0, sp, #4
 23fb398:	f7ff f98d 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb39c:	4628      	mov	r0, r5
 23fb39e:	b003      	add	sp, #12
 23fb3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fb3a2:	2500      	movs	r5, #0
 23fb3a4:	e7de      	b.n	23fb364 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023fb3a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fb3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb3a8:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fb3aa:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fb3ae:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fb3b0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fb3b4:	42a6      	cmp	r6, r4
 23fb3b6:	d005      	beq.n	23fb3c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fb3b8:	4639      	mov	r1, r7
 23fb3ba:	4620      	mov	r0, r4
 23fb3bc:	f7ff fd19 	bl	23fadf2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fb3c0:	b108      	cbz	r0, 23fb3c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fb3c2:	b914      	cbnz	r4, 23fb3ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fb3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fb3c6:	3408      	adds	r4, #8
 23fb3c8:	e7f4      	b.n	23fb3b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fb3ca:	1d20      	adds	r0, r4, #4
 23fb3cc:	f7ff f973 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fb3d0:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fb3d4:	4620      	mov	r0, r4
 23fb3d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fb3da:	f104 0108 	add.w	r1, r4, #8
 23fb3de:	f7ff ff7f 	bl	23fb2e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fb3e2:	686b      	ldr	r3, [r5, #4]
 23fb3e4:	3b01      	subs	r3, #1
 23fb3e6:	606b      	str	r3, [r5, #4]
    return true;
 23fb3e8:	e7ec      	b.n	23fb3c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023fb3ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fb3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb3f0:	4605      	mov	r5, r0
 23fb3f2:	b090      	sub	sp, #64	; 0x40
        WiringBleLock lk;
 23fb3f4:	a805      	add	r0, sp, #20
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fb3f6:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fb3f8:	f7ff fa60 	bl	23fa8bc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fb3fc:	682e      	ldr	r6, [r5, #0]
 23fb3fe:	1ef3      	subs	r3, r6, #3
 23fb400:	2b0d      	cmp	r3, #13
 23fb402:	d86a      	bhi.n	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fb404:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fb408:	0078000e 	.word	0x0078000e
 23fb40c:	00fe0069 	.word	0x00fe0069
 23fb410:	00690069 	.word	0x00690069
 23fb414:	00690069 	.word	0x00690069
 23fb418:	00c80069 	.word	0x00c80069
 23fb41c:	00c800c8 	.word	0x00c800c8
 23fb420:	00c800c8 	.word	0x00c800c8
        return address_;
 23fb424:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23fb426:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23fb42a:	3002      	adds	r0, #2
 23fb42c:	f7ff fa7c 	bl	23fa928 <_ZNK8particle10BleAddress7isValidEv>
 23fb430:	b338      	cbz	r0, 23fb482 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23fb432:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23fb434:	89aa      	ldrh	r2, [r5, #12]
 23fb436:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23fb43a:	a808      	add	r0, sp, #32
 23fb43c:	801a      	strh	r2, [r3, #0]
 23fb43e:	f7ff fe2e 	bl	23fb09e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23fb442:	a908      	add	r1, sp, #32
 23fb444:	4630      	mov	r0, r6
 23fb446:	f7ff ff75 	bl	23fb334 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fb44a:	a809      	add	r0, sp, #36	; 0x24
 23fb44c:	f7ff f933 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23fb450:	a808      	add	r0, sp, #32
 23fb452:	f7ff fc97 	bl	23fad84 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fb456:	9b08      	ldr	r3, [sp, #32]
 23fb458:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fb45c:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fb45e:	6263      	str	r3, [r4, #36]	; 0x24
 23fb460:	f7ff fa06 	bl	23fa870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fb464:	a809      	add	r0, sp, #36	; 0x24
 23fb466:	f7ff f926 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23fb46a:	2120      	movs	r1, #32
 23fb46c:	2300      	movs	r3, #0
 23fb46e:	e9cd 1308 	strd	r1, r3, [sp, #32]
 23fb472:	4a6e      	ldr	r2, [pc, #440]	; (23fb62c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
                    LOG(TRACE, "Disconnected");
 23fb474:	9200      	str	r2, [sp, #0]
 23fb476:	2001      	movs	r0, #1
 23fb478:	496d      	ldr	r1, [pc, #436]	; (23fb630 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fb47a:	aa08      	add	r2, sp, #32
 23fb47c:	f7fe ff74 	bl	23fa368 <log_message>
 23fb480:	e02b      	b.n	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23fb482:	a806      	add	r0, sp, #24
 23fb484:	f7ff fc7e 	bl	23fad84 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23fb488:	89aa      	ldrh	r2, [r5, #12]
 23fb48a:	9b06      	ldr	r3, [sp, #24]
 23fb48c:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23fb48e:	6869      	ldr	r1, [r5, #4]
 23fb490:	9806      	ldr	r0, [sp, #24]
 23fb492:	3108      	adds	r1, #8
 23fb494:	3002      	adds	r0, #2
 23fb496:	f7ff fa2b 	bl	23fa8f0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fb49a:	a906      	add	r1, sp, #24
 23fb49c:	a808      	add	r0, sp, #32
 23fb49e:	f7ff fdfe 	bl	23fb09e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23fb4a2:	4630      	mov	r0, r6
 23fb4a4:	a908      	add	r1, sp, #32
 23fb4a6:	f7ff ff45 	bl	23fb334 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fb4aa:	4605      	mov	r5, r0
 23fb4ac:	a809      	add	r0, sp, #36	; 0x24
 23fb4ae:	f7ff f902 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb4b2:	b9c5      	cbnz	r5, 23fb4e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23fb4b4:	2320      	movs	r3, #32
 23fb4b6:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23fb4ba:	4b5e      	ldr	r3, [pc, #376]	; (23fb634 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fb4bc:	2001      	movs	r0, #1
 23fb4be:	495c      	ldr	r1, [pc, #368]	; (23fb630 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fb4c0:	9300      	str	r3, [sp, #0]
 23fb4c2:	aa08      	add	r2, sp, #32
 23fb4c4:	462b      	mov	r3, r5
 23fb4c6:	f7fe ff4f 	bl	23fa368 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fb4ca:	9b06      	ldr	r3, [sp, #24]
 23fb4cc:	4629      	mov	r1, r5
 23fb4ce:	8818      	ldrh	r0, [r3, #0]
 23fb4d0:	f7fe fc48 	bl	23f9d64 <hal_ble_gap_disconnect>
 23fb4d4:	a807      	add	r0, sp, #28
 23fb4d6:	f7ff f8ee 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fb4da:	a805      	add	r0, sp, #20
 23fb4dc:	f7ff f9fc 	bl	23fa8d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fb4e0:	b010      	add	sp, #64	; 0x40
 23fb4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
 23fb4e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fb4e8:	b123      	cbz	r3, 23fb4f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fb4ea:	a906      	add	r1, sp, #24
 23fb4ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fb4f0:	f7ff fe25 	bl	23fb13e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fb4f4:	a807      	add	r0, sp, #28
 23fb4f6:	e7b6      	b.n	23fb466 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fb4f8:	89a9      	ldrh	r1, [r5, #12]
 23fb4fa:	4620      	mov	r0, r4
 23fb4fc:	f7ff fbae 	bl	23fac5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fb500:	4601      	mov	r1, r0
 23fb502:	2800      	cmp	r0, #0
 23fb504:	d0e9      	beq.n	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fb506:	9003      	str	r0, [sp, #12]
 23fb508:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fb50c:	f7ff fc71 	bl	23fadf2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fb510:	f104 0718 	add.w	r7, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fb514:	9903      	ldr	r1, [sp, #12]
 23fb516:	b140      	cbz	r0, 23fb52a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fb518:	4638      	mov	r0, r7
 23fb51a:	f7ff ff44 	bl	23fb3a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fb51e:	2220      	movs	r2, #32
 23fb520:	2300      	movs	r3, #0
 23fb522:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fb526:	4a44      	ldr	r2, [pc, #272]	; (23fb638 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x24c>)
 23fb528:	e7a4      	b.n	23fb474 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fb52a:	f64f 70ff 	movw	r0, #65535	; 0xffff
      { return _M_ptr; }
 23fb52e:	680d      	ldr	r5, [r1, #0]
    return data_ + size_;
 23fb530:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fb534:	8028      	strh	r0, [r5, #0]
 23fb536:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fb53a:	429a      	cmp	r2, r3
 23fb53c:	d003      	beq.n	23fb546 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fb53e:	f853 6b08 	ldr.w	r6, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fb542:	8070      	strh	r0, [r6, #2]
        for (auto& characteristic : characteristics()) {
 23fb544:	e7f9      	b.n	23fb53a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fb546:	e9d5 6303 	ldrd	r6, r3, [r5, #12]
 23fb54a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; p != end; ++p) {
 23fb54e:	45b0      	cmp	r8, r6
 23fb550:	d006      	beq.n	23fb560 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x174>
      ~__shared_ptr() = default;
 23fb552:	1d30      	adds	r0, r6, #4
 23fb554:	9103      	str	r1, [sp, #12]
 23fb556:	3608      	adds	r6, #8
 23fb558:	f7ff f8ad 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb55c:	9903      	ldr	r1, [sp, #12]
 23fb55e:	e7f6      	b.n	23fb54e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fb560:	2300      	movs	r3, #0
 23fb562:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fb564:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
 23fb568:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; p != end; ++p) {
 23fb56c:	45b0      	cmp	r8, r6
 23fb56e:	d006      	beq.n	23fb57e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
 23fb570:	1d30      	adds	r0, r6, #4
 23fb572:	9103      	str	r1, [sp, #12]
 23fb574:	3608      	adds	r6, #8
 23fb576:	f7ff f89e 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb57a:	9903      	ldr	r1, [sp, #12]
 23fb57c:	e7f6      	b.n	23fb56c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x180>
    size_ = 0;
 23fb57e:	2300      	movs	r3, #0
 23fb580:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fb582:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fb584:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fb586:	2b00      	cmp	r3, #0
 23fb588:	d0c6      	beq.n	23fb518 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                            impl->disconnectedCallback_(*peer);
 23fb58a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fb58e:	9103      	str	r1, [sp, #12]
 23fb590:	f7ff fdd5 	bl	23fb13e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fb594:	9903      	ldr	r1, [sp, #12]
 23fb596:	e7bf      	b.n	23fb518 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fb598:	4620      	mov	r0, r4
 23fb59a:	89a9      	ldrh	r1, [r5, #12]
 23fb59c:	f7ff fb5e 	bl	23fac5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fb5a0:	2800      	cmp	r0, #0
 23fb5a2:	d09a      	beq.n	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fb5a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fb5a6:	2b00      	cmp	r3, #0
 23fb5a8:	d097      	beq.n	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fb5aa:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fb5ac:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fb5ae:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fb5b2:	d001      	beq.n	23fb5b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1cc>
 23fb5b4:	2e10      	cmp	r6, #16
 23fb5b6:	d117      	bne.n	23fb5e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1fc>
                        BlePairingEventPayload payload = {};
 23fb5b8:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fb5ba:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fb5bc:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fb5be:	2506      	movs	r5, #6
                        };
 23fb5c0:	f88d 301d 	strb.w	r3, [sp, #29]
 23fb5c4:	9106      	str	r1, [sp, #24]
 23fb5c6:	ab0b      	add	r3, sp, #44	; 0x2c
 23fb5c8:	f88d 201c 	strb.w	r2, [sp, #28]
 23fb5cc:	9008      	str	r0, [sp, #32]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fb5ce:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
                        };
 23fb5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 23fb5d6:	950a      	str	r5, [sp, #40]	; 0x28
 23fb5d8:	e883 0003 	stmia.w	r3, {r0, r1}
 23fb5dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fb5de:	a908      	add	r1, sp, #32
 23fb5e0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fb5e4:	4798      	blx	r3
 23fb5e6:	e778      	b.n	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fb5e8:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fb5ea:	bf01      	itttt	eq
 23fb5ec:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fb5ee:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fb5f0:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fb5f4:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fb5f6:	bf1d      	ittte	ne
 23fb5f8:	461a      	movne	r2, r3
 23fb5fa:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fb5fc:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fb5fe:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fb602:	e7dd      	b.n	23fb5c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d4>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fb604:	89a9      	ldrh	r1, [r5, #12]
 23fb606:	4620      	mov	r0, r4
 23fb608:	f7ff fb28 	bl	23fac5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fb60c:	4601      	mov	r1, r0
 23fb60e:	2800      	cmp	r0, #0
 23fb610:	f43f af63 	beq.w	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fb614:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fb616:	2b00      	cmp	r3, #0
 23fb618:	f43f af5f 	beq.w	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fb61c:	686b      	ldr	r3, [r5, #4]
 23fb61e:	aa08      	add	r2, sp, #32
 23fb620:	9308      	str	r3, [sp, #32]
 23fb622:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fb626:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fb628:	4798      	blx	r3
 23fb62a:	e756      	b.n	23fb4da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fb62c:	023ff995 	.word	0x023ff995
 23fb630:	023ff8e7 	.word	0x023ff8e7
 23fb634:	023ff96f 	.word	0x023ff96f
 23fb638:	023ff99f 	.word	0x023ff99f

023fb63c <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23fb63c:	b570      	push	{r4, r5, r6, lr}
 23fb63e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fb640:	3064      	adds	r0, #100	; 0x64
 23fb642:	f7ff f8ed 	bl	23fa820 <_ZNSt14_Function_baseD1Ev>
 23fb646:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fb64a:	f7ff f8e9 	bl	23fa820 <_ZNSt14_Function_baseD1Ev>
 23fb64e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fb652:	f7ff f8e5 	bl	23fa820 <_ZNSt14_Function_baseD1Ev>
 23fb656:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fb65a:	f7ff f8e1 	bl	23fa820 <_ZNSt14_Function_baseD1Ev>
 23fb65e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fb662:	f7ff f828 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb666:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fb66a:	f7ff f824 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23fb66e:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fb672:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb676:	42ae      	cmp	r6, r5
 23fb678:	d004      	beq.n	23fb684 <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23fb67a:	1d28      	adds	r0, r5, #4
 23fb67c:	f7ff f81b 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb680:	3508      	adds	r5, #8
 23fb682:	e7f8      	b.n	23fb676 <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23fb684:	69a0      	ldr	r0, [r4, #24]
 23fb686:	f7fe ffb1 	bl	23fa5ec <free>
 23fb68a:	f104 000c 	add.w	r0, r4, #12
 23fb68e:	f7ff fd29 	bl	23fb0e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fb692:	4620      	mov	r0, r4
 23fb694:	f7ff fd14 	bl	23fb0c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fb698:	4620      	mov	r0, r4
 23fb69a:	bd70      	pop	{r4, r5, r6, pc}

023fb69c <__tcf_0>:
    static BleLocalDevice instance;
 23fb69c:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fb69e:	4b06      	ldr	r3, [pc, #24]	; (23fb6b8 <__tcf_0+0x1c>)
 23fb6a0:	681c      	ldr	r4, [r3, #0]
 23fb6a2:	b144      	cbz	r4, 23fb6b6 <__tcf_0+0x1a>
	delete __ptr;
 23fb6a4:	4620      	mov	r0, r4
 23fb6a6:	f7ff ffc9 	bl	23fb63c <_ZN8particle18BleLocalDeviceImplD1Ev>
 23fb6aa:	4620      	mov	r0, r4
 23fb6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fb6b0:	2174      	movs	r1, #116	; 0x74
 23fb6b2:	f7fd beec 	b.w	23f948e <_ZdlPvj>
 23fb6b6:	bd10      	pop	{r4, pc}
 23fb6b8:	1007ae58 	.word	0x1007ae58

023fb6bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 23fb6bc:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb6be:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fb6c0:	460b      	mov	r3, r1
 23fb6c2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb6c4:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fb6c8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fb6cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fb6d0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fb6d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fb6d8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fb6dc:	b002      	add	sp, #8
 23fb6de:	bd10      	pop	{r4, pc}

023fb6e0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
 23fb6e0:	b538      	push	{r3, r4, r5, lr}
 23fb6e2:	4605      	mov	r5, r0
 23fb6e4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
 23fb6e6:	f7ff ffe9 	bl	23fb6bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb6ea:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb6ec:	68a2      	ldr	r2, [r4, #8]
 23fb6ee:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb6f0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb6f2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fb6f4:	68e2      	ldr	r2, [r4, #12]
 23fb6f6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb6f8:	60e3      	str	r3, [r4, #12]
      }
 23fb6fa:	bd38      	pop	{r3, r4, r5, pc}

023fb6fc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
 23fb6fc:	b570      	push	{r4, r5, r6, lr}
 23fb6fe:	4604      	mov	r4, r0
 23fb700:	460e      	mov	r6, r1
 23fb702:	461d      	mov	r5, r3
 23fb704:	b08c      	sub	sp, #48	; 0x30
 23fb706:	9201      	str	r2, [sp, #4]
            : BleCharacteristicImpl() {
 23fb708:	f7ff fa88 	bl	23fac1c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
 23fb70c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
 23fb70e:	9901      	ldr	r1, [sp, #4]
 23fb710:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23fb714:	f001 feba 	bl	23fd48c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fb718:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 23fb71c:	b1cd      	cbz	r5, 23fb752 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
 23fb71e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23fb720:	a902      	add	r1, sp, #8
 23fb722:	a804      	add	r0, sp, #16
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fb724:	9502      	str	r5, [sp, #8]
 23fb726:	9303      	str	r3, [sp, #12]
 23fb728:	f7ff fc82 	bl	23fb030 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
 23fb72c:	2300      	movs	r3, #0
	__x.swap(*this);
 23fb72e:	a908      	add	r1, sp, #32
 23fb730:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 23fb732:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
 23fb734:	f7ff ffd4 	bl	23fb6e0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
 23fb738:	4631      	mov	r1, r6
 23fb73a:	a808      	add	r0, sp, #32
 23fb73c:	f7ff ffd0 	bl	23fb6e0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fb740:	a808      	add	r0, sp, #32
 23fb742:	f7ff f86d 	bl	23fa820 <_ZNSt14_Function_baseD1Ev>
 23fb746:	a804      	add	r0, sp, #16
 23fb748:	f7ff f86a 	bl	23fa820 <_ZNSt14_Function_baseD1Ev>
    }
 23fb74c:	4620      	mov	r0, r4
 23fb74e:	b00c      	add	sp, #48	; 0x30
 23fb750:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
 23fb752:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
 23fb754:	e7ea      	b.n	23fb72c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

023fb758 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
 23fb758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb75c:	4692      	mov	sl, r2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fb75e:	2200      	movs	r2, #0
 23fb760:	b087      	sub	sp, #28
 23fb762:	468b      	mov	fp, r1
 23fb764:	9912      	ldr	r1, [sp, #72]	; 0x48
 23fb766:	4680      	mov	r8, r0
 23fb768:	2068      	movs	r0, #104	; 0x68
 23fb76a:	461d      	mov	r5, r3
 23fb76c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
 23fb770:	9102      	str	r1, [sp, #8]
 23fb772:	9303      	str	r3, [sp, #12]
 23fb774:	9204      	str	r2, [sp, #16]
 23fb776:	f7fd fe86 	bl	23f9486 <_Znwj>
	  auto __pi = ::new (__mem)
 23fb77a:	1e06      	subs	r6, r0, #0
 23fb77c:	f106 090c 	add.w	r9, r6, #12
 23fb780:	d018      	beq.n	23fb7b4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
 23fb782:	2201      	movs	r2, #1
	: _M_impl(__a)
 23fb784:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
 23fb786:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
 23fb78a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
 23fb78c:	4a15      	ldr	r2, [pc, #84]	; (23fb7e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
 23fb78e:	9b03      	ldr	r3, [sp, #12]
 23fb790:	f847 2b20 	str.w	r2, [r7], #32
 23fb794:	4648      	mov	r0, r9
 23fb796:	465a      	mov	r2, fp
 23fb798:	9100      	str	r1, [sp, #0]
 23fb79a:	4651      	mov	r1, sl
 23fb79c:	f7ff ffae 	bl	23fb6fc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
 23fb7a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fb7a2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 23fb7a4:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
 23fb7a6:	f106 0534 	add.w	r5, r6, #52	; 0x34
        charUuid_ = charUuid;
 23fb7aa:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
 23fb7ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fb7ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fb7b0:	6823      	ldr	r3, [r4, #0]
 23fb7b2:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 23fb7b4:	4640      	mov	r0, r8
 23fb7b6:	a904      	add	r1, sp, #16
	  __p = __pi->_M_ptr();
 23fb7b8:	e9cd 9604 	strd	r9, r6, [sp, #16]
 23fb7bc:	f7ff fcae 	bl	23fb11c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
 23fb7c0:	a805      	add	r0, sp, #20
 23fb7c2:	f7fe ff78 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
 23fb7c6:	f8d8 3000 	ldr.w	r3, [r8]
 23fb7ca:	b93b      	cbnz	r3, 23fb7dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
 23fb7cc:	200a      	movs	r0, #10
 23fb7ce:	4a06      	ldr	r2, [pc, #24]	; (23fb7e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
 23fb7d0:	4906      	ldr	r1, [pc, #24]	; (23fb7ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
}
 23fb7d2:	b007      	add	sp, #28
 23fb7d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
 23fb7d8:	f7fe bdb8 	b.w	23fa34c <panic_>
}
 23fb7dc:	b007      	add	sp, #28
 23fb7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb7e2:	bf00      	nop
 23fb7e4:	023ffa08 	.word	0x023ffa08
 23fb7e8:	023f9eed 	.word	0x023f9eed
 23fb7ec:	023ff8d0 	.word	0x023ff8d0

023fb7f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fb7f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb7f4:	4604      	mov	r4, r0
 23fb7f6:	460d      	mov	r5, r1
 23fb7f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb7fa:	d914      	bls.n	23fb826 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fb7fc:	4290      	cmp	r0, r2
 23fb7fe:	d213      	bcs.n	23fb828 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fb800:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fb804:	1a75      	subs	r5, r6, r1
 23fb806:	f1a1 0708 	sub.w	r7, r1, #8
 23fb80a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb80c:	42b7      	cmp	r7, r6
 23fb80e:	d018      	beq.n	23fb842 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fb810:	b11c      	cbz	r4, 23fb81a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fb812:	4631      	mov	r1, r6
 23fb814:	4620      	mov	r0, r4
 23fb816:	f7ff fc38 	bl	23fb08a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fb81a:	1d30      	adds	r0, r6, #4
 23fb81c:	f7fe ff4b 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fb820:	3e08      	subs	r6, #8
 23fb822:	3c08      	subs	r4, #8
 23fb824:	e7f2      	b.n	23fb80c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fb826:	d00c      	beq.n	23fb842 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fb828:	42b5      	cmp	r5, r6
 23fb82a:	d00a      	beq.n	23fb842 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fb82c:	b11c      	cbz	r4, 23fb836 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fb82e:	4629      	mov	r1, r5
 23fb830:	4620      	mov	r0, r4
 23fb832:	f7ff fc2a 	bl	23fb08a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fb836:	1d28      	adds	r0, r5, #4
 23fb838:	f7fe ff3d 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fb83c:	3508      	adds	r5, #8
 23fb83e:	3408      	adds	r4, #8
 23fb840:	e7f2      	b.n	23fb828 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fb842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fb844:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fb846:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fb848:	4605      	mov	r5, r0
        if (n > 0) {
 23fb84a:	dd11      	ble.n	23fb870 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fb84c:	00f0      	lsls	r0, r6, #3
 23fb84e:	f7fe febf 	bl	23fa5d0 <malloc>
            if (!d) {
 23fb852:	4604      	mov	r4, r0
 23fb854:	b158      	cbz	r0, 23fb86e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fb856:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb85a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fb85e:	f7ff ffc7 	bl	23fb7f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fb862:	6828      	ldr	r0, [r5, #0]
 23fb864:	f7fe fec2 	bl	23fa5ec <free>
        return true;
 23fb868:	2001      	movs	r0, #1
        data_ = d;
 23fb86a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fb86c:	60ae      	str	r6, [r5, #8]
    }
 23fb86e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fb870:	2400      	movs	r4, #0
 23fb872:	e7f6      	b.n	23fb862 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fb874 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb874:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb876:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fb878:	6845      	ldr	r5, [r0, #4]
 23fb87a:	4668      	mov	r0, sp
 23fb87c:	f7ff fc05 	bl	23fb08a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb880:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fb884:	4299      	cmp	r1, r3
 23fb886:	da10      	bge.n	23fb8aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fb888:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fb88a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb88c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fb890:	4629      	mov	r1, r5
 23fb892:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fb896:	f105 0008 	add.w	r0, r5, #8
 23fb89a:	f7ff ffa9 	bl	23fb7f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fb89e:	b98d      	cbnz	r5, 23fb8c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fb8a0:	6863      	ldr	r3, [r4, #4]
    return true;
 23fb8a2:	2601      	movs	r6, #1
    ++size_;
 23fb8a4:	3301      	adds	r3, #1
 23fb8a6:	6063      	str	r3, [r4, #4]
    return true;
 23fb8a8:	e006      	b.n	23fb8b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb8aa:	4620      	mov	r0, r4
 23fb8ac:	3101      	adds	r1, #1
 23fb8ae:	f7ff ffc9 	bl	23fb844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fb8b2:	4606      	mov	r6, r0
 23fb8b4:	2800      	cmp	r0, #0
 23fb8b6:	d1e7      	bne.n	23fb888 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fb8b8:	a801      	add	r0, sp, #4
 23fb8ba:	f7fe fefc 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb8be:	4630      	mov	r0, r6
 23fb8c0:	b002      	add	sp, #8
 23fb8c2:	bd70      	pop	{r4, r5, r6, pc}
 23fb8c4:	4669      	mov	r1, sp
 23fb8c6:	4628      	mov	r0, r5
 23fb8c8:	f7ff fbdf 	bl	23fb08a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fb8cc:	e7e8      	b.n	23fb8a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fb8ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fb8ce:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb8d2:	4604      	mov	r4, r0
 23fb8d4:	460d      	mov	r5, r1
 23fb8d6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb8d8:	d914      	bls.n	23fb904 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fb8da:	4290      	cmp	r0, r2
 23fb8dc:	d213      	bcs.n	23fb906 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fb8de:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fb8e2:	1a75      	subs	r5, r6, r1
 23fb8e4:	f1a1 0708 	sub.w	r7, r1, #8
 23fb8e8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb8ea:	42b7      	cmp	r7, r6
 23fb8ec:	d018      	beq.n	23fb920 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fb8ee:	b11c      	cbz	r4, 23fb8f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fb8f0:	4631      	mov	r1, r6
 23fb8f2:	4620      	mov	r0, r4
 23fb8f4:	f7ff fbbb 	bl	23fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fb8f8:	1d30      	adds	r0, r6, #4
 23fb8fa:	f7fe fedc 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fb8fe:	3e08      	subs	r6, #8
 23fb900:	3c08      	subs	r4, #8
 23fb902:	e7f2      	b.n	23fb8ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fb904:	d00c      	beq.n	23fb920 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fb906:	42b5      	cmp	r5, r6
 23fb908:	d00a      	beq.n	23fb920 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fb90a:	b11c      	cbz	r4, 23fb914 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fb90c:	4629      	mov	r1, r5
 23fb90e:	4620      	mov	r0, r4
 23fb910:	f7ff fbad 	bl	23fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fb914:	1d28      	adds	r0, r5, #4
 23fb916:	f7fe fece 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fb91a:	3508      	adds	r5, #8
 23fb91c:	3408      	adds	r4, #8
 23fb91e:	e7f2      	b.n	23fb906 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fb920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fb922:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fb924:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fb926:	4605      	mov	r5, r0
        if (n > 0) {
 23fb928:	dd11      	ble.n	23fb94e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fb92a:	00f0      	lsls	r0, r6, #3
 23fb92c:	f7fe fe50 	bl	23fa5d0 <malloc>
            if (!d) {
 23fb930:	4604      	mov	r4, r0
 23fb932:	b158      	cbz	r0, 23fb94c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fb934:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb938:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fb93c:	f7ff ffc7 	bl	23fb8ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fb940:	6828      	ldr	r0, [r5, #0]
 23fb942:	f7fe fe53 	bl	23fa5ec <free>
        return true;
 23fb946:	2001      	movs	r0, #1
        data_ = d;
 23fb948:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fb94a:	60ae      	str	r6, [r5, #8]
    }
 23fb94c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fb94e:	2400      	movs	r4, #0
 23fb950:	e7f6      	b.n	23fb940 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fb952 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb954:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fb956:	6845      	ldr	r5, [r0, #4]
 23fb958:	4668      	mov	r0, sp
 23fb95a:	f7ff fb88 	bl	23fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb95e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fb962:	4299      	cmp	r1, r3
 23fb964:	da10      	bge.n	23fb988 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fb966:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fb968:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb96a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fb96e:	4629      	mov	r1, r5
 23fb970:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fb974:	f105 0008 	add.w	r0, r5, #8
 23fb978:	f7ff ffa9 	bl	23fb8ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fb97c:	b98d      	cbnz	r5, 23fb9a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fb97e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fb980:	2601      	movs	r6, #1
    ++size_;
 23fb982:	3301      	adds	r3, #1
 23fb984:	6063      	str	r3, [r4, #4]
    return true;
 23fb986:	e006      	b.n	23fb996 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb988:	4620      	mov	r0, r4
 23fb98a:	3101      	adds	r1, #1
 23fb98c:	f7ff ffc9 	bl	23fb922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fb990:	4606      	mov	r6, r0
 23fb992:	2800      	cmp	r0, #0
 23fb994:	d1e7      	bne.n	23fb966 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fb996:	a801      	add	r0, sp, #4
 23fb998:	f7fe fe8d 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb99c:	4630      	mov	r0, r6
 23fb99e:	b002      	add	sp, #8
 23fb9a0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fb9a2:	4669      	mov	r1, sp
 23fb9a4:	4628      	mov	r0, r5
 23fb9a6:	f7ff fb62 	bl	23fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fb9aa:	e7e8      	b.n	23fb97e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fb9ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
 23fb9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb9b0:	4617      	mov	r7, r2
 23fb9b2:	b0a1      	sub	sp, #132	; 0x84
 23fb9b4:	4680      	mov	r8, r0
    WiringBleLock lk;
 23fb9b6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
 23fb9b8:	460e      	mov	r6, r1
    WiringBleLock lk;
 23fb9ba:	f7fe ff7f 	bl	23fa8bc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fb9be:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
 23fb9c0:	7923      	ldrb	r3, [r4, #4]
 23fb9c2:	b953      	cbnz	r3, 23fb9da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
 23fb9c4:	4639      	mov	r1, r7
 23fb9c6:	4640      	mov	r0, r8
 23fb9c8:	f7ff fb51 	bl	23fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
 23fb9cc:	a80a      	add	r0, sp, #40	; 0x28
 23fb9ce:	f7fe ff83 	bl	23fa8d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
 23fb9d2:	4640      	mov	r0, r8
 23fb9d4:	b021      	add	sp, #132	; 0x84
 23fb9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fb9da:	6833      	ldr	r3, [r6, #0]
                svcUuid_ == impl.svcUuid_ &&
 23fb9dc:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    return data_ + size_;
 23fb9e0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
 23fb9e4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 23fb9e8:	9303      	str	r3, [sp, #12]
        if (charUuid_ == impl.charUuid_ &&
 23fb9ea:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
 23fb9ee:	9b03      	ldr	r3, [sp, #12]
 23fb9f0:	429d      	cmp	r5, r3
 23fb9f2:	d021      	beq.n	23fba38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
 23fb9f4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
 23fb9f8:	4658      	mov	r0, fp
 23fb9fa:	f109 0114 	add.w	r1, r9, #20
 23fb9fe:	f7ff f882 	bl	23fab06 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
 23fba02:	b1b8      	cbz	r0, 23fba34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
 23fba04:	4650      	mov	r0, sl
 23fba06:	f109 0128 	add.w	r1, r9, #40	; 0x28
 23fba0a:	f7ff f87c 	bl	23fab06 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
 23fba0e:	b188      	cbz	r0, 23fba34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
 23fba10:	6823      	ldr	r3, [r4, #0]
 23fba12:	f8d9 2000 	ldr.w	r2, [r9]
 23fba16:	4053      	eors	r3, r2
 23fba18:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
 23fba1c:	d10a      	bne.n	23fba34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
 23fba1e:	2220      	movs	r2, #32
 23fba20:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
 23fba24:	4a5e      	ldr	r2, [pc, #376]	; (23fbba0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
 23fba26:	9200      	str	r2, [sp, #0]
 23fba28:	aa15      	add	r2, sp, #84	; 0x54
 23fba2a:	2032      	movs	r0, #50	; 0x32
 23fba2c:	495d      	ldr	r1, [pc, #372]	; (23fbba4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
 23fba2e:	f7fe fc9b 	bl	23fa368 <log_message>
 23fba32:	e7c7      	b.n	23fb9c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
 23fba34:	3508      	adds	r5, #8
 23fba36:	e7da      	b.n	23fb9ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
 23fba38:	4650      	mov	r0, sl
 23fba3a:	f7ff f835 	bl	23faaa8 <_ZNK8particle7BleUuid7isValidEv>
 23fba3e:	b960      	cbnz	r0, 23fba5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
 23fba40:	2201      	movs	r2, #1
 23fba42:	4959      	ldr	r1, [pc, #356]	; (23fbba8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
 23fba44:	a815      	add	r0, sp, #84	; 0x54
 23fba46:	f7ff f807 	bl	23faa58 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
 23fba4a:	46d4      	mov	ip, sl
 23fba4c:	ad15      	add	r5, sp, #84	; 0x54
 23fba4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fba50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fba54:	682b      	ldr	r3, [r5, #0]
 23fba56:	f8cc 3000 	str.w	r3, [ip]
 23fba5a:	6833      	ldr	r3, [r6, #0]
 23fba5c:	e9d3 5300 	ldrd	r5, r3, [r3]
 23fba60:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
 23fba64:	455d      	cmp	r5, fp
 23fba66:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
 23fba68:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
 23fba6a:	d06e      	beq.n	23fbb4a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
 23fba6c:	f855 0b08 	ldr.w	r0, [r5], #8
 23fba70:	f7ff f849 	bl	23fab06 <_ZNK8particle7BleUuideqERKS0_>
 23fba74:	2800      	cmp	r0, #0
 23fba76:	d0f5      	beq.n	23fba64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
 23fba78:	f104 0a14 	add.w	sl, r4, #20
 23fba7c:	4650      	mov	r0, sl
 23fba7e:	f7ff f813 	bl	23faaa8 <_ZNK8particle7BleUuid7isValidEv>
 23fba82:	b988      	cbnz	r0, 23fbaa8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
 23fba84:	4b49      	ldr	r3, [pc, #292]	; (23fbbac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
 23fba86:	4948      	ldr	r1, [pc, #288]	; (23fbba8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
 23fba88:	881a      	ldrh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
 23fba8a:	a815      	add	r0, sp, #84	; 0x54
            defaultUuidCharCount_++;
 23fba8c:	3201      	adds	r2, #1
 23fba8e:	b292      	uxth	r2, r2
 23fba90:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
 23fba92:	2301      	movs	r3, #1
 23fba94:	f7fe ffff 	bl	23faa96 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
 23fba98:	46d4      	mov	ip, sl
 23fba9a:	ad15      	add	r5, sp, #84	; 0x54
 23fba9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fba9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fbaa2:	682b      	ldr	r3, [r5, #0]
 23fbaa4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
 23fbaa8:	4b41      	ldr	r3, [pc, #260]	; (23fbbb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
    hal_ble_char_init_t charInit = {};
 23fbaaa:	2228      	movs	r2, #40	; 0x28
 23fbaac:	2100      	movs	r1, #0
 23fbaae:	a816      	add	r0, sp, #88	; 0x58
    charInit.version = BLE_API_VERSION;
 23fbab0:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
 23fbab2:	f003 fcda 	bl	23ff46a <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
 23fbab6:	4651      	mov	r1, sl
 23fbab8:	a804      	add	r0, sp, #16
 23fbaba:	f7ff f807 	bl	23faacc <_ZN8particle7BleUuid7halUUIDEv>
 23fbabe:	ab04      	add	r3, sp, #16
 23fbac0:	aa18      	add	r2, sp, #96	; 0x60
 23fbac2:	f10d 0c20 	add.w	ip, sp, #32
 23fbac6:	4615      	mov	r5, r2
 23fbac8:	6818      	ldr	r0, [r3, #0]
 23fbaca:	6859      	ldr	r1, [r3, #4]
 23fbacc:	3308      	adds	r3, #8
 23fbace:	c503      	stmia	r5!, {r0, r1}
 23fbad0:	4563      	cmp	r3, ip
 23fbad2:	462a      	mov	r2, r5
 23fbad4:	d1f7      	bne.n	23fbac6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
 23fbad6:	6818      	ldr	r0, [r3, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fbad8:	2200      	movs	r2, #0
    charInit.uuid = charImpl->charUUID().halUUID();
 23fbada:	6028      	str	r0, [r5, #0]
    return value_;
 23fbadc:	7923      	ldrb	r3, [r4, #4]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fbade:	1da1      	adds	r1, r4, #6
    charInit.properties = charImpl->properties().value();
 23fbae0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
 23fbae4:	f8d9 3000 	ldr.w	r3, [r9]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fbae8:	a815      	add	r0, sp, #84	; 0x54
    charInit.service_handle = service->impl()->startHandle();
 23fbaea:	8a9b      	ldrh	r3, [r3, #20]
 23fbaec:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
 23fbaf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fbaf2:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
 23fbaf4:	4b2f      	ldr	r3, [pc, #188]	; (23fbbb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    charInit.context = charImpl;
 23fbaf6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fbafa:	f7fe f979 	bl	23f9df0 <hal_ble_gatt_server_add_characteristic>
 23fbafe:	2800      	cmp	r0, #0
 23fbb00:	f47f af60 	bne.w	23fb9c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
 23fbb04:	2301      	movs	r3, #1
 23fbb06:	7023      	strb	r3, [r4, #0]
        return characteristics_;
 23fbb08:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
 23fbb0a:	4639      	mov	r1, r7
        return characteristics_;
 23fbb0c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
 23fbb0e:	a80d      	add	r0, sp, #52	; 0x34
 23fbb10:	f7ff faad 	bl	23fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fbb14:	4620      	mov	r0, r4
 23fbb16:	a90d      	add	r1, sp, #52	; 0x34
 23fbb18:	f7ff ff1b 	bl	23fb952 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
 23fbb1c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fbb1e:	a80e      	add	r0, sp, #56	; 0x38
 23fbb20:	f7fe fdc9 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbb24:	2c00      	cmp	r4, #0
 23fbb26:	f47f af4d 	bne.w	23fb9c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
 23fbb2a:	2320      	movs	r3, #32
 23fbb2c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 23fbb30:	4b21      	ldr	r3, [pc, #132]	; (23fbbb8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
 23fbb32:	aa0d      	add	r2, sp, #52	; 0x34
 23fbb34:	9300      	str	r3, [sp, #0]
 23fbb36:	4623      	mov	r3, r4
 23fbb38:	e777      	b.n	23fba2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
 23fbb3a:	4639      	mov	r1, r7
 23fbb3c:	4640      	mov	r0, r8
 23fbb3e:	f7ff fa96 	bl	23fb06e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fbb42:	a80c      	add	r0, sp, #48	; 0x30
 23fbb44:	f7fe fdb7 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbb48:	e740      	b.n	23fb9cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
 23fbb4a:	a80b      	add	r0, sp, #44	; 0x2c
 23fbb4c:	f7ff f8f6 	bl	23fad3c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
 23fbb50:	4651      	mov	r1, sl
 23fbb52:	a815      	add	r0, sp, #84	; 0x54
 23fbb54:	f7fe ffba 	bl	23faacc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
 23fbb58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fbb5a:	2300      	movs	r3, #0
 23fbb5c:	2001      	movs	r0, #1
 23fbb5e:	3214      	adds	r2, #20
 23fbb60:	a915      	add	r1, sp, #84	; 0x54
 23fbb62:	f7fe f90d 	bl	23f9d80 <hal_ble_gatt_server_add_service>
 23fbb66:	2800      	cmp	r0, #0
 23fbb68:	d1e7      	bne.n	23fbb3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
 23fbb6a:	6835      	ldr	r5, [r6, #0]
 23fbb6c:	a90b      	add	r1, sp, #44	; 0x2c
 23fbb6e:	a80d      	add	r0, sp, #52	; 0x34
 23fbb70:	f7ff fa8b 	bl	23fb08a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
 23fbb74:	4628      	mov	r0, r5
 23fbb76:	a90d      	add	r1, sp, #52	; 0x34
 23fbb78:	f7ff fe7c 	bl	23fb874 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
 23fbb7c:	4605      	mov	r5, r0
 23fbb7e:	a80e      	add	r0, sp, #56	; 0x38
 23fbb80:	f7fe fd99 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbb84:	2d00      	cmp	r5, #0
 23fbb86:	d0d8      	beq.n	23fbb3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
 23fbb88:	6832      	ldr	r2, [r6, #0]
 23fbb8a:	a80c      	add	r0, sp, #48	; 0x30
    return data_[size_ - 1];
 23fbb8c:	6853      	ldr	r3, [r2, #4]
 23fbb8e:	6812      	ldr	r2, [r2, #0]
 23fbb90:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 23fbb94:	3b01      	subs	r3, #1
 23fbb96:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
 23fbb9a:	f7fe fd8c 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbb9e:	e76b      	b.n	23fba78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
 23fbba0:	023ff9ac 	.word	0x023ff9ac
 23fbba4:	023ff8e7 	.word	0x023ff8e7
 23fbba8:	023ffa54 	.word	0x023ffa54
 23fbbac:	1007ae50 	.word	0x1007ae50
 23fbbb0:	002c0003 	.word	0x002c0003
 23fbbb4:	023faee9 	.word	0x023faee9
 23fbbb8:	023ff9d7 	.word	0x023ff9d7

023fbbbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23fbbbc:	2300      	movs	r3, #0
 23fbbbe:	4802      	ldr	r0, [pc, #8]	; (23fbbc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fbbc0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23fbbc2:	f7fe b94d 	b.w	23f9e60 <os_mutex_recursive_create>
 23fbbc6:	bf00      	nop
 23fbbc8:	1007ae54 	.word	0x1007ae54

023fbbcc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fbbcc:	2200      	movs	r2, #0
 23fbbce:	6840      	ldr	r0, [r0, #4]
 23fbbd0:	4611      	mov	r1, r2
 23fbbd2:	f7fe bcb7 	b.w	23fa544 <network_listening>

023fbbd6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fbbd6:	2200      	movs	r2, #0
 23fbbd8:	6840      	ldr	r0, [r0, #4]
 23fbbda:	4611      	mov	r1, r2
 23fbbdc:	f7fe bcce 	b.w	23fa57c <network_get_listen_timeout>

023fbbe0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fbbe0:	2200      	movs	r2, #0
 23fbbe2:	6840      	ldr	r0, [r0, #4]
 23fbbe4:	f7fe bcbc 	b.w	23fa560 <network_set_listen_timeout>

023fbbe8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fbbe8:	2200      	movs	r2, #0
 23fbbea:	6840      	ldr	r0, [r0, #4]
 23fbbec:	f081 0101 	eor.w	r1, r1, #1
 23fbbf0:	f7fe bc9a 	b.w	23fa528 <network_listen>

023fbbf4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fbbf4:	2300      	movs	r3, #0
 23fbbf6:	6840      	ldr	r0, [r0, #4]
 23fbbf8:	461a      	mov	r2, r3
 23fbbfa:	4619      	mov	r1, r3
 23fbbfc:	f7fe bc86 	b.w	23fa50c <network_off>

023fbc00 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fbc00:	2300      	movs	r3, #0
 23fbc02:	6840      	ldr	r0, [r0, #4]
 23fbc04:	461a      	mov	r2, r3
 23fbc06:	4619      	mov	r1, r3
 23fbc08:	f7fe bc72 	b.w	23fa4f0 <network_on>

023fbc0c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fbc0c:	2200      	movs	r2, #0
 23fbc0e:	6840      	ldr	r0, [r0, #4]
 23fbc10:	4611      	mov	r1, r2
 23fbc12:	f7fe bc5f 	b.w	23fa4d4 <network_ready>

023fbc16 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fbc16:	2200      	movs	r2, #0
 23fbc18:	6840      	ldr	r0, [r0, #4]
 23fbc1a:	4611      	mov	r1, r2
 23fbc1c:	f7fe bc3e 	b.w	23fa49c <network_connecting>

023fbc20 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fbc20:	2200      	movs	r2, #0
 23fbc22:	2102      	movs	r1, #2
 23fbc24:	6840      	ldr	r0, [r0, #4]
 23fbc26:	f7fe bc47 	b.w	23fa4b8 <network_disconnect>

023fbc2a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fbc2a:	2300      	movs	r3, #0
 23fbc2c:	6840      	ldr	r0, [r0, #4]
 23fbc2e:	461a      	mov	r2, r3
 23fbc30:	f7fe bc26 	b.w	23fa480 <network_connect>

023fbc34 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fbc34:	2203      	movs	r2, #3
 23fbc36:	4b02      	ldr	r3, [pc, #8]	; (23fbc40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fbc38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fbc3a:	4a02      	ldr	r2, [pc, #8]	; (23fbc44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fbc3c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fbc3e:	4770      	bx	lr
 23fbc40:	1007ae5c 	.word	0x1007ae5c
 23fbc44:	023ffa7c 	.word	0x023ffa7c

023fbc48 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fbc48:	4770      	bx	lr

023fbc4a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fbc4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbc4c:	4606      	mov	r6, r0
 23fbc4e:	4615      	mov	r5, r2
 23fbc50:	460c      	mov	r4, r1
 23fbc52:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fbc54:	42bc      	cmp	r4, r7
 23fbc56:	d006      	beq.n	23fbc66 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fbc58:	6833      	ldr	r3, [r6, #0]
 23fbc5a:	4630      	mov	r0, r6
 23fbc5c:	689b      	ldr	r3, [r3, #8]
 23fbc5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fbc62:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fbc64:	e7f6      	b.n	23fbc54 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fbc66:	4628      	mov	r0, r5
 23fbc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbc6a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fbc6a:	2200      	movs	r2, #0
 23fbc6c:	7c00      	ldrb	r0, [r0, #16]
 23fbc6e:	f7fe b983 	b.w	23f9f78 <hal_i2c_write>

023fbc72 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fbc72:	2100      	movs	r1, #0
 23fbc74:	7c00      	ldrb	r0, [r0, #16]
 23fbc76:	f7fe b98d 	b.w	23f9f94 <hal_i2c_available>

023fbc7a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fbc7a:	2100      	movs	r1, #0
 23fbc7c:	7c00      	ldrb	r0, [r0, #16]
 23fbc7e:	f7fe b997 	b.w	23f9fb0 <hal_i2c_read>

023fbc82 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fbc82:	2100      	movs	r1, #0
 23fbc84:	7c00      	ldrb	r0, [r0, #16]
 23fbc86:	f7fe b9a1 	b.w	23f9fcc <hal_i2c_peek>

023fbc8a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fbc8a:	2100      	movs	r1, #0
 23fbc8c:	7c00      	ldrb	r0, [r0, #16]
 23fbc8e:	f7fe b9ab 	b.w	23f9fe8 <hal_i2c_flush>

023fbc92 <_ZN7TwoWireD0Ev>:
 23fbc92:	b510      	push	{r4, lr}
 23fbc94:	4604      	mov	r4, r0
 23fbc96:	2114      	movs	r1, #20
 23fbc98:	f7fd fbf9 	bl	23f948e <_ZdlPvj>
 23fbc9c:	4620      	mov	r0, r4
 23fbc9e:	bd10      	pop	{r4, pc}

023fbca0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fbca0:	b538      	push	{r3, r4, r5, lr}
 23fbca2:	4604      	mov	r4, r0
 23fbca4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fbca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbcaa:	2200      	movs	r2, #0
 23fbcac:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fbcb0:	4b09      	ldr	r3, [pc, #36]	; (23fbcd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fbcb2:	4608      	mov	r0, r1
  _i2c = i2c;
 23fbcb4:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fbcb6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fbcb8:	4629      	mov	r1, r5
 23fbcba:	f7fe f9b1 	bl	23fa020 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fbcbe:	30bf      	adds	r0, #191	; 0xbf
 23fbcc0:	d108      	bne.n	23fbcd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fbcc2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fbcc4:	07db      	lsls	r3, r3, #31
 23fbcc6:	d505      	bpl.n	23fbcd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fbcc8:	6868      	ldr	r0, [r5, #4]
 23fbcca:	f7fe fc8f 	bl	23fa5ec <free>
    free(conf.tx_buffer);
 23fbcce:	68e8      	ldr	r0, [r5, #12]
 23fbcd0:	f7fe fc8c 	bl	23fa5ec <free>
}
 23fbcd4:	4620      	mov	r0, r4
 23fbcd6:	bd38      	pop	{r3, r4, r5, pc}
 23fbcd8:	023ffab8 	.word	0x023ffab8

023fbcdc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fbcdc:	4770      	bx	lr

023fbcde <_ZN9IPAddressD0Ev>:
 23fbcde:	b510      	push	{r4, lr}
 23fbce0:	4604      	mov	r4, r0
 23fbce2:	2118      	movs	r1, #24
 23fbce4:	f7fd fbd3 	bl	23f948e <_ZdlPvj>
 23fbce8:	4620      	mov	r0, r4
 23fbcea:	bd10      	pop	{r4, pc}

023fbcec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fbcec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fbcee:	7d03      	ldrb	r3, [r0, #20]
{
 23fbcf0:	460e      	mov	r6, r1
	if (address.v==6) {
 23fbcf2:	2b06      	cmp	r3, #6
 23fbcf4:	f04f 0400 	mov.w	r4, #0
{
 23fbcf8:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fbcfa:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fbcfe:	d012      	beq.n	23fbd26 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fbd00:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fbd04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fbd08:	220a      	movs	r2, #10
 23fbd0a:	4630      	mov	r0, r6
 23fbd0c:	f001 fab9 	bl	23fd282 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fbd10:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fbd12:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fbd14:	d019      	beq.n	23fbd4a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fbd16:	2c00      	cmp	r4, #0
 23fbd18:	d0f4      	beq.n	23fbd04 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fbd1a:	212e      	movs	r1, #46	; 0x2e
 23fbd1c:	4630      	mov	r0, r6
 23fbd1e:	f001 faad 	bl	23fd27c <_ZN5Print5printEc>
 23fbd22:	4404      	add	r4, r0
 23fbd24:	e7ee      	b.n	23fbd04 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fbd26:	232f      	movs	r3, #47	; 0x2f
 23fbd28:	466a      	mov	r2, sp
 23fbd2a:	4639      	mov	r1, r7
 23fbd2c:	200a      	movs	r0, #10
		buf[0] = 0;
 23fbd2e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fbd32:	f7fe f983 	bl	23fa03c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fbd36:	4668      	mov	r0, sp
 23fbd38:	f7fd fb80 	bl	23f943c <strlen>
 23fbd3c:	6833      	ldr	r3, [r6, #0]
 23fbd3e:	4602      	mov	r2, r0
 23fbd40:	4669      	mov	r1, sp
 23fbd42:	4630      	mov	r0, r6
 23fbd44:	68db      	ldr	r3, [r3, #12]
 23fbd46:	4798      	blx	r3
 23fbd48:	4604      	mov	r4, r0
    }
    return n;
}
 23fbd4a:	4620      	mov	r0, r4
 23fbd4c:	b00d      	add	sp, #52	; 0x34
 23fbd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fbd50 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fbd50:	b510      	push	{r4, lr}
 23fbd52:	4604      	mov	r4, r0
 23fbd54:	4b04      	ldr	r3, [pc, #16]	; (23fbd68 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fbd56:	2211      	movs	r2, #17
 23fbd58:	2100      	movs	r1, #0
 23fbd5a:	f840 3b04 	str.w	r3, [r0], #4
 23fbd5e:	f003 fb84 	bl	23ff46a <memset>
}
 23fbd62:	4620      	mov	r0, r4
 23fbd64:	bd10      	pop	{r4, pc}
 23fbd66:	bf00      	nop
 23fbd68:	023ffae0 	.word	0x023ffae0

023fbd6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fbd6c:	4603      	mov	r3, r0
 23fbd6e:	4a07      	ldr	r2, [pc, #28]	; (23fbd8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fbd70:	b510      	push	{r4, lr}
 23fbd72:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fbd76:	f101 0210 	add.w	r2, r1, #16
 23fbd7a:	f851 4b04 	ldr.w	r4, [r1], #4
 23fbd7e:	4291      	cmp	r1, r2
 23fbd80:	f843 4b04 	str.w	r4, [r3], #4
 23fbd84:	d1f9      	bne.n	23fbd7a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fbd86:	780a      	ldrb	r2, [r1, #0]
 23fbd88:	701a      	strb	r2, [r3, #0]
}
 23fbd8a:	bd10      	pop	{r4, pc}
 23fbd8c:	023ffae0 	.word	0x023ffae0

023fbd90 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fbd90:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fbd92:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fbd96:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fbd9a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fbd9e:	2304      	movs	r3, #4
 23fbda0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fbda4:	6041      	str	r1, [r0, #4]
 23fbda6:	7503      	strb	r3, [r0, #20]
}
 23fbda8:	bd10      	pop	{r4, pc}
	...

023fbdac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fbdac:	b507      	push	{r0, r1, r2, lr}
 23fbdae:	4b06      	ldr	r3, [pc, #24]	; (23fbdc8 <_ZN9IPAddressC1EPKh+0x1c>)
 23fbdb0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fbdb2:	78cb      	ldrb	r3, [r1, #3]
 23fbdb4:	9300      	str	r3, [sp, #0]
 23fbdb6:	788b      	ldrb	r3, [r1, #2]
 23fbdb8:	784a      	ldrb	r2, [r1, #1]
 23fbdba:	7809      	ldrb	r1, [r1, #0]
 23fbdbc:	f7ff ffe8 	bl	23fbd90 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fbdc0:	b003      	add	sp, #12
 23fbdc2:	f85d fb04 	ldr.w	pc, [sp], #4
 23fbdc6:	bf00      	nop
 23fbdc8:	023ffae0 	.word	0x023ffae0

023fbdcc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fbdcc:	2201      	movs	r2, #1
 23fbdce:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fbdd2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fbdd6:	4618      	mov	r0, r3
 23fbdd8:	2901      	cmp	r1, #1
 23fbdda:	d108      	bne.n	23fbdee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fbddc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fbde0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fbde4:	3a01      	subs	r2, #1
 23fbde6:	f103 0310 	add.w	r3, r3, #16
 23fbdea:	d1f2      	bne.n	23fbdd2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fbdec:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fbdee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fbdf0:	bf04      	itt	eq
 23fbdf2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fbdf6:	1852      	addeq	r2, r2, r1
 23fbdf8:	e7f4      	b.n	23fbde4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fbdfa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fbdfa:	b40e      	push	{r1, r2, r3}
 23fbdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fbdfe:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fbe00:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fbe02:	af00      	add	r7, sp, #0
 23fbe04:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fbe08:	f855 2b04 	ldr.w	r2, [r5], #4
 23fbe0c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fbe0e:	462b      	mov	r3, r5
 23fbe10:	1878      	adds	r0, r7, r1
 23fbe12:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fbe14:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fbe16:	f7fe fc05 	bl	23fa624 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fbe1a:	280f      	cmp	r0, #15
 23fbe1c:	687a      	ldr	r2, [r7, #4]
 23fbe1e:	d91a      	bls.n	23fbe56 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fbe20:	f100 0308 	add.w	r3, r0, #8
 23fbe24:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fbe28:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fbe2a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fbe2e:	1c41      	adds	r1, r0, #1
 23fbe30:	462b      	mov	r3, r5
 23fbe32:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fbe34:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fbe36:	f7fe fbf5 	bl	23fa624 <vsnprintf>
        if (n > 0) {
 23fbe3a:	1e02      	subs	r2, r0, #0
 23fbe3c:	dd04      	ble.n	23fbe48 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fbe3e:	6823      	ldr	r3, [r4, #0]
 23fbe40:	4669      	mov	r1, sp
 23fbe42:	4620      	mov	r0, r4
 23fbe44:	689b      	ldr	r3, [r3, #8]
 23fbe46:	4798      	blx	r3
 23fbe48:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fbe4a:	3720      	adds	r7, #32
 23fbe4c:	46bd      	mov	sp, r7
 23fbe4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fbe52:	b003      	add	sp, #12
 23fbe54:	4770      	bx	lr
    } else if (n > 0) {
 23fbe56:	2800      	cmp	r0, #0
 23fbe58:	d0f7      	beq.n	23fbe4a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fbe5a:	6823      	ldr	r3, [r4, #0]
 23fbe5c:	4602      	mov	r2, r0
 23fbe5e:	689b      	ldr	r3, [r3, #8]
 23fbe60:	4620      	mov	r0, r4
 23fbe62:	f107 0110 	add.w	r1, r7, #16
 23fbe66:	4798      	blx	r3
}
 23fbe68:	e7ef      	b.n	23fbe4a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fbe6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fbe6a:	b538      	push	{r3, r4, r5, lr}
 23fbe6c:	680b      	ldr	r3, [r1, #0]
 23fbe6e:	4604      	mov	r4, r0
 23fbe70:	6003      	str	r3, [r0, #0]
 23fbe72:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fbe74:	6843      	ldr	r3, [r0, #4]
 23fbe76:	429d      	cmp	r5, r3
 23fbe78:	d008      	beq.n	23fbe8c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fbe7a:	b115      	cbz	r5, 23fbe82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fbe7c:	686b      	ldr	r3, [r5, #4]
 23fbe7e:	3301      	adds	r3, #1
 23fbe80:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fbe82:	6860      	ldr	r0, [r4, #4]
 23fbe84:	b108      	cbz	r0, 23fbe8a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fbe86:	f7fe fcdf 	bl	23fa848 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fbe8a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fbe8c:	bd38      	pop	{r3, r4, r5, pc}

023fbe8e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fbe8e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fbe90:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fbe92:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fbe96:	2201      	movs	r2, #1
 23fbe98:	689b      	ldr	r3, [r3, #8]
 23fbe9a:	f10d 0107 	add.w	r1, sp, #7
 23fbe9e:	4798      	blx	r3
}
 23fbea0:	b003      	add	sp, #12
 23fbea2:	f85d fb04 	ldr.w	pc, [sp], #4

023fbea6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fbea6:	460b      	mov	r3, r1
 23fbea8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fbeaa:	2200      	movs	r2, #0
 23fbeac:	b510      	push	{r4, lr}
 23fbeae:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fbeb0:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fbeb4:	6083      	str	r3, [r0, #8]
    if (t) {
 23fbeb6:	b90b      	cbnz	r3, 23fbebc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fbeb8:	4620      	mov	r0, r4
 23fbeba:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fbebc:	f7ff ffd5 	bl	23fbe6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fbec0:	e7fa      	b.n	23fbeb8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fbec2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fbec2:	6883      	ldr	r3, [r0, #8]
 23fbec4:	b1eb      	cbz	r3, 23fbf02 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fbec6:	781a      	ldrb	r2, [r3, #0]
 23fbec8:	2a03      	cmp	r2, #3
 23fbeca:	d81a      	bhi.n	23fbf02 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fbecc:	e8df f002 	tbb	[pc, r2]
 23fbed0:	1b021704 	.word	0x1b021704
 23fbed4:	2005      	movs	r0, #5
 23fbed6:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fbed8:	6802      	ldr	r2, [r0, #0]
 23fbeda:	685b      	ldr	r3, [r3, #4]
 23fbedc:	6852      	ldr	r2, [r2, #4]
 23fbede:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fbee0:	282d      	cmp	r0, #45	; 0x2d
 23fbee2:	d012      	beq.n	23fbf0a <_ZNK5spark9JSONValue4typeEv+0x48>
 23fbee4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fbee8:	2b09      	cmp	r3, #9
 23fbeea:	d90e      	bls.n	23fbf0a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fbeec:	2874      	cmp	r0, #116	; 0x74
 23fbeee:	d00e      	beq.n	23fbf0e <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fbef0:	2866      	cmp	r0, #102	; 0x66
 23fbef2:	d00c      	beq.n	23fbf0e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fbef4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fbef8:	4258      	negs	r0, r3
 23fbefa:	4158      	adcs	r0, r3
 23fbefc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fbefe:	2006      	movs	r0, #6
 23fbf00:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fbf02:	2000      	movs	r0, #0
 23fbf04:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fbf06:	2004      	movs	r0, #4
 23fbf08:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fbf0a:	2003      	movs	r0, #3
 23fbf0c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fbf0e:	2002      	movs	r0, #2
}
 23fbf10:	4770      	bx	lr

023fbf12 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fbf12:	b510      	push	{r4, lr}
 23fbf14:	4604      	mov	r4, r0
    switch (type()) {
 23fbf16:	f7ff ffd4 	bl	23fbec2 <_ZNK5spark9JSONValue4typeEv>
 23fbf1a:	2802      	cmp	r0, #2
 23fbf1c:	d00e      	beq.n	23fbf3c <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fbf1e:	1ec3      	subs	r3, r0, #3
 23fbf20:	b2db      	uxtb	r3, r3
 23fbf22:	2b01      	cmp	r3, #1
 23fbf24:	d814      	bhi.n	23fbf50 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fbf26:	6822      	ldr	r2, [r4, #0]
 23fbf28:	68a3      	ldr	r3, [r4, #8]
 23fbf2a:	6850      	ldr	r0, [r2, #4]
 23fbf2c:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fbf2e:	220a      	movs	r2, #10
}
 23fbf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fbf34:	2100      	movs	r1, #0
 23fbf36:	4418      	add	r0, r3
 23fbf38:	f003 bba4 	b.w	23ff684 <strtol>
        const char* const s = d_->json + t_->start;
 23fbf3c:	6822      	ldr	r2, [r4, #0]
 23fbf3e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fbf40:	6852      	ldr	r2, [r2, #4]
 23fbf42:	685b      	ldr	r3, [r3, #4]
 23fbf44:	5cd0      	ldrb	r0, [r2, r3]
 23fbf46:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fbf4a:	4258      	negs	r0, r3
 23fbf4c:	4158      	adcs	r0, r3
}
 23fbf4e:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fbf50:	2000      	movs	r0, #0
 23fbf52:	e7fc      	b.n	23fbf4e <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fbf54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fbf54:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fbf56:	2300      	movs	r3, #0
 23fbf58:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fbf5a:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fbf5e:	480e      	ldr	r0, [pc, #56]	; (23fbf98 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fbf60:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fbf64:	b1a9      	cbz	r1, 23fbf92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fbf66:	780b      	ldrb	r3, [r1, #0]
 23fbf68:	2b03      	cmp	r3, #3
 23fbf6a:	d006      	beq.n	23fbf7a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fbf6c:	b98b      	cbnz	r3, 23fbf92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fbf6e:	6813      	ldr	r3, [r2, #0]
 23fbf70:	6858      	ldr	r0, [r3, #4]
 23fbf72:	684b      	ldr	r3, [r1, #4]
 23fbf74:	5cc3      	ldrb	r3, [r0, r3]
 23fbf76:	2b6e      	cmp	r3, #110	; 0x6e
 23fbf78:	d007      	beq.n	23fbf8a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fbf7a:	6813      	ldr	r3, [r2, #0]
 23fbf7c:	684d      	ldr	r5, [r1, #4]
 23fbf7e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fbf80:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fbf82:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fbf84:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fbf86:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fbf88:	60e3      	str	r3, [r4, #12]
 23fbf8a:	4611      	mov	r1, r2
 23fbf8c:	4620      	mov	r0, r4
 23fbf8e:	f7ff ff6c 	bl	23fbe6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fbf92:	4620      	mov	r0, r4
 23fbf94:	bd38      	pop	{r3, r4, r5, pc}
 23fbf96:	bf00      	nop
 23fbf98:	023ffb52 	.word	0x023ffb52

023fbf9c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fbf9c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fbf9e:	2500      	movs	r5, #0
 23fbfa0:	460b      	mov	r3, r1
 23fbfa2:	4604      	mov	r4, r0
 23fbfa4:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fbfa6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fbfaa:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fbfae:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fbfb2:	b14b      	cbz	r3, 23fbfc8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fbfb4:	781a      	ldrb	r2, [r3, #0]
 23fbfb6:	2a01      	cmp	r2, #1
 23fbfb8:	d106      	bne.n	23fbfc8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fbfba:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fbfbe:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fbfc0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fbfc2:	6143      	str	r3, [r0, #20]
 23fbfc4:	f7ff ff51 	bl	23fbe6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fbfc8:	4620      	mov	r0, r4
 23fbfca:	bd38      	pop	{r3, r4, r5, pc}

023fbfcc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fbfcc:	b510      	push	{r4, lr}
    if (!n_) {
 23fbfce:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fbfd0:	4604      	mov	r4, r0
    if (!n_) {
 23fbfd2:	b163      	cbz	r3, 23fbfee <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fbfd4:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fbfd6:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fbfd8:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fbfda:	3010      	adds	r0, #16
 23fbfdc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fbfde:	6120      	str	r0, [r4, #16]
    --n_;
 23fbfe0:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fbfe2:	b113      	cbz	r3, 23fbfea <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fbfe4:	f7ff fef2 	bl	23fbdcc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fbfe8:	60a0      	str	r0, [r4, #8]
    return true;
 23fbfea:	2001      	movs	r0, #1
 23fbfec:	e000      	b.n	23fbff0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fbfee:	4618      	mov	r0, r3
}
 23fbff0:	bd10      	pop	{r4, pc}

023fbff2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fbff2:	b510      	push	{r4, lr}
    write('}');
 23fbff4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fbff6:	4604      	mov	r4, r0
    write('}');
 23fbff8:	f7ff ff49 	bl	23fbe8e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fbffc:	2301      	movs	r3, #1
}
 23fbffe:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc000:	7123      	strb	r3, [r4, #4]
}
 23fc002:	bd10      	pop	{r4, pc}

023fc004 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fc004:	b508      	push	{r3, lr}
    switch (state_) {
 23fc006:	7903      	ldrb	r3, [r0, #4]
 23fc008:	2b01      	cmp	r3, #1
 23fc00a:	d002      	beq.n	23fc012 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fc00c:	2b02      	cmp	r3, #2
 23fc00e:	d004      	beq.n	23fc01a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fc010:	bd08      	pop	{r3, pc}
        write(',');
 23fc012:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fc014:	f7ff ff3b 	bl	23fbe8e <_ZN5spark10JSONWriter5writeEc>
}
 23fc018:	e7fa      	b.n	23fc010 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fc01a:	213a      	movs	r1, #58	; 0x3a
 23fc01c:	e7fa      	b.n	23fc014 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fc01e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fc01e:	b510      	push	{r4, lr}
 23fc020:	4604      	mov	r4, r0
    writeSeparator();
 23fc022:	f7ff ffef 	bl	23fc004 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fc026:	4620      	mov	r0, r4
 23fc028:	217b      	movs	r1, #123	; 0x7b
 23fc02a:	f7ff ff30 	bl	23fbe8e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc02e:	2300      	movs	r3, #0
}
 23fc030:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc032:	7123      	strb	r3, [r4, #4]
}
 23fc034:	bd10      	pop	{r4, pc}
	...

023fc038 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fc038:	b513      	push	{r0, r1, r4, lr}
 23fc03a:	4604      	mov	r4, r0
 23fc03c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc03e:	f7ff ffe1 	bl	23fc004 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fc042:	6823      	ldr	r3, [r4, #0]
 23fc044:	4620      	mov	r0, r4
 23fc046:	68db      	ldr	r3, [r3, #12]
 23fc048:	9a01      	ldr	r2, [sp, #4]
 23fc04a:	4903      	ldr	r1, [pc, #12]	; (23fc058 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fc04c:	4798      	blx	r3
    state_ = NEXT;
 23fc04e:	2301      	movs	r3, #1
}
 23fc050:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc052:	7123      	strb	r3, [r4, #4]
}
 23fc054:	b002      	add	sp, #8
 23fc056:	bd10      	pop	{r4, pc}
 23fc058:	023ffaec 	.word	0x023ffaec

023fc05c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fc05c:	b513      	push	{r0, r1, r4, lr}
 23fc05e:	4604      	mov	r4, r0
 23fc060:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc062:	f7ff ffcf 	bl	23fc004 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fc066:	6823      	ldr	r3, [r4, #0]
 23fc068:	4620      	mov	r0, r4
 23fc06a:	68db      	ldr	r3, [r3, #12]
 23fc06c:	9a01      	ldr	r2, [sp, #4]
 23fc06e:	4903      	ldr	r1, [pc, #12]	; (23fc07c <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fc070:	4798      	blx	r3
    state_ = NEXT;
 23fc072:	2301      	movs	r3, #1
}
 23fc074:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc076:	7123      	strb	r3, [r4, #4]
}
 23fc078:	b002      	add	sp, #8
 23fc07a:	bd10      	pop	{r4, pc}
 23fc07c:	023ffaef 	.word	0x023ffaef

023fc080 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc084:	460d      	mov	r5, r1
 23fc086:	4690      	mov	r8, r2
    write('"');
 23fc088:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc08a:	4604      	mov	r4, r0
 23fc08c:	462f      	mov	r7, r5
    write('"');
 23fc08e:	f7ff fefe 	bl	23fbe8e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fc092:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fc138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fc096:	44a8      	add	r8, r5
    while (s != end) {
 23fc098:	4547      	cmp	r7, r8
 23fc09a:	46ba      	mov	sl, r7
 23fc09c:	d03d      	beq.n	23fc11a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fc09e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fc0a2:	2e22      	cmp	r6, #34	; 0x22
 23fc0a4:	d006      	beq.n	23fc0b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc0a6:	2e5c      	cmp	r6, #92	; 0x5c
 23fc0a8:	d004      	beq.n	23fc0b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc0aa:	4630      	mov	r0, r6
 23fc0ac:	f003 f99e 	bl	23ff3ec <isprint>
 23fc0b0:	2800      	cmp	r0, #0
 23fc0b2:	d1f1      	bne.n	23fc098 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fc0b4:	6823      	ldr	r3, [r4, #0]
 23fc0b6:	4629      	mov	r1, r5
 23fc0b8:	4620      	mov	r0, r4
 23fc0ba:	689b      	ldr	r3, [r3, #8]
 23fc0bc:	ebaa 0205 	sub.w	r2, sl, r5
 23fc0c0:	4798      	blx	r3
            write('\\');
 23fc0c2:	215c      	movs	r1, #92	; 0x5c
 23fc0c4:	4620      	mov	r0, r4
 23fc0c6:	f7ff fee2 	bl	23fbe8e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fc0ca:	2e0d      	cmp	r6, #13
 23fc0cc:	d80a      	bhi.n	23fc0e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fc0ce:	2e07      	cmp	r6, #7
 23fc0d0:	d91c      	bls.n	23fc10c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc0d2:	f1a6 0308 	sub.w	r3, r6, #8
 23fc0d6:	2b05      	cmp	r3, #5
 23fc0d8:	d818      	bhi.n	23fc10c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc0da:	e8df f003 	tbb	[pc, r3]
 23fc0de:	0f0d      	.short	0x0f0d
 23fc0e0:	15131711 	.word	0x15131711
 23fc0e4:	2e22      	cmp	r6, #34	; 0x22
 23fc0e6:	d001      	beq.n	23fc0ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fc0e8:	2e5c      	cmp	r6, #92	; 0x5c
 23fc0ea:	d10f      	bne.n	23fc10c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fc0ec:	4631      	mov	r1, r6
                write('b');
 23fc0ee:	4620      	mov	r0, r4
 23fc0f0:	f7ff fecd 	bl	23fbe8e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fc0f4:	463d      	mov	r5, r7
    while (s != end) {
 23fc0f6:	e7cf      	b.n	23fc098 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fc0f8:	2162      	movs	r1, #98	; 0x62
 23fc0fa:	e7f8      	b.n	23fc0ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fc0fc:	2174      	movs	r1, #116	; 0x74
 23fc0fe:	e7f6      	b.n	23fc0ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fc100:	216e      	movs	r1, #110	; 0x6e
 23fc102:	e7f4      	b.n	23fc0ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fc104:	2166      	movs	r1, #102	; 0x66
 23fc106:	e7f2      	b.n	23fc0ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fc108:	2172      	movs	r1, #114	; 0x72
 23fc10a:	e7f0      	b.n	23fc0ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fc10c:	6823      	ldr	r3, [r4, #0]
 23fc10e:	4632      	mov	r2, r6
 23fc110:	4649      	mov	r1, r9
 23fc112:	4620      	mov	r0, r4
 23fc114:	68db      	ldr	r3, [r3, #12]
 23fc116:	4798      	blx	r3
                break;
 23fc118:	e7ec      	b.n	23fc0f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fc11a:	42bd      	cmp	r5, r7
 23fc11c:	d005      	beq.n	23fc12a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fc11e:	6823      	ldr	r3, [r4, #0]
 23fc120:	4629      	mov	r1, r5
 23fc122:	4620      	mov	r0, r4
 23fc124:	689b      	ldr	r3, [r3, #8]
 23fc126:	1b7a      	subs	r2, r7, r5
 23fc128:	4798      	blx	r3
    }
    write('"');
 23fc12a:	2122      	movs	r1, #34	; 0x22
 23fc12c:	4620      	mov	r0, r4
 23fc12e:	f7ff feae 	bl	23fbe8e <_ZN5spark10JSONWriter5writeEc>
}
 23fc132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc136:	bf00      	nop
 23fc138:	023ffaf2 	.word	0x023ffaf2

023fc13c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fc13c:	b513      	push	{r0, r1, r4, lr}
 23fc13e:	4604      	mov	r4, r0
 23fc140:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc144:	f7ff ff5e 	bl	23fc004 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fc148:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc14c:	4620      	mov	r0, r4
 23fc14e:	f7ff ff97 	bl	23fc080 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fc152:	2302      	movs	r3, #2
}
 23fc154:	4620      	mov	r0, r4
    state_ = VALUE;
 23fc156:	7123      	strb	r3, [r4, #4]
}
 23fc158:	b002      	add	sp, #8
 23fc15a:	bd10      	pop	{r4, pc}

023fc15c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fc15c:	b513      	push	{r0, r1, r4, lr}
 23fc15e:	4604      	mov	r4, r0
 23fc160:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc164:	f7ff ff4e 	bl	23fc004 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fc168:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc16c:	4620      	mov	r0, r4
 23fc16e:	f7ff ff87 	bl	23fc080 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fc172:	2301      	movs	r3, #1
}
 23fc174:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc176:	7123      	strb	r3, [r4, #4]
}
 23fc178:	b002      	add	sp, #8
 23fc17a:	bd10      	pop	{r4, pc}

023fc17c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc17c:	6880      	ldr	r0, [r0, #8]
 23fc17e:	6803      	ldr	r3, [r0, #0]
 23fc180:	68db      	ldr	r3, [r3, #12]
 23fc182:	4718      	bx	r3

023fc184 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc184:	4770      	bx	lr

023fc186 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc186:	4608      	mov	r0, r1
 23fc188:	b111      	cbz	r1, 23fc190 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc18a:	680b      	ldr	r3, [r1, #0]
 23fc18c:	685b      	ldr	r3, [r3, #4]
 23fc18e:	4718      	bx	r3
}
 23fc190:	4770      	bx	lr

023fc192 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc192:	4770      	bx	lr

023fc194 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc194:	4770      	bx	lr

023fc196 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc196:	4770      	bx	lr

023fc198 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc198:	4770      	bx	lr

023fc19a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc19a:	b538      	push	{r3, r4, r5, lr}
 23fc19c:	4604      	mov	r4, r0
 23fc19e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc1a0:	6800      	ldr	r0, [r0, #0]
 23fc1a2:	212e      	movs	r1, #46	; 0x2e
 23fc1a4:	f003 f9a5 	bl	23ff4f2 <strchrnul>
    size = s - category;
 23fc1a8:	6823      	ldr	r3, [r4, #0]
 23fc1aa:	1ac3      	subs	r3, r0, r3
 23fc1ac:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc1ae:	b123      	cbz	r3, 23fc1ba <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc1b0:	7803      	ldrb	r3, [r0, #0]
 23fc1b2:	b103      	cbz	r3, 23fc1b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc1b4:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fc1b6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc1b8:	6020      	str	r0, [r4, #0]
}
 23fc1ba:	4618      	mov	r0, r3
 23fc1bc:	bd38      	pop	{r3, r4, r5, pc}

023fc1be <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc1be:	b510      	push	{r4, lr}
 23fc1c0:	4604      	mov	r4, r0
 23fc1c2:	210c      	movs	r1, #12
 23fc1c4:	f7fd f963 	bl	23f948e <_ZdlPvj>
 23fc1c8:	4620      	mov	r0, r4
 23fc1ca:	bd10      	pop	{r4, pc}

023fc1cc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fc1cc:	b510      	push	{r4, lr}
 23fc1ce:	4604      	mov	r4, r0
 23fc1d0:	2104      	movs	r1, #4
 23fc1d2:	f7fd f95c 	bl	23f948e <_ZdlPvj>
 23fc1d6:	4620      	mov	r0, r4
 23fc1d8:	bd10      	pop	{r4, pc}

023fc1da <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc1da:	b510      	push	{r4, lr}
 23fc1dc:	4604      	mov	r4, r0
 23fc1de:	2104      	movs	r1, #4
 23fc1e0:	f7fd f955 	bl	23f948e <_ZdlPvj>
 23fc1e4:	4620      	mov	r0, r4
 23fc1e6:	bd10      	pop	{r4, pc}

023fc1e8 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 23fc1e8:	f7fd be56 	b.w	23f9e98 <os_mutex_recursive_lock>

023fc1ec <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fc1ec:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fc1ee:	f7fd f91b 	bl	23f9428 <strcmp>
}
 23fc1f2:	fab0 f080 	clz	r0, r0
 23fc1f6:	0940      	lsrs	r0, r0, #5
 23fc1f8:	bd08      	pop	{r3, pc}

023fc1fa <__tcf_1>:
 23fc1fa:	4770      	bx	lr

023fc1fc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fc1fc:	b510      	push	{r4, lr}
 23fc1fe:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fc200:	f001 fa34 	bl	23fd66c <_Z16_fetch_usbserialv>
 23fc204:	4284      	cmp	r4, r0
 23fc206:	d105      	bne.n	23fc214 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fc208:	f001 fa30 	bl	23fd66c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fc20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fc210:	f001 ba20 	b.w	23fd654 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fc214:	f001 fc0c 	bl	23fda30 <_Z22__fetch_global_Serial1v>
 23fc218:	4284      	cmp	r4, r0
 23fc21a:	d105      	bne.n	23fc228 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fc21c:	f001 fc08 	bl	23fda30 <_Z22__fetch_global_Serial1v>
}
 23fc220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fc224:	f001 b9b9 	b.w	23fd59a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fc228:	b12c      	cbz	r4, 23fc236 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fc22a:	6823      	ldr	r3, [r4, #0]
 23fc22c:	4620      	mov	r0, r4
}
 23fc22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc232:	685b      	ldr	r3, [r3, #4]
 23fc234:	4718      	bx	r3
 23fc236:	bd10      	pop	{r4, pc}

023fc238 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc238:	680b      	ldr	r3, [r1, #0]
 23fc23a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc23c:	684b      	ldr	r3, [r1, #4]
 23fc23e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc240:	b113      	cbz	r3, 23fc248 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fc242:	685a      	ldr	r2, [r3, #4]
 23fc244:	3201      	adds	r2, #1
 23fc246:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc248:	4770      	bx	lr

023fc24a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fc24a:	b513      	push	{r0, r1, r4, lr}
 23fc24c:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fc24e:	4608      	mov	r0, r1
 23fc250:	9101      	str	r1, [sp, #4]
 23fc252:	f7fd f8f3 	bl	23f943c <strlen>
 23fc256:	4602      	mov	r2, r0
 23fc258:	4620      	mov	r0, r4
 23fc25a:	9901      	ldr	r1, [sp, #4]
}
 23fc25c:	b002      	add	sp, #8
 23fc25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fc262:	f7ff bf7b 	b.w	23fc15c <_ZN5spark10JSONWriter5valueEPKcj>

023fc266 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fc266:	b513      	push	{r0, r1, r4, lr}
 23fc268:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fc26a:	4608      	mov	r0, r1
 23fc26c:	9101      	str	r1, [sp, #4]
 23fc26e:	f7fd f8e5 	bl	23f943c <strlen>
 23fc272:	4602      	mov	r2, r0
 23fc274:	4620      	mov	r0, r4
 23fc276:	6823      	ldr	r3, [r4, #0]
 23fc278:	9901      	ldr	r1, [sp, #4]
 23fc27a:	68db      	ldr	r3, [r3, #12]
}
 23fc27c:	b002      	add	sp, #8
 23fc27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fc282:	4718      	bx	r3

023fc284 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fc284:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc286:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fc288:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc28c:	2201      	movs	r2, #1
 23fc28e:	68db      	ldr	r3, [r3, #12]
 23fc290:	f10d 0107 	add.w	r1, sp, #7
 23fc294:	4798      	blx	r3
}
 23fc296:	b003      	add	sp, #12
 23fc298:	f85d fb04 	ldr.w	pc, [sp], #4

023fc29c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fc29c:	680a      	ldr	r2, [r1, #0]
 23fc29e:	b510      	push	{r4, lr}
 23fc2a0:	6002      	str	r2, [r0, #0]
 23fc2a2:	684a      	ldr	r2, [r1, #4]
 23fc2a4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fc2a6:	2200      	movs	r2, #0
 23fc2a8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fc2ac:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc2ae:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc2b0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc2b2:	6084      	str	r4, [r0, #8]
 23fc2b4:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc2b6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc2b8:	60c4      	str	r4, [r0, #12]
 23fc2ba:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc2bc:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc2be:	6104      	str	r4, [r0, #16]
 23fc2c0:	bd10      	pop	{r4, pc}
	...

023fc2c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc2c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fc2c8:	f04f 0a14 	mov.w	sl, #20
 23fc2cc:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fc2d0:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fc2d2:	4645      	mov	r5, r8
 23fc2d4:	fb0a f404 	mul.w	r4, sl, r4
 23fc2d8:	9300      	str	r3, [sp, #0]
 23fc2da:	4b17      	ldr	r3, [pc, #92]	; (23fc338 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc2dc:	10a4      	asrs	r4, r4, #2
 23fc2de:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fc2e0:	2c00      	cmp	r4, #0
 23fc2e2:	dd21      	ble.n	23fc328 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fc2e4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fc2e6:	fb0a f006 	mul.w	r0, sl, r6
 23fc2ea:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fc2ee:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fc2f2:	463a      	mov	r2, r7
 23fc2f4:	455f      	cmp	r7, fp
 23fc2f6:	bf28      	it	cs
 23fc2f8:	465a      	movcs	r2, fp
 23fc2fa:	5828      	ldr	r0, [r5, r0]
 23fc2fc:	9101      	str	r1, [sp, #4]
 23fc2fe:	f003 f90a 	bl	23ff516 <strncmp>
                if (cmp == 0) {
 23fc302:	2800      	cmp	r0, #0
 23fc304:	f04f 0301 	mov.w	r3, #1
 23fc308:	9901      	ldr	r1, [sp, #4]
 23fc30a:	d10b      	bne.n	23fc324 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fc30c:	455f      	cmp	r7, fp
 23fc30e:	d103      	bne.n	23fc318 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fc310:	9a00      	ldr	r2, [sp, #0]
 23fc312:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc314:	4634      	mov	r4, r6
 23fc316:	e7e3      	b.n	23fc2e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fc318:	d9fc      	bls.n	23fc314 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fc31a:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fc31c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fc320:	3e01      	subs	r6, #1
 23fc322:	e7f7      	b.n	23fc314 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fc324:	dbf9      	blt.n	23fc31a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fc326:	e7f5      	b.n	23fc314 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fc328:	eba5 0508 	sub.w	r5, r5, r8
}
 23fc32c:	4802      	ldr	r0, [pc, #8]	; (23fc338 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc32e:	10ad      	asrs	r5, r5, #2
 23fc330:	4368      	muls	r0, r5
 23fc332:	b003      	add	sp, #12
 23fc334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc338:	cccccccd 	.word	0xcccccccd

023fc33c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc33c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fc33e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fc340:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc342:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fc344:	b303      	cbz	r3, 23fc388 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fc346:	b1f9      	cbz	r1, 23fc388 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fc348:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fc34a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fc34e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fc350:	a903      	add	r1, sp, #12
 23fc352:	a801      	add	r0, sp, #4
 23fc354:	f7ff ff21 	bl	23fc19a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fc358:	4601      	mov	r1, r0
 23fc35a:	b1a8      	cbz	r0, 23fc388 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc35c:	f10d 030b 	add.w	r3, sp, #11
 23fc360:	4620      	mov	r0, r4
 23fc362:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fc364:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc368:	f7ff ffac 	bl	23fc2c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fc36c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fc370:	b153      	cbz	r3, 23fc388 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fc372:	6823      	ldr	r3, [r4, #0]
 23fc374:	2414      	movs	r4, #20
 23fc376:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fc37a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fc37e:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fc380:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fc382:	bfa8      	it	ge
 23fc384:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fc386:	e7e3      	b.n	23fc350 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fc388:	4628      	mov	r0, r5
 23fc38a:	b004      	add	sp, #16
 23fc38c:	bd70      	pop	{r4, r5, r6, pc}

023fc38e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fc38e:	b40e      	push	{r1, r2, r3}
 23fc390:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc392:	b08c      	sub	sp, #48	; 0x30
 23fc394:	af00      	add	r7, sp, #0
 23fc396:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fc39a:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc39e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3a0:	462b      	mov	r3, r5
 23fc3a2:	2120      	movs	r1, #32
 23fc3a4:	f107 0010 	add.w	r0, r7, #16
 23fc3a8:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc3aa:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3ac:	f7fe f93a 	bl	23fa624 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fc3b0:	281f      	cmp	r0, #31
 23fc3b2:	687a      	ldr	r2, [r7, #4]
 23fc3b4:	d91a      	bls.n	23fc3ec <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fc3b6:	f100 0308 	add.w	r3, r0, #8
 23fc3ba:	f023 0307 	bic.w	r3, r3, #7
        }
 23fc3be:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fc3c0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3c4:	1c41      	adds	r1, r0, #1
 23fc3c6:	462b      	mov	r3, r5
 23fc3c8:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc3ca:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3cc:	f7fe f92a 	bl	23fa624 <vsnprintf>
        if (n > 0) {
 23fc3d0:	1e02      	subs	r2, r0, #0
 23fc3d2:	dd04      	ble.n	23fc3de <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fc3d4:	6823      	ldr	r3, [r4, #0]
 23fc3d6:	4669      	mov	r1, sp
 23fc3d8:	4620      	mov	r0, r4
 23fc3da:	68db      	ldr	r3, [r3, #12]
 23fc3dc:	4798      	blx	r3
 23fc3de:	46b5      	mov	sp, r6
}
 23fc3e0:	3730      	adds	r7, #48	; 0x30
 23fc3e2:	46bd      	mov	sp, r7
 23fc3e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc3e8:	b003      	add	sp, #12
 23fc3ea:	4770      	bx	lr
    } else if (n > 0) {
 23fc3ec:	2800      	cmp	r0, #0
 23fc3ee:	d0f7      	beq.n	23fc3e0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fc3f0:	6823      	ldr	r3, [r4, #0]
 23fc3f2:	4602      	mov	r2, r0
 23fc3f4:	68db      	ldr	r3, [r3, #12]
 23fc3f6:	4620      	mov	r0, r4
 23fc3f8:	f107 0110 	add.w	r1, r7, #16
 23fc3fc:	4798      	blx	r3
}
 23fc3fe:	e7ef      	b.n	23fc3e0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fc400 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fc400:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fc402:	4c08      	ldr	r4, [pc, #32]	; (23fc424 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fc404:	e8d4 3f8f 	ldab	r3, [r4]
 23fc408:	07db      	lsls	r3, r3, #31
 23fc40a:	d409      	bmi.n	23fc420 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc40c:	4620      	mov	r0, r4
 23fc40e:	f7fd f84d 	bl	23f94ac <__cxa_guard_acquire>
 23fc412:	b128      	cbz	r0, 23fc420 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc414:	4620      	mov	r0, r4
 23fc416:	f7fd f84e 	bl	23f94b6 <__cxa_guard_release>
 23fc41a:	4803      	ldr	r0, [pc, #12]	; (23fc428 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fc41c:	f002 ffe0 	bl	23ff3e0 <atexit>
}
 23fc420:	4802      	ldr	r0, [pc, #8]	; (23fc42c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fc422:	bd10      	pop	{r4, pc}
 23fc424:	1007ae68 	.word	0x1007ae68
 23fc428:	023fc193 	.word	0x023fc193
 23fc42c:	10079d74 	.word	0x10079d74

023fc430 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fc430:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fc432:	4c08      	ldr	r4, [pc, #32]	; (23fc454 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fc434:	e8d4 3f8f 	ldab	r3, [r4]
 23fc438:	07db      	lsls	r3, r3, #31
 23fc43a:	d409      	bmi.n	23fc450 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc43c:	4620      	mov	r0, r4
 23fc43e:	f7fd f835 	bl	23f94ac <__cxa_guard_acquire>
 23fc442:	b128      	cbz	r0, 23fc450 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc444:	4620      	mov	r0, r4
 23fc446:	f7fd f836 	bl	23f94b6 <__cxa_guard_release>
 23fc44a:	4803      	ldr	r0, [pc, #12]	; (23fc458 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fc44c:	f002 ffc8 	bl	23ff3e0 <atexit>
    return &factory;
}
 23fc450:	4802      	ldr	r0, [pc, #8]	; (23fc45c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fc452:	bd10      	pop	{r4, pc}
 23fc454:	1007ae6c 	.word	0x1007ae6c
 23fc458:	023fc1fb 	.word	0x023fc1fb
 23fc45c:	10079d78 	.word	0x10079d78

023fc460 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fc460:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fc462:	2500      	movs	r5, #0
 23fc464:	4604      	mov	r4, r0
 23fc466:	e9c0 5500 	strd	r5, r5, [r0]
 23fc46a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fc46e:	6085      	str	r5, [r0, #8]
 23fc470:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fc472:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fc476:	f7fd fcf3 	bl	23f9e60 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fc47a:	f7ff ffc1 	bl	23fc400 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fc47e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc480:	f7ff ffd6 	bl	23fc430 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fc484:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc486:	6220      	str	r0, [r4, #32]
}
 23fc488:	4620      	mov	r0, r4
 23fc48a:	bd38      	pop	{r3, r4, r5, pc}

023fc48c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fc48c:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fc48e:	4c0a      	ldr	r4, [pc, #40]	; (23fc4b8 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fc490:	e8d4 3f8f 	ldab	r3, [r4]
 23fc494:	07db      	lsls	r3, r3, #31
 23fc496:	d40c      	bmi.n	23fc4b2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fc498:	4620      	mov	r0, r4
 23fc49a:	f7fd f807 	bl	23f94ac <__cxa_guard_acquire>
 23fc49e:	b140      	cbz	r0, 23fc4b2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fc4a0:	4806      	ldr	r0, [pc, #24]	; (23fc4bc <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc4a2:	f7ff ffdd 	bl	23fc460 <_ZN5spark10LogManagerC1Ev>
 23fc4a6:	4620      	mov	r0, r4
 23fc4a8:	f7fd f805 	bl	23f94b6 <__cxa_guard_release>
 23fc4ac:	4804      	ldr	r0, [pc, #16]	; (23fc4c0 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fc4ae:	f002 ff97 	bl	23ff3e0 <atexit>
    return &mgr;
}
 23fc4b2:	4802      	ldr	r0, [pc, #8]	; (23fc4bc <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc4b4:	bd10      	pop	{r4, pc}
 23fc4b6:	bf00      	nop
 23fc4b8:	1007ae64 	.word	0x1007ae64
 23fc4bc:	1007ae74 	.word	0x1007ae74
 23fc4c0:	023fc9b1 	.word	0x023fc9b1

023fc4c4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fc4c4:	2300      	movs	r3, #0
 23fc4c6:	4a02      	ldr	r2, [pc, #8]	; (23fc4d0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fc4c8:	4902      	ldr	r1, [pc, #8]	; (23fc4d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fc4ca:	4803      	ldr	r0, [pc, #12]	; (23fc4d8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fc4cc:	f7fd bf76 	b.w	23fa3bc <log_set_callbacks>
 23fc4d0:	023fc7c5 	.word	0x023fc7c5
 23fc4d4:	023fc751 	.word	0x023fc751
 23fc4d8:	023fc6d1 	.word	0x023fc6d1

023fc4dc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fc4dc:	2300      	movs	r3, #0
 23fc4de:	461a      	mov	r2, r3
 23fc4e0:	4619      	mov	r1, r3
 23fc4e2:	4618      	mov	r0, r3
 23fc4e4:	f7fd bf6a 	b.w	23fa3bc <log_set_callbacks>

023fc4e8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fc4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc4ea:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fc4ec:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fc4ee:	4668      	mov	r0, sp
 23fc4f0:	f7ff fea2 	bl	23fc238 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc4f4:	466a      	mov	r2, sp
 23fc4f6:	4629      	mov	r1, r5
 23fc4f8:	4620      	mov	r0, r4
 23fc4fa:	f7ff fd4f 	bl	23fbf9c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fc4fe:	a801      	add	r0, sp, #4
 23fc500:	f7fe f8d9 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc504:	4620      	mov	r0, r4
 23fc506:	b003      	add	sp, #12
 23fc508:	bd30      	pop	{r4, r5, pc}

023fc50a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fc50a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc50c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fc50e:	68cd      	ldr	r5, [r1, #12]
 23fc510:	4668      	mov	r0, sp
 23fc512:	f7ff fe91 	bl	23fc238 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc516:	466a      	mov	r2, sp
 23fc518:	4629      	mov	r1, r5
 23fc51a:	4620      	mov	r0, r4
 23fc51c:	f7ff fd1a 	bl	23fbf54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc520:	a801      	add	r0, sp, #4
 23fc522:	f7fe f8c8 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc526:	4620      	mov	r0, r4
 23fc528:	b003      	add	sp, #12
 23fc52a:	bd30      	pop	{r4, r5, pc}

023fc52c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fc52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc52e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fc530:	690d      	ldr	r5, [r1, #16]
 23fc532:	4668      	mov	r0, sp
 23fc534:	f7ff fe80 	bl	23fc238 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc538:	466a      	mov	r2, sp
 23fc53a:	4629      	mov	r1, r5
 23fc53c:	4620      	mov	r0, r4
 23fc53e:	f7ff fcb2 	bl	23fbea6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc542:	a801      	add	r0, sp, #4
 23fc544:	f7fe f8b7 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc548:	4620      	mov	r0, r4
 23fc54a:	b003      	add	sp, #12
 23fc54c:	bd30      	pop	{r4, r5, pc}
	...

023fc550 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fc550:	b570      	push	{r4, r5, r6, lr}
 23fc552:	b08a      	sub	sp, #40	; 0x28
 23fc554:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fc556:	4601      	mov	r1, r0
 23fc558:	a804      	add	r0, sp, #16
 23fc55a:	f7ff ffc5 	bl	23fc4e8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fc55e:	4e14      	ldr	r6, [pc, #80]	; (23fc5b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fc560:	a804      	add	r0, sp, #16
 23fc562:	f7ff fd33 	bl	23fbfcc <_ZN5spark18JSONObjectIterator4nextEv>
 23fc566:	b1e8      	cbz	r0, 23fc5a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fc568:	4668      	mov	r0, sp
 23fc56a:	a904      	add	r1, sp, #16
 23fc56c:	f7ff ffcd 	bl	23fc50a <_ZNK5spark18JSONObjectIterator4nameEv>
 23fc570:	4631      	mov	r1, r6
 23fc572:	9802      	ldr	r0, [sp, #8]
 23fc574:	f7ff fe3a 	bl	23fc1ec <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fc578:	4604      	mov	r4, r0
 23fc57a:	b110      	cbz	r0, 23fc582 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fc57c:	1e2c      	subs	r4, r5, #0
 23fc57e:	bf18      	it	ne
 23fc580:	2401      	movne	r4, #1
 23fc582:	a801      	add	r0, sp, #4
 23fc584:	f7fe f897 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc588:	2c00      	cmp	r4, #0
 23fc58a:	d0e9      	beq.n	23fc560 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fc58c:	4668      	mov	r0, sp
 23fc58e:	a904      	add	r1, sp, #16
 23fc590:	f7ff ffcc 	bl	23fc52c <_ZNK5spark18JSONObjectIterator5valueEv>
 23fc594:	4668      	mov	r0, sp
 23fc596:	f7ff fcbc 	bl	23fbf12 <_ZNK5spark9JSONValue5toIntEv>
 23fc59a:	6028      	str	r0, [r5, #0]
 23fc59c:	a801      	add	r0, sp, #4
 23fc59e:	f7fe f88a 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc5a2:	e7dd      	b.n	23fc560 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fc5a4:	a805      	add	r0, sp, #20
 23fc5a6:	f7fe f886 	bl	23fa6b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc5aa:	b00a      	add	sp, #40	; 0x28
 23fc5ac:	bd70      	pop	{r4, r5, r6, pc}
 23fc5ae:	bf00      	nop
 23fc5b0:	023ffaf8 	.word	0x023ffaf8

023fc5b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc5b6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fc5b8:	4913      	ldr	r1, [pc, #76]	; (23fc608 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fc5ba:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc5bc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fc5be:	f7fc ff33 	bl	23f9428 <strcmp>
 23fc5c2:	b950      	cbnz	r0, 23fc5da <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fc5c4:	f001 f852 	bl	23fd66c <_Z16_fetch_usbserialv>
 23fc5c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc5cc:	f001 f83e 	bl	23fd64c <_ZN9USBSerial5beginEl>
}
 23fc5d0:	b003      	add	sp, #12
 23fc5d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fc5d6:	f001 b849 	b.w	23fd66c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fc5da:	4620      	mov	r0, r4
 23fc5dc:	490b      	ldr	r1, [pc, #44]	; (23fc60c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fc5de:	f7fc ff23 	bl	23f9428 <strcmp>
 23fc5e2:	b978      	cbnz	r0, 23fc604 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fc5e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fc5e8:	a901      	add	r1, sp, #4
 23fc5ea:	4628      	mov	r0, r5
        int baud = 9600;
 23fc5ec:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fc5ee:	f7ff ffaf 	bl	23fc550 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fc5f2:	f001 fa1d 	bl	23fda30 <_Z22__fetch_global_Serial1v>
 23fc5f6:	9901      	ldr	r1, [sp, #4]
 23fc5f8:	f000 ffcc 	bl	23fd594 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fc5fc:	f001 fa18 	bl	23fda30 <_Z22__fetch_global_Serial1v>
}
 23fc600:	b003      	add	sp, #12
 23fc602:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fc604:	2000      	movs	r0, #0
 23fc606:	e7fb      	b.n	23fc600 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fc608:	023ffafd 	.word	0x023ffafd
 23fc60c:	023ffb04 	.word	0x023ffb04

023fc610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc610:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc612:	2614      	movs	r6, #20
 23fc614:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc618:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc61a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc61e:	42ae      	cmp	r6, r5
 23fc620:	d005      	beq.n	23fc62e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fc622:	f105 0008 	add.w	r0, r5, #8
 23fc626:	f7ff fff3 	bl	23fc610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc62a:	3514      	adds	r5, #20
 23fc62c:	e7f7      	b.n	23fc61e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc62e:	6820      	ldr	r0, [r4, #0]
 23fc630:	f7fd ffdc 	bl	23fa5ec <free>
}
 23fc634:	4620      	mov	r0, r4
 23fc636:	bd70      	pop	{r4, r5, r6, pc}

023fc638 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fc638:	b510      	push	{r4, lr}
 23fc63a:	4604      	mov	r4, r0
 23fc63c:	300c      	adds	r0, #12
 23fc63e:	f7ff ffe7 	bl	23fc610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc642:	4620      	mov	r0, r4
 23fc644:	f7fe fc95 	bl	23faf72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fc648:	4620      	mov	r0, r4
 23fc64a:	bd10      	pop	{r4, pc}

023fc64c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fc64c:	b510      	push	{r4, lr}
 23fc64e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fc650:	4b03      	ldr	r3, [pc, #12]	; (23fc660 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fc652:	f840 3b04 	str.w	r3, [r0], #4
 23fc656:	f7ff ffef 	bl	23fc638 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fc65a:	4620      	mov	r0, r4
 23fc65c:	bd10      	pop	{r4, pc}
 23fc65e:	bf00      	nop
 23fc660:	023ff884 	.word	0x023ff884

023fc664 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fc664:	b510      	push	{r4, lr}
 23fc666:	4604      	mov	r4, r0
 23fc668:	f7ff fff0 	bl	23fc64c <_ZN5spark16StreamLogHandlerD1Ev>
 23fc66c:	4620      	mov	r0, r4
 23fc66e:	2124      	movs	r1, #36	; 0x24
 23fc670:	f7fc ff0d 	bl	23f948e <_ZdlPvj>
 23fc674:	4620      	mov	r0, r4
 23fc676:	bd10      	pop	{r4, pc}

023fc678 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fc678:	b510      	push	{r4, lr}
 23fc67a:	4604      	mov	r4, r0
 23fc67c:	4b02      	ldr	r3, [pc, #8]	; (23fc688 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fc67e:	6003      	str	r3, [r0, #0]
 23fc680:	f7ff ffe4 	bl	23fc64c <_ZN5spark16StreamLogHandlerD1Ev>
 23fc684:	4620      	mov	r0, r4
 23fc686:	bd10      	pop	{r4, pc}
 23fc688:	023ffba4 	.word	0x023ffba4

023fc68c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fc68c:	b510      	push	{r4, lr}
 23fc68e:	4604      	mov	r4, r0
 23fc690:	f7ff fff2 	bl	23fc678 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fc694:	4620      	mov	r0, r4
 23fc696:	2124      	movs	r1, #36	; 0x24
 23fc698:	f7fc fef9 	bl	23f948e <_ZdlPvj>
 23fc69c:	4620      	mov	r0, r4
 23fc69e:	bd10      	pop	{r4, pc}

023fc6a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fc6a0:	2200      	movs	r2, #0
 23fc6a2:	e9c0 2200 	strd	r2, r2, [r0]
 23fc6a6:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fc6a8:	b510      	push	{r4, lr}
 23fc6aa:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc6ac:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fc6ae:	6004      	str	r4, [r0, #0]
 23fc6b0:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc6b2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc6b4:	6044      	str	r4, [r0, #4]
 23fc6b6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc6b8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc6ba:	6084      	str	r4, [r0, #8]
}
 23fc6bc:	bd10      	pop	{r4, pc}

023fc6be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fc6be:	b510      	push	{r4, lr}
 23fc6c0:	4604      	mov	r4, r0
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fc6c2:	6803      	ldr	r3, [r0, #0]
 23fc6c4:	6818      	ldr	r0, [r3, #0]
 23fc6c6:	f7fd fbf5 	bl	23f9eb4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fc6ca:	4620      	mov	r0, r4
 23fc6cc:	bd10      	pop	{r4, pc}
	...

023fc6d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fc6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc6d4:	b087      	sub	sp, #28
 23fc6d6:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fc6d8:	4b1c      	ldr	r3, [pc, #112]	; (23fc74c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fc6da:	4680      	mov	r8, r0
 23fc6dc:	685b      	ldr	r3, [r3, #4]
 23fc6de:	4689      	mov	r9, r1
 23fc6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fc6e4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fc6e6:	b96b      	cbnz	r3, 23fc704 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fc6e8:	f7ff fed0 	bl	23fc48c <_ZN5spark10LogManager8instanceEv>
 23fc6ec:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc6ee:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fc6f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc6f4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fc6f6:	f7ff fd77 	bl	23fc1e8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fc6fa:	7b23      	ldrb	r3, [r4, #12]
 23fc6fc:	b12b      	cbz	r3, 23fc70a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fc6fe:	a805      	add	r0, sp, #20
 23fc700:	f7ff ffdd 	bl	23fc6be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fc704:	b007      	add	sp, #28
 23fc706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fc70a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fc70c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fc710:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fc712:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fc716:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc71a:	45aa      	cmp	sl, r5
 23fc71c:	d012      	beq.n	23fc744 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fc71e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fc722:	4631      	mov	r1, r6
 23fc724:	1d38      	adds	r0, r7, #4
 23fc726:	f7ff fe09 	bl	23fc33c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fc72a:	4581      	cmp	r9, r0
 23fc72c:	d3f5      	bcc.n	23fc71a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fc72e:	9a03      	ldr	r2, [sp, #12]
 23fc730:	683b      	ldr	r3, [r7, #0]
 23fc732:	9200      	str	r2, [sp, #0]
 23fc734:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fc738:	464a      	mov	r2, r9
 23fc73a:	4633      	mov	r3, r6
 23fc73c:	4641      	mov	r1, r8
 23fc73e:	4638      	mov	r0, r7
 23fc740:	47d8      	blx	fp
 23fc742:	e7ea      	b.n	23fc71a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fc744:	2300      	movs	r3, #0
 23fc746:	7323      	strb	r3, [r4, #12]
 23fc748:	e7d9      	b.n	23fc6fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fc74a:	bf00      	nop
 23fc74c:	e000ed00 	.word	0xe000ed00

023fc750 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fc750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc754:	469b      	mov	fp, r3
 23fc756:	4b1a      	ldr	r3, [pc, #104]	; (23fc7c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fc758:	4680      	mov	r8, r0
 23fc75a:	685b      	ldr	r3, [r3, #4]
 23fc75c:	4689      	mov	r9, r1
 23fc75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fc762:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fc764:	b96b      	cbnz	r3, 23fc782 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fc766:	f7ff fe91 	bl	23fc48c <_ZN5spark10LogManager8instanceEv>
 23fc76a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc76c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc770:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc772:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc774:	f7ff fd38 	bl	23fc1e8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fc778:	7b23      	ldrb	r3, [r4, #12]
 23fc77a:	b12b      	cbz	r3, 23fc788 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fc77c:	a801      	add	r0, sp, #4
 23fc77e:	f7ff ff9e 	bl	23fc6be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fc782:	b003      	add	sp, #12
 23fc784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fc788:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fc78a:	b2f6      	uxtb	r6, r6
 23fc78c:	7323      	strb	r3, [r4, #12]
 23fc78e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fc792:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc796:	4555      	cmp	r5, sl
 23fc798:	d00e      	beq.n	23fc7b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fc79a:	f855 7b04 	ldr.w	r7, [r5], #4
 23fc79e:	4659      	mov	r1, fp
 23fc7a0:	1d38      	adds	r0, r7, #4
 23fc7a2:	f7ff fdcb 	bl	23fc33c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fc7a6:	4286      	cmp	r6, r0
 23fc7a8:	d3f5      	bcc.n	23fc796 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fc7aa:	683b      	ldr	r3, [r7, #0]
 23fc7ac:	464a      	mov	r2, r9
 23fc7ae:	4641      	mov	r1, r8
 23fc7b0:	4638      	mov	r0, r7
 23fc7b2:	68db      	ldr	r3, [r3, #12]
 23fc7b4:	4798      	blx	r3
 23fc7b6:	e7ee      	b.n	23fc796 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fc7b8:	2300      	movs	r3, #0
 23fc7ba:	7323      	strb	r3, [r4, #12]
 23fc7bc:	e7de      	b.n	23fc77c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fc7be:	bf00      	nop
 23fc7c0:	e000ed00 	.word	0xe000ed00

023fc7c4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fc7c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc7c8:	4b16      	ldr	r3, [pc, #88]	; (23fc824 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fc7ca:	4605      	mov	r5, r0
 23fc7cc:	685b      	ldr	r3, [r3, #4]
 23fc7ce:	460f      	mov	r7, r1
 23fc7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fc7d4:	bb1b      	cbnz	r3, 23fc81e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fc7d6:	f7ff fe59 	bl	23fc48c <_ZN5spark10LogManager8instanceEv>
 23fc7da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc7dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc7e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc7e2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc7e4:	f7ff fd00 	bl	23fc1e8 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fc7e8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fc7ec:	2446      	movs	r4, #70	; 0x46
 23fc7ee:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc7f2:	45b0      	cmp	r8, r6
 23fc7f4:	d109      	bne.n	23fc80a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fc7f6:	a801      	add	r0, sp, #4
 23fc7f8:	f7ff ff61 	bl	23fc6be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fc7fc:	42a5      	cmp	r5, r4
 23fc7fe:	bfb4      	ite	lt
 23fc800:	2000      	movlt	r0, #0
 23fc802:	2001      	movge	r0, #1
}
 23fc804:	b002      	add	sp, #8
 23fc806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fc80a:	f856 0b04 	ldr.w	r0, [r6], #4
 23fc80e:	4639      	mov	r1, r7
 23fc810:	3004      	adds	r0, #4
 23fc812:	f7ff fd93 	bl	23fc33c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fc816:	4284      	cmp	r4, r0
 23fc818:	bfa8      	it	ge
 23fc81a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fc81c:	e7e9      	b.n	23fc7f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fc81e:	2000      	movs	r0, #0
 23fc820:	e7f0      	b.n	23fc804 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fc822:	bf00      	nop
 23fc824:	e000ed00 	.word	0xe000ed00

023fc828 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc82a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fc82e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc830:	4604      	mov	r4, r0
 23fc832:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc834:	db0d      	blt.n	23fc852 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fc836:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fc838:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fc83a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fc83c:	dd04      	ble.n	23fc848 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fc83e:	00b9      	lsls	r1, r7, #2
 23fc840:	f7fd fee2 	bl	23fa608 <realloc>
            if (!d) {
 23fc844:	b918      	cbnz	r0, 23fc84e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fc846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fc848:	f7fd fed0 	bl	23fa5ec <free>
        T* d = nullptr;
 23fc84c:	2000      	movs	r0, #0
        data_ = d;
 23fc84e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fc850:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fc852:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc854:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc856:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fc85a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc85c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fc860:	1d08      	adds	r0, r1, #4
 23fc862:	f002 fde8 	bl	23ff436 <memmove>
    new(p) T(std::move(value));
 23fc866:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fc86a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fc86c:	2001      	movs	r0, #1
    ++size_;
 23fc86e:	3301      	adds	r3, #1
 23fc870:	6063      	str	r3, [r4, #4]
    return true;
 23fc872:	e7e8      	b.n	23fc846 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fc874 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fc874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc876:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fc878:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc87c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc87e:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fc880:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fc882:	f7ff fcb1 	bl	23fc1e8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fc886:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fc88a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fc88e:	4293      	cmp	r3, r2
 23fc890:	4619      	mov	r1, r3
 23fc892:	d00a      	beq.n	23fc8aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fc894:	6809      	ldr	r1, [r1, #0]
 23fc896:	3304      	adds	r3, #4
 23fc898:	42a9      	cmp	r1, r5
 23fc89a:	d1f8      	bne.n	23fc88e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fc89c:	a801      	add	r0, sp, #4
 23fc89e:	f7ff ff0e 	bl	23fc6be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fc8a2:	2500      	movs	r5, #0
}
 23fc8a4:	4628      	mov	r0, r5
 23fc8a6:	b003      	add	sp, #12
 23fc8a8:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fc8aa:	4629      	mov	r1, r5
 23fc8ac:	4620      	mov	r0, r4
 23fc8ae:	f7ff ffbb 	bl	23fc828 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fc8b2:	4605      	mov	r5, r0
 23fc8b4:	2800      	cmp	r0, #0
 23fc8b6:	d0f1      	beq.n	23fc89c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fc8b8:	6863      	ldr	r3, [r4, #4]
 23fc8ba:	2b01      	cmp	r3, #1
 23fc8bc:	d101      	bne.n	23fc8c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fc8be:	f7ff fe01 	bl	23fc4c4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc8c2:	a801      	add	r0, sp, #4
 23fc8c4:	f7ff fefb 	bl	23fc6be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fc8c8:	e7ec      	b.n	23fc8a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fc8ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fc8ca:	460b      	mov	r3, r1
 23fc8cc:	b570      	push	{r4, r5, r6, lr}
 23fc8ce:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fc8d0:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fc8d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fc8d8:	4282      	cmp	r2, r0
 23fc8da:	d00f      	beq.n	23fc8fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fc8dc:	4601      	mov	r1, r0
            if (*p == value) {
 23fc8de:	681d      	ldr	r5, [r3, #0]
 23fc8e0:	f851 6b04 	ldr.w	r6, [r1], #4
 23fc8e4:	42ae      	cmp	r6, r5
 23fc8e6:	d107      	bne.n	23fc8f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc8e8:	1a52      	subs	r2, r2, r1
 23fc8ea:	f002 fda4 	bl	23ff436 <memmove>
    return true;
 23fc8ee:	2001      	movs	r0, #1
    --size_;
 23fc8f0:	6863      	ldr	r3, [r4, #4]
 23fc8f2:	3b01      	subs	r3, #1
 23fc8f4:	6063      	str	r3, [r4, #4]
}
 23fc8f6:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fc8f8:	4608      	mov	r0, r1
 23fc8fa:	e7ed      	b.n	23fc8d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fc8fc:	2000      	movs	r0, #0
 23fc8fe:	e7fa      	b.n	23fc8f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fc900 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fc900:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fc902:	b570      	push	{r4, r5, r6, lr}
 23fc904:	4604      	mov	r4, r0
 23fc906:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fc90a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fc90e:	42ae      	cmp	r6, r5
 23fc910:	d015      	beq.n	23fc93e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fc912:	4620      	mov	r0, r4
 23fc914:	f105 0110 	add.w	r1, r5, #16
 23fc918:	f7ff ffd7 	bl	23fc8ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fc91c:	6863      	ldr	r3, [r4, #4]
 23fc91e:	b90b      	cbnz	r3, 23fc924 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fc920:	f7ff fddc 	bl	23fc4dc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fc924:	69e0      	ldr	r0, [r4, #28]
 23fc926:	6929      	ldr	r1, [r5, #16]
 23fc928:	6803      	ldr	r3, [r0, #0]
 23fc92a:	68db      	ldr	r3, [r3, #12]
 23fc92c:	4798      	blx	r3
        if (h.stream) {
 23fc92e:	6969      	ldr	r1, [r5, #20]
 23fc930:	b119      	cbz	r1, 23fc93a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fc932:	6a20      	ldr	r0, [r4, #32]
 23fc934:	6803      	ldr	r3, [r0, #0]
 23fc936:	68db      	ldr	r3, [r3, #12]
 23fc938:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fc93a:	3518      	adds	r5, #24
 23fc93c:	e7e7      	b.n	23fc90e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fc93e:	2618      	movs	r6, #24
 23fc940:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fc944:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc948:	42ae      	cmp	r6, r5
 23fc94a:	d004      	beq.n	23fc956 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fc94c:	4628      	mov	r0, r5
 23fc94e:	f000 fcfb 	bl	23fd348 <_ZN6StringD1Ev>
 23fc952:	3518      	adds	r5, #24
 23fc954:	e7f8      	b.n	23fc948 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fc956:	2300      	movs	r3, #0
 23fc958:	6163      	str	r3, [r4, #20]
}
 23fc95a:	bd70      	pop	{r4, r5, r6, pc}

023fc95c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fc95c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc95e:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fc960:	f7ff fdbc 	bl	23fc4dc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc964:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fc968:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc96a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc96c:	f7ff fc3c 	bl	23fc1e8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fc970:	4620      	mov	r0, r4
 23fc972:	f7ff ffc5 	bl	23fc900 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fc976:	a801      	add	r0, sp, #4
 23fc978:	f7ff fea1 	bl	23fc6be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fc97c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc97e:	b108      	cbz	r0, 23fc984 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fc980:	f7fd fa7c 	bl	23f9e7c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fc984:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fc988:	2618      	movs	r6, #24
 23fc98a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc98e:	42ae      	cmp	r6, r5
 23fc990:	d004      	beq.n	23fc99c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fc992:	4628      	mov	r0, r5
 23fc994:	f000 fcd8 	bl	23fd348 <_ZN6StringD1Ev>
 23fc998:	3518      	adds	r5, #24
 23fc99a:	e7f8      	b.n	23fc98e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fc99c:	6920      	ldr	r0, [r4, #16]
 23fc99e:	f7fd fe25 	bl	23fa5ec <free>
 23fc9a2:	6820      	ldr	r0, [r4, #0]
 23fc9a4:	f7fd fe22 	bl	23fa5ec <free>
}
 23fc9a8:	4620      	mov	r0, r4
 23fc9aa:	b002      	add	sp, #8
 23fc9ac:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc9b0 <__tcf_2>:
    static LogManager mgr;
 23fc9b0:	4801      	ldr	r0, [pc, #4]	; (23fc9b8 <__tcf_2+0x8>)
 23fc9b2:	f7ff bfd3 	b.w	23fc95c <_ZN5spark10LogManagerD1Ev>
 23fc9b6:	bf00      	nop
 23fc9b8:	1007ae74 	.word	0x1007ae74

023fc9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fc9bc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc9c0:	4604      	mov	r4, r0
 23fc9c2:	460d      	mov	r5, r1
 23fc9c4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc9c6:	d915      	bls.n	23fc9f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fc9c8:	4290      	cmp	r0, r2
 23fc9ca:	d214      	bcs.n	23fc9f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fc9cc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fc9d0:	1a75      	subs	r5, r6, r1
 23fc9d2:	f1a1 0714 	sub.w	r7, r1, #20
 23fc9d6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc9d8:	42b7      	cmp	r7, r6
 23fc9da:	d01a      	beq.n	23fca12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fc9dc:	b11c      	cbz	r4, 23fc9e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fc9de:	4631      	mov	r1, r6
 23fc9e0:	4620      	mov	r0, r4
 23fc9e2:	f7ff fc5b 	bl	23fc29c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fc9e6:	f106 0008 	add.w	r0, r6, #8
 23fc9ea:	f7ff fe11 	bl	23fc610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fc9ee:	3e14      	subs	r6, #20
 23fc9f0:	3c14      	subs	r4, #20
 23fc9f2:	e7f1      	b.n	23fc9d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fc9f4:	d00d      	beq.n	23fca12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fc9f6:	42b5      	cmp	r5, r6
 23fc9f8:	d00b      	beq.n	23fca12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fc9fa:	b11c      	cbz	r4, 23fca04 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fc9fc:	4629      	mov	r1, r5
 23fc9fe:	4620      	mov	r0, r4
 23fca00:	f7ff fc4c 	bl	23fc29c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fca04:	f105 0008 	add.w	r0, r5, #8
 23fca08:	f7ff fe02 	bl	23fc610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fca0c:	3514      	adds	r5, #20
 23fca0e:	3414      	adds	r4, #20
 23fca10:	e7f1      	b.n	23fc9f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fca12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fca14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fca14:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fca16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fca18:	4604      	mov	r4, r0
 23fca1a:	460d      	mov	r5, r1
 23fca1c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fca1e:	d914      	bls.n	23fca4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fca20:	4290      	cmp	r0, r2
 23fca22:	d213      	bcs.n	23fca4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fca24:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fca28:	1a75      	subs	r5, r6, r1
 23fca2a:	f1a1 0710 	sub.w	r7, r1, #16
 23fca2e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fca30:	42b7      	cmp	r7, r6
 23fca32:	d018      	beq.n	23fca66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fca34:	b11c      	cbz	r4, 23fca3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fca36:	4631      	mov	r1, r6
 23fca38:	4620      	mov	r0, r4
 23fca3a:	f000 fd02 	bl	23fd442 <_ZN6StringC1EOS_>
                end->~T();
 23fca3e:	4630      	mov	r0, r6
 23fca40:	f000 fc82 	bl	23fd348 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fca44:	3e10      	subs	r6, #16
 23fca46:	3c10      	subs	r4, #16
 23fca48:	e7f2      	b.n	23fca30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fca4a:	d00c      	beq.n	23fca66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fca4c:	42b5      	cmp	r5, r6
 23fca4e:	d00a      	beq.n	23fca66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fca50:	b11c      	cbz	r4, 23fca5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fca52:	4629      	mov	r1, r5
 23fca54:	4620      	mov	r0, r4
 23fca56:	f000 fcf4 	bl	23fd442 <_ZN6StringC1EOS_>
                p->~T();
 23fca5a:	4628      	mov	r0, r5
 23fca5c:	f000 fc74 	bl	23fd348 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fca60:	3510      	adds	r5, #16
 23fca62:	3410      	adds	r4, #16
 23fca64:	e7f2      	b.n	23fca4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fca66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fca68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fca68:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fca6a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fca6c:	4605      	mov	r5, r0
        if (n > 0) {
 23fca6e:	dd11      	ble.n	23fca94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fca70:	0130      	lsls	r0, r6, #4
 23fca72:	f7fd fdad 	bl	23fa5d0 <malloc>
            if (!d) {
 23fca76:	4604      	mov	r4, r0
 23fca78:	b158      	cbz	r0, 23fca92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fca7a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fca7e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fca82:	f7ff ffc7 	bl	23fca14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fca86:	6828      	ldr	r0, [r5, #0]
 23fca88:	f7fd fdb0 	bl	23fa5ec <free>
        return true;
 23fca8c:	2001      	movs	r0, #1
        data_ = d;
 23fca8e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fca90:	60ae      	str	r6, [r5, #8]
    }
 23fca92:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fca94:	2400      	movs	r4, #0
 23fca96:	e7f6      	b.n	23fca86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fca98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fca9c:	4690      	mov	r8, r2
        capacity_(0) {
 23fca9e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fcaa0:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fcaa2:	b095      	sub	sp, #84	; 0x54
 23fcaa4:	9103      	str	r1, [sp, #12]
    return size_;
 23fcaa6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fcaaa:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fcaac:	4299      	cmp	r1, r3
        capacity_(0) {
 23fcaae:	e9c0 3300 	strd	r3, r3, [r0]
 23fcab2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fcab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fcaba:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fcabe:	7602      	strb	r2, [r0, #24]
 23fcac0:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fcac2:	dc23      	bgt.n	23fcb0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fcac4:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fcac8:	2314      	movs	r3, #20
 23fcaca:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fcace:	42af      	cmp	r7, r5
 23fcad0:	d03b      	beq.n	23fcb4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fcad2:	4629      	mov	r1, r5
 23fcad4:	a80b      	add	r0, sp, #44	; 0x2c
 23fcad6:	f000 fcb4 	bl	23fd442 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fcada:	a90b      	add	r1, sp, #44	; 0x2c
 23fcadc:	a80f      	add	r0, sp, #60	; 0x3c
 23fcade:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fcae0:	f000 fcaf 	bl	23fd442 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcae4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fcae8:	4299      	cmp	r1, r3
 23fcaea:	da1b      	bge.n	23fcb24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fcaec:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fcaee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fcaf0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fcaf4:	4631      	mov	r1, r6
 23fcaf6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fcafa:	f106 0010 	add.w	r0, r6, #16
 23fcafe:	f7ff ff89 	bl	23fca14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fcb02:	b9ee      	cbnz	r6, 23fcb40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fcb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fcb06:	3301      	adds	r3, #1
 23fcb08:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fcb0a:	e011      	b.n	23fcb30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fcb0c:	a808      	add	r0, sp, #32
 23fcb0e:	f7ff ffab 	bl	23fca68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fcb12:	2800      	cmp	r0, #0
 23fcb14:	d1d6      	bne.n	23fcac4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fcb16:	a808      	add	r0, sp, #32
 23fcb18:	f7fe fa2b 	bl	23faf72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcb1c:	4620      	mov	r0, r4
 23fcb1e:	b015      	add	sp, #84	; 0x54
 23fcb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb24:	3101      	adds	r1, #1
 23fcb26:	a808      	add	r0, sp, #32
 23fcb28:	f7ff ff9e 	bl	23fca68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fcb2c:	2800      	cmp	r0, #0
 23fcb2e:	d1dd      	bne.n	23fcaec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fcb30:	a80f      	add	r0, sp, #60	; 0x3c
 23fcb32:	f000 fc09 	bl	23fd348 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fcb36:	a80b      	add	r0, sp, #44	; 0x2c
 23fcb38:	f000 fc06 	bl	23fd348 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fcb3c:	3514      	adds	r5, #20
 23fcb3e:	e7c6      	b.n	23fcace <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fcb40:	4630      	mov	r0, r6
 23fcb42:	a90f      	add	r1, sp, #60	; 0x3c
 23fcb44:	f000 fc7d 	bl	23fd442 <_ZN6StringC1EOS_>
 23fcb48:	e7dc      	b.n	23fcb04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fcb4a:	2600      	movs	r6, #0
 23fcb4c:	f04f 0914 	mov.w	r9, #20
 23fcb50:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fcb54:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fcb56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fcb5a:	429e      	cmp	r6, r3
 23fcb5c:	da7c      	bge.n	23fcc58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fcb5e:	0133      	lsls	r3, r6, #4
 23fcb60:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fcb62:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fcb64:	b90b      	cbnz	r3, 23fcb6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fcb66:	3601      	adds	r6, #1
 23fcb68:	e7f5      	b.n	23fcb56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fcb6a:	2300      	movs	r3, #0
 23fcb6c:	9307      	str	r3, [sp, #28]
 23fcb6e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fcb72:	ad0b      	add	r5, sp, #44	; 0x2c
 23fcb74:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fcb76:	a907      	add	r1, sp, #28
 23fcb78:	a806      	add	r0, sp, #24
 23fcb7a:	f7ff fb0e 	bl	23fc19a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fcb7e:	4682      	mov	sl, r0
 23fcb80:	2800      	cmp	r0, #0
 23fcb82:	d0f0      	beq.n	23fcb66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fcb84:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcb88:	4601      	mov	r1, r0
            bool found = false;
 23fcb8a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcb8e:	4628      	mov	r0, r5
 23fcb90:	9a07      	ldr	r2, [sp, #28]
 23fcb92:	f10d 0317 	add.w	r3, sp, #23
 23fcb96:	f7ff fb95 	bl	23fc2c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcb9a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcb9e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcba0:	2f00      	cmp	r7, #0
 23fcba2:	d14a      	bne.n	23fcc3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fcba4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fcba8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fcbac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fcbb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fcbb4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fcbb8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fcbbc:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcbbe:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fcbc2:	4293      	cmp	r3, r2
 23fcbc4:	db17      	blt.n	23fcbf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fcbc6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fcbca:	f1ba 0f00 	cmp.w	sl, #0
 23fcbce:	dd30      	ble.n	23fcc32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fcbd0:	fb09 f00a 	mul.w	r0, r9, sl
 23fcbd4:	f7fd fcfc 	bl	23fa5d0 <malloc>
            if (!d) {
 23fcbd8:	4683      	mov	fp, r0
 23fcbda:	b360      	cbz	r0, 23fcc36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fcbdc:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcbe0:	fb09 1202 	mla	r2, r9, r2, r1
 23fcbe4:	f7ff feea 	bl	23fc9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fcbe8:	6828      	ldr	r0, [r5, #0]
 23fcbea:	f7fd fcff 	bl	23fa5ec <free>
        data_ = d;
 23fcbee:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fcbf2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fcbf6:	682b      	ldr	r3, [r5, #0]
 23fcbf8:	9a01      	ldr	r2, [sp, #4]
 23fcbfa:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fcbfe:	686a      	ldr	r2, [r5, #4]
 23fcc00:	4651      	mov	r1, sl
 23fcc02:	fb09 3202 	mla	r2, r9, r2, r3
 23fcc06:	f10a 0014 	add.w	r0, sl, #20
 23fcc0a:	f7ff fed7 	bl	23fc9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fcc0e:	f1ba 0f00 	cmp.w	sl, #0
 23fcc12:	d003      	beq.n	23fcc1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fcc14:	4650      	mov	r0, sl
 23fcc16:	a90f      	add	r1, sp, #60	; 0x3c
 23fcc18:	f7ff fb40 	bl	23fc29c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fcc1c:	686b      	ldr	r3, [r5, #4]
 23fcc1e:	3301      	adds	r3, #1
 23fcc20:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fcc22:	a811      	add	r0, sp, #68	; 0x44
 23fcc24:	f7ff fcf4 	bl	23fc610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcc28:	b13f      	cbz	r7, 23fcc3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fcc2a:	a80b      	add	r0, sp, #44	; 0x2c
 23fcc2c:	f7ff fcf0 	bl	23fc610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcc30:	e771      	b.n	23fcb16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fcc32:	46bb      	mov	fp, r7
 23fcc34:	e7d8      	b.n	23fcbe8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcc36:	2701      	movs	r7, #1
 23fcc38:	e7f3      	b.n	23fcc22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fcc3a:	9b01      	ldr	r3, [sp, #4]
 23fcc3c:	682d      	ldr	r5, [r5, #0]
 23fcc3e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fcc42:	9b06      	ldr	r3, [sp, #24]
 23fcc44:	781b      	ldrb	r3, [r3, #0]
 23fcc46:	b92b      	cbnz	r3, 23fcc54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fcc48:	f8d8 3000 	ldr.w	r3, [r8]
 23fcc4c:	9a02      	ldr	r2, [sp, #8]
 23fcc4e:	4413      	add	r3, r2
 23fcc50:	7c1b      	ldrb	r3, [r3, #16]
 23fcc52:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fcc54:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fcc56:	e78e      	b.n	23fcb76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc58:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fcc5a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc5c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcc5e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc60:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc62:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fcc64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc66:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc68:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fcc6a:	60a2      	str	r2, [r4, #8]
 23fcc6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc6e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc70:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcc72:	60e2      	str	r2, [r4, #12]
 23fcc74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc76:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc78:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcc7a:	6122      	str	r2, [r4, #16]
 23fcc7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc7e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fcc80:	9b03      	ldr	r3, [sp, #12]
 23fcc82:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fcc84:	6162      	str	r2, [r4, #20]
 23fcc86:	7623      	strb	r3, [r4, #24]
 23fcc88:	e7cf      	b.n	23fcc2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fcc8c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fcc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcc8e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fcc90:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fcc92:	4617      	mov	r7, r2
 23fcc94:	b087      	sub	sp, #28
 23fcc96:	460d      	mov	r5, r1
        stream_(&stream) {
 23fcc98:	4668      	mov	r0, sp
 23fcc9a:	4619      	mov	r1, r3
 23fcc9c:	f7fc fce1 	bl	23f9662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fcca0:	4b0b      	ldr	r3, [pc, #44]	; (23fccd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fcca2:	4669      	mov	r1, sp
 23fcca4:	f846 3b04 	str.w	r3, [r6], #4
 23fcca8:	a803      	add	r0, sp, #12
 23fccaa:	f7fc fcda 	bl	23f9662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fccae:	4639      	mov	r1, r7
 23fccb0:	aa03      	add	r2, sp, #12
 23fccb2:	4630      	mov	r0, r6
 23fccb4:	f7ff fef0 	bl	23fca98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fccb8:	a803      	add	r0, sp, #12
 23fccba:	f7fc fc91 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fccbe:	4668      	mov	r0, sp
 23fccc0:	f7fc fc8e 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fccc4:	4620      	mov	r0, r4
        stream_(&stream) {
 23fccc6:	4b03      	ldr	r3, [pc, #12]	; (23fccd4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fccc8:	6225      	str	r5, [r4, #32]
 23fccca:	6023      	str	r3, [r4, #0]
}
 23fcccc:	b007      	add	sp, #28
 23fccce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fccd0:	023ff884 	.word	0x023ff884
 23fccd4:	023ffb8c 	.word	0x023ffb8c

023fccd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fccd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fccda:	460f      	mov	r7, r1
 23fccdc:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fccde:	4638      	mov	r0, r7
 23fcce0:	491c      	ldr	r1, [pc, #112]	; (23fcd54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fcce2:	4616      	mov	r6, r2
 23fcce4:	461d      	mov	r5, r3
 23fcce6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fcce8:	f7fc fb9e 	bl	23f9428 <strcmp>
 23fccec:	b9c0      	cbnz	r0, 23fcd20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fccee:	b1a4      	cbz	r4, 23fcd1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fccf0:	4629      	mov	r1, r5
 23fccf2:	a801      	add	r0, sp, #4
 23fccf4:	f7ff fcd4 	bl	23fc6a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fccf8:	2024      	movs	r0, #36	; 0x24
 23fccfa:	4917      	ldr	r1, [pc, #92]	; (23fcd58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fccfc:	f000 ff28 	bl	23fdb50 <_ZnwjRKSt9nothrow_t>
 23fcd00:	4605      	mov	r5, r0
 23fcd02:	b130      	cbz	r0, 23fcd12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fcd04:	ab01      	add	r3, sp, #4
 23fcd06:	4632      	mov	r2, r6
 23fcd08:	4621      	mov	r1, r4
 23fcd0a:	f7ff ffbf 	bl	23fcc8c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcd0e:	4b13      	ldr	r3, [pc, #76]	; (23fcd5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fcd10:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fcd12:	a801      	add	r0, sp, #4
 23fcd14:	f7fc fc64 	bl	23f95e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fcd18:	462c      	mov	r4, r5
}
 23fcd1a:	4620      	mov	r0, r4
 23fcd1c:	b005      	add	sp, #20
 23fcd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fcd20:	4638      	mov	r0, r7
 23fcd22:	490f      	ldr	r1, [pc, #60]	; (23fcd60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fcd24:	f7fc fb80 	bl	23f9428 <strcmp>
 23fcd28:	b990      	cbnz	r0, 23fcd50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fcd2a:	2c00      	cmp	r4, #0
 23fcd2c:	d0f5      	beq.n	23fcd1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fcd2e:	4629      	mov	r1, r5
 23fcd30:	a801      	add	r0, sp, #4
 23fcd32:	f7ff fcb5 	bl	23fc6a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fcd36:	2024      	movs	r0, #36	; 0x24
 23fcd38:	4907      	ldr	r1, [pc, #28]	; (23fcd58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fcd3a:	f000 ff09 	bl	23fdb50 <_ZnwjRKSt9nothrow_t>
 23fcd3e:	4605      	mov	r5, r0
 23fcd40:	2800      	cmp	r0, #0
 23fcd42:	d0e6      	beq.n	23fcd12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fcd44:	4632      	mov	r2, r6
 23fcd46:	4621      	mov	r1, r4
 23fcd48:	ab01      	add	r3, sp, #4
 23fcd4a:	f7ff ff9f 	bl	23fcc8c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcd4e:	e7e0      	b.n	23fcd12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fcd50:	2400      	movs	r4, #0
 23fcd52:	e7e2      	b.n	23fcd1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fcd54:	023ffb0c 	.word	0x023ffb0c
 23fcd58:	023ffcd8 	.word	0x023ffcd8
 23fcd5c:	023ffba4 	.word	0x023ffba4
 23fcd60:	023ffb10 	.word	0x023ffb10

023fcd64 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fcd64:	4b01      	ldr	r3, [pc, #4]	; (23fcd6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fcd66:	4a02      	ldr	r2, [pc, #8]	; (23fcd70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fcd68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fcd6a:	4770      	bx	lr
 23fcd6c:	1007ae70 	.word	0x1007ae70
 23fcd70:	023ffb21 	.word	0x023ffb21

023fcd74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fcd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcd78:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fcd7a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fcd7e:	4604      	mov	r4, r0
 23fcd80:	460e      	mov	r6, r1
 23fcd82:	4617      	mov	r7, r2
 23fcd84:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fcd86:	f000 fc71 	bl	23fd66c <_Z16_fetch_usbserialv>
 23fcd8a:	4581      	cmp	r9, r0
 23fcd8c:	d04d      	beq.n	23fce2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fcd8e:	792b      	ldrb	r3, [r5, #4]
 23fcd90:	0719      	lsls	r1, r3, #28
 23fcd92:	d504      	bpl.n	23fcd9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fcd94:	4620      	mov	r0, r4
 23fcd96:	696a      	ldr	r2, [r5, #20]
 23fcd98:	4954      	ldr	r1, [pc, #336]	; (23fceec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fcd9a:	f7ff faf8 	bl	23fc38e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fcd9e:	f1b8 0f00 	cmp.w	r8, #0
 23fcda2:	d00d      	beq.n	23fcdc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fcda4:	215b      	movs	r1, #91	; 0x5b
 23fcda6:	4620      	mov	r0, r4
 23fcda8:	f7ff fa6c 	bl	23fc284 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fcdac:	4641      	mov	r1, r8
 23fcdae:	4620      	mov	r0, r4
 23fcdb0:	f7ff fa59 	bl	23fc266 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fcdb4:	6823      	ldr	r3, [r4, #0]
 23fcdb6:	2202      	movs	r2, #2
 23fcdb8:	4620      	mov	r0, r4
 23fcdba:	68db      	ldr	r3, [r3, #12]
 23fcdbc:	494c      	ldr	r1, [pc, #304]	; (23fcef0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fcdbe:	4798      	blx	r3
    if (attr.has_file) {
 23fcdc0:	792b      	ldrb	r3, [r5, #4]
 23fcdc2:	07da      	lsls	r2, r3, #31
 23fcdc4:	d524      	bpl.n	23fce10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fcdc6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fcdca:	212f      	movs	r1, #47	; 0x2f
 23fcdcc:	4640      	mov	r0, r8
 23fcdce:	f002 fbc2 	bl	23ff556 <strrchr>
    if (s1) {
 23fcdd2:	b108      	cbz	r0, 23fcdd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fcdd4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fcdd8:	4641      	mov	r1, r8
 23fcdda:	4620      	mov	r0, r4
 23fcddc:	f7ff fa43 	bl	23fc266 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fcde0:	792b      	ldrb	r3, [r5, #4]
 23fcde2:	079b      	lsls	r3, r3, #30
 23fcde4:	d508      	bpl.n	23fcdf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fcde6:	213a      	movs	r1, #58	; 0x3a
 23fcde8:	4620      	mov	r0, r4
 23fcdea:	f7ff fa4b 	bl	23fc284 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fcdee:	4620      	mov	r0, r4
 23fcdf0:	68ea      	ldr	r2, [r5, #12]
 23fcdf2:	4940      	ldr	r1, [pc, #256]	; (23fcef4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fcdf4:	f7ff facb 	bl	23fc38e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fcdf8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fcdfa:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fcdfc:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fce00:	4620      	mov	r0, r4
            write(", ", 2);
 23fce02:	f04f 0202 	mov.w	r2, #2
 23fce06:	68db      	ldr	r3, [r3, #12]
 23fce08:	bf14      	ite	ne
 23fce0a:	493b      	ldrne	r1, [pc, #236]	; (23fcef8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fce0c:	493b      	ldreq	r1, [pc, #236]	; (23fcefc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fce0e:	4798      	blx	r3
    if (attr.has_function) {
 23fce10:	792b      	ldrb	r3, [r5, #4]
 23fce12:	0758      	lsls	r0, r3, #29
 23fce14:	d51d      	bpl.n	23fce52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fce16:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fce18:	460b      	mov	r3, r1
 23fce1a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fce1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fce20:	b160      	cbz	r0, 23fce3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fce22:	2820      	cmp	r0, #32
 23fce24:	d108      	bne.n	23fce38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fce26:	4619      	mov	r1, r3
 23fce28:	e7f7      	b.n	23fce1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fce2a:	4835      	ldr	r0, [pc, #212]	; (23fcf00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fce2c:	f000 f983 	bl	23fd136 <_ZN5spark12NetworkClass9listeningEv>
 23fce30:	2800      	cmp	r0, #0
 23fce32:	d0ac      	beq.n	23fcd8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fce34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fce38:	2828      	cmp	r0, #40	; 0x28
 23fce3a:	d1ee      	bne.n	23fce1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fce3c:	6823      	ldr	r3, [r4, #0]
 23fce3e:	1a52      	subs	r2, r2, r1
 23fce40:	4620      	mov	r0, r4
 23fce42:	68db      	ldr	r3, [r3, #12]
 23fce44:	4798      	blx	r3
        write("(): ", 4);
 23fce46:	6823      	ldr	r3, [r4, #0]
 23fce48:	2204      	movs	r2, #4
 23fce4a:	4620      	mov	r0, r4
 23fce4c:	68db      	ldr	r3, [r3, #12]
 23fce4e:	492d      	ldr	r1, [pc, #180]	; (23fcf04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fce50:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fce52:	2100      	movs	r1, #0
 23fce54:	4638      	mov	r0, r7
 23fce56:	f7fd faa3 	bl	23fa3a0 <log_level_name>
 23fce5a:	4601      	mov	r1, r0
    write(s);
 23fce5c:	4620      	mov	r0, r4
 23fce5e:	f7ff fa02 	bl	23fc266 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fce62:	6823      	ldr	r3, [r4, #0]
 23fce64:	2202      	movs	r2, #2
 23fce66:	4620      	mov	r0, r4
 23fce68:	68db      	ldr	r3, [r3, #12]
 23fce6a:	4924      	ldr	r1, [pc, #144]	; (23fcefc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fce6c:	4798      	blx	r3
    if (msg) {
 23fce6e:	b11e      	cbz	r6, 23fce78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fce70:	4631      	mov	r1, r6
 23fce72:	4620      	mov	r0, r4
 23fce74:	f7ff f9f7 	bl	23fc266 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fce78:	792b      	ldrb	r3, [r5, #4]
 23fce7a:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fce7e:	d02c      	beq.n	23fceda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fce80:	6823      	ldr	r3, [r4, #0]
 23fce82:	4921      	ldr	r1, [pc, #132]	; (23fcf08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fce84:	68db      	ldr	r3, [r3, #12]
 23fce86:	2202      	movs	r2, #2
 23fce88:	4620      	mov	r0, r4
 23fce8a:	4798      	blx	r3
        if (attr.has_code) {
 23fce8c:	792b      	ldrb	r3, [r5, #4]
 23fce8e:	06d9      	lsls	r1, r3, #27
 23fce90:	d50a      	bpl.n	23fcea8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fce92:	6823      	ldr	r3, [r4, #0]
 23fce94:	2207      	movs	r2, #7
 23fce96:	4620      	mov	r0, r4
 23fce98:	491c      	ldr	r1, [pc, #112]	; (23fcf0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fce9a:	68db      	ldr	r3, [r3, #12]
 23fce9c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fce9e:	4620      	mov	r0, r4
 23fcea0:	69aa      	ldr	r2, [r5, #24]
 23fcea2:	491b      	ldr	r1, [pc, #108]	; (23fcf10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fcea4:	f7ff fa73 	bl	23fc38e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fcea8:	792b      	ldrb	r3, [r5, #4]
 23fceaa:	069a      	lsls	r2, r3, #26
 23fceac:	d511      	bpl.n	23fced2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fceae:	06db      	lsls	r3, r3, #27
 23fceb0:	d505      	bpl.n	23fcebe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fceb2:	6823      	ldr	r3, [r4, #0]
 23fceb4:	2202      	movs	r2, #2
 23fceb6:	4620      	mov	r0, r4
 23fceb8:	68db      	ldr	r3, [r3, #12]
 23fceba:	490f      	ldr	r1, [pc, #60]	; (23fcef8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fcebc:	4798      	blx	r3
            write("details = ", 10);
 23fcebe:	6823      	ldr	r3, [r4, #0]
 23fcec0:	4620      	mov	r0, r4
 23fcec2:	4914      	ldr	r1, [pc, #80]	; (23fcf14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fcec4:	220a      	movs	r2, #10
 23fcec6:	68db      	ldr	r3, [r3, #12]
 23fcec8:	4798      	blx	r3
            write(attr.details);
 23fceca:	4620      	mov	r0, r4
 23fcecc:	69e9      	ldr	r1, [r5, #28]
 23fcece:	f7ff f9ca 	bl	23fc266 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fced2:	215d      	movs	r1, #93	; 0x5d
 23fced4:	4620      	mov	r0, r4
 23fced6:	f7ff f9d5 	bl	23fc284 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fceda:	6823      	ldr	r3, [r4, #0]
 23fcedc:	4620      	mov	r0, r4
}
 23fcede:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fcee2:	2202      	movs	r2, #2
 23fcee4:	68db      	ldr	r3, [r3, #12]
 23fcee6:	490c      	ldr	r1, [pc, #48]	; (23fcf18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fcee8:	4718      	bx	r3
 23fceea:	bf00      	nop
 23fceec:	023ffb25 	.word	0x023ffb25
 23fcef0:	023ffb2c 	.word	0x023ffb2c
 23fcef4:	023ffaec 	.word	0x023ffaec
 23fcef8:	023ffb2f 	.word	0x023ffb2f
 23fcefc:	023ffb34 	.word	0x023ffb34
 23fcf00:	1007ae9c 	.word	0x1007ae9c
 23fcf04:	023ffb32 	.word	0x023ffb32
 23fcf08:	023ffb37 	.word	0x023ffb37
 23fcf0c:	023ffb3a 	.word	0x023ffb3a
 23fcf10:	023ffb42 	.word	0x023ffb42
 23fcf14:	023ffb45 	.word	0x023ffb45
 23fcf18:	023ffb50 	.word	0x023ffb50

023fcf1c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fcf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcf20:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fcf22:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fcf24:	460d      	mov	r5, r1
 23fcf26:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fcf28:	f000 fba0 	bl	23fd66c <_Z16_fetch_usbserialv>
 23fcf2c:	4287      	cmp	r7, r0
 23fcf2e:	d007      	beq.n	23fcf40 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fcf30:	6a20      	ldr	r0, [r4, #32]
 23fcf32:	4632      	mov	r2, r6
 23fcf34:	6803      	ldr	r3, [r0, #0]
 23fcf36:	4629      	mov	r1, r5
}
 23fcf38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fcf3c:	68db      	ldr	r3, [r3, #12]
 23fcf3e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fcf40:	4803      	ldr	r0, [pc, #12]	; (23fcf50 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fcf42:	f000 f8f8 	bl	23fd136 <_ZN5spark12NetworkClass9listeningEv>
 23fcf46:	2800      	cmp	r0, #0
 23fcf48:	d0f2      	beq.n	23fcf30 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fcf4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fcf4e:	bf00      	nop
 23fcf50:	1007ae9c 	.word	0x1007ae9c

023fcf54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fcf54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fcf58:	b085      	sub	sp, #20
    return stream_;
 23fcf5a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fcf5e:	4605      	mov	r5, r0
 23fcf60:	460f      	mov	r7, r1
 23fcf62:	4690      	mov	r8, r2
 23fcf64:	461e      	mov	r6, r3
 23fcf66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fcf68:	f000 fb80 	bl	23fd66c <_Z16_fetch_usbserialv>
 23fcf6c:	4581      	cmp	r9, r0
 23fcf6e:	d105      	bne.n	23fcf7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fcf70:	4849      	ldr	r0, [pc, #292]	; (23fd098 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fcf72:	f000 f8e0 	bl	23fd136 <_ZN5spark12NetworkClass9listeningEv>
 23fcf76:	2800      	cmp	r0, #0
 23fcf78:	f040 808a 	bne.w	23fd090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fcf7c:	f04f 0900 	mov.w	r9, #0
 23fcf80:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fcf82:	4a46      	ldr	r2, [pc, #280]	; (23fd09c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fcf84:	a801      	add	r0, sp, #4
 23fcf86:	9201      	str	r2, [sp, #4]
 23fcf88:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fcf8a:	f88d 9008 	strb.w	r9, [sp, #8]
 23fcf8e:	f7ff f846 	bl	23fc01e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fcf92:	4649      	mov	r1, r9
 23fcf94:	4640      	mov	r0, r8
 23fcf96:	f7fd fa03 	bl	23fa3a0 <log_level_name>
 23fcf9a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fcf9c:	4940      	ldr	r1, [pc, #256]	; (23fd0a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fcf9e:	2201      	movs	r2, #1
 23fcfa0:	a801      	add	r0, sp, #4
 23fcfa2:	f7ff f8cb 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fcfa6:	4641      	mov	r1, r8
 23fcfa8:	f7ff f94f 	bl	23fc24a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fcfac:	b13f      	cbz	r7, 23fcfbe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fcfae:	493d      	ldr	r1, [pc, #244]	; (23fd0a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fcfb0:	2201      	movs	r2, #1
 23fcfb2:	a801      	add	r0, sp, #4
 23fcfb4:	f7ff f8c2 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fcfb8:	4639      	mov	r1, r7
 23fcfba:	f7ff f946 	bl	23fc24a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fcfbe:	b13e      	cbz	r6, 23fcfd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fcfc0:	4939      	ldr	r1, [pc, #228]	; (23fd0a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fcfc2:	2201      	movs	r2, #1
 23fcfc4:	a801      	add	r0, sp, #4
 23fcfc6:	f7ff f8b9 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fcfca:	4631      	mov	r1, r6
 23fcfcc:	f7ff f93d 	bl	23fc24a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fcfd0:	7923      	ldrb	r3, [r4, #4]
 23fcfd2:	07df      	lsls	r7, r3, #31
 23fcfd4:	d50e      	bpl.n	23fcff4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fcfd6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fcfd8:	212f      	movs	r1, #47	; 0x2f
 23fcfda:	4630      	mov	r0, r6
 23fcfdc:	f002 fabb 	bl	23ff556 <strrchr>
    if (s1) {
 23fcfe0:	b100      	cbz	r0, 23fcfe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fcfe2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fcfe4:	4931      	ldr	r1, [pc, #196]	; (23fd0ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fcfe6:	2201      	movs	r2, #1
 23fcfe8:	a801      	add	r0, sp, #4
 23fcfea:	f7ff f8a7 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fcfee:	4631      	mov	r1, r6
 23fcff0:	f7ff f92b 	bl	23fc24a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fcff4:	7923      	ldrb	r3, [r4, #4]
 23fcff6:	079e      	lsls	r6, r3, #30
 23fcff8:	d507      	bpl.n	23fd00a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fcffa:	492d      	ldr	r1, [pc, #180]	; (23fd0b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fcffc:	2202      	movs	r2, #2
 23fcffe:	a801      	add	r0, sp, #4
 23fd000:	f7ff f89c 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd004:	68e1      	ldr	r1, [r4, #12]
 23fd006:	f7ff f817 	bl	23fc038 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd00a:	7923      	ldrb	r3, [r4, #4]
 23fd00c:	0758      	lsls	r0, r3, #29
 23fd00e:	d514      	bpl.n	23fd03a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd010:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd012:	4633      	mov	r3, r6
 23fd014:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd016:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd01a:	b12a      	cbz	r2, 23fd028 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd01c:	2a20      	cmp	r2, #32
 23fd01e:	d101      	bne.n	23fd024 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd020:	461e      	mov	r6, r3
 23fd022:	e7f7      	b.n	23fd014 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd024:	2a28      	cmp	r2, #40	; 0x28
 23fd026:	d1f5      	bne.n	23fd014 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd028:	2202      	movs	r2, #2
 23fd02a:	4922      	ldr	r1, [pc, #136]	; (23fd0b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd02c:	a801      	add	r0, sp, #4
 23fd02e:	f7ff f885 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd032:	4631      	mov	r1, r6
 23fd034:	1bba      	subs	r2, r7, r6
 23fd036:	f7ff f891 	bl	23fc15c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd03a:	7923      	ldrb	r3, [r4, #4]
 23fd03c:	0719      	lsls	r1, r3, #28
 23fd03e:	d507      	bpl.n	23fd050 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd040:	491d      	ldr	r1, [pc, #116]	; (23fd0b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd042:	2201      	movs	r2, #1
 23fd044:	a801      	add	r0, sp, #4
 23fd046:	f7ff f879 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd04a:	6961      	ldr	r1, [r4, #20]
 23fd04c:	f7ff f806 	bl	23fc05c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd050:	7923      	ldrb	r3, [r4, #4]
 23fd052:	06da      	lsls	r2, r3, #27
 23fd054:	d508      	bpl.n	23fd068 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd056:	2204      	movs	r2, #4
 23fd058:	4918      	ldr	r1, [pc, #96]	; (23fd0bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd05a:	eb0d 0002 	add.w	r0, sp, r2
 23fd05e:	f7ff f86d 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd062:	69a1      	ldr	r1, [r4, #24]
 23fd064:	f7fe ffe8 	bl	23fc038 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd068:	7923      	ldrb	r3, [r4, #4]
 23fd06a:	069b      	lsls	r3, r3, #26
 23fd06c:	d507      	bpl.n	23fd07e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd06e:	4914      	ldr	r1, [pc, #80]	; (23fd0c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd070:	2206      	movs	r2, #6
 23fd072:	a801      	add	r0, sp, #4
 23fd074:	f7ff f862 	bl	23fc13c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd078:	69e1      	ldr	r1, [r4, #28]
 23fd07a:	f7ff f8e6 	bl	23fc24a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd07e:	a801      	add	r0, sp, #4
 23fd080:	f7fe ffb7 	bl	23fbff2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd084:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd086:	2202      	movs	r2, #2
 23fd088:	6803      	ldr	r3, [r0, #0]
 23fd08a:	490e      	ldr	r1, [pc, #56]	; (23fd0c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd08c:	68db      	ldr	r3, [r3, #12]
 23fd08e:	4798      	blx	r3
}
 23fd090:	b005      	add	sp, #20
 23fd092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd096:	bf00      	nop
 23fd098:	1007ae9c 	.word	0x1007ae9c
 23fd09c:	023ffb74 	.word	0x023ffb74
 23fd0a0:	023ffb02 	.word	0x023ffb02
 23fd0a4:	023ffb53 	.word	0x023ffb53
 23fd0a8:	023ffec6 	.word	0x023ffec6
 23fd0ac:	023ff7cc 	.word	0x023ff7cc
 23fd0b0:	023ffb55 	.word	0x023ffb55
 23fd0b4:	023ffb58 	.word	0x023ffb58
 23fd0b8:	023ffb5b 	.word	0x023ffb5b
 23fd0bc:	023ffb5d 	.word	0x023ffb5d
 23fd0c0:	023ffb62 	.word	0x023ffb62
 23fd0c4:	023ffb50 	.word	0x023ffb50

023fd0c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd0c8:	2300      	movs	r3, #0
 23fd0ca:	6840      	ldr	r0, [r0, #4]
 23fd0cc:	461a      	mov	r2, r3
 23fd0ce:	f7fd b9d7 	b.w	23fa480 <network_connect>

023fd0d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd0d2:	2200      	movs	r2, #0
 23fd0d4:	2102      	movs	r1, #2
 23fd0d6:	6840      	ldr	r0, [r0, #4]
 23fd0d8:	f7fd b9ee 	b.w	23fa4b8 <network_disconnect>

023fd0dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd0dc:	2200      	movs	r2, #0
 23fd0de:	6840      	ldr	r0, [r0, #4]
 23fd0e0:	4611      	mov	r1, r2
 23fd0e2:	f7fd b9db 	b.w	23fa49c <network_connecting>

023fd0e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd0e6:	2200      	movs	r2, #0
 23fd0e8:	6840      	ldr	r0, [r0, #4]
 23fd0ea:	4611      	mov	r1, r2
 23fd0ec:	f7fd b9f2 	b.w	23fa4d4 <network_ready>

023fd0f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd0f0:	2300      	movs	r3, #0
 23fd0f2:	6840      	ldr	r0, [r0, #4]
 23fd0f4:	461a      	mov	r2, r3
 23fd0f6:	4619      	mov	r1, r3
 23fd0f8:	f7fd b9fa 	b.w	23fa4f0 <network_on>

023fd0fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd0fc:	2300      	movs	r3, #0
 23fd0fe:	6840      	ldr	r0, [r0, #4]
 23fd100:	461a      	mov	r2, r3
 23fd102:	4619      	mov	r1, r3
 23fd104:	f7fd ba02 	b.w	23fa50c <network_off>

023fd108 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd108:	2100      	movs	r1, #0
 23fd10a:	6840      	ldr	r0, [r0, #4]
 23fd10c:	f7fd ba44 	b.w	23fa598 <network_is_on>

023fd110 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd110:	2100      	movs	r1, #0
 23fd112:	6840      	ldr	r0, [r0, #4]
 23fd114:	f7fd ba4e 	b.w	23fa5b4 <network_is_off>

023fd118 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd118:	2200      	movs	r2, #0
 23fd11a:	6840      	ldr	r0, [r0, #4]
 23fd11c:	f081 0101 	eor.w	r1, r1, #1
 23fd120:	f7fd ba02 	b.w	23fa528 <network_listen>

023fd124 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fd124:	2200      	movs	r2, #0
 23fd126:	6840      	ldr	r0, [r0, #4]
 23fd128:	f7fd ba1a 	b.w	23fa560 <network_set_listen_timeout>

023fd12c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fd12c:	2200      	movs	r2, #0
 23fd12e:	6840      	ldr	r0, [r0, #4]
 23fd130:	4611      	mov	r1, r2
 23fd132:	f7fd ba23 	b.w	23fa57c <network_get_listen_timeout>

023fd136 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fd136:	2200      	movs	r2, #0
 23fd138:	6840      	ldr	r0, [r0, #4]
 23fd13a:	4611      	mov	r1, r2
 23fd13c:	f7fd ba02 	b.w	23fa544 <network_listening>

023fd140 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fd140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd144:	b095      	sub	sp, #84	; 0x54
 23fd146:	4614      	mov	r4, r2
 23fd148:	460d      	mov	r5, r1
 23fd14a:	4607      	mov	r7, r0
    IPAddress addr;
 23fd14c:	f7fe fe00 	bl	23fbd50 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fd150:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fd152:	221c      	movs	r2, #28
 23fd154:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fd156:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fd158:	f002 f987 	bl	23ff46a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fd15c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd15e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fd160:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd162:	2100      	movs	r1, #0
 23fd164:	466b      	mov	r3, sp
 23fd166:	aa0c      	add	r2, sp, #48	; 0x30
 23fd168:	f7fc ff84 	bl	23fa074 <netdb_getaddrinfo>
    if (!r) {
 23fd16c:	4604      	mov	r4, r0
 23fd16e:	2800      	cmp	r0, #0
 23fd170:	d14b      	bne.n	23fd20a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd172:	4602      	mov	r2, r0
 23fd174:	2101      	movs	r1, #1
 23fd176:	6868      	ldr	r0, [r5, #4]
 23fd178:	f7fd f9ac 	bl	23fa4d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd17c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd17e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd180:	4622      	mov	r2, r4
 23fd182:	6868      	ldr	r0, [r5, #4]
 23fd184:	f7fd f9a6 	bl	23fa4d4 <network_ready>
        bool ok = false;
 23fd188:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd18a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd18c:	9e00      	ldr	r6, [sp, #0]
 23fd18e:	2e00      	cmp	r6, #0
 23fd190:	d03b      	beq.n	23fd20a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fd192:	2900      	cmp	r1, #0
 23fd194:	d139      	bne.n	23fd20a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fd196:	6873      	ldr	r3, [r6, #4]
 23fd198:	2b02      	cmp	r3, #2
 23fd19a:	d003      	beq.n	23fd1a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fd19c:	2b0a      	cmp	r3, #10
 23fd19e:	d011      	beq.n	23fd1c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd1a0:	69f6      	ldr	r6, [r6, #28]
 23fd1a2:	e7f4      	b.n	23fd18e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fd1a4:	f1b8 0f00 	cmp.w	r8, #0
 23fd1a8:	d0fa      	beq.n	23fd1a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fd1aa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fd1ac:	a806      	add	r0, sp, #24
 23fd1ae:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fd1b0:	1d3c      	adds	r4, r7, #4
 23fd1b2:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fd1b4:	f7fe fdfa 	bl	23fbdac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fd1b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd1ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd1bc:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd1be:	4641      	mov	r1, r8
 23fd1c0:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fd1c2:	e7ed      	b.n	23fd1a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fd1c4:	f1b9 0f00 	cmp.w	r9, #0
 23fd1c8:	d0ea      	beq.n	23fd1a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fd1ca:	2210      	movs	r2, #16
 23fd1cc:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fd1ce:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fd1d0:	f002 f94b 	bl	23ff46a <memset>
                    a.v = 6;
 23fd1d4:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd1d6:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fd1d8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd1dc:	f104 0308 	add.w	r3, r4, #8
 23fd1e0:	3418      	adds	r4, #24
 23fd1e2:	462a      	mov	r2, r5
 23fd1e4:	6818      	ldr	r0, [r3, #0]
 23fd1e6:	6859      	ldr	r1, [r3, #4]
 23fd1e8:	3308      	adds	r3, #8
 23fd1ea:	c203      	stmia	r2!, {r0, r1}
 23fd1ec:	42a3      	cmp	r3, r4
 23fd1ee:	4615      	mov	r5, r2
 23fd1f0:	d1f7      	bne.n	23fd1e2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fd1f2:	a901      	add	r1, sp, #4
 23fd1f4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fd1f6:	1d3c      	adds	r4, r7, #4
 23fd1f8:	ad07      	add	r5, sp, #28
 23fd1fa:	f7fe fdb7 	bl	23fbd6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fd1fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd202:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd204:	4649      	mov	r1, r9
 23fd206:	7023      	strb	r3, [r4, #0]
                    break;
 23fd208:	e7ca      	b.n	23fd1a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fd20a:	9800      	ldr	r0, [sp, #0]
 23fd20c:	f7fc ff24 	bl	23fa058 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fd210:	4638      	mov	r0, r7
 23fd212:	b015      	add	sp, #84	; 0x54
 23fd214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd218 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fd218:	4b02      	ldr	r3, [pc, #8]	; (23fd224 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fd21a:	4a03      	ldr	r2, [pc, #12]	; (23fd228 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fd21c:	601a      	str	r2, [r3, #0]
 23fd21e:	2200      	movs	r2, #0
 23fd220:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fd222:	4770      	bx	lr
 23fd224:	1007ae9c 	.word	0x1007ae9c
 23fd228:	023ffbec 	.word	0x023ffbec

023fd22c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd22e:	4606      	mov	r6, r0
 23fd230:	460d      	mov	r5, r1
  size_t n = 0;
 23fd232:	2400      	movs	r4, #0
 23fd234:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd236:	42bd      	cmp	r5, r7
 23fd238:	d00c      	beq.n	23fd254 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd23a:	6833      	ldr	r3, [r6, #0]
 23fd23c:	4630      	mov	r0, r6
 23fd23e:	689b      	ldr	r3, [r3, #8]
 23fd240:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd244:	4798      	blx	r3
     if (chunk>=0)
 23fd246:	1e03      	subs	r3, r0, #0
 23fd248:	db01      	blt.n	23fd24e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd24a:	441c      	add	r4, r3
  while (size--) {
 23fd24c:	e7f3      	b.n	23fd236 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd24e:	2c00      	cmp	r4, #0
 23fd250:	bf08      	it	eq
 23fd252:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd254:	4620      	mov	r0, r4
 23fd256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd258 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd258:	b513      	push	{r0, r1, r4, lr}
 23fd25a:	4604      	mov	r4, r0
    }
 23fd25c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd25e:	b159      	cbz	r1, 23fd278 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd260:	9101      	str	r1, [sp, #4]
 23fd262:	f7fc f8eb 	bl	23f943c <strlen>
 23fd266:	4602      	mov	r2, r0
 23fd268:	4620      	mov	r0, r4
 23fd26a:	6823      	ldr	r3, [r4, #0]
 23fd26c:	9901      	ldr	r1, [sp, #4]
 23fd26e:	68db      	ldr	r3, [r3, #12]
    }
 23fd270:	b002      	add	sp, #8
 23fd272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd276:	4718      	bx	r3
    }
 23fd278:	b002      	add	sp, #8
 23fd27a:	bd10      	pop	{r4, pc}

023fd27c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd27c:	6803      	ldr	r3, [r0, #0]
 23fd27e:	689b      	ldr	r3, [r3, #8]
 23fd280:	4718      	bx	r3

023fd282 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd282:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd284:	2a01      	cmp	r2, #1
 23fd286:	bf98      	it	ls
 23fd288:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd28a:	b530      	push	{r4, r5, lr}
 23fd28c:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd28e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd292:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd294:	460d      	mov	r5, r1
 23fd296:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd29a:	fb01 5312 	mls	r3, r1, r2, r5
 23fd29e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd2a2:	2b09      	cmp	r3, #9
 23fd2a4:	bf94      	ite	ls
 23fd2a6:	3330      	addls	r3, #48	; 0x30
 23fd2a8:	3337      	addhi	r3, #55	; 0x37
 23fd2aa:	b2db      	uxtb	r3, r3
  } while(n);
 23fd2ac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd2ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd2b2:	d9ef      	bls.n	23fd294 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd2b4:	4621      	mov	r1, r4
 23fd2b6:	f7ff ffcf 	bl	23fd258 <_ZN5Print5writeEPKc>
}
 23fd2ba:	b00b      	add	sp, #44	; 0x2c
 23fd2bc:	bd30      	pop	{r4, r5, pc}
	...

023fd2c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fd2c0:	2200      	movs	r2, #0
 23fd2c2:	4b01      	ldr	r3, [pc, #4]	; (23fd2c8 <_GLOBAL__sub_I_RGB+0x8>)
 23fd2c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd2c6:	4770      	bx	lr
 23fd2c8:	1007aea4 	.word	0x1007aea4

023fd2cc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd2cc:	2100      	movs	r1, #0
 23fd2ce:	f7fc bf33 	b.w	23fa138 <hal_spi_release>

023fd2d2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd2d2:	2100      	movs	r1, #0
 23fd2d4:	f7fc bf22 	b.w	23fa11c <hal_spi_acquire>

023fd2d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd2d8:	b510      	push	{r4, lr}
 23fd2da:	4604      	mov	r4, r0
 23fd2dc:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd2de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd2e0:	f7fc ff00 	bl	23fa0e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd2e4:	2300      	movs	r3, #0
}
 23fd2e6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd2e8:	6063      	str	r3, [r4, #4]
}
 23fd2ea:	bd10      	pop	{r4, pc}

023fd2ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd2ec:	b513      	push	{r0, r1, r4, lr}
 23fd2ee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd2f0:	7800      	ldrb	r0, [r0, #0]
 23fd2f2:	f7ff ffee 	bl	23fd2d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd2f6:	b958      	cbnz	r0, 23fd310 <_ZN8SPIClass5beginEv+0x24>
 23fd2f8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd2fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd2fe:	9001      	str	r0, [sp, #4]
 23fd300:	f7fc fec6 	bl	23fa090 <hal_spi_begin>
        unlock();
 23fd304:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd306:	b002      	add	sp, #8
 23fd308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd30c:	f7ff bfde 	b.w	23fd2cc <_ZN8SPIClass6unlockEv.isra.0>
 23fd310:	b002      	add	sp, #8
 23fd312:	bd10      	pop	{r4, pc}

023fd314 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fd314:	b513      	push	{r0, r1, r4, lr}
 23fd316:	4604      	mov	r4, r0
    if (!lock())
 23fd318:	7800      	ldrb	r0, [r0, #0]
{
 23fd31a:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fd31c:	f7ff ffd9 	bl	23fd2d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd320:	9901      	ldr	r1, [sp, #4]
 23fd322:	b948      	cbnz	r0, 23fd338 <_ZN8SPIClass11setDataModeEh+0x24>
 23fd324:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fd326:	9001      	str	r0, [sp, #4]
 23fd328:	f7fc fec0 	bl	23fa0ac <hal_spi_set_data_mode>
        unlock();
 23fd32c:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd32e:	b002      	add	sp, #8
 23fd330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd334:	f7ff bfca 	b.w	23fd2cc <_ZN8SPIClass6unlockEv.isra.0>
 23fd338:	b002      	add	sp, #8
 23fd33a:	bd10      	pop	{r4, pc}

023fd33c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fd33c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd33e:	7800      	ldrb	r0, [r0, #0]
 23fd340:	f7fc fec2 	bl	23fa0c8 <hal_spi_transfer>
}
 23fd344:	b2c0      	uxtb	r0, r0
 23fd346:	bd08      	pop	{r3, pc}

023fd348 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fd348:	b510      	push	{r4, lr}
 23fd34a:	4604      	mov	r4, r0
{
	free(buffer);
 23fd34c:	6800      	ldr	r0, [r0, #0]
 23fd34e:	f7fd f94d 	bl	23fa5ec <free>
}
 23fd352:	4620      	mov	r0, r4
 23fd354:	bd10      	pop	{r4, pc}

023fd356 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fd356:	b510      	push	{r4, lr}
 23fd358:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fd35a:	6800      	ldr	r0, [r0, #0]
 23fd35c:	b108      	cbz	r0, 23fd362 <_ZN6String10invalidateEv+0xc>
 23fd35e:	f7fd f945 	bl	23fa5ec <free>
	buffer = NULL;
 23fd362:	2300      	movs	r3, #0
	capacity = len = 0;
 23fd364:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fd368:	6023      	str	r3, [r4, #0]
}
 23fd36a:	bd10      	pop	{r4, pc}

023fd36c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd36c:	b538      	push	{r3, r4, r5, lr}
 23fd36e:	4604      	mov	r4, r0
 23fd370:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd372:	6800      	ldr	r0, [r0, #0]
 23fd374:	3101      	adds	r1, #1
 23fd376:	f7fd f947 	bl	23fa608 <realloc>
	if (newbuffer) {
 23fd37a:	b110      	cbz	r0, 23fd382 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fd37c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fd380:	2001      	movs	r0, #1
	}
	return 0;
}
 23fd382:	bd38      	pop	{r3, r4, r5, pc}

023fd384 <_ZN6String7reserveEj>:
{
 23fd384:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fd386:	6803      	ldr	r3, [r0, #0]
{
 23fd388:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fd38a:	b123      	cbz	r3, 23fd396 <_ZN6String7reserveEj+0x12>
 23fd38c:	6843      	ldr	r3, [r0, #4]
 23fd38e:	428b      	cmp	r3, r1
 23fd390:	d301      	bcc.n	23fd396 <_ZN6String7reserveEj+0x12>
 23fd392:	2001      	movs	r0, #1
}
 23fd394:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fd396:	4620      	mov	r0, r4
 23fd398:	f7ff ffe8 	bl	23fd36c <_ZN6String12changeBufferEj>
 23fd39c:	2800      	cmp	r0, #0
 23fd39e:	d0f9      	beq.n	23fd394 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fd3a0:	68a3      	ldr	r3, [r4, #8]
 23fd3a2:	2b00      	cmp	r3, #0
 23fd3a4:	d1f5      	bne.n	23fd392 <_ZN6String7reserveEj+0xe>
 23fd3a6:	6822      	ldr	r2, [r4, #0]
 23fd3a8:	7013      	strb	r3, [r2, #0]
 23fd3aa:	e7f2      	b.n	23fd392 <_ZN6String7reserveEj+0xe>

023fd3ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd3ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fd3b0:	4611      	mov	r1, r2
 23fd3b2:	9201      	str	r2, [sp, #4]
{
 23fd3b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fd3b6:	f7ff ffe5 	bl	23fd384 <_ZN6String7reserveEj>
 23fd3ba:	9a01      	ldr	r2, [sp, #4]
 23fd3bc:	b928      	cbnz	r0, 23fd3ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fd3be:	4620      	mov	r0, r4
 23fd3c0:	f7ff ffc9 	bl	23fd356 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fd3c4:	4620      	mov	r0, r4
 23fd3c6:	b003      	add	sp, #12
 23fd3c8:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fd3ca:	4629      	mov	r1, r5
	len = length;
 23fd3cc:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fd3ce:	6820      	ldr	r0, [r4, #0]
 23fd3d0:	f002 f824 	bl	23ff41c <memcpy>
	buffer[len] = 0;
 23fd3d4:	2100      	movs	r1, #0
 23fd3d6:	6822      	ldr	r2, [r4, #0]
 23fd3d8:	68a3      	ldr	r3, [r4, #8]
 23fd3da:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fd3dc:	e7f2      	b.n	23fd3c4 <_ZN6String4copyEPKcj+0x18>

023fd3de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fd3de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fd3e0:	b513      	push	{r0, r1, r4, lr}
 23fd3e2:	4604      	mov	r4, r0
	capacity = 0;
 23fd3e4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd3e8:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd3ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fd3ec:	b141      	cbz	r1, 23fd400 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fd3ee:	4608      	mov	r0, r1
 23fd3f0:	9101      	str	r1, [sp, #4]
 23fd3f2:	f7fc f823 	bl	23f943c <strlen>
 23fd3f6:	9901      	ldr	r1, [sp, #4]
 23fd3f8:	4602      	mov	r2, r0
 23fd3fa:	4620      	mov	r0, r4
 23fd3fc:	f7ff ffd6 	bl	23fd3ac <_ZN6String4copyEPKcj>
}
 23fd400:	4620      	mov	r0, r4
 23fd402:	b002      	add	sp, #8
 23fd404:	bd10      	pop	{r4, pc}

023fd406 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd406:	b538      	push	{r3, r4, r5, lr}
 23fd408:	4605      	mov	r5, r0
	if (buffer) {
 23fd40a:	6800      	ldr	r0, [r0, #0]
{
 23fd40c:	460c      	mov	r4, r1
	if (buffer) {
 23fd40e:	b170      	cbz	r0, 23fd42e <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fd410:	686a      	ldr	r2, [r5, #4]
 23fd412:	688b      	ldr	r3, [r1, #8]
 23fd414:	429a      	cmp	r2, r3
 23fd416:	d308      	bcc.n	23fd42a <_ZN6String4moveERS_+0x24>
 23fd418:	6809      	ldr	r1, [r1, #0]
 23fd41a:	b131      	cbz	r1, 23fd42a <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fd41c:	f002 f873 	bl	23ff506 <strcpy>
			len = rhs.len;
 23fd420:	68a3      	ldr	r3, [r4, #8]
 23fd422:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fd424:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fd426:	60a3      	str	r3, [r4, #8]
}
 23fd428:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fd42a:	f7fd f8df 	bl	23fa5ec <free>
	buffer = rhs.buffer;
 23fd42e:	6823      	ldr	r3, [r4, #0]
 23fd430:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fd432:	6863      	ldr	r3, [r4, #4]
 23fd434:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fd436:	68a3      	ldr	r3, [r4, #8]
 23fd438:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fd43a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fd43c:	e9c4 3300 	strd	r3, r3, [r4]
 23fd440:	e7f1      	b.n	23fd426 <_ZN6String4moveERS_+0x20>

023fd442 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fd442:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd444:	b510      	push	{r4, lr}
 23fd446:	4604      	mov	r4, r0
	capacity = 0;
 23fd448:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd44c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd44e:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fd450:	f7ff ffd9 	bl	23fd406 <_ZN6String4moveERS_>
}
 23fd454:	4620      	mov	r0, r4
 23fd456:	bd10      	pop	{r4, pc}

023fd458 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fd458:	4288      	cmp	r0, r1
{
 23fd45a:	b510      	push	{r4, lr}
 23fd45c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fd45e:	d005      	beq.n	23fd46c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fd460:	680b      	ldr	r3, [r1, #0]
 23fd462:	b12b      	cbz	r3, 23fd470 <_ZN6StringaSERKS_+0x18>
 23fd464:	688a      	ldr	r2, [r1, #8]
 23fd466:	4619      	mov	r1, r3
 23fd468:	f7ff ffa0 	bl	23fd3ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fd46c:	4620      	mov	r0, r4
 23fd46e:	bd10      	pop	{r4, pc}
	else invalidate();
 23fd470:	f7ff ff71 	bl	23fd356 <_ZN6String10invalidateEv>
 23fd474:	e7fa      	b.n	23fd46c <_ZN6StringaSERKS_+0x14>

023fd476 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fd476:	2300      	movs	r3, #0
String::String(const String &value)
 23fd478:	b510      	push	{r4, lr}
 23fd47a:	4604      	mov	r4, r0
	capacity = 0;
 23fd47c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd480:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd482:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fd484:	f7ff ffe8 	bl	23fd458 <_ZN6StringaSERKS_>
}
 23fd488:	4620      	mov	r0, r4
 23fd48a:	bd10      	pop	{r4, pc}

023fd48c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fd48c:	b513      	push	{r0, r1, r4, lr}
 23fd48e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23fd490:	b159      	cbz	r1, 23fd4aa <_ZN6StringaSEPKc+0x1e>
 23fd492:	4608      	mov	r0, r1
 23fd494:	9101      	str	r1, [sp, #4]
 23fd496:	f7fb ffd1 	bl	23f943c <strlen>
 23fd49a:	9901      	ldr	r1, [sp, #4]
 23fd49c:	4602      	mov	r2, r0
 23fd49e:	4620      	mov	r0, r4
 23fd4a0:	f7ff ff84 	bl	23fd3ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fd4a4:	4620      	mov	r0, r4
 23fd4a6:	b002      	add	sp, #8
 23fd4a8:	bd10      	pop	{r4, pc}
	else invalidate();
 23fd4aa:	f7ff ff54 	bl	23fd356 <_ZN6String10invalidateEv>
 23fd4ae:	e7f9      	b.n	23fd4a4 <_ZN6StringaSEPKc+0x18>

023fd4b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd4b0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd4b2:	2000      	movs	r0, #0
 23fd4b4:	4b04      	ldr	r3, [pc, #16]	; (23fd4c8 <_GLOBAL__sub_I_System+0x18>)
 23fd4b6:	601a      	str	r2, [r3, #0]
 23fd4b8:	4b04      	ldr	r3, [pc, #16]	; (23fd4cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd4ba:	4a05      	ldr	r2, [pc, #20]	; (23fd4d0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd4bc:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd4c0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd4c2:	f7fc bf89 	b.w	23fa3d8 <set_system_mode>
 23fd4c6:	bf00      	nop
 23fd4c8:	1007aec0 	.word	0x1007aec0
 23fd4cc:	1007aeb4 	.word	0x1007aeb4
 23fd4d0:	ffff0000 	.word	0xffff0000

023fd4d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd4d4:	4b02      	ldr	r3, [pc, #8]	; (23fd4e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd4d6:	681a      	ldr	r2, [r3, #0]
 23fd4d8:	4b02      	ldr	r3, [pc, #8]	; (23fd4e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd4da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fd4dc:	4770      	bx	lr
 23fd4de:	bf00      	nop
 23fd4e0:	10079d7c 	.word	0x10079d7c
 23fd4e4:	1007aec4 	.word	0x1007aec4

023fd4e8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fd4e8:	4770      	bx	lr

023fd4ea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd4ea:	7441      	strb	r1, [r0, #17]
}
 23fd4ec:	4770      	bx	lr

023fd4ee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fd4ee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fd4f0:	7c00      	ldrb	r0, [r0, #16]
 23fd4f2:	f7fc fe91 	bl	23fa218 <hal_usart_available_data_for_write>
}
 23fd4f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd4fa:	bd08      	pop	{r3, pc}

023fd4fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fd4fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fd4fe:	7c00      	ldrb	r0, [r0, #16]
 23fd500:	f7fc fe44 	bl	23fa18c <hal_usart_available>
}
 23fd504:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd508:	bd08      	pop	{r3, pc}

023fd50a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fd50a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fd50c:	7c00      	ldrb	r0, [r0, #16]
 23fd50e:	f7fc fe59 	bl	23fa1c4 <hal_usart_peek>
}
 23fd512:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd516:	bd08      	pop	{r3, pc}

023fd518 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fd518:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fd51a:	7c00      	ldrb	r0, [r0, #16]
 23fd51c:	f7fc fe44 	bl	23fa1a8 <hal_usart_read>
}
 23fd520:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd524:	bd08      	pop	{r3, pc}

023fd526 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fd526:	7c00      	ldrb	r0, [r0, #16]
 23fd528:	f7fc be5a 	b.w	23fa1e0 <hal_usart_flush>

023fd52c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fd52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd52e:	7c45      	ldrb	r5, [r0, #17]
{
 23fd530:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd532:	b12d      	cbz	r5, 23fd540 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fd534:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fd536:	b003      	add	sp, #12
 23fd538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fd53c:	f7fc be18 	b.w	23fa170 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd540:	7c00      	ldrb	r0, [r0, #16]
 23fd542:	9101      	str	r1, [sp, #4]
 23fd544:	f7fc fe68 	bl	23fa218 <hal_usart_available_data_for_write>
 23fd548:	2800      	cmp	r0, #0
 23fd54a:	9901      	ldr	r1, [sp, #4]
 23fd54c:	dcf2      	bgt.n	23fd534 <_ZN11USARTSerial5writeEh+0x8>
}
 23fd54e:	4628      	mov	r0, r5
 23fd550:	b003      	add	sp, #12
 23fd552:	bd30      	pop	{r4, r5, pc}

023fd554 <_ZN11USARTSerialD0Ev>:
 23fd554:	b510      	push	{r4, lr}
 23fd556:	4604      	mov	r4, r0
 23fd558:	2114      	movs	r1, #20
 23fd55a:	f7fb ff98 	bl	23f948e <_ZdlPvj>
 23fd55e:	4620      	mov	r0, r4
 23fd560:	bd10      	pop	{r4, pc}
	...

023fd564 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fd564:	b510      	push	{r4, lr}
 23fd566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd56a:	4604      	mov	r4, r0
 23fd56c:	4608      	mov	r0, r1
 23fd56e:	4611      	mov	r1, r2
 23fd570:	2200      	movs	r2, #0
 23fd572:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd576:	4b04      	ldr	r3, [pc, #16]	; (23fd588 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fd578:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fd57a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd57c:	2301      	movs	r3, #1
 23fd57e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fd580:	f7fc fe66 	bl	23fa250 <hal_usart_init_ex>
}
 23fd584:	4620      	mov	r0, r4
 23fd586:	bd10      	pop	{r4, pc}
 23fd588:	023ffc44 	.word	0x023ffc44

023fd58c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fd58c:	2300      	movs	r3, #0
 23fd58e:	7c00      	ldrb	r0, [r0, #16]
 23fd590:	f7fc be50 	b.w	23fa234 <hal_usart_begin_config>

023fd594 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fd594:	2200      	movs	r2, #0
 23fd596:	f7ff bff9 	b.w	23fd58c <_ZN11USARTSerial5beginEmm>

023fd59a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fd59a:	7c00      	ldrb	r0, [r0, #16]
 23fd59c:	f7fc bdda 	b.w	23fa154 <hal_usart_end>

023fd5a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fd5a0:	7c00      	ldrb	r0, [r0, #16]
 23fd5a2:	f7fc be2b 	b.w	23fa1fc <hal_usart_is_enabled>

023fd5a6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd5a6:	7441      	strb	r1, [r0, #17]
}
 23fd5a8:	4770      	bx	lr

023fd5aa <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd5aa:	4770      	bx	lr

023fd5ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fd5ac:	4770      	bx	lr

023fd5ae <_ZN9USBSerial4readEv>:
{
 23fd5ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fd5b0:	2100      	movs	r1, #0
 23fd5b2:	7c00      	ldrb	r0, [r0, #16]
 23fd5b4:	f7fc fea0 	bl	23fa2f8 <HAL_USB_USART_Receive_Data>
}
 23fd5b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd5bc:	bd08      	pop	{r3, pc}

023fd5be <_ZN9USBSerial4peekEv>:
{
 23fd5be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fd5c0:	2101      	movs	r1, #1
 23fd5c2:	7c00      	ldrb	r0, [r0, #16]
 23fd5c4:	f7fc fe98 	bl	23fa2f8 <HAL_USB_USART_Receive_Data>
}
 23fd5c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd5cc:	bd08      	pop	{r3, pc}

023fd5ce <_ZN9USBSerial17availableForWriteEv>:
{
 23fd5ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fd5d0:	7c00      	ldrb	r0, [r0, #16]
 23fd5d2:	f7fc fe83 	bl	23fa2dc <HAL_USB_USART_Available_Data_For_Write>
}
 23fd5d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd5da:	bd08      	pop	{r3, pc}

023fd5dc <_ZN9USBSerial9availableEv>:
{
 23fd5dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fd5de:	7c00      	ldrb	r0, [r0, #16]
 23fd5e0:	f7fc fe6e 	bl	23fa2c0 <HAL_USB_USART_Available_Data>
}
 23fd5e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd5e8:	bd08      	pop	{r3, pc}

023fd5ea <_ZN9USBSerial5writeEh>:
{
 23fd5ea:	b513      	push	{r0, r1, r4, lr}
 23fd5ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd5ee:	7c00      	ldrb	r0, [r0, #16]
{
 23fd5f0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd5f2:	f7fc fe73 	bl	23fa2dc <HAL_USB_USART_Available_Data_For_Write>
 23fd5f6:	2800      	cmp	r0, #0
 23fd5f8:	9901      	ldr	r1, [sp, #4]
 23fd5fa:	dc01      	bgt.n	23fd600 <_ZN9USBSerial5writeEh+0x16>
 23fd5fc:	7c60      	ldrb	r0, [r4, #17]
 23fd5fe:	b120      	cbz	r0, 23fd60a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fd600:	7c20      	ldrb	r0, [r4, #16]
 23fd602:	f7fc fe87 	bl	23fa314 <HAL_USB_USART_Send_Data>
 23fd606:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fd60a:	b002      	add	sp, #8
 23fd60c:	bd10      	pop	{r4, pc}

023fd60e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fd60e:	7c00      	ldrb	r0, [r0, #16]
 23fd610:	f7fc be8e 	b.w	23fa330 <HAL_USB_USART_Flush_Data>

023fd614 <_ZN9USBSerialD0Ev>:
 23fd614:	b510      	push	{r4, lr}
 23fd616:	4604      	mov	r4, r0
 23fd618:	2114      	movs	r1, #20
 23fd61a:	f7fb ff38 	bl	23f948e <_ZdlPvj>
 23fd61e:	4620      	mov	r0, r4
 23fd620:	bd10      	pop	{r4, pc}
	...

023fd624 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd624:	b510      	push	{r4, lr}
 23fd626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd62a:	4604      	mov	r4, r0
 23fd62c:	4608      	mov	r0, r1
 23fd62e:	2100      	movs	r1, #0
 23fd630:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fd634:	4b04      	ldr	r3, [pc, #16]	; (23fd648 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fd636:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd638:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd63a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fd63c:	4611      	mov	r1, r2
  _blocking = true;
 23fd63e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fd640:	f7fc fe14 	bl	23fa26c <HAL_USB_USART_Init>
}
 23fd644:	4620      	mov	r0, r4
 23fd646:	bd10      	pop	{r4, pc}
 23fd648:	023ffc74 	.word	0x023ffc74

023fd64c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fd64c:	2200      	movs	r2, #0
 23fd64e:	7c00      	ldrb	r0, [r0, #16]
 23fd650:	f7fc be1a 	b.w	23fa288 <HAL_USB_USART_Begin>

023fd654 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fd654:	7c00      	ldrb	r0, [r0, #16]
 23fd656:	f7fc be25 	b.w	23fa2a4 <HAL_USB_USART_End>

023fd65a <_Z19acquireSerialBufferv>:
{
 23fd65a:	b510      	push	{r4, lr}
 23fd65c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fd65e:	2214      	movs	r2, #20
 23fd660:	2100      	movs	r1, #0
 23fd662:	f001 ff02 	bl	23ff46a <memset>
}
 23fd666:	4620      	mov	r0, r4
 23fd668:	bd10      	pop	{r4, pc}
	...

023fd66c <_Z16_fetch_usbserialv>:
{
 23fd66c:	b510      	push	{r4, lr}
 23fd66e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fd670:	a803      	add	r0, sp, #12
 23fd672:	f7ff fff2 	bl	23fd65a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd676:	4c0c      	ldr	r4, [pc, #48]	; (23fd6a8 <_Z16_fetch_usbserialv+0x3c>)
 23fd678:	e8d4 1f8f 	ldab	r1, [r4]
 23fd67c:	f011 0101 	ands.w	r1, r1, #1
 23fd680:	d10f      	bne.n	23fd6a2 <_Z16_fetch_usbserialv+0x36>
 23fd682:	4620      	mov	r0, r4
 23fd684:	9101      	str	r1, [sp, #4]
 23fd686:	f7fb ff11 	bl	23f94ac <__cxa_guard_acquire>
 23fd68a:	9901      	ldr	r1, [sp, #4]
 23fd68c:	b148      	cbz	r0, 23fd6a2 <_Z16_fetch_usbserialv+0x36>
 23fd68e:	aa03      	add	r2, sp, #12
 23fd690:	4806      	ldr	r0, [pc, #24]	; (23fd6ac <_Z16_fetch_usbserialv+0x40>)
 23fd692:	f7ff ffc7 	bl	23fd624 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fd696:	4620      	mov	r0, r4
 23fd698:	f7fb ff0d 	bl	23f94b6 <__cxa_guard_release>
 23fd69c:	4804      	ldr	r0, [pc, #16]	; (23fd6b0 <_Z16_fetch_usbserialv+0x44>)
 23fd69e:	f001 fe9f 	bl	23ff3e0 <atexit>
	return _usbserial;
}
 23fd6a2:	4802      	ldr	r0, [pc, #8]	; (23fd6ac <_Z16_fetch_usbserialv+0x40>)
 23fd6a4:	b008      	add	sp, #32
 23fd6a6:	bd10      	pop	{r4, pc}
 23fd6a8:	1007aec8 	.word	0x1007aec8
 23fd6ac:	1007aecc 	.word	0x1007aecc
 23fd6b0:	023fd5ab 	.word	0x023fd5ab

023fd6b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fd6b4:	2200      	movs	r2, #0
 23fd6b6:	6840      	ldr	r0, [r0, #4]
 23fd6b8:	4611      	mov	r1, r2
 23fd6ba:	f7fc bf0b 	b.w	23fa4d4 <network_ready>

023fd6be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd6be:	2200      	movs	r2, #0
 23fd6c0:	6840      	ldr	r0, [r0, #4]
 23fd6c2:	4611      	mov	r1, r2
 23fd6c4:	f7fc bf3e 	b.w	23fa544 <network_listening>

023fd6c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd6c8:	2200      	movs	r2, #0
 23fd6ca:	6840      	ldr	r0, [r0, #4]
 23fd6cc:	4611      	mov	r1, r2
 23fd6ce:	f7fc bf55 	b.w	23fa57c <network_get_listen_timeout>

023fd6d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd6d2:	2200      	movs	r2, #0
 23fd6d4:	6840      	ldr	r0, [r0, #4]
 23fd6d6:	f7fc bf43 	b.w	23fa560 <network_set_listen_timeout>

023fd6da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd6da:	2200      	movs	r2, #0
 23fd6dc:	6840      	ldr	r0, [r0, #4]
 23fd6de:	f081 0101 	eor.w	r1, r1, #1
 23fd6e2:	f7fc bf21 	b.w	23fa528 <network_listen>

023fd6e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd6e6:	2300      	movs	r3, #0
 23fd6e8:	6840      	ldr	r0, [r0, #4]
 23fd6ea:	461a      	mov	r2, r3
 23fd6ec:	4619      	mov	r1, r3
 23fd6ee:	f7fc bf0d 	b.w	23fa50c <network_off>

023fd6f2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd6f2:	2300      	movs	r3, #0
 23fd6f4:	6840      	ldr	r0, [r0, #4]
 23fd6f6:	461a      	mov	r2, r3
 23fd6f8:	4619      	mov	r1, r3
 23fd6fa:	f7fc bef9 	b.w	23fa4f0 <network_on>

023fd6fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd6fe:	2200      	movs	r2, #0
 23fd700:	6840      	ldr	r0, [r0, #4]
 23fd702:	4611      	mov	r1, r2
 23fd704:	f7fc beca 	b.w	23fa49c <network_connecting>

023fd708 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd708:	2200      	movs	r2, #0
 23fd70a:	2102      	movs	r1, #2
 23fd70c:	6840      	ldr	r0, [r0, #4]
 23fd70e:	f7fc bed3 	b.w	23fa4b8 <network_disconnect>

023fd712 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd712:	2300      	movs	r3, #0
 23fd714:	6840      	ldr	r0, [r0, #4]
 23fd716:	461a      	mov	r2, r3
 23fd718:	f7fc beb2 	b.w	23fa480 <network_connect>

023fd71c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fd71c:	2204      	movs	r2, #4
 23fd71e:	4b02      	ldr	r3, [pc, #8]	; (23fd728 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fd720:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fd722:	4a02      	ldr	r2, [pc, #8]	; (23fd72c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fd724:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fd726:	4770      	bx	lr
 23fd728:	1007aee0 	.word	0x1007aee0
 23fd72c:	023ffca4 	.word	0x023ffca4

023fd730 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fd730:	4b01      	ldr	r3, [pc, #4]	; (23fd738 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fd732:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fd734:	4770      	bx	lr
 23fd736:	bf00      	nop
 23fd738:	10079d84 	.word	0x10079d84

023fd73c <serialEventRun>:
{
 23fd73c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fd73e:	4b0f      	ldr	r3, [pc, #60]	; (23fd77c <serialEventRun+0x40>)
 23fd740:	b143      	cbz	r3, 23fd754 <serialEventRun+0x18>
 23fd742:	f7ff ff93 	bl	23fd66c <_Z16_fetch_usbserialv>
 23fd746:	6803      	ldr	r3, [r0, #0]
 23fd748:	691b      	ldr	r3, [r3, #16]
 23fd74a:	4798      	blx	r3
 23fd74c:	2800      	cmp	r0, #0
 23fd74e:	dd01      	ble.n	23fd754 <serialEventRun+0x18>
        serialEvent();
 23fd750:	e000      	b.n	23fd754 <serialEventRun+0x18>
 23fd752:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fd754:	4b0a      	ldr	r3, [pc, #40]	; (23fd780 <serialEventRun+0x44>)
 23fd756:	b143      	cbz	r3, 23fd76a <serialEventRun+0x2e>
 23fd758:	f000 f96a 	bl	23fda30 <_Z22__fetch_global_Serial1v>
 23fd75c:	6803      	ldr	r3, [r0, #0]
 23fd75e:	691b      	ldr	r3, [r3, #16]
 23fd760:	4798      	blx	r3
 23fd762:	2800      	cmp	r0, #0
 23fd764:	dd01      	ble.n	23fd76a <serialEventRun+0x2e>
        serialEvent1();
 23fd766:	e000      	b.n	23fd76a <serialEventRun+0x2e>
 23fd768:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fd76a:	4b06      	ldr	r3, [pc, #24]	; (23fd784 <serialEventRun+0x48>)
 23fd76c:	b10b      	cbz	r3, 23fd772 <serialEventRun+0x36>
 23fd76e:	f000 f9a5 	bl	23fdabc <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fd772:	4b05      	ldr	r3, [pc, #20]	; (23fd788 <serialEventRun+0x4c>)
 23fd774:	b10b      	cbz	r3, 23fd77a <serialEventRun+0x3e>
 23fd776:	f000 f9d7 	bl	23fdb28 <_Z15serialEventRun3v>
}
 23fd77a:	bd08      	pop	{r3, pc}
	...

023fd78c <_post_loop>:
{
 23fd78c:	b508      	push	{r3, lr}
	serialEventRun();
 23fd78e:	f7ff ffd5 	bl	23fd73c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fd792:	f7fc fbb9 	bl	23f9f08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fd796:	4b01      	ldr	r3, [pc, #4]	; (23fd79c <_post_loop+0x10>)
 23fd798:	6018      	str	r0, [r3, #0]
}
 23fd79a:	bd08      	pop	{r3, pc}
 23fd79c:	1007aef0 	.word	0x1007aef0

023fd7a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd7a0:	4805      	ldr	r0, [pc, #20]	; (23fd7b8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fd7a2:	4a06      	ldr	r2, [pc, #24]	; (23fd7bc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fd7a4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd7a6:	1a12      	subs	r2, r2, r0
 23fd7a8:	4905      	ldr	r1, [pc, #20]	; (23fd7c0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fd7aa:	f001 fe37 	bl	23ff41c <memcpy>
    __backup_sram_signature = signature;
 23fd7ae:	4b05      	ldr	r3, [pc, #20]	; (23fd7c4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fd7b0:	4a05      	ldr	r2, [pc, #20]	; (23fd7c8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fd7b2:	601a      	str	r2, [r3, #0]
}
 23fd7b4:	bd08      	pop	{r3, pc}
 23fd7b6:	bf00      	nop
 23fd7b8:	1007b400 	.word	0x1007b400
 23fd7bc:	1007b404 	.word	0x1007b404
 23fd7c0:	085ff66c 	.word	0x085ff66c
 23fd7c4:	1007b400 	.word	0x1007b400
 23fd7c8:	9a271c1e 	.word	0x9a271c1e

023fd7cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd7cc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fd7ce:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd7d0:	461a      	mov	r2, r3
 23fd7d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd7d6:	9300      	str	r3, [sp, #0]
 23fd7d8:	f7fc fe36 	bl	23fa448 <system_ctrl_set_result>
}
 23fd7dc:	b003      	add	sp, #12
 23fd7de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fd7e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fd7e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fd7e6:	8843      	ldrh	r3, [r0, #2]
 23fd7e8:	2b0a      	cmp	r3, #10
 23fd7ea:	d008      	beq.n	23fd7fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fd7ec:	2b50      	cmp	r3, #80	; 0x50
 23fd7ee:	d10b      	bne.n	23fd808 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fd7f0:	4b09      	ldr	r3, [pc, #36]	; (23fd818 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fd7f2:	681b      	ldr	r3, [r3, #0]
 23fd7f4:	b14b      	cbz	r3, 23fd80a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fd7f6:	b003      	add	sp, #12
 23fd7f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fd7fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fd7fe:	f7ff ffe5 	bl	23fd7cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fd802:	b003      	add	sp, #12
 23fd804:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd808:	2300      	movs	r3, #0
 23fd80a:	461a      	mov	r2, r3
 23fd80c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd810:	9300      	str	r3, [sp, #0]
 23fd812:	f7fc fe19 	bl	23fa448 <system_ctrl_set_result>
}
 23fd816:	e7f4      	b.n	23fd802 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fd818:	1007aeec 	.word	0x1007aeec

023fd81c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd81c:	2100      	movs	r1, #0
{
 23fd81e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd820:	4811      	ldr	r0, [pc, #68]	; (23fd868 <module_user_init_hook+0x4c>)
 23fd822:	f7fc ff37 	bl	23fa694 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fd826:	4b11      	ldr	r3, [pc, #68]	; (23fd86c <module_user_init_hook+0x50>)
 23fd828:	681a      	ldr	r2, [r3, #0]
 23fd82a:	4b11      	ldr	r3, [pc, #68]	; (23fd870 <module_user_init_hook+0x54>)
 23fd82c:	429a      	cmp	r2, r3
 23fd82e:	bf0c      	ite	eq
 23fd830:	2201      	moveq	r2, #1
 23fd832:	2200      	movne	r2, #0
 23fd834:	4b0f      	ldr	r3, [pc, #60]	; (23fd874 <module_user_init_hook+0x58>)
 23fd836:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fd838:	d001      	beq.n	23fd83e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fd83a:	f7ff ffb1 	bl	23fd7a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fd83e:	f7fc fb47 	bl	23f9ed0 <HAL_RNG_GetRandomNumber>
 23fd842:	4604      	mov	r4, r0
    srand(seed);
 23fd844:	f001 fe1a 	bl	23ff47c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fd848:	4b0b      	ldr	r3, [pc, #44]	; (23fd878 <module_user_init_hook+0x5c>)
 23fd84a:	b113      	cbz	r3, 23fd852 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fd84c:	4620      	mov	r0, r4
 23fd84e:	e000      	b.n	23fd852 <module_user_init_hook+0x36>
 23fd850:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fd852:	2100      	movs	r1, #0
 23fd854:	4808      	ldr	r0, [pc, #32]	; (23fd878 <module_user_init_hook+0x5c>)
 23fd856:	f7fc fe05 	bl	23fa464 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fd85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fd85e:	2100      	movs	r1, #0
 23fd860:	4806      	ldr	r0, [pc, #24]	; (23fd87c <module_user_init_hook+0x60>)
 23fd862:	f7fc bde3 	b.w	23fa42c <system_ctrl_set_app_request_handler>
 23fd866:	bf00      	nop
 23fd868:	023fd731 	.word	0x023fd731
 23fd86c:	1007b400 	.word	0x1007b400
 23fd870:	9a271c1e 	.word	0x9a271c1e
 23fd874:	1007aee8 	.word	0x1007aee8
 23fd878:	00000000 	.word	0x00000000
 23fd87c:	023fd7e5 	.word	0x023fd7e5

023fd880 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fd880:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fd882:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd884:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fd886:	d902      	bls.n	23fd88e <pinAvailable+0xe>
    return false;
 23fd888:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fd88a:	b003      	add	sp, #12
 23fd88c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fd88e:	f1a0 030f 	sub.w	r3, r0, #15
 23fd892:	2b02      	cmp	r3, #2
 23fd894:	d90b      	bls.n	23fd8ae <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fd896:	2801      	cmp	r0, #1
 23fd898:	d821      	bhi.n	23fd8de <pinAvailable+0x5e>
 23fd89a:	f000 f875 	bl	23fd988 <_Z19__fetch_global_Wirev>
 23fd89e:	2100      	movs	r1, #0
 23fd8a0:	7c00      	ldrb	r0, [r0, #16]
 23fd8a2:	f7fc fbaf 	bl	23fa004 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fd8a6:	f080 0001 	eor.w	r0, r0, #1
 23fd8aa:	b2c0      	uxtb	r0, r0
 23fd8ac:	e7ed      	b.n	23fd88a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fd8ae:	4d11      	ldr	r5, [pc, #68]	; (23fd8f4 <pinAvailable+0x74>)
 23fd8b0:	e8d5 1f8f 	ldab	r1, [r5]
 23fd8b4:	f011 0101 	ands.w	r1, r1, #1
 23fd8b8:	d10b      	bne.n	23fd8d2 <pinAvailable+0x52>
 23fd8ba:	4628      	mov	r0, r5
 23fd8bc:	9101      	str	r1, [sp, #4]
 23fd8be:	f7fb fdf5 	bl	23f94ac <__cxa_guard_acquire>
 23fd8c2:	9901      	ldr	r1, [sp, #4]
 23fd8c4:	b128      	cbz	r0, 23fd8d2 <pinAvailable+0x52>
 23fd8c6:	480c      	ldr	r0, [pc, #48]	; (23fd8f8 <pinAvailable+0x78>)
 23fd8c8:	f7ff fd06 	bl	23fd2d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fd8cc:	4628      	mov	r0, r5
 23fd8ce:	f7fb fdf2 	bl	23f94b6 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fd8d2:	4b09      	ldr	r3, [pc, #36]	; (23fd8f8 <pinAvailable+0x78>)
 23fd8d4:	7818      	ldrb	r0, [r3, #0]
 23fd8d6:	f7fc fc13 	bl	23fa100 <hal_spi_is_enabled>
 23fd8da:	2800      	cmp	r0, #0
 23fd8dc:	d1d4      	bne.n	23fd888 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fd8de:	3c08      	subs	r4, #8
 23fd8e0:	2c01      	cmp	r4, #1
 23fd8e2:	d805      	bhi.n	23fd8f0 <pinAvailable+0x70>
 23fd8e4:	f000 f8a4 	bl	23fda30 <_Z22__fetch_global_Serial1v>
 23fd8e8:	7c00      	ldrb	r0, [r0, #16]
 23fd8ea:	f7fc fc87 	bl	23fa1fc <hal_usart_is_enabled>
 23fd8ee:	e7da      	b.n	23fd8a6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fd8f0:	2001      	movs	r0, #1
 23fd8f2:	e7ca      	b.n	23fd88a <pinAvailable+0xa>
 23fd8f4:	1007ae40 	.word	0x1007ae40
 23fd8f8:	1007ae44 	.word	0x1007ae44

023fd8fc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fd8fc:	281b      	cmp	r0, #27
{
 23fd8fe:	b538      	push	{r3, r4, r5, lr}
 23fd900:	4604      	mov	r4, r0
 23fd902:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fd904:	d80a      	bhi.n	23fd91c <pinMode+0x20>
 23fd906:	29ff      	cmp	r1, #255	; 0xff
 23fd908:	d008      	beq.n	23fd91c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fd90a:	f7ff ffb9 	bl	23fd880 <pinAvailable>
 23fd90e:	b128      	cbz	r0, 23fd91c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fd910:	4629      	mov	r1, r5
 23fd912:	4620      	mov	r0, r4
}
 23fd914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fd918:	f7fc bb04 	b.w	23f9f24 <hal_gpio_mode>
}
 23fd91c:	bd38      	pop	{r3, r4, r5, pc}

023fd91e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fd91e:	b538      	push	{r3, r4, r5, lr}
 23fd920:	4604      	mov	r4, r0
 23fd922:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fd924:	f7fc fb0c 	bl	23f9f40 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fd928:	28ff      	cmp	r0, #255	; 0xff
 23fd92a:	d010      	beq.n	23fd94e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fd92c:	2806      	cmp	r0, #6
 23fd92e:	d804      	bhi.n	23fd93a <digitalWrite+0x1c>
 23fd930:	234d      	movs	r3, #77	; 0x4d
 23fd932:	fa23 f000 	lsr.w	r0, r3, r0
 23fd936:	07c3      	lsls	r3, r0, #31
 23fd938:	d409      	bmi.n	23fd94e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fd93a:	4620      	mov	r0, r4
 23fd93c:	f7ff ffa0 	bl	23fd880 <pinAvailable>
 23fd940:	b128      	cbz	r0, 23fd94e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fd942:	4629      	mov	r1, r5
 23fd944:	4620      	mov	r0, r4
}
 23fd946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fd94a:	f7fc bb07 	b.w	23f9f5c <hal_gpio_write>
}
 23fd94e:	bd38      	pop	{r3, r4, r5, pc}

023fd950 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fd950:	4770      	bx	lr
	...

023fd954 <_Z17acquireWireBufferv>:
{
 23fd954:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fd956:	4b0a      	ldr	r3, [pc, #40]	; (23fd980 <_Z17acquireWireBufferv+0x2c>)
{
 23fd958:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fd95a:	6003      	str	r3, [r0, #0]
 23fd95c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fd95e:	4909      	ldr	r1, [pc, #36]	; (23fd984 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fd960:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fd962:	2020      	movs	r0, #32
 23fd964:	f000 f8f6 	bl	23fdb54 <_ZnajRKSt9nothrow_t>
	};
 23fd968:	2520      	movs	r5, #32
 23fd96a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fd96c:	4905      	ldr	r1, [pc, #20]	; (23fd984 <_Z17acquireWireBufferv+0x30>)
 23fd96e:	4628      	mov	r0, r5
	};
 23fd970:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fd972:	f000 f8ef 	bl	23fdb54 <_ZnajRKSt9nothrow_t>
	};
 23fd976:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fd97a:	4620      	mov	r0, r4
 23fd97c:	bd38      	pop	{r3, r4, r5, pc}
 23fd97e:	bf00      	nop
 23fd980:	00010018 	.word	0x00010018
 23fd984:	023ffcd8 	.word	0x023ffcd8

023fd988 <_Z19__fetch_global_Wirev>:
{
 23fd988:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fd98a:	4d0e      	ldr	r5, [pc, #56]	; (23fd9c4 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fd98c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fd98e:	e8d5 1f8f 	ldab	r1, [r5]
 23fd992:	f011 0401 	ands.w	r4, r1, #1
 23fd996:	d111      	bne.n	23fd9bc <_Z19__fetch_global_Wirev+0x34>
 23fd998:	4628      	mov	r0, r5
 23fd99a:	f7fb fd87 	bl	23f94ac <__cxa_guard_acquire>
 23fd99e:	b168      	cbz	r0, 23fd9bc <_Z19__fetch_global_Wirev+0x34>
 23fd9a0:	4668      	mov	r0, sp
 23fd9a2:	f7ff ffd7 	bl	23fd954 <_Z17acquireWireBufferv>
 23fd9a6:	466a      	mov	r2, sp
 23fd9a8:	4621      	mov	r1, r4
 23fd9aa:	4807      	ldr	r0, [pc, #28]	; (23fd9c8 <_Z19__fetch_global_Wirev+0x40>)
 23fd9ac:	f7fe f978 	bl	23fbca0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fd9b0:	4628      	mov	r0, r5
 23fd9b2:	f7fb fd80 	bl	23f94b6 <__cxa_guard_release>
 23fd9b6:	4805      	ldr	r0, [pc, #20]	; (23fd9cc <_Z19__fetch_global_Wirev+0x44>)
 23fd9b8:	f001 fd12 	bl	23ff3e0 <atexit>
	return wire;
}
 23fd9bc:	4802      	ldr	r0, [pc, #8]	; (23fd9c8 <_Z19__fetch_global_Wirev+0x40>)
 23fd9be:	b007      	add	sp, #28
 23fd9c0:	bd30      	pop	{r4, r5, pc}
 23fd9c2:	bf00      	nop
 23fd9c4:	1007aef4 	.word	0x1007aef4
 23fd9c8:	1007aef8 	.word	0x1007aef8
 23fd9cc:	023fd951 	.word	0x023fd951

023fd9d0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fd9d0:	4770      	bx	lr
	...

023fd9d4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fd9d4:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fd9d6:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fd9d8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fd9da:	462a      	mov	r2, r5
 23fd9dc:	2100      	movs	r1, #0
 23fd9de:	f001 fd44 	bl	23ff46a <memset>
 23fd9e2:	8025      	strh	r5, [r4, #0]
 23fd9e4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd9e6:	4907      	ldr	r1, [pc, #28]	; (23fda04 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fd9e8:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fd9ea:	8125      	strh	r5, [r4, #8]
 23fd9ec:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd9ee:	f000 f8b1 	bl	23fdb54 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd9f2:	4904      	ldr	r1, [pc, #16]	; (23fda04 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fd9f4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd9f6:	4628      	mov	r0, r5
 23fd9f8:	f000 f8ac 	bl	23fdb54 <_ZnajRKSt9nothrow_t>
    };
 23fd9fc:	60e0      	str	r0, [r4, #12]
}
 23fd9fe:	4620      	mov	r0, r4
 23fda00:	bd38      	pop	{r3, r4, r5, pc}
 23fda02:	bf00      	nop
 23fda04:	023ffcd8 	.word	0x023ffcd8

023fda08 <__tcf_2>:
 23fda08:	4770      	bx	lr

023fda0a <__tcf_1>:
 23fda0a:	4770      	bx	lr

023fda0c <_Z20acquireSerial1Bufferv>:
{
 23fda0c:	b510      	push	{r4, lr}
 23fda0e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fda10:	f7ff ffe0 	bl	23fd9d4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fda14:	4620      	mov	r0, r4
 23fda16:	bd10      	pop	{r4, pc}

023fda18 <_Z20acquireSerial2Bufferv>:
 23fda18:	b510      	push	{r4, lr}
 23fda1a:	4604      	mov	r4, r0
 23fda1c:	f7ff ffda 	bl	23fd9d4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fda20:	4620      	mov	r0, r4
 23fda22:	bd10      	pop	{r4, pc}

023fda24 <_Z20acquireSerial3Bufferv>:
 23fda24:	b510      	push	{r4, lr}
 23fda26:	4604      	mov	r4, r0
 23fda28:	f7ff ffd4 	bl	23fd9d4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fda2c:	4620      	mov	r0, r4
 23fda2e:	bd10      	pop	{r4, pc}

023fda30 <_Z22__fetch_global_Serial1v>:
{
 23fda30:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fda32:	4d0e      	ldr	r5, [pc, #56]	; (23fda6c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fda34:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fda36:	e8d5 1f8f 	ldab	r1, [r5]
 23fda3a:	f011 0401 	ands.w	r4, r1, #1
 23fda3e:	d111      	bne.n	23fda64 <_Z22__fetch_global_Serial1v+0x34>
 23fda40:	4628      	mov	r0, r5
 23fda42:	f7fb fd33 	bl	23f94ac <__cxa_guard_acquire>
 23fda46:	b168      	cbz	r0, 23fda64 <_Z22__fetch_global_Serial1v+0x34>
 23fda48:	a801      	add	r0, sp, #4
 23fda4a:	f7ff ffdf 	bl	23fda0c <_Z20acquireSerial1Bufferv>
 23fda4e:	4621      	mov	r1, r4
 23fda50:	aa01      	add	r2, sp, #4
 23fda52:	4807      	ldr	r0, [pc, #28]	; (23fda70 <_Z22__fetch_global_Serial1v+0x40>)
 23fda54:	f7ff fd86 	bl	23fd564 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fda58:	4628      	mov	r0, r5
 23fda5a:	f7fb fd2c 	bl	23f94b6 <__cxa_guard_release>
 23fda5e:	4805      	ldr	r0, [pc, #20]	; (23fda74 <_Z22__fetch_global_Serial1v+0x44>)
 23fda60:	f001 fcbe 	bl	23ff3e0 <atexit>
    return serial1;
}
 23fda64:	4802      	ldr	r0, [pc, #8]	; (23fda70 <_Z22__fetch_global_Serial1v+0x40>)
 23fda66:	b007      	add	sp, #28
 23fda68:	bd30      	pop	{r4, r5, pc}
 23fda6a:	bf00      	nop
 23fda6c:	1007af0c 	.word	0x1007af0c
 23fda70:	1007af18 	.word	0x1007af18
 23fda74:	023fd9d1 	.word	0x023fd9d1

023fda78 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fda78:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fda7a:	4c0d      	ldr	r4, [pc, #52]	; (23fdab0 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fda7c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fda7e:	e8d4 3f8f 	ldab	r3, [r4]
 23fda82:	07db      	lsls	r3, r3, #31
 23fda84:	d411      	bmi.n	23fdaaa <_Z22__fetch_global_Serial2v+0x32>
 23fda86:	4620      	mov	r0, r4
 23fda88:	f7fb fd10 	bl	23f94ac <__cxa_guard_acquire>
 23fda8c:	b168      	cbz	r0, 23fdaaa <_Z22__fetch_global_Serial2v+0x32>
 23fda8e:	a801      	add	r0, sp, #4
 23fda90:	f7ff ffc2 	bl	23fda18 <_Z20acquireSerial2Bufferv>
 23fda94:	2101      	movs	r1, #1
 23fda96:	aa01      	add	r2, sp, #4
 23fda98:	4806      	ldr	r0, [pc, #24]	; (23fdab4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fda9a:	f7ff fd63 	bl	23fd564 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fda9e:	4620      	mov	r0, r4
 23fdaa0:	f7fb fd09 	bl	23f94b6 <__cxa_guard_release>
 23fdaa4:	4804      	ldr	r0, [pc, #16]	; (23fdab8 <_Z22__fetch_global_Serial2v+0x40>)
 23fdaa6:	f001 fc9b 	bl	23ff3e0 <atexit>
	return serial2;
}
 23fdaaa:	4802      	ldr	r0, [pc, #8]	; (23fdab4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fdaac:	b006      	add	sp, #24
 23fdaae:	bd10      	pop	{r4, pc}
 23fdab0:	1007af10 	.word	0x1007af10
 23fdab4:	1007af2c 	.word	0x1007af2c
 23fdab8:	023fda0b 	.word	0x023fda0b

023fdabc <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fdabc:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fdabe:	f7ff ffdb 	bl	23fda78 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fdac2:	4b07      	ldr	r3, [pc, #28]	; (23fdae0 <_Z15serialEventRun2v+0x24>)
 23fdac4:	4604      	mov	r4, r0
 23fdac6:	b153      	cbz	r3, 23fdade <_Z15serialEventRun2v+0x22>
 23fdac8:	f7ff fd6a 	bl	23fd5a0 <_ZN11USARTSerial9isEnabledEv>
 23fdacc:	b138      	cbz	r0, 23fdade <_Z15serialEventRun2v+0x22>
 23fdace:	6823      	ldr	r3, [r4, #0]
 23fdad0:	4620      	mov	r0, r4
 23fdad2:	691b      	ldr	r3, [r3, #16]
 23fdad4:	4798      	blx	r3
 23fdad6:	2800      	cmp	r0, #0
 23fdad8:	dd01      	ble.n	23fdade <_Z15serialEventRun2v+0x22>
        handler();
 23fdada:	e000      	b.n	23fdade <_Z15serialEventRun2v+0x22>
 23fdadc:	bf00      	nop
}
 23fdade:	bd10      	pop	{r4, pc}
 23fdae0:	00000000 	.word	0x00000000

023fdae4 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fdae4:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fdae6:	4c0d      	ldr	r4, [pc, #52]	; (23fdb1c <_Z22__fetch_global_Serial3v+0x38>)
{
 23fdae8:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fdaea:	e8d4 3f8f 	ldab	r3, [r4]
 23fdaee:	07db      	lsls	r3, r3, #31
 23fdaf0:	d411      	bmi.n	23fdb16 <_Z22__fetch_global_Serial3v+0x32>
 23fdaf2:	4620      	mov	r0, r4
 23fdaf4:	f7fb fcda 	bl	23f94ac <__cxa_guard_acquire>
 23fdaf8:	b168      	cbz	r0, 23fdb16 <_Z22__fetch_global_Serial3v+0x32>
 23fdafa:	a801      	add	r0, sp, #4
 23fdafc:	f7ff ff92 	bl	23fda24 <_Z20acquireSerial3Bufferv>
 23fdb00:	2102      	movs	r1, #2
 23fdb02:	aa01      	add	r2, sp, #4
 23fdb04:	4806      	ldr	r0, [pc, #24]	; (23fdb20 <_Z22__fetch_global_Serial3v+0x3c>)
 23fdb06:	f7ff fd2d 	bl	23fd564 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdb0a:	4620      	mov	r0, r4
 23fdb0c:	f7fb fcd3 	bl	23f94b6 <__cxa_guard_release>
 23fdb10:	4804      	ldr	r0, [pc, #16]	; (23fdb24 <_Z22__fetch_global_Serial3v+0x40>)
 23fdb12:	f001 fc65 	bl	23ff3e0 <atexit>
	return serial3;
}
 23fdb16:	4802      	ldr	r0, [pc, #8]	; (23fdb20 <_Z22__fetch_global_Serial3v+0x3c>)
 23fdb18:	b006      	add	sp, #24
 23fdb1a:	bd10      	pop	{r4, pc}
 23fdb1c:	1007af14 	.word	0x1007af14
 23fdb20:	1007af40 	.word	0x1007af40
 23fdb24:	023fda09 	.word	0x023fda09

023fdb28 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fdb28:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fdb2a:	f7ff ffdb 	bl	23fdae4 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fdb2e:	4b07      	ldr	r3, [pc, #28]	; (23fdb4c <_Z15serialEventRun3v+0x24>)
 23fdb30:	4604      	mov	r4, r0
 23fdb32:	b153      	cbz	r3, 23fdb4a <_Z15serialEventRun3v+0x22>
 23fdb34:	f7ff fd34 	bl	23fd5a0 <_ZN11USARTSerial9isEnabledEv>
 23fdb38:	b138      	cbz	r0, 23fdb4a <_Z15serialEventRun3v+0x22>
 23fdb3a:	6823      	ldr	r3, [r4, #0]
 23fdb3c:	4620      	mov	r0, r4
 23fdb3e:	691b      	ldr	r3, [r3, #16]
 23fdb40:	4798      	blx	r3
 23fdb42:	2800      	cmp	r0, #0
 23fdb44:	dd01      	ble.n	23fdb4a <_Z15serialEventRun3v+0x22>
        handler();
 23fdb46:	e000      	b.n	23fdb4a <_Z15serialEventRun3v+0x22>
 23fdb48:	bf00      	nop
}
 23fdb4a:	bd10      	pop	{r4, pc}
 23fdb4c:	00000000 	.word	0x00000000

023fdb50 <_ZnwjRKSt9nothrow_t>:
 23fdb50:	f7fb bc99 	b.w	23f9486 <_Znwj>

023fdb54 <_ZnajRKSt9nothrow_t>:
 23fdb54:	f7fb bc99 	b.w	23f948a <_Znaj>

023fdb58 <_ZSt25__throw_bad_function_callv>:
 23fdb58:	b508      	push	{r3, lr}
 23fdb5a:	f7fc fd71 	bl	23fa640 <abort>
	...

023fdb60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fdb60:	4901      	ldr	r1, [pc, #4]	; (23fdb68 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fdb62:	f000 b8f9 	b.w	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdb66:	bf00      	nop
 23fdb68:	023ffcf4 	.word	0x023ffcf4

023fdb6c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fdb6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fdb6e:	2400      	movs	r4, #0
 23fdb70:	2310      	movs	r3, #16
 23fdb72:	4615      	mov	r5, r2
 23fdb74:	6812      	ldr	r2, [r2, #0]
 23fdb76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fdb7a:	6803      	ldr	r3, [r0, #0]
 23fdb7c:	e9cd 4400 	strd	r4, r4, [sp]
 23fdb80:	699e      	ldr	r6, [r3, #24]
 23fdb82:	466b      	mov	r3, sp
 23fdb84:	47b0      	blx	r6
 23fdb86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fdb8a:	f003 0306 	and.w	r3, r3, #6
 23fdb8e:	2b06      	cmp	r3, #6
 23fdb90:	bf05      	ittet	eq
 23fdb92:	9b00      	ldreq	r3, [sp, #0]
 23fdb94:	2001      	moveq	r0, #1
 23fdb96:	4620      	movne	r0, r4
 23fdb98:	602b      	streq	r3, [r5, #0]
 23fdb9a:	b004      	add	sp, #16
 23fdb9c:	bd70      	pop	{r4, r5, r6, pc}

023fdb9e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fdb9e:	9800      	ldr	r0, [sp, #0]
 23fdba0:	4290      	cmp	r0, r2
 23fdba2:	bf14      	ite	ne
 23fdba4:	2001      	movne	r0, #1
 23fdba6:	2006      	moveq	r0, #6
 23fdba8:	4770      	bx	lr
	...

023fdbac <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fdbac:	4b03      	ldr	r3, [pc, #12]	; (23fdbbc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fdbae:	b510      	push	{r4, lr}
 23fdbb0:	4604      	mov	r4, r0
 23fdbb2:	6003      	str	r3, [r0, #0]
 23fdbb4:	f000 f8cd 	bl	23fdd52 <_ZNSt9type_infoD1Ev>
 23fdbb8:	4620      	mov	r0, r4
 23fdbba:	bd10      	pop	{r4, pc}
 23fdbbc:	023ffd34 	.word	0x023ffd34

023fdbc0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fdbc0:	b510      	push	{r4, lr}
 23fdbc2:	4604      	mov	r4, r0
 23fdbc4:	f7ff fff2 	bl	23fdbac <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fdbc8:	2108      	movs	r1, #8
 23fdbca:	4620      	mov	r0, r4
 23fdbcc:	f7fb fc5f 	bl	23f948e <_ZdlPvj>
 23fdbd0:	4620      	mov	r0, r4
 23fdbd2:	bd10      	pop	{r4, pc}

023fdbd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fdbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdbd8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fdbdc:	461f      	mov	r7, r3
 23fdbde:	4606      	mov	r6, r0
 23fdbe0:	4615      	mov	r5, r2
 23fdbe2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fdbe6:	4598      	cmp	r8, r3
 23fdbe8:	d107      	bne.n	23fdbfa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fdbea:	9907      	ldr	r1, [sp, #28]
 23fdbec:	f000 f8b4 	bl	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdbf0:	b118      	cbz	r0, 23fdbfa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fdbf2:	7165      	strb	r5, [r4, #5]
 23fdbf4:	2000      	movs	r0, #0
 23fdbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fdbfa:	4639      	mov	r1, r7
 23fdbfc:	4630      	mov	r0, r6
 23fdbfe:	f000 f8ab 	bl	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdc02:	2800      	cmp	r0, #0
 23fdc04:	d0f6      	beq.n	23fdbf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fdc06:	2301      	movs	r3, #1
 23fdc08:	f8c4 8000 	str.w	r8, [r4]
 23fdc0c:	7125      	strb	r5, [r4, #4]
 23fdc0e:	71a3      	strb	r3, [r4, #6]
 23fdc10:	e7f0      	b.n	23fdbf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fdc12 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fdc12:	b538      	push	{r3, r4, r5, lr}
 23fdc14:	4615      	mov	r5, r2
 23fdc16:	461c      	mov	r4, r3
 23fdc18:	f000 f89e 	bl	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdc1c:	b120      	cbz	r0, 23fdc28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fdc1e:	2308      	movs	r3, #8
 23fdc20:	6025      	str	r5, [r4, #0]
 23fdc22:	60e3      	str	r3, [r4, #12]
 23fdc24:	2306      	movs	r3, #6
 23fdc26:	7123      	strb	r3, [r4, #4]
 23fdc28:	bd38      	pop	{r3, r4, r5, pc}

023fdc2a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fdc2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdc2c:	4605      	mov	r5, r0
 23fdc2e:	460c      	mov	r4, r1
 23fdc30:	461e      	mov	r6, r3
 23fdc32:	9201      	str	r2, [sp, #4]
 23fdc34:	f000 f890 	bl	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdc38:	b950      	cbnz	r0, 23fdc50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fdc3a:	2e03      	cmp	r6, #3
 23fdc3c:	d808      	bhi.n	23fdc50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fdc3e:	6823      	ldr	r3, [r4, #0]
 23fdc40:	4629      	mov	r1, r5
 23fdc42:	9a01      	ldr	r2, [sp, #4]
 23fdc44:	4620      	mov	r0, r4
 23fdc46:	695b      	ldr	r3, [r3, #20]
 23fdc48:	b002      	add	sp, #8
 23fdc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fdc4e:	4718      	bx	r3
 23fdc50:	b002      	add	sp, #8
 23fdc52:	bd70      	pop	{r4, r5, r6, pc}

023fdc54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fdc54:	4b03      	ldr	r3, [pc, #12]	; (23fdc64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fdc56:	b510      	push	{r4, lr}
 23fdc58:	4604      	mov	r4, r0
 23fdc5a:	6003      	str	r3, [r0, #0]
 23fdc5c:	f7ff ffa6 	bl	23fdbac <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fdc60:	4620      	mov	r0, r4
 23fdc62:	bd10      	pop	{r4, pc}
 23fdc64:	023ffd94 	.word	0x023ffd94

023fdc68 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fdc68:	b510      	push	{r4, lr}
 23fdc6a:	4604      	mov	r4, r0
 23fdc6c:	f7ff fff2 	bl	23fdc54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fdc70:	210c      	movs	r1, #12
 23fdc72:	4620      	mov	r0, r4
 23fdc74:	f7fb fc0b 	bl	23f948e <_ZdlPvj>
 23fdc78:	4620      	mov	r0, r4
 23fdc7a:	bd10      	pop	{r4, pc}

023fdc7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fdc7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fdc7e:	9f08      	ldr	r7, [sp, #32]
 23fdc80:	4605      	mov	r5, r0
 23fdc82:	460e      	mov	r6, r1
 23fdc84:	4614      	mov	r4, r2
 23fdc86:	4297      	cmp	r7, r2
 23fdc88:	d00a      	beq.n	23fdca0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fdc8a:	68a8      	ldr	r0, [r5, #8]
 23fdc8c:	4631      	mov	r1, r6
 23fdc8e:	6802      	ldr	r2, [r0, #0]
 23fdc90:	9708      	str	r7, [sp, #32]
 23fdc92:	6a15      	ldr	r5, [r2, #32]
 23fdc94:	4622      	mov	r2, r4
 23fdc96:	46ac      	mov	ip, r5
 23fdc98:	b003      	add	sp, #12
 23fdc9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdc9e:	4760      	bx	ip
 23fdca0:	4619      	mov	r1, r3
 23fdca2:	9301      	str	r3, [sp, #4]
 23fdca4:	f000 f858 	bl	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdca8:	9b01      	ldr	r3, [sp, #4]
 23fdcaa:	2800      	cmp	r0, #0
 23fdcac:	d0ed      	beq.n	23fdc8a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fdcae:	2006      	movs	r0, #6
 23fdcb0:	b003      	add	sp, #12
 23fdcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fdcb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fdcb4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdcb8:	460d      	mov	r5, r1
 23fdcba:	4619      	mov	r1, r3
 23fdcbc:	4681      	mov	r9, r0
 23fdcbe:	4617      	mov	r7, r2
 23fdcc0:	4698      	mov	r8, r3
 23fdcc2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fdcc6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fdcca:	f000 f845 	bl	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdcce:	b190      	cbz	r0, 23fdcf6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fdcd0:	2d00      	cmp	r5, #0
 23fdcd2:	6034      	str	r4, [r6, #0]
 23fdcd4:	7137      	strb	r7, [r6, #4]
 23fdcd6:	db09      	blt.n	23fdcec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fdcd8:	1961      	adds	r1, r4, r5
 23fdcda:	458a      	cmp	sl, r1
 23fdcdc:	bf0c      	ite	eq
 23fdcde:	2106      	moveq	r1, #6
 23fdce0:	2101      	movne	r1, #1
 23fdce2:	71b1      	strb	r1, [r6, #6]
 23fdce4:	2000      	movs	r0, #0
 23fdce6:	b001      	add	sp, #4
 23fdce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fdcec:	3502      	adds	r5, #2
 23fdcee:	d1f9      	bne.n	23fdce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fdcf0:	2301      	movs	r3, #1
 23fdcf2:	71b3      	strb	r3, [r6, #6]
 23fdcf4:	e7f6      	b.n	23fdce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fdcf6:	4554      	cmp	r4, sl
 23fdcf8:	d106      	bne.n	23fdd08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fdcfa:	4659      	mov	r1, fp
 23fdcfc:	4648      	mov	r0, r9
 23fdcfe:	f000 f82b 	bl	23fdd58 <_ZNKSt9type_infoeqERKS_>
 23fdd02:	b108      	cbz	r0, 23fdd08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fdd04:	7177      	strb	r7, [r6, #5]
 23fdd06:	e7ed      	b.n	23fdce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fdd08:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fdd0c:	463a      	mov	r2, r7
 23fdd0e:	4629      	mov	r1, r5
 23fdd10:	6803      	ldr	r3, [r0, #0]
 23fdd12:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fdd16:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fdd1a:	69dc      	ldr	r4, [r3, #28]
 23fdd1c:	4643      	mov	r3, r8
 23fdd1e:	46a4      	mov	ip, r4
 23fdd20:	b001      	add	sp, #4
 23fdd22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdd26:	4760      	bx	ip

023fdd28 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fdd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdd2c:	4607      	mov	r7, r0
 23fdd2e:	460c      	mov	r4, r1
 23fdd30:	4615      	mov	r5, r2
 23fdd32:	461e      	mov	r6, r3
 23fdd34:	f7ff ff6d 	bl	23fdc12 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fdd38:	b948      	cbnz	r0, 23fdd4e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fdd3a:	68b8      	ldr	r0, [r7, #8]
 23fdd3c:	462a      	mov	r2, r5
 23fdd3e:	4621      	mov	r1, r4
 23fdd40:	6803      	ldr	r3, [r0, #0]
 23fdd42:	699f      	ldr	r7, [r3, #24]
 23fdd44:	4633      	mov	r3, r6
 23fdd46:	46bc      	mov	ip, r7
 23fdd48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fdd4c:	4760      	bx	ip
 23fdd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fdd52 <_ZNSt9type_infoD1Ev>:
 23fdd52:	4770      	bx	lr

023fdd54 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fdd54:	2000      	movs	r0, #0
 23fdd56:	4770      	bx	lr

023fdd58 <_ZNKSt9type_infoeqERKS_>:
 23fdd58:	4281      	cmp	r1, r0
 23fdd5a:	b508      	push	{r3, lr}
 23fdd5c:	d00e      	beq.n	23fdd7c <_ZNKSt9type_infoeqERKS_+0x24>
 23fdd5e:	6840      	ldr	r0, [r0, #4]
 23fdd60:	7803      	ldrb	r3, [r0, #0]
 23fdd62:	2b2a      	cmp	r3, #42	; 0x2a
 23fdd64:	d00c      	beq.n	23fdd80 <_ZNKSt9type_infoeqERKS_+0x28>
 23fdd66:	6849      	ldr	r1, [r1, #4]
 23fdd68:	780b      	ldrb	r3, [r1, #0]
 23fdd6a:	2b2a      	cmp	r3, #42	; 0x2a
 23fdd6c:	bf08      	it	eq
 23fdd6e:	3101      	addeq	r1, #1
 23fdd70:	f7fb fb5a 	bl	23f9428 <strcmp>
 23fdd74:	fab0 f080 	clz	r0, r0
 23fdd78:	0940      	lsrs	r0, r0, #5
 23fdd7a:	bd08      	pop	{r3, pc}
 23fdd7c:	2001      	movs	r0, #1
 23fdd7e:	e7fc      	b.n	23fdd7a <_ZNKSt9type_infoeqERKS_+0x22>
 23fdd80:	2000      	movs	r0, #0
 23fdd82:	e7fa      	b.n	23fdd7a <_ZNKSt9type_infoeqERKS_+0x22>

023fdd84 <atan2>:
 23fdd84:	f000 b90c 	b.w	23fdfa0 <__ieee754_atan2>

023fdd88 <pow>:
 23fdd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdd8a:	ed2d 8b02 	vpush	{d8}
 23fdd8e:	ec57 6b10 	vmov	r6, r7, d0
 23fdd92:	ec55 4b11 	vmov	r4, r5, d1
 23fdd96:	f000 f9d7 	bl	23fe148 <__ieee754_pow>
 23fdd9a:	4b63      	ldr	r3, [pc, #396]	; (23fdf28 <pow+0x1a0>)
 23fdd9c:	eeb0 8a40 	vmov.f32	s16, s0
 23fdda0:	eef0 8a60 	vmov.f32	s17, s1
 23fdda4:	f993 3000 	ldrsb.w	r3, [r3]
 23fdda8:	3301      	adds	r3, #1
 23fddaa:	d02a      	beq.n	23fde02 <pow+0x7a>
 23fddac:	4622      	mov	r2, r4
 23fddae:	462b      	mov	r3, r5
 23fddb0:	4620      	mov	r0, r4
 23fddb2:	4629      	mov	r1, r5
 23fddb4:	f7fb fad2 	bl	23f935c <__aeabi_dcmpun>
 23fddb8:	bb18      	cbnz	r0, 23fde02 <pow+0x7a>
 23fddba:	4632      	mov	r2, r6
 23fddbc:	463b      	mov	r3, r7
 23fddbe:	4630      	mov	r0, r6
 23fddc0:	4639      	mov	r1, r7
 23fddc2:	f7fb facb 	bl	23f935c <__aeabi_dcmpun>
 23fddc6:	2800      	cmp	r0, #0
 23fddc8:	d144      	bne.n	23fde54 <pow+0xcc>
 23fddca:	2200      	movs	r2, #0
 23fddcc:	2300      	movs	r3, #0
 23fddce:	4630      	mov	r0, r6
 23fddd0:	4639      	mov	r1, r7
 23fddd2:	f7fb fa91 	bl	23f92f8 <__aeabi_dcmpeq>
 23fddd6:	b1d8      	cbz	r0, 23fde10 <pow+0x88>
 23fddd8:	2200      	movs	r2, #0
 23fddda:	2300      	movs	r3, #0
 23fdddc:	4620      	mov	r0, r4
 23fddde:	4629      	mov	r1, r5
 23fdde0:	f7fb fa8a 	bl	23f92f8 <__aeabi_dcmpeq>
 23fdde4:	2800      	cmp	r0, #0
 23fdde6:	d13d      	bne.n	23fde64 <pow+0xdc>
 23fdde8:	ec45 4b10 	vmov	d0, r4, r5
 23fddec:	f001 f9b2 	bl	23ff154 <finite>
 23fddf0:	b138      	cbz	r0, 23fde02 <pow+0x7a>
 23fddf2:	4620      	mov	r0, r4
 23fddf4:	4629      	mov	r1, r5
 23fddf6:	2200      	movs	r2, #0
 23fddf8:	2300      	movs	r3, #0
 23fddfa:	f7fb fa87 	bl	23f930c <__aeabi_dcmplt>
 23fddfe:	2800      	cmp	r0, #0
 23fde00:	d15c      	bne.n	23fdebc <pow+0x134>
 23fde02:	eeb0 0a48 	vmov.f32	s0, s16
 23fde06:	eef0 0a68 	vmov.f32	s1, s17
 23fde0a:	ecbd 8b02 	vpop	{d8}
 23fde0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fde10:	eeb0 0a48 	vmov.f32	s0, s16
 23fde14:	eef0 0a68 	vmov.f32	s1, s17
 23fde18:	f001 f99c 	bl	23ff154 <finite>
 23fde1c:	b358      	cbz	r0, 23fde76 <pow+0xee>
 23fde1e:	2200      	movs	r2, #0
 23fde20:	2300      	movs	r3, #0
 23fde22:	ec51 0b18 	vmov	r0, r1, d8
 23fde26:	f7fb fa67 	bl	23f92f8 <__aeabi_dcmpeq>
 23fde2a:	2800      	cmp	r0, #0
 23fde2c:	d0e9      	beq.n	23fde02 <pow+0x7a>
 23fde2e:	ec47 6b10 	vmov	d0, r6, r7
 23fde32:	f001 f98f 	bl	23ff154 <finite>
 23fde36:	2800      	cmp	r0, #0
 23fde38:	d0e3      	beq.n	23fde02 <pow+0x7a>
 23fde3a:	ec45 4b10 	vmov	d0, r4, r5
 23fde3e:	f001 f989 	bl	23ff154 <finite>
 23fde42:	2800      	cmp	r0, #0
 23fde44:	d0dd      	beq.n	23fde02 <pow+0x7a>
 23fde46:	f7fc fc09 	bl	23fa65c <__errno>
 23fde4a:	2322      	movs	r3, #34	; 0x22
 23fde4c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fdf08 <pow+0x180>
 23fde50:	6003      	str	r3, [r0, #0]
 23fde52:	e7d6      	b.n	23fde02 <pow+0x7a>
 23fde54:	4620      	mov	r0, r4
 23fde56:	4629      	mov	r1, r5
 23fde58:	2200      	movs	r2, #0
 23fde5a:	2300      	movs	r3, #0
 23fde5c:	f7fb fa4c 	bl	23f92f8 <__aeabi_dcmpeq>
 23fde60:	2800      	cmp	r0, #0
 23fde62:	d0ce      	beq.n	23fde02 <pow+0x7a>
 23fde64:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fdf10 <pow+0x188>
 23fde68:	eeb0 0a48 	vmov.f32	s0, s16
 23fde6c:	eef0 0a68 	vmov.f32	s1, s17
 23fde70:	ecbd 8b02 	vpop	{d8}
 23fde74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fde76:	ec47 6b10 	vmov	d0, r6, r7
 23fde7a:	f001 f96b 	bl	23ff154 <finite>
 23fde7e:	2800      	cmp	r0, #0
 23fde80:	d0cd      	beq.n	23fde1e <pow+0x96>
 23fde82:	ec45 4b10 	vmov	d0, r4, r5
 23fde86:	f001 f965 	bl	23ff154 <finite>
 23fde8a:	2800      	cmp	r0, #0
 23fde8c:	d0c7      	beq.n	23fde1e <pow+0x96>
 23fde8e:	ee18 0a10 	vmov	r0, s16
 23fde92:	ec53 2b18 	vmov	r2, r3, d8
 23fde96:	4619      	mov	r1, r3
 23fde98:	f7fb fa60 	bl	23f935c <__aeabi_dcmpun>
 23fde9c:	bb20      	cbnz	r0, 23fdee8 <pow+0x160>
 23fde9e:	f7fc fbdd 	bl	23fa65c <__errno>
 23fdea2:	2222      	movs	r2, #34	; 0x22
 23fdea4:	4603      	mov	r3, r0
 23fdea6:	4639      	mov	r1, r7
 23fdea8:	4630      	mov	r0, r6
 23fdeaa:	601a      	str	r2, [r3, #0]
 23fdeac:	2200      	movs	r2, #0
 23fdeae:	2300      	movs	r3, #0
 23fdeb0:	f7fb fa2c 	bl	23f930c <__aeabi_dcmplt>
 23fdeb4:	b948      	cbnz	r0, 23fdeca <pow+0x142>
 23fdeb6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fdf18 <pow+0x190>
 23fdeba:	e7a2      	b.n	23fde02 <pow+0x7a>
 23fdebc:	f7fc fbce 	bl	23fa65c <__errno>
 23fdec0:	2321      	movs	r3, #33	; 0x21
 23fdec2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fdf20 <pow+0x198>
 23fdec6:	6003      	str	r3, [r0, #0]
 23fdec8:	e79b      	b.n	23fde02 <pow+0x7a>
 23fdeca:	ec45 4b10 	vmov	d0, r4, r5
 23fdece:	f001 f957 	bl	23ff180 <rint>
 23fded2:	4622      	mov	r2, r4
 23fded4:	462b      	mov	r3, r5
 23fded6:	ec51 0b10 	vmov	r0, r1, d0
 23fdeda:	f7fb fa0d 	bl	23f92f8 <__aeabi_dcmpeq>
 23fdede:	2800      	cmp	r0, #0
 23fdee0:	d1e9      	bne.n	23fdeb6 <pow+0x12e>
 23fdee2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fdf20 <pow+0x198>
 23fdee6:	e78c      	b.n	23fde02 <pow+0x7a>
 23fdee8:	f7fc fbb8 	bl	23fa65c <__errno>
 23fdeec:	2200      	movs	r2, #0
 23fdeee:	2300      	movs	r3, #0
 23fdef0:	2121      	movs	r1, #33	; 0x21
 23fdef2:	6001      	str	r1, [r0, #0]
 23fdef4:	4610      	mov	r0, r2
 23fdef6:	4619      	mov	r1, r3
 23fdef8:	f7fb f8c0 	bl	23f907c <__aeabi_ddiv>
 23fdefc:	ec41 0b18 	vmov	d8, r0, r1
 23fdf00:	e77f      	b.n	23fde02 <pow+0x7a>
 23fdf02:	bf00      	nop
 23fdf04:	f3af 8000 	nop.w
	...
 23fdf14:	3ff00000 	.word	0x3ff00000
 23fdf18:	00000000 	.word	0x00000000
 23fdf1c:	7ff00000 	.word	0x7ff00000
 23fdf20:	00000000 	.word	0x00000000
 23fdf24:	fff00000 	.word	0xfff00000
 23fdf28:	10079d80 	.word	0x10079d80

023fdf2c <sqrt>:
 23fdf2c:	b538      	push	{r3, r4, r5, lr}
 23fdf2e:	ed2d 8b02 	vpush	{d8}
 23fdf32:	ec55 4b10 	vmov	r4, r5, d0
 23fdf36:	f000 fe99 	bl	23fec6c <__ieee754_sqrt>
 23fdf3a:	4b18      	ldr	r3, [pc, #96]	; (23fdf9c <sqrt+0x70>)
 23fdf3c:	eeb0 8a40 	vmov.f32	s16, s0
 23fdf40:	eef0 8a60 	vmov.f32	s17, s1
 23fdf44:	f993 3000 	ldrsb.w	r3, [r3]
 23fdf48:	3301      	adds	r3, #1
 23fdf4a:	d00d      	beq.n	23fdf68 <sqrt+0x3c>
 23fdf4c:	4622      	mov	r2, r4
 23fdf4e:	462b      	mov	r3, r5
 23fdf50:	4620      	mov	r0, r4
 23fdf52:	4629      	mov	r1, r5
 23fdf54:	f7fb fa02 	bl	23f935c <__aeabi_dcmpun>
 23fdf58:	b930      	cbnz	r0, 23fdf68 <sqrt+0x3c>
 23fdf5a:	2200      	movs	r2, #0
 23fdf5c:	2300      	movs	r3, #0
 23fdf5e:	4620      	mov	r0, r4
 23fdf60:	4629      	mov	r1, r5
 23fdf62:	f7fb f9d3 	bl	23f930c <__aeabi_dcmplt>
 23fdf66:	b930      	cbnz	r0, 23fdf76 <sqrt+0x4a>
 23fdf68:	eeb0 0a48 	vmov.f32	s0, s16
 23fdf6c:	eef0 0a68 	vmov.f32	s1, s17
 23fdf70:	ecbd 8b02 	vpop	{d8}
 23fdf74:	bd38      	pop	{r3, r4, r5, pc}
 23fdf76:	f7fc fb71 	bl	23fa65c <__errno>
 23fdf7a:	2200      	movs	r2, #0
 23fdf7c:	2300      	movs	r3, #0
 23fdf7e:	2121      	movs	r1, #33	; 0x21
 23fdf80:	6001      	str	r1, [r0, #0]
 23fdf82:	4610      	mov	r0, r2
 23fdf84:	4619      	mov	r1, r3
 23fdf86:	f7fb f879 	bl	23f907c <__aeabi_ddiv>
 23fdf8a:	ec41 0b18 	vmov	d8, r0, r1
 23fdf8e:	eeb0 0a48 	vmov.f32	s0, s16
 23fdf92:	eef0 0a68 	vmov.f32	s1, s17
 23fdf96:	ecbd 8b02 	vpop	{d8}
 23fdf9a:	bd38      	pop	{r3, r4, r5, pc}
 23fdf9c:	10079d80 	.word	0x10079d80

023fdfa0 <__ieee754_atan2>:
 23fdfa0:	ec51 0b11 	vmov	r0, r1, d1
 23fdfa4:	4243      	negs	r3, r0
 23fdfa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdfaa:	4303      	orrs	r3, r0
 23fdfac:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fdfb0:	4e61      	ldr	r6, [pc, #388]	; (23fe138 <__ieee754_atan2+0x198>)
 23fdfb2:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fdfb6:	42b3      	cmp	r3, r6
 23fdfb8:	ec55 4b10 	vmov	r4, r5, d0
 23fdfbc:	d83c      	bhi.n	23fe038 <__ieee754_atan2+0x98>
 23fdfbe:	4263      	negs	r3, r4
 23fdfc0:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fdfc4:	46a9      	mov	r9, r5
 23fdfc6:	4323      	orrs	r3, r4
 23fdfc8:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fdfcc:	42b3      	cmp	r3, r6
 23fdfce:	d833      	bhi.n	23fe038 <__ieee754_atan2+0x98>
 23fdfd0:	4b5a      	ldr	r3, [pc, #360]	; (23fe13c <__ieee754_atan2+0x19c>)
 23fdfd2:	440b      	add	r3, r1
 23fdfd4:	4303      	orrs	r3, r0
 23fdfd6:	d03e      	beq.n	23fe056 <__ieee754_atan2+0xb6>
 23fdfd8:	178f      	asrs	r7, r1, #30
 23fdfda:	ea5a 0304 	orrs.w	r3, sl, r4
 23fdfde:	f007 0702 	and.w	r7, r7, #2
 23fdfe2:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fdfe6:	d02f      	beq.n	23fe048 <__ieee754_atan2+0xa8>
 23fdfe8:	ea5e 0300 	orrs.w	r3, lr, r0
 23fdfec:	d037      	beq.n	23fe05e <__ieee754_atan2+0xbe>
 23fdfee:	45b6      	cmp	lr, r6
 23fdff0:	d044      	beq.n	23fe07c <__ieee754_atan2+0xdc>
 23fdff2:	45b2      	cmp	sl, r6
 23fdff4:	d033      	beq.n	23fe05e <__ieee754_atan2+0xbe>
 23fdff6:	ebaa 0e0e 	sub.w	lr, sl, lr
 23fdffa:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23fdffe:	ea4f 532e 	mov.w	r3, lr, asr #20
 23fe002:	da38      	bge.n	23fe076 <__ieee754_atan2+0xd6>
 23fe004:	2900      	cmp	r1, #0
 23fe006:	da6a      	bge.n	23fe0de <__ieee754_atan2+0x13e>
 23fe008:	333c      	adds	r3, #60	; 0x3c
 23fe00a:	da68      	bge.n	23fe0de <__ieee754_atan2+0x13e>
 23fe00c:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fe100 <__ieee754_atan2+0x160>
 23fe010:	2f01      	cmp	r7, #1
 23fe012:	d050      	beq.n	23fe0b6 <__ieee754_atan2+0x116>
 23fe014:	2f02      	cmp	r7, #2
 23fe016:	d03d      	beq.n	23fe094 <__ieee754_atan2+0xf4>
 23fe018:	b1a7      	cbz	r7, 23fe044 <__ieee754_atan2+0xa4>
 23fe01a:	ec51 0b10 	vmov	r0, r1, d0
 23fe01e:	a33a      	add	r3, pc, #232	; (adr r3, 23fe108 <__ieee754_atan2+0x168>)
 23fe020:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe024:	f7fa fd48 	bl	23f8ab8 <__aeabi_dsub>
 23fe028:	a339      	add	r3, pc, #228	; (adr r3, 23fe110 <__ieee754_atan2+0x170>)
 23fe02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe02e:	f7fa fd43 	bl	23f8ab8 <__aeabi_dsub>
 23fe032:	ec41 0b10 	vmov	d0, r0, r1
 23fe036:	e005      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe038:	4622      	mov	r2, r4
 23fe03a:	462b      	mov	r3, r5
 23fe03c:	f7fa fd3e 	bl	23f8abc <__adddf3>
 23fe040:	ec41 0b10 	vmov	d0, r0, r1
 23fe044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe048:	2f02      	cmp	r7, #2
 23fe04a:	d00e      	beq.n	23fe06a <__ieee754_atan2+0xca>
 23fe04c:	2f03      	cmp	r7, #3
 23fe04e:	d1f9      	bne.n	23fe044 <__ieee754_atan2+0xa4>
 23fe050:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fe118 <__ieee754_atan2+0x178>
 23fe054:	e7f6      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe05a:	f000 bec9 	b.w	23fedf0 <atan>
 23fe05e:	f1b9 0f00 	cmp.w	r9, #0
 23fe062:	db05      	blt.n	23fe070 <__ieee754_atan2+0xd0>
 23fe064:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fe120 <__ieee754_atan2+0x180>
 23fe068:	e7ec      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe06a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fe110 <__ieee754_atan2+0x170>
 23fe06e:	e7e9      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe070:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fe128 <__ieee754_atan2+0x188>
 23fe074:	e7e6      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe076:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fe120 <__ieee754_atan2+0x180>
 23fe07a:	e7c9      	b.n	23fe010 <__ieee754_atan2+0x70>
 23fe07c:	45f2      	cmp	sl, lr
 23fe07e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fe082:	d021      	beq.n	23fe0c8 <__ieee754_atan2+0x128>
 23fe084:	2f02      	cmp	r7, #2
 23fe086:	d827      	bhi.n	23fe0d8 <__ieee754_atan2+0x138>
 23fe088:	4b2d      	ldr	r3, [pc, #180]	; (23fe140 <__ieee754_atan2+0x1a0>)
 23fe08a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe08e:	ed97 0b00 	vldr	d0, [r7]
 23fe092:	e7d7      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe094:	a31c      	add	r3, pc, #112	; (adr r3, 23fe108 <__ieee754_atan2+0x168>)
 23fe096:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe09a:	ec51 0b10 	vmov	r0, r1, d0
 23fe09e:	f7fa fd0b 	bl	23f8ab8 <__aeabi_dsub>
 23fe0a2:	4602      	mov	r2, r0
 23fe0a4:	460b      	mov	r3, r1
 23fe0a6:	a11a      	add	r1, pc, #104	; (adr r1, 23fe110 <__ieee754_atan2+0x170>)
 23fe0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fe0ac:	f7fa fd04 	bl	23f8ab8 <__aeabi_dsub>
 23fe0b0:	ec41 0b10 	vmov	d0, r0, r1
 23fe0b4:	e7c6      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe0b6:	ee10 1a90 	vmov	r1, s1
 23fe0ba:	ec53 2b10 	vmov	r2, r3, d0
 23fe0be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fe0c2:	ec43 2b10 	vmov	d0, r2, r3
 23fe0c6:	e7bd      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe0c8:	2f02      	cmp	r7, #2
 23fe0ca:	d815      	bhi.n	23fe0f8 <__ieee754_atan2+0x158>
 23fe0cc:	4b1d      	ldr	r3, [pc, #116]	; (23fe144 <__ieee754_atan2+0x1a4>)
 23fe0ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fe0d2:	ed97 0b00 	vldr	d0, [r7]
 23fe0d6:	e7b5      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe0d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fe100 <__ieee754_atan2+0x160>
 23fe0dc:	e7b2      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe0de:	4602      	mov	r2, r0
 23fe0e0:	460b      	mov	r3, r1
 23fe0e2:	4620      	mov	r0, r4
 23fe0e4:	4629      	mov	r1, r5
 23fe0e6:	f7fa ffc9 	bl	23f907c <__aeabi_ddiv>
 23fe0ea:	ec41 0b10 	vmov	d0, r0, r1
 23fe0ee:	f001 f827 	bl	23ff140 <fabs>
 23fe0f2:	f000 fe7d 	bl	23fedf0 <atan>
 23fe0f6:	e78b      	b.n	23fe010 <__ieee754_atan2+0x70>
 23fe0f8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fe130 <__ieee754_atan2+0x190>
 23fe0fc:	e7a2      	b.n	23fe044 <__ieee754_atan2+0xa4>
 23fe0fe:	bf00      	nop
	...
 23fe108:	33145c07 	.word	0x33145c07
 23fe10c:	3ca1a626 	.word	0x3ca1a626
 23fe110:	54442d18 	.word	0x54442d18
 23fe114:	400921fb 	.word	0x400921fb
 23fe118:	54442d18 	.word	0x54442d18
 23fe11c:	c00921fb 	.word	0xc00921fb
 23fe120:	54442d18 	.word	0x54442d18
 23fe124:	3ff921fb 	.word	0x3ff921fb
 23fe128:	54442d18 	.word	0x54442d18
 23fe12c:	bff921fb 	.word	0xbff921fb
 23fe130:	54442d18 	.word	0x54442d18
 23fe134:	3fe921fb 	.word	0x3fe921fb
 23fe138:	7ff00000 	.word	0x7ff00000
 23fe13c:	c0100000 	.word	0xc0100000
 23fe140:	023ffde8 	.word	0x023ffde8
 23fe144:	023ffdd0 	.word	0x023ffdd0

023fe148 <__ieee754_pow>:
 23fe148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe14c:	ec55 4b11 	vmov	r4, r5, d1
 23fe150:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fe154:	ea5a 0204 	orrs.w	r2, sl, r4
 23fe158:	ed2d 8b0c 	vpush	{d8-d13}
 23fe15c:	b087      	sub	sp, #28
 23fe15e:	d01f      	beq.n	23fe1a0 <__ieee754_pow+0x58>
 23fe160:	495d      	ldr	r1, [pc, #372]	; (23fe2d8 <__ieee754_pow+0x190>)
 23fe162:	ee10 2a10 	vmov	r2, s0
 23fe166:	ec57 6b10 	vmov	r6, r7, d0
 23fe16a:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fe16e:	46b9      	mov	r9, r7
 23fe170:	4588      	cmp	r8, r1
 23fe172:	dc11      	bgt.n	23fe198 <__ieee754_pow+0x50>
 23fe174:	46ab      	mov	fp, r5
 23fe176:	ee11 3a10 	vmov	r3, s2
 23fe17a:	d108      	bne.n	23fe18e <__ieee754_pow+0x46>
 23fe17c:	b13e      	cbz	r6, 23fe18e <__ieee754_pow+0x46>
 23fe17e:	4857      	ldr	r0, [pc, #348]	; (23fe2dc <__ieee754_pow+0x194>)
 23fe180:	b007      	add	sp, #28
 23fe182:	ecbd 8b0c 	vpop	{d8-d13}
 23fe186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe18a:	f000 bff1 	b.w	23ff170 <nan>
 23fe18e:	4952      	ldr	r1, [pc, #328]	; (23fe2d8 <__ieee754_pow+0x190>)
 23fe190:	458a      	cmp	sl, r1
 23fe192:	dc01      	bgt.n	23fe198 <__ieee754_pow+0x50>
 23fe194:	d10b      	bne.n	23fe1ae <__ieee754_pow+0x66>
 23fe196:	b153      	cbz	r3, 23fe1ae <__ieee754_pow+0x66>
 23fe198:	4b51      	ldr	r3, [pc, #324]	; (23fe2e0 <__ieee754_pow+0x198>)
 23fe19a:	4443      	add	r3, r8
 23fe19c:	4313      	orrs	r3, r2
 23fe19e:	d1ee      	bne.n	23fe17e <__ieee754_pow+0x36>
 23fe1a0:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fe2c8 <__ieee754_pow+0x180>
 23fe1a4:	b007      	add	sp, #28
 23fe1a6:	ecbd 8b0c 	vpop	{d8-d13}
 23fe1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe1ae:	f1b9 0f00 	cmp.w	r9, #0
 23fe1b2:	db45      	blt.n	23fe240 <__ieee754_pow+0xf8>
 23fe1b4:	2100      	movs	r1, #0
 23fe1b6:	9100      	str	r1, [sp, #0]
 23fe1b8:	b983      	cbnz	r3, 23fe1dc <__ieee754_pow+0x94>
 23fe1ba:	4b47      	ldr	r3, [pc, #284]	; (23fe2d8 <__ieee754_pow+0x190>)
 23fe1bc:	459a      	cmp	sl, r3
 23fe1be:	d05b      	beq.n	23fe278 <__ieee754_pow+0x130>
 23fe1c0:	4b48      	ldr	r3, [pc, #288]	; (23fe2e4 <__ieee754_pow+0x19c>)
 23fe1c2:	459a      	cmp	sl, r3
 23fe1c4:	d06a      	beq.n	23fe29c <__ieee754_pow+0x154>
 23fe1c6:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fe1ca:	f000 84b0 	beq.w	23feb2e <__ieee754_pow+0x9e6>
 23fe1ce:	4b46      	ldr	r3, [pc, #280]	; (23fe2e8 <__ieee754_pow+0x1a0>)
 23fe1d0:	459b      	cmp	fp, r3
 23fe1d2:	d103      	bne.n	23fe1dc <__ieee754_pow+0x94>
 23fe1d4:	f1b9 0f00 	cmp.w	r9, #0
 23fe1d8:	f280 850d 	bge.w	23febf6 <__ieee754_pow+0xaae>
 23fe1dc:	9202      	str	r2, [sp, #8]
 23fe1de:	ec47 6b10 	vmov	d0, r6, r7
 23fe1e2:	f000 ffad 	bl	23ff140 <fabs>
 23fe1e6:	9a02      	ldr	r2, [sp, #8]
 23fe1e8:	b94a      	cbnz	r2, 23fe1fe <__ieee754_pow+0xb6>
 23fe1ea:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fe1ee:	4a3d      	ldr	r2, [pc, #244]	; (23fe2e4 <__ieee754_pow+0x19c>)
 23fe1f0:	4293      	cmp	r3, r2
 23fe1f2:	f000 83a8 	beq.w	23fe946 <__ieee754_pow+0x7fe>
 23fe1f6:	f1b8 0f00 	cmp.w	r8, #0
 23fe1fa:	f000 83a4 	beq.w	23fe946 <__ieee754_pow+0x7fe>
 23fe1fe:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fe202:	9a00      	ldr	r2, [sp, #0]
 23fe204:	3b01      	subs	r3, #1
 23fe206:	9304      	str	r3, [sp, #16]
 23fe208:	4313      	orrs	r3, r2
 23fe20a:	d04e      	beq.n	23fe2aa <__ieee754_pow+0x162>
 23fe20c:	4b37      	ldr	r3, [pc, #220]	; (23fe2ec <__ieee754_pow+0x1a4>)
 23fe20e:	459a      	cmp	sl, r3
 23fe210:	dd72      	ble.n	23fe2f8 <__ieee754_pow+0x1b0>
 23fe212:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fe216:	459a      	cmp	sl, r3
 23fe218:	4b35      	ldr	r3, [pc, #212]	; (23fe2f0 <__ieee754_pow+0x1a8>)
 23fe21a:	f340 842b 	ble.w	23fea74 <__ieee754_pow+0x92c>
 23fe21e:	4598      	cmp	r8, r3
 23fe220:	f340 83a9 	ble.w	23fe976 <__ieee754_pow+0x82e>
 23fe224:	f1bb 0f00 	cmp.w	fp, #0
 23fe228:	f340 83a9 	ble.w	23fe97e <__ieee754_pow+0x836>
 23fe22c:	a328      	add	r3, pc, #160	; (adr r3, 23fe2d0 <__ieee754_pow+0x188>)
 23fe22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe232:	4610      	mov	r0, r2
 23fe234:	4619      	mov	r1, r3
 23fe236:	f7fa fdf7 	bl	23f8e28 <__aeabi_dmul>
 23fe23a:	ec41 0b10 	vmov	d0, r0, r1
 23fe23e:	e7b1      	b.n	23fe1a4 <__ieee754_pow+0x5c>
 23fe240:	492c      	ldr	r1, [pc, #176]	; (23fe2f4 <__ieee754_pow+0x1ac>)
 23fe242:	458a      	cmp	sl, r1
 23fe244:	dc27      	bgt.n	23fe296 <__ieee754_pow+0x14e>
 23fe246:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fe24a:	458a      	cmp	sl, r1
 23fe24c:	ddb2      	ble.n	23fe1b4 <__ieee754_pow+0x6c>
 23fe24e:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fe252:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fe256:	2914      	cmp	r1, #20
 23fe258:	f340 847d 	ble.w	23feb56 <__ieee754_pow+0xa0e>
 23fe25c:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fe260:	fa23 f001 	lsr.w	r0, r3, r1
 23fe264:	fa00 f101 	lsl.w	r1, r0, r1
 23fe268:	4299      	cmp	r1, r3
 23fe26a:	d1a3      	bne.n	23fe1b4 <__ieee754_pow+0x6c>
 23fe26c:	f000 0001 	and.w	r0, r0, #1
 23fe270:	f1c0 0102 	rsb	r1, r0, #2
 23fe274:	9100      	str	r1, [sp, #0]
 23fe276:	e79f      	b.n	23fe1b8 <__ieee754_pow+0x70>
 23fe278:	4b19      	ldr	r3, [pc, #100]	; (23fe2e0 <__ieee754_pow+0x198>)
 23fe27a:	4443      	add	r3, r8
 23fe27c:	4313      	orrs	r3, r2
 23fe27e:	d08f      	beq.n	23fe1a0 <__ieee754_pow+0x58>
 23fe280:	4b1b      	ldr	r3, [pc, #108]	; (23fe2f0 <__ieee754_pow+0x1a8>)
 23fe282:	4598      	cmp	r8, r3
 23fe284:	f340 83ab 	ble.w	23fe9de <__ieee754_pow+0x896>
 23fe288:	f1bb 0f00 	cmp.w	fp, #0
 23fe28c:	f2c0 8377 	blt.w	23fe97e <__ieee754_pow+0x836>
 23fe290:	ec45 4b10 	vmov	d0, r4, r5
 23fe294:	e786      	b.n	23fe1a4 <__ieee754_pow+0x5c>
 23fe296:	2102      	movs	r1, #2
 23fe298:	9100      	str	r1, [sp, #0]
 23fe29a:	e78d      	b.n	23fe1b8 <__ieee754_pow+0x70>
 23fe29c:	f1bb 0f00 	cmp.w	fp, #0
 23fe2a0:	f2c0 844f 	blt.w	23feb42 <__ieee754_pow+0x9fa>
 23fe2a4:	ec47 6b10 	vmov	d0, r6, r7
 23fe2a8:	e77c      	b.n	23fe1a4 <__ieee754_pow+0x5c>
 23fe2aa:	4632      	mov	r2, r6
 23fe2ac:	463b      	mov	r3, r7
 23fe2ae:	4610      	mov	r0, r2
 23fe2b0:	4619      	mov	r1, r3
 23fe2b2:	f7fa fc01 	bl	23f8ab8 <__aeabi_dsub>
 23fe2b6:	4602      	mov	r2, r0
 23fe2b8:	460b      	mov	r3, r1
 23fe2ba:	f7fa fedf 	bl	23f907c <__aeabi_ddiv>
 23fe2be:	ec41 0b10 	vmov	d0, r0, r1
 23fe2c2:	e76f      	b.n	23fe1a4 <__ieee754_pow+0x5c>
 23fe2c4:	f3af 8000 	nop.w
 23fe2c8:	00000000 	.word	0x00000000
 23fe2cc:	3ff00000 	.word	0x3ff00000
 23fe2d0:	8800759c 	.word	0x8800759c
 23fe2d4:	7e37e43c 	.word	0x7e37e43c
 23fe2d8:	7ff00000 	.word	0x7ff00000
 23fe2dc:	023ffe00 	.word	0x023ffe00
 23fe2e0:	c0100000 	.word	0xc0100000
 23fe2e4:	3ff00000 	.word	0x3ff00000
 23fe2e8:	3fe00000 	.word	0x3fe00000
 23fe2ec:	41e00000 	.word	0x41e00000
 23fe2f0:	3fefffff 	.word	0x3fefffff
 23fe2f4:	433fffff 	.word	0x433fffff
 23fe2f8:	4be3      	ldr	r3, [pc, #908]	; (23fe688 <__ieee754_pow+0x540>)
 23fe2fa:	2200      	movs	r2, #0
 23fe2fc:	ea09 0303 	and.w	r3, r9, r3
 23fe300:	b953      	cbnz	r3, 23fe318 <__ieee754_pow+0x1d0>
 23fe302:	4be2      	ldr	r3, [pc, #904]	; (23fe68c <__ieee754_pow+0x544>)
 23fe304:	ec51 0b10 	vmov	r0, r1, d0
 23fe308:	f7fa fd8e 	bl	23f8e28 <__aeabi_dmul>
 23fe30c:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fe310:	ec41 0b10 	vmov	d0, r0, r1
 23fe314:	ee10 8a90 	vmov	r8, s1
 23fe318:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fe31c:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fe320:	4edb      	ldr	r6, [pc, #876]	; (23fe690 <__ieee754_pow+0x548>)
 23fe322:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fe326:	ea48 0606 	orr.w	r6, r8, r6
 23fe32a:	189a      	adds	r2, r3, r2
 23fe32c:	4bd9      	ldr	r3, [pc, #868]	; (23fe694 <__ieee754_pow+0x54c>)
 23fe32e:	4598      	cmp	r8, r3
 23fe330:	9205      	str	r2, [sp, #20]
 23fe332:	dd07      	ble.n	23fe344 <__ieee754_pow+0x1fc>
 23fe334:	4bd8      	ldr	r3, [pc, #864]	; (23fe698 <__ieee754_pow+0x550>)
 23fe336:	4598      	cmp	r8, r3
 23fe338:	f340 8433 	ble.w	23feba2 <__ieee754_pow+0xa5a>
 23fe33c:	3201      	adds	r2, #1
 23fe33e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fe342:	9205      	str	r2, [sp, #20]
 23fe344:	2700      	movs	r7, #0
 23fe346:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fe628 <__ieee754_pow+0x4e0>
 23fe34a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fe630 <__ieee754_pow+0x4e8>
 23fe34e:	eeb0 da47 	vmov.f32	s26, s14
 23fe352:	eef0 da67 	vmov.f32	s27, s15
 23fe356:	eeb0 ca47 	vmov.f32	s24, s14
 23fe35a:	eef0 ca67 	vmov.f32	s25, s15
 23fe35e:	ec51 0b16 	vmov	r0, r1, d6
 23fe362:	ec53 2b10 	vmov	r2, r3, d0
 23fe366:	4633      	mov	r3, r6
 23fe368:	1076      	asrs	r6, r6, #1
 23fe36a:	ec43 2b19 	vmov	d9, r2, r3
 23fe36e:	ec41 0b1a 	vmov	d10, r0, r1
 23fe372:	4602      	mov	r2, r0
 23fe374:	460b      	mov	r3, r1
 23fe376:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fe37a:	ec51 0b19 	vmov	r0, r1, d9
 23fe37e:	f7fa fb9b 	bl	23f8ab8 <__aeabi_dsub>
 23fe382:	4680      	mov	r8, r0
 23fe384:	4689      	mov	r9, r1
 23fe386:	ec53 2b1a 	vmov	r2, r3, d10
 23fe38a:	ec51 0b19 	vmov	r0, r1, d9
 23fe38e:	f7fa fb95 	bl	23f8abc <__adddf3>
 23fe392:	4602      	mov	r2, r0
 23fe394:	460b      	mov	r3, r1
 23fe396:	2000      	movs	r0, #0
 23fe398:	49bd      	ldr	r1, [pc, #756]	; (23fe690 <__ieee754_pow+0x548>)
 23fe39a:	f7fa fe6f 	bl	23f907c <__aeabi_ddiv>
 23fe39e:	ec41 0b1b 	vmov	d11, r0, r1
 23fe3a2:	ec53 2b1b 	vmov	r2, r3, d11
 23fe3a6:	4640      	mov	r0, r8
 23fe3a8:	4649      	mov	r1, r9
 23fe3aa:	f7fa fd3d 	bl	23f8e28 <__aeabi_dmul>
 23fe3ae:	460a      	mov	r2, r1
 23fe3b0:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fe3b4:	ec41 0b18 	vmov	d8, r0, r1
 23fe3b8:	4601      	mov	r1, r0
 23fe3ba:	2000      	movs	r0, #0
 23fe3bc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fe3c0:	2100      	movs	r1, #0
 23fe3c2:	4606      	mov	r6, r0
 23fe3c4:	4602      	mov	r2, r0
 23fe3c6:	9102      	str	r1, [sp, #8]
 23fe3c8:	19d9      	adds	r1, r3, r7
 23fe3ca:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fe3ce:	460f      	mov	r7, r1
 23fe3d0:	460b      	mov	r3, r1
 23fe3d2:	4650      	mov	r0, sl
 23fe3d4:	4659      	mov	r1, fp
 23fe3d6:	f7fa fd27 	bl	23f8e28 <__aeabi_dmul>
 23fe3da:	4602      	mov	r2, r0
 23fe3dc:	460b      	mov	r3, r1
 23fe3de:	4640      	mov	r0, r8
 23fe3e0:	4649      	mov	r1, r9
 23fe3e2:	f7fa fb69 	bl	23f8ab8 <__aeabi_dsub>
 23fe3e6:	4680      	mov	r8, r0
 23fe3e8:	4689      	mov	r9, r1
 23fe3ea:	4630      	mov	r0, r6
 23fe3ec:	4639      	mov	r1, r7
 23fe3ee:	ec53 2b1a 	vmov	r2, r3, d10
 23fe3f2:	f7fa fb61 	bl	23f8ab8 <__aeabi_dsub>
 23fe3f6:	4602      	mov	r2, r0
 23fe3f8:	460b      	mov	r3, r1
 23fe3fa:	ec51 0b19 	vmov	r0, r1, d9
 23fe3fe:	f7fa fb5b 	bl	23f8ab8 <__aeabi_dsub>
 23fe402:	4652      	mov	r2, sl
 23fe404:	465b      	mov	r3, fp
 23fe406:	f7fa fd0f 	bl	23f8e28 <__aeabi_dmul>
 23fe40a:	4602      	mov	r2, r0
 23fe40c:	460b      	mov	r3, r1
 23fe40e:	4640      	mov	r0, r8
 23fe410:	4649      	mov	r1, r9
 23fe412:	f7fa fb51 	bl	23f8ab8 <__aeabi_dsub>
 23fe416:	ec53 2b1b 	vmov	r2, r3, d11
 23fe41a:	f7fa fd05 	bl	23f8e28 <__aeabi_dmul>
 23fe41e:	ec53 2b18 	vmov	r2, r3, d8
 23fe422:	ec41 0b1a 	vmov	d10, r0, r1
 23fe426:	ec51 0b18 	vmov	r0, r1, d8
 23fe42a:	f7fa fcfd 	bl	23f8e28 <__aeabi_dmul>
 23fe42e:	4606      	mov	r6, r0
 23fe430:	460f      	mov	r7, r1
 23fe432:	a381      	add	r3, pc, #516	; (adr r3, 23fe638 <__ieee754_pow+0x4f0>)
 23fe434:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe438:	f7fa fcf6 	bl	23f8e28 <__aeabi_dmul>
 23fe43c:	a380      	add	r3, pc, #512	; (adr r3, 23fe640 <__ieee754_pow+0x4f8>)
 23fe43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe442:	f7fa fb3b 	bl	23f8abc <__adddf3>
 23fe446:	4632      	mov	r2, r6
 23fe448:	463b      	mov	r3, r7
 23fe44a:	f7fa fced 	bl	23f8e28 <__aeabi_dmul>
 23fe44e:	a37e      	add	r3, pc, #504	; (adr r3, 23fe648 <__ieee754_pow+0x500>)
 23fe450:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe454:	f7fa fb32 	bl	23f8abc <__adddf3>
 23fe458:	4632      	mov	r2, r6
 23fe45a:	463b      	mov	r3, r7
 23fe45c:	f7fa fce4 	bl	23f8e28 <__aeabi_dmul>
 23fe460:	a37b      	add	r3, pc, #492	; (adr r3, 23fe650 <__ieee754_pow+0x508>)
 23fe462:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe466:	f7fa fb29 	bl	23f8abc <__adddf3>
 23fe46a:	4632      	mov	r2, r6
 23fe46c:	463b      	mov	r3, r7
 23fe46e:	f7fa fcdb 	bl	23f8e28 <__aeabi_dmul>
 23fe472:	a379      	add	r3, pc, #484	; (adr r3, 23fe658 <__ieee754_pow+0x510>)
 23fe474:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe478:	f7fa fb20 	bl	23f8abc <__adddf3>
 23fe47c:	4632      	mov	r2, r6
 23fe47e:	463b      	mov	r3, r7
 23fe480:	f7fa fcd2 	bl	23f8e28 <__aeabi_dmul>
 23fe484:	a376      	add	r3, pc, #472	; (adr r3, 23fe660 <__ieee754_pow+0x518>)
 23fe486:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe48a:	f7fa fb17 	bl	23f8abc <__adddf3>
 23fe48e:	4680      	mov	r8, r0
 23fe490:	4689      	mov	r9, r1
 23fe492:	4632      	mov	r2, r6
 23fe494:	463b      	mov	r3, r7
 23fe496:	4630      	mov	r0, r6
 23fe498:	4639      	mov	r1, r7
 23fe49a:	f7fa fcc5 	bl	23f8e28 <__aeabi_dmul>
 23fe49e:	4602      	mov	r2, r0
 23fe4a0:	460b      	mov	r3, r1
 23fe4a2:	4640      	mov	r0, r8
 23fe4a4:	4649      	mov	r1, r9
 23fe4a6:	f04f 0800 	mov.w	r8, #0
 23fe4aa:	f7fa fcbd 	bl	23f8e28 <__aeabi_dmul>
 23fe4ae:	4652      	mov	r2, sl
 23fe4b0:	4606      	mov	r6, r0
 23fe4b2:	460f      	mov	r7, r1
 23fe4b4:	465b      	mov	r3, fp
 23fe4b6:	ec51 0b18 	vmov	r0, r1, d8
 23fe4ba:	f7fa faff 	bl	23f8abc <__adddf3>
 23fe4be:	ec53 2b1a 	vmov	r2, r3, d10
 23fe4c2:	f7fa fcb1 	bl	23f8e28 <__aeabi_dmul>
 23fe4c6:	4632      	mov	r2, r6
 23fe4c8:	463b      	mov	r3, r7
 23fe4ca:	f7fa faf7 	bl	23f8abc <__adddf3>
 23fe4ce:	4652      	mov	r2, sl
 23fe4d0:	465b      	mov	r3, fp
 23fe4d2:	ec41 0b19 	vmov	d9, r0, r1
 23fe4d6:	4650      	mov	r0, sl
 23fe4d8:	4659      	mov	r1, fp
 23fe4da:	f7fa fca5 	bl	23f8e28 <__aeabi_dmul>
 23fe4de:	2200      	movs	r2, #0
 23fe4e0:	4b6e      	ldr	r3, [pc, #440]	; (23fe69c <__ieee754_pow+0x554>)
 23fe4e2:	4606      	mov	r6, r0
 23fe4e4:	460f      	mov	r7, r1
 23fe4e6:	f7fa fae9 	bl	23f8abc <__adddf3>
 23fe4ea:	ec53 2b19 	vmov	r2, r3, d9
 23fe4ee:	f7fa fae5 	bl	23f8abc <__adddf3>
 23fe4f2:	4689      	mov	r9, r1
 23fe4f4:	4642      	mov	r2, r8
 23fe4f6:	4650      	mov	r0, sl
 23fe4f8:	464b      	mov	r3, r9
 23fe4fa:	4659      	mov	r1, fp
 23fe4fc:	f7fa fc94 	bl	23f8e28 <__aeabi_dmul>
 23fe500:	2200      	movs	r2, #0
 23fe502:	4682      	mov	sl, r0
 23fe504:	468b      	mov	fp, r1
 23fe506:	4b65      	ldr	r3, [pc, #404]	; (23fe69c <__ieee754_pow+0x554>)
 23fe508:	4640      	mov	r0, r8
 23fe50a:	4649      	mov	r1, r9
 23fe50c:	f7fa fad4 	bl	23f8ab8 <__aeabi_dsub>
 23fe510:	4632      	mov	r2, r6
 23fe512:	463b      	mov	r3, r7
 23fe514:	f7fa fad0 	bl	23f8ab8 <__aeabi_dsub>
 23fe518:	4602      	mov	r2, r0
 23fe51a:	460b      	mov	r3, r1
 23fe51c:	ec51 0b19 	vmov	r0, r1, d9
 23fe520:	f7fa faca 	bl	23f8ab8 <__aeabi_dsub>
 23fe524:	ec53 2b18 	vmov	r2, r3, d8
 23fe528:	f7fa fc7e 	bl	23f8e28 <__aeabi_dmul>
 23fe52c:	4606      	mov	r6, r0
 23fe52e:	460f      	mov	r7, r1
 23fe530:	4642      	mov	r2, r8
 23fe532:	464b      	mov	r3, r9
 23fe534:	ec51 0b1a 	vmov	r0, r1, d10
 23fe538:	f7fa fc76 	bl	23f8e28 <__aeabi_dmul>
 23fe53c:	4602      	mov	r2, r0
 23fe53e:	460b      	mov	r3, r1
 23fe540:	4630      	mov	r0, r6
 23fe542:	4639      	mov	r1, r7
 23fe544:	f7fa faba 	bl	23f8abc <__adddf3>
 23fe548:	4680      	mov	r8, r0
 23fe54a:	4689      	mov	r9, r1
 23fe54c:	4650      	mov	r0, sl
 23fe54e:	4642      	mov	r2, r8
 23fe550:	4659      	mov	r1, fp
 23fe552:	464b      	mov	r3, r9
 23fe554:	f7fa fab2 	bl	23f8abc <__adddf3>
 23fe558:	2000      	movs	r0, #0
 23fe55a:	460f      	mov	r7, r1
 23fe55c:	4606      	mov	r6, r0
 23fe55e:	a342      	add	r3, pc, #264	; (adr r3, 23fe668 <__ieee754_pow+0x520>)
 23fe560:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe564:	f7fa fc60 	bl	23f8e28 <__aeabi_dmul>
 23fe568:	4652      	mov	r2, sl
 23fe56a:	465b      	mov	r3, fp
 23fe56c:	ec41 0b19 	vmov	d9, r0, r1
 23fe570:	4630      	mov	r0, r6
 23fe572:	4639      	mov	r1, r7
 23fe574:	f7fa faa0 	bl	23f8ab8 <__aeabi_dsub>
 23fe578:	4602      	mov	r2, r0
 23fe57a:	460b      	mov	r3, r1
 23fe57c:	4640      	mov	r0, r8
 23fe57e:	4649      	mov	r1, r9
 23fe580:	f7fa fa9a 	bl	23f8ab8 <__aeabi_dsub>
 23fe584:	a33a      	add	r3, pc, #232	; (adr r3, 23fe670 <__ieee754_pow+0x528>)
 23fe586:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe58a:	f7fa fc4d 	bl	23f8e28 <__aeabi_dmul>
 23fe58e:	4680      	mov	r8, r0
 23fe590:	4689      	mov	r9, r1
 23fe592:	4630      	mov	r0, r6
 23fe594:	4639      	mov	r1, r7
 23fe596:	a338      	add	r3, pc, #224	; (adr r3, 23fe678 <__ieee754_pow+0x530>)
 23fe598:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe59c:	f7fa fc44 	bl	23f8e28 <__aeabi_dmul>
 23fe5a0:	4602      	mov	r2, r0
 23fe5a2:	460b      	mov	r3, r1
 23fe5a4:	4640      	mov	r0, r8
 23fe5a6:	4649      	mov	r1, r9
 23fe5a8:	f7fa fa88 	bl	23f8abc <__adddf3>
 23fe5ac:	ec53 2b1c 	vmov	r2, r3, d12
 23fe5b0:	f7fa fa84 	bl	23f8abc <__adddf3>
 23fe5b4:	4606      	mov	r6, r0
 23fe5b6:	460f      	mov	r7, r1
 23fe5b8:	9805      	ldr	r0, [sp, #20]
 23fe5ba:	f7fa fbcb 	bl	23f8d54 <__aeabi_i2d>
 23fe5be:	4632      	mov	r2, r6
 23fe5c0:	4680      	mov	r8, r0
 23fe5c2:	4689      	mov	r9, r1
 23fe5c4:	463b      	mov	r3, r7
 23fe5c6:	ec51 0b19 	vmov	r0, r1, d9
 23fe5ca:	f7fa fa77 	bl	23f8abc <__adddf3>
 23fe5ce:	ec53 2b1d 	vmov	r2, r3, d13
 23fe5d2:	f7fa fa73 	bl	23f8abc <__adddf3>
 23fe5d6:	4642      	mov	r2, r8
 23fe5d8:	464b      	mov	r3, r9
 23fe5da:	f7fa fa6f 	bl	23f8abc <__adddf3>
 23fe5de:	2000      	movs	r0, #0
 23fe5e0:	4642      	mov	r2, r8
 23fe5e2:	464b      	mov	r3, r9
 23fe5e4:	4682      	mov	sl, r0
 23fe5e6:	468b      	mov	fp, r1
 23fe5e8:	f7fa fa66 	bl	23f8ab8 <__aeabi_dsub>
 23fe5ec:	ec53 2b1d 	vmov	r2, r3, d13
 23fe5f0:	f7fa fa62 	bl	23f8ab8 <__aeabi_dsub>
 23fe5f4:	ec53 2b19 	vmov	r2, r3, d9
 23fe5f8:	f7fa fa5e 	bl	23f8ab8 <__aeabi_dsub>
 23fe5fc:	4602      	mov	r2, r0
 23fe5fe:	460b      	mov	r3, r1
 23fe600:	4630      	mov	r0, r6
 23fe602:	4639      	mov	r1, r7
 23fe604:	f7fa fa58 	bl	23f8ab8 <__aeabi_dsub>
 23fe608:	9b00      	ldr	r3, [sp, #0]
 23fe60a:	9a04      	ldr	r2, [sp, #16]
 23fe60c:	3b01      	subs	r3, #1
 23fe60e:	4313      	orrs	r3, r2
 23fe610:	ec41 0b18 	vmov	d8, r0, r1
 23fe614:	f040 81dc 	bne.w	23fe9d0 <__ieee754_pow+0x888>
 23fe618:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fe680 <__ieee754_pow+0x538>
 23fe61c:	eeb0 9a47 	vmov.f32	s18, s14
 23fe620:	eef0 9a67 	vmov.f32	s19, s15
 23fe624:	e03c      	b.n	23fe6a0 <__ieee754_pow+0x558>
 23fe626:	bf00      	nop
	...
 23fe634:	3ff00000 	.word	0x3ff00000
 23fe638:	4a454eef 	.word	0x4a454eef
 23fe63c:	3fca7e28 	.word	0x3fca7e28
 23fe640:	93c9db65 	.word	0x93c9db65
 23fe644:	3fcd864a 	.word	0x3fcd864a
 23fe648:	a91d4101 	.word	0xa91d4101
 23fe64c:	3fd17460 	.word	0x3fd17460
 23fe650:	518f264d 	.word	0x518f264d
 23fe654:	3fd55555 	.word	0x3fd55555
 23fe658:	db6fabff 	.word	0xdb6fabff
 23fe65c:	3fdb6db6 	.word	0x3fdb6db6
 23fe660:	33333303 	.word	0x33333303
 23fe664:	3fe33333 	.word	0x3fe33333
 23fe668:	e0000000 	.word	0xe0000000
 23fe66c:	3feec709 	.word	0x3feec709
 23fe670:	dc3a03fd 	.word	0xdc3a03fd
 23fe674:	3feec709 	.word	0x3feec709
 23fe678:	145b01f5 	.word	0x145b01f5
 23fe67c:	be3e2fe0 	.word	0xbe3e2fe0
 23fe680:	00000000 	.word	0x00000000
 23fe684:	bff00000 	.word	0xbff00000
 23fe688:	7ff00000 	.word	0x7ff00000
 23fe68c:	43400000 	.word	0x43400000
 23fe690:	3ff00000 	.word	0x3ff00000
 23fe694:	0003988e 	.word	0x0003988e
 23fe698:	000bb679 	.word	0x000bb679
 23fe69c:	40080000 	.word	0x40080000
 23fe6a0:	2300      	movs	r3, #0
 23fe6a2:	4620      	mov	r0, r4
 23fe6a4:	4629      	mov	r1, r5
 23fe6a6:	e9cd 4500 	strd	r4, r5, [sp]
 23fe6aa:	9300      	str	r3, [sp, #0]
 23fe6ac:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fe6b0:	4642      	mov	r2, r8
 23fe6b2:	464b      	mov	r3, r9
 23fe6b4:	f7fa fa00 	bl	23f8ab8 <__aeabi_dsub>
 23fe6b8:	465b      	mov	r3, fp
 23fe6ba:	4652      	mov	r2, sl
 23fe6bc:	f7fa fbb4 	bl	23f8e28 <__aeabi_dmul>
 23fe6c0:	4606      	mov	r6, r0
 23fe6c2:	460f      	mov	r7, r1
 23fe6c4:	4622      	mov	r2, r4
 23fe6c6:	462b      	mov	r3, r5
 23fe6c8:	ec51 0b18 	vmov	r0, r1, d8
 23fe6cc:	f7fa fbac 	bl	23f8e28 <__aeabi_dmul>
 23fe6d0:	4602      	mov	r2, r0
 23fe6d2:	460b      	mov	r3, r1
 23fe6d4:	4630      	mov	r0, r6
 23fe6d6:	4639      	mov	r1, r7
 23fe6d8:	f7fa f9f0 	bl	23f8abc <__adddf3>
 23fe6dc:	4642      	mov	r2, r8
 23fe6de:	4604      	mov	r4, r0
 23fe6e0:	460d      	mov	r5, r1
 23fe6e2:	464b      	mov	r3, r9
 23fe6e4:	4659      	mov	r1, fp
 23fe6e6:	4650      	mov	r0, sl
 23fe6e8:	46a0      	mov	r8, r4
 23fe6ea:	f7fa fb9d 	bl	23f8e28 <__aeabi_dmul>
 23fe6ee:	4606      	mov	r6, r0
 23fe6f0:	460f      	mov	r7, r1
 23fe6f2:	4620      	mov	r0, r4
 23fe6f4:	4629      	mov	r1, r5
 23fe6f6:	4632      	mov	r2, r6
 23fe6f8:	463b      	mov	r3, r7
 23fe6fa:	46a9      	mov	r9, r5
 23fe6fc:	f7fa f9de 	bl	23f8abc <__adddf3>
 23fe700:	4bd5      	ldr	r3, [pc, #852]	; (23fea58 <__ieee754_pow+0x910>)
 23fe702:	4604      	mov	r4, r0
 23fe704:	460d      	mov	r5, r1
 23fe706:	4299      	cmp	r1, r3
 23fe708:	468b      	mov	fp, r1
 23fe70a:	f340 813b 	ble.w	23fe984 <__ieee754_pow+0x83c>
 23fe70e:	4bd3      	ldr	r3, [pc, #844]	; (23fea5c <__ieee754_pow+0x914>)
 23fe710:	440b      	add	r3, r1
 23fe712:	4303      	orrs	r3, r0
 23fe714:	f040 8235 	bne.w	23feb82 <__ieee754_pow+0xa3a>
 23fe718:	4640      	mov	r0, r8
 23fe71a:	4649      	mov	r1, r9
 23fe71c:	a3b6      	add	r3, pc, #728	; (adr r3, 23fe9f8 <__ieee754_pow+0x8b0>)
 23fe71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe722:	f7fa f9cb 	bl	23f8abc <__adddf3>
 23fe726:	4632      	mov	r2, r6
 23fe728:	463b      	mov	r3, r7
 23fe72a:	ec41 0b18 	vmov	d8, r0, r1
 23fe72e:	4620      	mov	r0, r4
 23fe730:	4629      	mov	r1, r5
 23fe732:	f7fa f9c1 	bl	23f8ab8 <__aeabi_dsub>
 23fe736:	4602      	mov	r2, r0
 23fe738:	460b      	mov	r3, r1
 23fe73a:	ec51 0b18 	vmov	r0, r1, d8
 23fe73e:	f7fa fe03 	bl	23f9348 <__aeabi_dcmpgt>
 23fe742:	2800      	cmp	r0, #0
 23fe744:	f040 821d 	bne.w	23feb82 <__ieee754_pow+0xa3a>
 23fe748:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fe74c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fe750:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fe754:	4cc2      	ldr	r4, [pc, #776]	; (23fea60 <__ieee754_pow+0x918>)
 23fe756:	f1bb 0f00 	cmp.w	fp, #0
 23fe75a:	fa42 f303 	asr.w	r3, r2, r3
 23fe75e:	f04f 0000 	mov.w	r0, #0
 23fe762:	445b      	add	r3, fp
 23fe764:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fe768:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fe76c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fe770:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fe774:	fa44 f402 	asr.w	r4, r4, r2
 23fe778:	f1c2 0214 	rsb	r2, r2, #20
 23fe77c:	ea23 0104 	bic.w	r1, r3, r4
 23fe780:	fa4a fa02 	asr.w	sl, sl, r2
 23fe784:	4602      	mov	r2, r0
 23fe786:	4630      	mov	r0, r6
 23fe788:	460b      	mov	r3, r1
 23fe78a:	bfb8      	it	lt
 23fe78c:	f1ca 0a00 	rsblt	sl, sl, #0
 23fe790:	4639      	mov	r1, r7
 23fe792:	f7fa f991 	bl	23f8ab8 <__aeabi_dsub>
 23fe796:	4602      	mov	r2, r0
 23fe798:	460b      	mov	r3, r1
 23fe79a:	4606      	mov	r6, r0
 23fe79c:	460f      	mov	r7, r1
 23fe79e:	4640      	mov	r0, r8
 23fe7a0:	4649      	mov	r1, r9
 23fe7a2:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23fe7a6:	f7fa f989 	bl	23f8abc <__adddf3>
 23fe7aa:	460d      	mov	r5, r1
 23fe7ac:	2400      	movs	r4, #0
 23fe7ae:	4629      	mov	r1, r5
 23fe7b0:	a393      	add	r3, pc, #588	; (adr r3, 23fea00 <__ieee754_pow+0x8b8>)
 23fe7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe7b6:	4620      	mov	r0, r4
 23fe7b8:	f7fa fb36 	bl	23f8e28 <__aeabi_dmul>
 23fe7bc:	4632      	mov	r2, r6
 23fe7be:	463b      	mov	r3, r7
 23fe7c0:	4606      	mov	r6, r0
 23fe7c2:	460f      	mov	r7, r1
 23fe7c4:	4620      	mov	r0, r4
 23fe7c6:	4629      	mov	r1, r5
 23fe7c8:	f7fa f976 	bl	23f8ab8 <__aeabi_dsub>
 23fe7cc:	4602      	mov	r2, r0
 23fe7ce:	460b      	mov	r3, r1
 23fe7d0:	4640      	mov	r0, r8
 23fe7d2:	4649      	mov	r1, r9
 23fe7d4:	f7fa f970 	bl	23f8ab8 <__aeabi_dsub>
 23fe7d8:	a38b      	add	r3, pc, #556	; (adr r3, 23fea08 <__ieee754_pow+0x8c0>)
 23fe7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe7de:	f7fa fb23 	bl	23f8e28 <__aeabi_dmul>
 23fe7e2:	4680      	mov	r8, r0
 23fe7e4:	4689      	mov	r9, r1
 23fe7e6:	4620      	mov	r0, r4
 23fe7e8:	4629      	mov	r1, r5
 23fe7ea:	a389      	add	r3, pc, #548	; (adr r3, 23fea10 <__ieee754_pow+0x8c8>)
 23fe7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe7f0:	f7fa fb1a 	bl	23f8e28 <__aeabi_dmul>
 23fe7f4:	4602      	mov	r2, r0
 23fe7f6:	460b      	mov	r3, r1
 23fe7f8:	4640      	mov	r0, r8
 23fe7fa:	4649      	mov	r1, r9
 23fe7fc:	f7fa f95e 	bl	23f8abc <__adddf3>
 23fe800:	4680      	mov	r8, r0
 23fe802:	4689      	mov	r9, r1
 23fe804:	4630      	mov	r0, r6
 23fe806:	4642      	mov	r2, r8
 23fe808:	4639      	mov	r1, r7
 23fe80a:	464b      	mov	r3, r9
 23fe80c:	f7fa f956 	bl	23f8abc <__adddf3>
 23fe810:	4632      	mov	r2, r6
 23fe812:	4604      	mov	r4, r0
 23fe814:	460d      	mov	r5, r1
 23fe816:	463b      	mov	r3, r7
 23fe818:	f7fa f94e 	bl	23f8ab8 <__aeabi_dsub>
 23fe81c:	4602      	mov	r2, r0
 23fe81e:	460b      	mov	r3, r1
 23fe820:	4640      	mov	r0, r8
 23fe822:	4649      	mov	r1, r9
 23fe824:	f7fa f948 	bl	23f8ab8 <__aeabi_dsub>
 23fe828:	4622      	mov	r2, r4
 23fe82a:	4680      	mov	r8, r0
 23fe82c:	4689      	mov	r9, r1
 23fe82e:	462b      	mov	r3, r5
 23fe830:	4620      	mov	r0, r4
 23fe832:	4629      	mov	r1, r5
 23fe834:	f7fa faf8 	bl	23f8e28 <__aeabi_dmul>
 23fe838:	4606      	mov	r6, r0
 23fe83a:	460f      	mov	r7, r1
 23fe83c:	a376      	add	r3, pc, #472	; (adr r3, 23fea18 <__ieee754_pow+0x8d0>)
 23fe83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe842:	f7fa faf1 	bl	23f8e28 <__aeabi_dmul>
 23fe846:	a376      	add	r3, pc, #472	; (adr r3, 23fea20 <__ieee754_pow+0x8d8>)
 23fe848:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe84c:	f7fa f934 	bl	23f8ab8 <__aeabi_dsub>
 23fe850:	4632      	mov	r2, r6
 23fe852:	463b      	mov	r3, r7
 23fe854:	f7fa fae8 	bl	23f8e28 <__aeabi_dmul>
 23fe858:	a373      	add	r3, pc, #460	; (adr r3, 23fea28 <__ieee754_pow+0x8e0>)
 23fe85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe85e:	f7fa f92d 	bl	23f8abc <__adddf3>
 23fe862:	4632      	mov	r2, r6
 23fe864:	463b      	mov	r3, r7
 23fe866:	f7fa fadf 	bl	23f8e28 <__aeabi_dmul>
 23fe86a:	a371      	add	r3, pc, #452	; (adr r3, 23fea30 <__ieee754_pow+0x8e8>)
 23fe86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe870:	f7fa f922 	bl	23f8ab8 <__aeabi_dsub>
 23fe874:	4632      	mov	r2, r6
 23fe876:	463b      	mov	r3, r7
 23fe878:	f7fa fad6 	bl	23f8e28 <__aeabi_dmul>
 23fe87c:	a36e      	add	r3, pc, #440	; (adr r3, 23fea38 <__ieee754_pow+0x8f0>)
 23fe87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe882:	f7fa f91b 	bl	23f8abc <__adddf3>
 23fe886:	4632      	mov	r2, r6
 23fe888:	463b      	mov	r3, r7
 23fe88a:	f7fa facd 	bl	23f8e28 <__aeabi_dmul>
 23fe88e:	4602      	mov	r2, r0
 23fe890:	460b      	mov	r3, r1
 23fe892:	4620      	mov	r0, r4
 23fe894:	4629      	mov	r1, r5
 23fe896:	f7fa f90f 	bl	23f8ab8 <__aeabi_dsub>
 23fe89a:	4606      	mov	r6, r0
 23fe89c:	460f      	mov	r7, r1
 23fe89e:	4620      	mov	r0, r4
 23fe8a0:	4632      	mov	r2, r6
 23fe8a2:	4629      	mov	r1, r5
 23fe8a4:	463b      	mov	r3, r7
 23fe8a6:	f7fa fabf 	bl	23f8e28 <__aeabi_dmul>
 23fe8aa:	2200      	movs	r2, #0
 23fe8ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fe8b0:	ec41 0b18 	vmov	d8, r0, r1
 23fe8b4:	4630      	mov	r0, r6
 23fe8b6:	4639      	mov	r1, r7
 23fe8b8:	f7fa f8fe 	bl	23f8ab8 <__aeabi_dsub>
 23fe8bc:	4602      	mov	r2, r0
 23fe8be:	460b      	mov	r3, r1
 23fe8c0:	ec51 0b18 	vmov	r0, r1, d8
 23fe8c4:	f7fa fbda 	bl	23f907c <__aeabi_ddiv>
 23fe8c8:	4642      	mov	r2, r8
 23fe8ca:	4606      	mov	r6, r0
 23fe8cc:	460f      	mov	r7, r1
 23fe8ce:	464b      	mov	r3, r9
 23fe8d0:	4620      	mov	r0, r4
 23fe8d2:	4629      	mov	r1, r5
 23fe8d4:	f7fa faa8 	bl	23f8e28 <__aeabi_dmul>
 23fe8d8:	4642      	mov	r2, r8
 23fe8da:	464b      	mov	r3, r9
 23fe8dc:	f7fa f8ee 	bl	23f8abc <__adddf3>
 23fe8e0:	4602      	mov	r2, r0
 23fe8e2:	460b      	mov	r3, r1
 23fe8e4:	4630      	mov	r0, r6
 23fe8e6:	4639      	mov	r1, r7
 23fe8e8:	f7fa f8e6 	bl	23f8ab8 <__aeabi_dsub>
 23fe8ec:	4622      	mov	r2, r4
 23fe8ee:	462b      	mov	r3, r5
 23fe8f0:	f7fa f8e2 	bl	23f8ab8 <__aeabi_dsub>
 23fe8f4:	4602      	mov	r2, r0
 23fe8f6:	460b      	mov	r3, r1
 23fe8f8:	2000      	movs	r0, #0
 23fe8fa:	495a      	ldr	r1, [pc, #360]	; (23fea64 <__ieee754_pow+0x91c>)
 23fe8fc:	f7fa f8dc 	bl	23f8ab8 <__aeabi_dsub>
 23fe900:	448b      	add	fp, r1
 23fe902:	4602      	mov	r2, r0
 23fe904:	460b      	mov	r3, r1
 23fe906:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fe90a:	f2c0 816c 	blt.w	23febe6 <__ieee754_pow+0xa9e>
 23fe90e:	4659      	mov	r1, fp
 23fe910:	ec53 2b19 	vmov	r2, r3, d9
 23fe914:	f7fa fa88 	bl	23f8e28 <__aeabi_dmul>
 23fe918:	ec41 0b10 	vmov	d0, r0, r1
 23fe91c:	e442      	b.n	23fe1a4 <__ieee754_pow+0x5c>
 23fe91e:	ec47 6b10 	vmov	d0, r6, r7
 23fe922:	9200      	str	r2, [sp, #0]
 23fe924:	f000 fc0c 	bl	23ff140 <fabs>
 23fe928:	9a00      	ldr	r2, [sp, #0]
 23fe92a:	2a00      	cmp	r2, #0
 23fe92c:	f47f acbd 	bne.w	23fe2aa <__ieee754_pow+0x162>
 23fe930:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fe934:	4a4b      	ldr	r2, [pc, #300]	; (23fea64 <__ieee754_pow+0x91c>)
 23fe936:	4293      	cmp	r3, r2
 23fe938:	d003      	beq.n	23fe942 <__ieee754_pow+0x7fa>
 23fe93a:	f1b8 0f00 	cmp.w	r8, #0
 23fe93e:	f47f acb4 	bne.w	23fe2aa <__ieee754_pow+0x162>
 23fe942:	2300      	movs	r3, #0
 23fe944:	9300      	str	r3, [sp, #0]
 23fe946:	f1bb 0f00 	cmp.w	fp, #0
 23fe94a:	da07      	bge.n	23fe95c <__ieee754_pow+0x814>
 23fe94c:	2000      	movs	r0, #0
 23fe94e:	4945      	ldr	r1, [pc, #276]	; (23fea64 <__ieee754_pow+0x91c>)
 23fe950:	ec53 2b10 	vmov	r2, r3, d0
 23fe954:	f7fa fb92 	bl	23f907c <__aeabi_ddiv>
 23fe958:	ec41 0b10 	vmov	d0, r0, r1
 23fe95c:	f1b9 0f00 	cmp.w	r9, #0
 23fe960:	f6bf ac20 	bge.w	23fe1a4 <__ieee754_pow+0x5c>
 23fe964:	4b40      	ldr	r3, [pc, #256]	; (23fea68 <__ieee754_pow+0x920>)
 23fe966:	9a00      	ldr	r2, [sp, #0]
 23fe968:	4443      	add	r3, r8
 23fe96a:	4313      	orrs	r3, r2
 23fe96c:	f040 812d 	bne.w	23febca <__ieee754_pow+0xa82>
 23fe970:	ec53 2b10 	vmov	r2, r3, d0
 23fe974:	e49b      	b.n	23fe2ae <__ieee754_pow+0x166>
 23fe976:	f1bb 0f00 	cmp.w	fp, #0
 23fe97a:	f6ff ac57 	blt.w	23fe22c <__ieee754_pow+0xe4>
 23fe97e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fea40 <__ieee754_pow+0x8f8>
 23fe982:	e40f      	b.n	23fe1a4 <__ieee754_pow+0x5c>
 23fe984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fe988:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fea70 <__ieee754_pow+0x928>
 23fe98c:	4563      	cmp	r3, ip
 23fe98e:	f340 80f0 	ble.w	23feb72 <__ieee754_pow+0xa2a>
 23fe992:	4b36      	ldr	r3, [pc, #216]	; (23fea6c <__ieee754_pow+0x924>)
 23fe994:	440b      	add	r3, r1
 23fe996:	4303      	orrs	r3, r0
 23fe998:	d10a      	bne.n	23fe9b0 <__ieee754_pow+0x868>
 23fe99a:	4632      	mov	r2, r6
 23fe99c:	463b      	mov	r3, r7
 23fe99e:	f7fa f88b 	bl	23f8ab8 <__aeabi_dsub>
 23fe9a2:	4642      	mov	r2, r8
 23fe9a4:	464b      	mov	r3, r9
 23fe9a6:	f7fa fcc5 	bl	23f9334 <__aeabi_dcmpge>
 23fe9aa:	2800      	cmp	r0, #0
 23fe9ac:	f43f aecc 	beq.w	23fe748 <__ieee754_pow+0x600>
 23fe9b0:	a325      	add	r3, pc, #148	; (adr r3, 23fea48 <__ieee754_pow+0x900>)
 23fe9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe9b6:	ec51 0b19 	vmov	r0, r1, d9
 23fe9ba:	f7fa fa35 	bl	23f8e28 <__aeabi_dmul>
 23fe9be:	a322      	add	r3, pc, #136	; (adr r3, 23fea48 <__ieee754_pow+0x900>)
 23fe9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe9c4:	f7fa fa30 	bl	23f8e28 <__aeabi_dmul>
 23fe9c8:	ec41 0b10 	vmov	d0, r0, r1
 23fe9cc:	f7ff bbea 	b.w	23fe1a4 <__ieee754_pow+0x5c>
 23fe9d0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fea50 <__ieee754_pow+0x908>
 23fe9d4:	eeb0 9a47 	vmov.f32	s18, s14
 23fe9d8:	eef0 9a67 	vmov.f32	s19, s15
 23fe9dc:	e660      	b.n	23fe6a0 <__ieee754_pow+0x558>
 23fe9de:	f1bb 0f00 	cmp.w	fp, #0
 23fe9e2:	dacc      	bge.n	23fe97e <__ieee754_pow+0x836>
 23fe9e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fe9e8:	ee00 4a10 	vmov	s0, r4
 23fe9ec:	ee00 3a90 	vmov	s1, r3
 23fe9f0:	f7ff bbd8 	b.w	23fe1a4 <__ieee754_pow+0x5c>
 23fe9f4:	f3af 8000 	nop.w
 23fe9f8:	652b82fe 	.word	0x652b82fe
 23fe9fc:	3c971547 	.word	0x3c971547
 23fea00:	00000000 	.word	0x00000000
 23fea04:	3fe62e43 	.word	0x3fe62e43
 23fea08:	fefa39ef 	.word	0xfefa39ef
 23fea0c:	3fe62e42 	.word	0x3fe62e42
 23fea10:	0ca86c39 	.word	0x0ca86c39
 23fea14:	be205c61 	.word	0xbe205c61
 23fea18:	72bea4d0 	.word	0x72bea4d0
 23fea1c:	3e663769 	.word	0x3e663769
 23fea20:	c5d26bf1 	.word	0xc5d26bf1
 23fea24:	3ebbbd41 	.word	0x3ebbbd41
 23fea28:	af25de2c 	.word	0xaf25de2c
 23fea2c:	3f11566a 	.word	0x3f11566a
 23fea30:	16bebd93 	.word	0x16bebd93
 23fea34:	3f66c16c 	.word	0x3f66c16c
 23fea38:	5555553e 	.word	0x5555553e
 23fea3c:	3fc55555 	.word	0x3fc55555
	...
 23fea48:	c2f8f359 	.word	0xc2f8f359
 23fea4c:	01a56e1f 	.word	0x01a56e1f
 23fea50:	00000000 	.word	0x00000000
 23fea54:	3ff00000 	.word	0x3ff00000
 23fea58:	408fffff 	.word	0x408fffff
 23fea5c:	bf700000 	.word	0xbf700000
 23fea60:	000fffff 	.word	0x000fffff
 23fea64:	3ff00000 	.word	0x3ff00000
 23fea68:	c0100000 	.word	0xc0100000
 23fea6c:	3f6f3400 	.word	0x3f6f3400
 23fea70:	4090cbff 	.word	0x4090cbff
 23fea74:	4598      	cmp	r8, r3
 23fea76:	f6ff af7e 	blt.w	23fe976 <__ieee754_pow+0x82e>
 23fea7a:	4b79      	ldr	r3, [pc, #484]	; (23fec60 <__ieee754_pow+0xb18>)
 23fea7c:	4598      	cmp	r8, r3
 23fea7e:	f73f abd1 	bgt.w	23fe224 <__ieee754_pow+0xdc>
 23fea82:	2200      	movs	r2, #0
 23fea84:	4b76      	ldr	r3, [pc, #472]	; (23fec60 <__ieee754_pow+0xb18>)
 23fea86:	ec51 0b10 	vmov	r0, r1, d0
 23fea8a:	f7fa f815 	bl	23f8ab8 <__aeabi_dsub>
 23fea8e:	4606      	mov	r6, r0
 23fea90:	460f      	mov	r7, r1
 23fea92:	a363      	add	r3, pc, #396	; (adr r3, 23fec20 <__ieee754_pow+0xad8>)
 23fea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fea98:	f7fa f9c6 	bl	23f8e28 <__aeabi_dmul>
 23fea9c:	4682      	mov	sl, r0
 23fea9e:	468b      	mov	fp, r1
 23feaa0:	4630      	mov	r0, r6
 23feaa2:	4639      	mov	r1, r7
 23feaa4:	a360      	add	r3, pc, #384	; (adr r3, 23fec28 <__ieee754_pow+0xae0>)
 23feaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feaaa:	f7fa f9bd 	bl	23f8e28 <__aeabi_dmul>
 23feaae:	2200      	movs	r2, #0
 23feab0:	4b6c      	ldr	r3, [pc, #432]	; (23fec64 <__ieee754_pow+0xb1c>)
 23feab2:	ec41 0b18 	vmov	d8, r0, r1
 23feab6:	4630      	mov	r0, r6
 23feab8:	4639      	mov	r1, r7
 23feaba:	f7fa f9b5 	bl	23f8e28 <__aeabi_dmul>
 23feabe:	4602      	mov	r2, r0
 23feac0:	460b      	mov	r3, r1
 23feac2:	a15b      	add	r1, pc, #364	; (adr r1, 23fec30 <__ieee754_pow+0xae8>)
 23feac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 23feac8:	f7f9 fff6 	bl	23f8ab8 <__aeabi_dsub>
 23feacc:	4632      	mov	r2, r6
 23feace:	463b      	mov	r3, r7
 23fead0:	f7fa f9aa 	bl	23f8e28 <__aeabi_dmul>
 23fead4:	4602      	mov	r2, r0
 23fead6:	460b      	mov	r3, r1
 23fead8:	2000      	movs	r0, #0
 23feada:	4963      	ldr	r1, [pc, #396]	; (23fec68 <__ieee754_pow+0xb20>)
 23feadc:	f7f9 ffec 	bl	23f8ab8 <__aeabi_dsub>
 23feae0:	4680      	mov	r8, r0
 23feae2:	4689      	mov	r9, r1
 23feae4:	4632      	mov	r2, r6
 23feae6:	463b      	mov	r3, r7
 23feae8:	4630      	mov	r0, r6
 23feaea:	4639      	mov	r1, r7
 23feaec:	f7fa f99c 	bl	23f8e28 <__aeabi_dmul>
 23feaf0:	4602      	mov	r2, r0
 23feaf2:	460b      	mov	r3, r1
 23feaf4:	4640      	mov	r0, r8
 23feaf6:	4649      	mov	r1, r9
 23feaf8:	f7fa f996 	bl	23f8e28 <__aeabi_dmul>
 23feafc:	a34e      	add	r3, pc, #312	; (adr r3, 23fec38 <__ieee754_pow+0xaf0>)
 23feafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb02:	f7fa f991 	bl	23f8e28 <__aeabi_dmul>
 23feb06:	4602      	mov	r2, r0
 23feb08:	460b      	mov	r3, r1
 23feb0a:	ec51 0b18 	vmov	r0, r1, d8
 23feb0e:	f7f9 ffd3 	bl	23f8ab8 <__aeabi_dsub>
 23feb12:	4606      	mov	r6, r0
 23feb14:	460f      	mov	r7, r1
 23feb16:	4650      	mov	r0, sl
 23feb18:	4659      	mov	r1, fp
 23feb1a:	4632      	mov	r2, r6
 23feb1c:	463b      	mov	r3, r7
 23feb1e:	f7f9 ffcd 	bl	23f8abc <__adddf3>
 23feb22:	2000      	movs	r0, #0
 23feb24:	4652      	mov	r2, sl
 23feb26:	465b      	mov	r3, fp
 23feb28:	4682      	mov	sl, r0
 23feb2a:	468b      	mov	fp, r1
 23feb2c:	e564      	b.n	23fe5f8 <__ieee754_pow+0x4b0>
 23feb2e:	4632      	mov	r2, r6
 23feb30:	463b      	mov	r3, r7
 23feb32:	4630      	mov	r0, r6
 23feb34:	4639      	mov	r1, r7
 23feb36:	f7fa f977 	bl	23f8e28 <__aeabi_dmul>
 23feb3a:	ec41 0b10 	vmov	d0, r0, r1
 23feb3e:	f7ff bb31 	b.w	23fe1a4 <__ieee754_pow+0x5c>
 23feb42:	2000      	movs	r0, #0
 23feb44:	4946      	ldr	r1, [pc, #280]	; (23fec60 <__ieee754_pow+0xb18>)
 23feb46:	4632      	mov	r2, r6
 23feb48:	463b      	mov	r3, r7
 23feb4a:	f7fa fa97 	bl	23f907c <__aeabi_ddiv>
 23feb4e:	ec41 0b10 	vmov	d0, r0, r1
 23feb52:	f7ff bb27 	b.w	23fe1a4 <__ieee754_pow+0x5c>
 23feb56:	2b00      	cmp	r3, #0
 23feb58:	f47f aee1 	bne.w	23fe91e <__ieee754_pow+0x7d6>
 23feb5c:	f1c1 0114 	rsb	r1, r1, #20
 23feb60:	fa4a f001 	asr.w	r0, sl, r1
 23feb64:	fa00 f101 	lsl.w	r1, r0, r1
 23feb68:	4551      	cmp	r1, sl
 23feb6a:	d04d      	beq.n	23fec08 <__ieee754_pow+0xac0>
 23feb6c:	9300      	str	r3, [sp, #0]
 23feb6e:	f7ff bb27 	b.w	23fe1c0 <__ieee754_pow+0x78>
 23feb72:	4a3d      	ldr	r2, [pc, #244]	; (23fec68 <__ieee754_pow+0xb20>)
 23feb74:	4293      	cmp	r3, r2
 23feb76:	dc4e      	bgt.n	23fec16 <__ieee754_pow+0xace>
 23feb78:	e9dd 2300 	ldrd	r2, r3, [sp]
 23feb7c:	4693      	mov	fp, r2
 23feb7e:	4692      	mov	sl, r2
 23feb80:	e614      	b.n	23fe7ac <__ieee754_pow+0x664>
 23feb82:	a32f      	add	r3, pc, #188	; (adr r3, 23fec40 <__ieee754_pow+0xaf8>)
 23feb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb88:	ec51 0b19 	vmov	r0, r1, d9
 23feb8c:	f7fa f94c 	bl	23f8e28 <__aeabi_dmul>
 23feb90:	a32b      	add	r3, pc, #172	; (adr r3, 23fec40 <__ieee754_pow+0xaf8>)
 23feb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feb96:	f7fa f947 	bl	23f8e28 <__aeabi_dmul>
 23feb9a:	ec41 0b10 	vmov	d0, r0, r1
 23feb9e:	f7ff bb01 	b.w	23fe1a4 <__ieee754_pow+0x5c>
 23feba2:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fec48 <__ieee754_pow+0xb00>
 23feba6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23febaa:	eeb0 da47 	vmov.f32	s26, s14
 23febae:	eef0 da67 	vmov.f32	s27, s15
 23febb2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fec50 <__ieee754_pow+0xb08>
 23febb6:	eeb0 ca47 	vmov.f32	s24, s14
 23febba:	eef0 ca67 	vmov.f32	s25, s15
 23febbe:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fec58 <__ieee754_pow+0xb10>
 23febc2:	ec51 0b17 	vmov	r0, r1, d7
 23febc6:	f7ff bbcc 	b.w	23fe362 <__ieee754_pow+0x21a>
 23febca:	9b00      	ldr	r3, [sp, #0]
 23febcc:	2b01      	cmp	r3, #1
 23febce:	f47f aae9 	bne.w	23fe1a4 <__ieee754_pow+0x5c>
 23febd2:	ee10 1a90 	vmov	r1, s1
 23febd6:	ee10 2a10 	vmov	r2, s0
 23febda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23febde:	ec43 2b10 	vmov	d0, r2, r3
 23febe2:	f7ff badf 	b.w	23fe1a4 <__ieee754_pow+0x5c>
 23febe6:	4650      	mov	r0, sl
 23febe8:	ec43 2b10 	vmov	d0, r2, r3
 23febec:	f000 fb64 	bl	23ff2b8 <scalbn>
 23febf0:	ec51 0b10 	vmov	r0, r1, d0
 23febf4:	e68c      	b.n	23fe910 <__ieee754_pow+0x7c8>
 23febf6:	ec47 6b10 	vmov	d0, r6, r7
 23febfa:	b007      	add	sp, #28
 23febfc:	ecbd 8b0c 	vpop	{d8-d13}
 23fec00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fec04:	f000 b832 	b.w	23fec6c <__ieee754_sqrt>
 23fec08:	f000 0001 	and.w	r0, r0, #1
 23fec0c:	f1c0 0302 	rsb	r3, r0, #2
 23fec10:	9300      	str	r3, [sp, #0]
 23fec12:	f7ff bad5 	b.w	23fe1c0 <__ieee754_pow+0x78>
 23fec16:	151b      	asrs	r3, r3, #20
 23fec18:	e598      	b.n	23fe74c <__ieee754_pow+0x604>
 23fec1a:	bf00      	nop
 23fec1c:	f3af 8000 	nop.w
 23fec20:	60000000 	.word	0x60000000
 23fec24:	3ff71547 	.word	0x3ff71547
 23fec28:	f85ddf44 	.word	0xf85ddf44
 23fec2c:	3e54ae0b 	.word	0x3e54ae0b
 23fec30:	55555555 	.word	0x55555555
 23fec34:	3fd55555 	.word	0x3fd55555
 23fec38:	652b82fe 	.word	0x652b82fe
 23fec3c:	3ff71547 	.word	0x3ff71547
 23fec40:	8800759c 	.word	0x8800759c
 23fec44:	7e37e43c 	.word	0x7e37e43c
 23fec48:	40000000 	.word	0x40000000
 23fec4c:	3fe2b803 	.word	0x3fe2b803
 23fec50:	43cfd006 	.word	0x43cfd006
 23fec54:	3e4cfdeb 	.word	0x3e4cfdeb
 23fec58:	00000000 	.word	0x00000000
 23fec5c:	3ff80000 	.word	0x3ff80000
 23fec60:	3ff00000 	.word	0x3ff00000
 23fec64:	3fd00000 	.word	0x3fd00000
 23fec68:	3fe00000 	.word	0x3fe00000

023fec6c <__ieee754_sqrt>:
 23fec6c:	495e      	ldr	r1, [pc, #376]	; (23fede8 <__ieee754_sqrt+0x17c>)
 23fec6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fec72:	ec55 4b10 	vmov	r4, r5, d0
 23fec76:	43a9      	bics	r1, r5
 23fec78:	f000 8094 	beq.w	23feda4 <__ieee754_sqrt+0x138>
 23fec7c:	2d00      	cmp	r5, #0
 23fec7e:	462b      	mov	r3, r5
 23fec80:	ee10 2a10 	vmov	r2, s0
 23fec84:	dd5a      	ble.n	23fed3c <__ieee754_sqrt+0xd0>
 23fec86:	1528      	asrs	r0, r5, #20
 23fec88:	d067      	beq.n	23fed5a <__ieee754_sqrt+0xee>
 23fec8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fec8e:	07c1      	lsls	r1, r0, #31
 23fec90:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fec94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fec98:	d403      	bmi.n	23feca2 <__ieee754_sqrt+0x36>
 23fec9a:	005b      	lsls	r3, r3, #1
 23fec9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23feca0:	0052      	lsls	r2, r2, #1
 23feca2:	0fd1      	lsrs	r1, r2, #31
 23feca4:	2600      	movs	r6, #0
 23feca6:	107f      	asrs	r7, r7, #1
 23feca8:	f04f 0c16 	mov.w	ip, #22
 23fecac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fecb0:	46b6      	mov	lr, r6
 23fecb2:	0052      	lsls	r2, r2, #1
 23fecb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fecb8:	eb0e 0001 	add.w	r0, lr, r1
 23fecbc:	4298      	cmp	r0, r3
 23fecbe:	dc03      	bgt.n	23fecc8 <__ieee754_sqrt+0x5c>
 23fecc0:	1a1b      	subs	r3, r3, r0
 23fecc2:	eb00 0e01 	add.w	lr, r0, r1
 23fecc6:	440e      	add	r6, r1
 23fecc8:	005b      	lsls	r3, r3, #1
 23fecca:	f1bc 0c01 	subs.w	ip, ip, #1
 23fecce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fecd2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fecd6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fecda:	d1ed      	bne.n	23fecb8 <__ieee754_sqrt+0x4c>
 23fecdc:	4665      	mov	r5, ip
 23fecde:	2420      	movs	r4, #32
 23fece0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fece4:	e014      	b.n	23fed10 <__ieee754_sqrt+0xa4>
 23fece6:	d10a      	bne.n	23fecfe <__ieee754_sqrt+0x92>
 23fece8:	4290      	cmp	r0, r2
 23fecea:	d808      	bhi.n	23fecfe <__ieee754_sqrt+0x92>
 23fecec:	2800      	cmp	r0, #0
 23fecee:	eb00 0c01 	add.w	ip, r0, r1
 23fecf2:	db1d      	blt.n	23fed30 <__ieee754_sqrt+0xc4>
 23fecf4:	46f0      	mov	r8, lr
 23fecf6:	2300      	movs	r3, #0
 23fecf8:	1a12      	subs	r2, r2, r0
 23fecfa:	440d      	add	r5, r1
 23fecfc:	46c6      	mov	lr, r8
 23fecfe:	0fd0      	lsrs	r0, r2, #31
 23fed00:	3c01      	subs	r4, #1
 23fed02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fed06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fed0a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fed0e:	d033      	beq.n	23fed78 <__ieee754_sqrt+0x10c>
 23fed10:	4573      	cmp	r3, lr
 23fed12:	eb01 000c 	add.w	r0, r1, ip
 23fed16:	dde6      	ble.n	23fece6 <__ieee754_sqrt+0x7a>
 23fed18:	2800      	cmp	r0, #0
 23fed1a:	eb00 0c01 	add.w	ip, r0, r1
 23fed1e:	db07      	blt.n	23fed30 <__ieee754_sqrt+0xc4>
 23fed20:	46f0      	mov	r8, lr
 23fed22:	eba3 030e 	sub.w	r3, r3, lr
 23fed26:	4290      	cmp	r0, r2
 23fed28:	bf88      	it	hi
 23fed2a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fed2e:	e7e3      	b.n	23fecf8 <__ieee754_sqrt+0x8c>
 23fed30:	f1bc 0f00 	cmp.w	ip, #0
 23fed34:	dbf4      	blt.n	23fed20 <__ieee754_sqrt+0xb4>
 23fed36:	f10e 0801 	add.w	r8, lr, #1
 23fed3a:	e7f2      	b.n	23fed22 <__ieee754_sqrt+0xb6>
 23fed3c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fed40:	4321      	orrs	r1, r4
 23fed42:	d028      	beq.n	23fed96 <__ieee754_sqrt+0x12a>
 23fed44:	2d00      	cmp	r5, #0
 23fed46:	d13d      	bne.n	23fedc4 <__ieee754_sqrt+0x158>
 23fed48:	4628      	mov	r0, r5
 23fed4a:	0ad1      	lsrs	r1, r2, #11
 23fed4c:	3815      	subs	r0, #21
 23fed4e:	0552      	lsls	r2, r2, #21
 23fed50:	460b      	mov	r3, r1
 23fed52:	2900      	cmp	r1, #0
 23fed54:	d0f9      	beq.n	23fed4a <__ieee754_sqrt+0xde>
 23fed56:	02cf      	lsls	r7, r1, #11
 23fed58:	d441      	bmi.n	23fedde <__ieee754_sqrt+0x172>
 23fed5a:	2400      	movs	r4, #0
 23fed5c:	005b      	lsls	r3, r3, #1
 23fed5e:	4625      	mov	r5, r4
 23fed60:	3401      	adds	r4, #1
 23fed62:	02de      	lsls	r6, r3, #11
 23fed64:	d5fa      	bpl.n	23fed5c <__ieee754_sqrt+0xf0>
 23fed66:	4619      	mov	r1, r3
 23fed68:	4613      	mov	r3, r2
 23fed6a:	40a2      	lsls	r2, r4
 23fed6c:	f1c4 0420 	rsb	r4, r4, #32
 23fed70:	40e3      	lsrs	r3, r4
 23fed72:	1b40      	subs	r0, r0, r5
 23fed74:	430b      	orrs	r3, r1
 23fed76:	e788      	b.n	23fec8a <__ieee754_sqrt+0x1e>
 23fed78:	4313      	orrs	r3, r2
 23fed7a:	d10e      	bne.n	23fed9a <__ieee754_sqrt+0x12e>
 23fed7c:	086c      	lsrs	r4, r5, #1
 23fed7e:	07f3      	lsls	r3, r6, #31
 23fed80:	491a      	ldr	r1, [pc, #104]	; (23fedec <__ieee754_sqrt+0x180>)
 23fed82:	bf48      	it	mi
 23fed84:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fed88:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fed8c:	4622      	mov	r2, r4
 23fed8e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fed92:	ec43 2b10 	vmov	d0, r2, r3
 23fed96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fed9a:	1c6a      	adds	r2, r5, #1
 23fed9c:	d01d      	beq.n	23fedda <__ieee754_sqrt+0x16e>
 23fed9e:	1c6c      	adds	r4, r5, #1
 23feda0:	0864      	lsrs	r4, r4, #1
 23feda2:	e7ec      	b.n	23fed7e <__ieee754_sqrt+0x112>
 23feda4:	ee10 2a10 	vmov	r2, s0
 23feda8:	462b      	mov	r3, r5
 23fedaa:	ee10 0a10 	vmov	r0, s0
 23fedae:	4629      	mov	r1, r5
 23fedb0:	f7fa f83a 	bl	23f8e28 <__aeabi_dmul>
 23fedb4:	4622      	mov	r2, r4
 23fedb6:	462b      	mov	r3, r5
 23fedb8:	f7f9 fe80 	bl	23f8abc <__adddf3>
 23fedbc:	ec41 0b10 	vmov	d0, r0, r1
 23fedc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fedc4:	4620      	mov	r0, r4
 23fedc6:	4629      	mov	r1, r5
 23fedc8:	f7f9 fe76 	bl	23f8ab8 <__aeabi_dsub>
 23fedcc:	4602      	mov	r2, r0
 23fedce:	460b      	mov	r3, r1
 23fedd0:	f7fa f954 	bl	23f907c <__aeabi_ddiv>
 23fedd4:	ec41 0b10 	vmov	d0, r0, r1
 23fedd8:	e7dd      	b.n	23fed96 <__ieee754_sqrt+0x12a>
 23fedda:	3601      	adds	r6, #1
 23feddc:	e7cf      	b.n	23fed7e <__ieee754_sqrt+0x112>
 23fedde:	4613      	mov	r3, r2
 23fede0:	2420      	movs	r4, #32
 23fede2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fede6:	e7c3      	b.n	23fed70 <__ieee754_sqrt+0x104>
 23fede8:	7ff00000 	.word	0x7ff00000
 23fedec:	3fe00000 	.word	0x3fe00000

023fedf0 <atan>:
 23fedf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fedf4:	ec55 4b10 	vmov	r4, r5, d0
 23fedf8:	4bc7      	ldr	r3, [pc, #796]	; (23ff118 <atan+0x328>)
 23fedfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23fedfe:	46aa      	mov	sl, r5
 23fee00:	429e      	cmp	r6, r3
 23fee02:	dd16      	ble.n	23fee32 <atan+0x42>
 23fee04:	4bc5      	ldr	r3, [pc, #788]	; (23ff11c <atan+0x32c>)
 23fee06:	429e      	cmp	r6, r3
 23fee08:	dc01      	bgt.n	23fee0e <atan+0x1e>
 23fee0a:	d10a      	bne.n	23fee22 <atan+0x32>
 23fee0c:	b14c      	cbz	r4, 23fee22 <atan+0x32>
 23fee0e:	4622      	mov	r2, r4
 23fee10:	462b      	mov	r3, r5
 23fee12:	4620      	mov	r0, r4
 23fee14:	4629      	mov	r1, r5
 23fee16:	f7f9 fe51 	bl	23f8abc <__adddf3>
 23fee1a:	ec41 0b10 	vmov	d0, r0, r1
 23fee1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fee22:	f1ba 0f00 	cmp.w	sl, #0
 23fee26:	f340 80bf 	ble.w	23fefa8 <atan+0x1b8>
 23fee2a:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23ff0a8 <atan+0x2b8>
 23fee2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fee32:	4bbb      	ldr	r3, [pc, #748]	; (23ff120 <atan+0x330>)
 23fee34:	429e      	cmp	r6, r3
 23fee36:	f300 80ba 	bgt.w	23fefae <atan+0x1be>
 23fee3a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23fee3e:	429e      	cmp	r6, r3
 23fee40:	f340 80a0 	ble.w	23fef84 <atan+0x194>
 23fee44:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23fee48:	4622      	mov	r2, r4
 23fee4a:	462b      	mov	r3, r5
 23fee4c:	4620      	mov	r0, r4
 23fee4e:	4629      	mov	r1, r5
 23fee50:	f7f9 ffea 	bl	23f8e28 <__aeabi_dmul>
 23fee54:	4602      	mov	r2, r0
 23fee56:	460b      	mov	r3, r1
 23fee58:	4680      	mov	r8, r0
 23fee5a:	4689      	mov	r9, r1
 23fee5c:	f7f9 ffe4 	bl	23f8e28 <__aeabi_dmul>
 23fee60:	4606      	mov	r6, r0
 23fee62:	460f      	mov	r7, r1
 23fee64:	a392      	add	r3, pc, #584	; (adr r3, 23ff0b0 <atan+0x2c0>)
 23fee66:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee6a:	f7f9 ffdd 	bl	23f8e28 <__aeabi_dmul>
 23fee6e:	a392      	add	r3, pc, #584	; (adr r3, 23ff0b8 <atan+0x2c8>)
 23fee70:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee74:	f7f9 fe22 	bl	23f8abc <__adddf3>
 23fee78:	4632      	mov	r2, r6
 23fee7a:	463b      	mov	r3, r7
 23fee7c:	f7f9 ffd4 	bl	23f8e28 <__aeabi_dmul>
 23fee80:	a38f      	add	r3, pc, #572	; (adr r3, 23ff0c0 <atan+0x2d0>)
 23fee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee86:	f7f9 fe19 	bl	23f8abc <__adddf3>
 23fee8a:	4632      	mov	r2, r6
 23fee8c:	463b      	mov	r3, r7
 23fee8e:	f7f9 ffcb 	bl	23f8e28 <__aeabi_dmul>
 23fee92:	a38d      	add	r3, pc, #564	; (adr r3, 23ff0c8 <atan+0x2d8>)
 23fee94:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee98:	f7f9 fe10 	bl	23f8abc <__adddf3>
 23fee9c:	4632      	mov	r2, r6
 23fee9e:	463b      	mov	r3, r7
 23feea0:	f7f9 ffc2 	bl	23f8e28 <__aeabi_dmul>
 23feea4:	a38a      	add	r3, pc, #552	; (adr r3, 23ff0d0 <atan+0x2e0>)
 23feea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feeaa:	f7f9 fe07 	bl	23f8abc <__adddf3>
 23feeae:	4632      	mov	r2, r6
 23feeb0:	463b      	mov	r3, r7
 23feeb2:	f7f9 ffb9 	bl	23f8e28 <__aeabi_dmul>
 23feeb6:	a388      	add	r3, pc, #544	; (adr r3, 23ff0d8 <atan+0x2e8>)
 23feeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feebc:	f7f9 fdfe 	bl	23f8abc <__adddf3>
 23feec0:	4642      	mov	r2, r8
 23feec2:	464b      	mov	r3, r9
 23feec4:	f7f9 ffb0 	bl	23f8e28 <__aeabi_dmul>
 23feec8:	4680      	mov	r8, r0
 23feeca:	4689      	mov	r9, r1
 23feecc:	4630      	mov	r0, r6
 23feece:	4639      	mov	r1, r7
 23feed0:	a383      	add	r3, pc, #524	; (adr r3, 23ff0e0 <atan+0x2f0>)
 23feed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feed6:	f7f9 ffa7 	bl	23f8e28 <__aeabi_dmul>
 23feeda:	a383      	add	r3, pc, #524	; (adr r3, 23ff0e8 <atan+0x2f8>)
 23feedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feee0:	f7f9 fdea 	bl	23f8ab8 <__aeabi_dsub>
 23feee4:	4632      	mov	r2, r6
 23feee6:	463b      	mov	r3, r7
 23feee8:	f7f9 ff9e 	bl	23f8e28 <__aeabi_dmul>
 23feeec:	a380      	add	r3, pc, #512	; (adr r3, 23ff0f0 <atan+0x300>)
 23feeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23feef2:	f7f9 fde1 	bl	23f8ab8 <__aeabi_dsub>
 23feef6:	4632      	mov	r2, r6
 23feef8:	463b      	mov	r3, r7
 23feefa:	f7f9 ff95 	bl	23f8e28 <__aeabi_dmul>
 23feefe:	a37e      	add	r3, pc, #504	; (adr r3, 23ff0f8 <atan+0x308>)
 23fef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fef04:	f7f9 fdd8 	bl	23f8ab8 <__aeabi_dsub>
 23fef08:	4632      	mov	r2, r6
 23fef0a:	463b      	mov	r3, r7
 23fef0c:	f7f9 ff8c 	bl	23f8e28 <__aeabi_dmul>
 23fef10:	a37b      	add	r3, pc, #492	; (adr r3, 23ff100 <atan+0x310>)
 23fef12:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fef16:	f7f9 fdcf 	bl	23f8ab8 <__aeabi_dsub>
 23fef1a:	4632      	mov	r2, r6
 23fef1c:	463b      	mov	r3, r7
 23fef1e:	f7f9 ff83 	bl	23f8e28 <__aeabi_dmul>
 23fef22:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23fef26:	4602      	mov	r2, r0
 23fef28:	460b      	mov	r3, r1
 23fef2a:	4640      	mov	r0, r8
 23fef2c:	4649      	mov	r1, r9
 23fef2e:	d063      	beq.n	23feff8 <atan+0x208>
 23fef30:	4e7c      	ldr	r6, [pc, #496]	; (23ff124 <atan+0x334>)
 23fef32:	f7f9 fdc3 	bl	23f8abc <__adddf3>
 23fef36:	4622      	mov	r2, r4
 23fef38:	462b      	mov	r3, r5
 23fef3a:	f7f9 ff75 	bl	23f8e28 <__aeabi_dmul>
 23fef3e:	4b7a      	ldr	r3, [pc, #488]	; (23ff128 <atan+0x338>)
 23fef40:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23fef44:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23fef48:	449b      	add	fp, r3
 23fef4a:	e9db 2300 	ldrd	r2, r3, [fp]
 23fef4e:	f7f9 fdb3 	bl	23f8ab8 <__aeabi_dsub>
 23fef52:	4622      	mov	r2, r4
 23fef54:	462b      	mov	r3, r5
 23fef56:	f7f9 fdaf 	bl	23f8ab8 <__aeabi_dsub>
 23fef5a:	4602      	mov	r2, r0
 23fef5c:	460b      	mov	r3, r1
 23fef5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 23fef62:	f7f9 fda9 	bl	23f8ab8 <__aeabi_dsub>
 23fef66:	f1ba 0f00 	cmp.w	sl, #0
 23fef6a:	ec41 0b10 	vmov	d0, r0, r1
 23fef6e:	f6bf af56 	bge.w	23fee1e <atan+0x2e>
 23fef72:	ee10 1a90 	vmov	r1, s1
 23fef76:	4602      	mov	r2, r0
 23fef78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fef7c:	ec43 2b10 	vmov	d0, r2, r3
 23fef80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fef84:	a360      	add	r3, pc, #384	; (adr r3, 23ff108 <atan+0x318>)
 23fef86:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fef8a:	ee10 0a10 	vmov	r0, s0
 23fef8e:	4629      	mov	r1, r5
 23fef90:	f7f9 fd94 	bl	23f8abc <__adddf3>
 23fef94:	2200      	movs	r2, #0
 23fef96:	4b65      	ldr	r3, [pc, #404]	; (23ff12c <atan+0x33c>)
 23fef98:	f7fa f9d6 	bl	23f9348 <__aeabi_dcmpgt>
 23fef9c:	2800      	cmp	r0, #0
 23fef9e:	f43f af51 	beq.w	23fee44 <atan+0x54>
 23fefa2:	ec45 4b10 	vmov	d0, r4, r5
 23fefa6:	e73a      	b.n	23fee1e <atan+0x2e>
 23fefa8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23ff110 <atan+0x320>
 23fefac:	e737      	b.n	23fee1e <atan+0x2e>
 23fefae:	f000 f8c7 	bl	23ff140 <fabs>
 23fefb2:	4b5f      	ldr	r3, [pc, #380]	; (23ff130 <atan+0x340>)
 23fefb4:	429e      	cmp	r6, r3
 23fefb6:	ec55 4b10 	vmov	r4, r5, d0
 23fefba:	dc2d      	bgt.n	23ff018 <atan+0x228>
 23fefbc:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23fefc0:	429e      	cmp	r6, r3
 23fefc2:	dd58      	ble.n	23ff076 <atan+0x286>
 23fefc4:	2200      	movs	r2, #0
 23fefc6:	4b59      	ldr	r3, [pc, #356]	; (23ff12c <atan+0x33c>)
 23fefc8:	ee10 0a10 	vmov	r0, s0
 23fefcc:	4629      	mov	r1, r5
 23fefce:	f7f9 fd73 	bl	23f8ab8 <__aeabi_dsub>
 23fefd2:	f04f 0b01 	mov.w	fp, #1
 23fefd6:	4606      	mov	r6, r0
 23fefd8:	460f      	mov	r7, r1
 23fefda:	4620      	mov	r0, r4
 23fefdc:	4629      	mov	r1, r5
 23fefde:	2200      	movs	r2, #0
 23fefe0:	4b52      	ldr	r3, [pc, #328]	; (23ff12c <atan+0x33c>)
 23fefe2:	f7f9 fd6b 	bl	23f8abc <__adddf3>
 23fefe6:	4602      	mov	r2, r0
 23fefe8:	460b      	mov	r3, r1
 23fefea:	4630      	mov	r0, r6
 23fefec:	4639      	mov	r1, r7
 23fefee:	f7fa f845 	bl	23f907c <__aeabi_ddiv>
 23feff2:	4604      	mov	r4, r0
 23feff4:	460d      	mov	r5, r1
 23feff6:	e727      	b.n	23fee48 <atan+0x58>
 23feff8:	f7f9 fd60 	bl	23f8abc <__adddf3>
 23feffc:	4622      	mov	r2, r4
 23feffe:	462b      	mov	r3, r5
 23ff000:	f7f9 ff12 	bl	23f8e28 <__aeabi_dmul>
 23ff004:	4602      	mov	r2, r0
 23ff006:	460b      	mov	r3, r1
 23ff008:	4620      	mov	r0, r4
 23ff00a:	4629      	mov	r1, r5
 23ff00c:	f7f9 fd54 	bl	23f8ab8 <__aeabi_dsub>
 23ff010:	ec41 0b10 	vmov	d0, r0, r1
 23ff014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff018:	4b46      	ldr	r3, [pc, #280]	; (23ff134 <atan+0x344>)
 23ff01a:	429e      	cmp	r6, r3
 23ff01c:	da1f      	bge.n	23ff05e <atan+0x26e>
 23ff01e:	ee10 0a10 	vmov	r0, s0
 23ff022:	2200      	movs	r2, #0
 23ff024:	4b44      	ldr	r3, [pc, #272]	; (23ff138 <atan+0x348>)
 23ff026:	4629      	mov	r1, r5
 23ff028:	f7f9 fd46 	bl	23f8ab8 <__aeabi_dsub>
 23ff02c:	4602      	mov	r2, r0
 23ff02e:	460b      	mov	r3, r1
 23ff030:	4620      	mov	r0, r4
 23ff032:	4629      	mov	r1, r5
 23ff034:	4614      	mov	r4, r2
 23ff036:	461d      	mov	r5, r3
 23ff038:	2200      	movs	r2, #0
 23ff03a:	4b3f      	ldr	r3, [pc, #252]	; (23ff138 <atan+0x348>)
 23ff03c:	f04f 0b02 	mov.w	fp, #2
 23ff040:	f7f9 fef2 	bl	23f8e28 <__aeabi_dmul>
 23ff044:	2200      	movs	r2, #0
 23ff046:	4b39      	ldr	r3, [pc, #228]	; (23ff12c <atan+0x33c>)
 23ff048:	f7f9 fd38 	bl	23f8abc <__adddf3>
 23ff04c:	4602      	mov	r2, r0
 23ff04e:	460b      	mov	r3, r1
 23ff050:	4620      	mov	r0, r4
 23ff052:	4629      	mov	r1, r5
 23ff054:	f7fa f812 	bl	23f907c <__aeabi_ddiv>
 23ff058:	4604      	mov	r4, r0
 23ff05a:	460d      	mov	r5, r1
 23ff05c:	e6f4      	b.n	23fee48 <atan+0x58>
 23ff05e:	462b      	mov	r3, r5
 23ff060:	2000      	movs	r0, #0
 23ff062:	4936      	ldr	r1, [pc, #216]	; (23ff13c <atan+0x34c>)
 23ff064:	ee10 2a10 	vmov	r2, s0
 23ff068:	f7fa f808 	bl	23f907c <__aeabi_ddiv>
 23ff06c:	f04f 0b03 	mov.w	fp, #3
 23ff070:	4604      	mov	r4, r0
 23ff072:	460d      	mov	r5, r1
 23ff074:	e6e8      	b.n	23fee48 <atan+0x58>
 23ff076:	ee10 2a10 	vmov	r2, s0
 23ff07a:	462b      	mov	r3, r5
 23ff07c:	ee10 0a10 	vmov	r0, s0
 23ff080:	4629      	mov	r1, r5
 23ff082:	f7f9 fd1b 	bl	23f8abc <__adddf3>
 23ff086:	2200      	movs	r2, #0
 23ff088:	4b28      	ldr	r3, [pc, #160]	; (23ff12c <atan+0x33c>)
 23ff08a:	f04f 0b00 	mov.w	fp, #0
 23ff08e:	f7f9 fd13 	bl	23f8ab8 <__aeabi_dsub>
 23ff092:	2200      	movs	r2, #0
 23ff094:	4606      	mov	r6, r0
 23ff096:	460f      	mov	r7, r1
 23ff098:	4620      	mov	r0, r4
 23ff09a:	4629      	mov	r1, r5
 23ff09c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23ff0a0:	e79f      	b.n	23fefe2 <atan+0x1f2>
 23ff0a2:	bf00      	nop
 23ff0a4:	f3af 8000 	nop.w
 23ff0a8:	54442d18 	.word	0x54442d18
 23ff0ac:	3ff921fb 	.word	0x3ff921fb
 23ff0b0:	e322da11 	.word	0xe322da11
 23ff0b4:	3f90ad3a 	.word	0x3f90ad3a
 23ff0b8:	24760deb 	.word	0x24760deb
 23ff0bc:	3fa97b4b 	.word	0x3fa97b4b
 23ff0c0:	a0d03d51 	.word	0xa0d03d51
 23ff0c4:	3fb10d66 	.word	0x3fb10d66
 23ff0c8:	c54c206e 	.word	0xc54c206e
 23ff0cc:	3fb745cd 	.word	0x3fb745cd
 23ff0d0:	920083ff 	.word	0x920083ff
 23ff0d4:	3fc24924 	.word	0x3fc24924
 23ff0d8:	5555550d 	.word	0x5555550d
 23ff0dc:	3fd55555 	.word	0x3fd55555
 23ff0e0:	2c6a6c2f 	.word	0x2c6a6c2f
 23ff0e4:	bfa2b444 	.word	0xbfa2b444
 23ff0e8:	52defd9a 	.word	0x52defd9a
 23ff0ec:	3fadde2d 	.word	0x3fadde2d
 23ff0f0:	af749a6d 	.word	0xaf749a6d
 23ff0f4:	3fb3b0f2 	.word	0x3fb3b0f2
 23ff0f8:	fe231671 	.word	0xfe231671
 23ff0fc:	3fbc71c6 	.word	0x3fbc71c6
 23ff100:	9998ebc4 	.word	0x9998ebc4
 23ff104:	3fc99999 	.word	0x3fc99999
 23ff108:	8800759c 	.word	0x8800759c
 23ff10c:	7e37e43c 	.word	0x7e37e43c
 23ff110:	54442d18 	.word	0x54442d18
 23ff114:	bff921fb 	.word	0xbff921fb
 23ff118:	440fffff 	.word	0x440fffff
 23ff11c:	7ff00000 	.word	0x7ff00000
 23ff120:	3fdbffff 	.word	0x3fdbffff
 23ff124:	023ffe08 	.word	0x023ffe08
 23ff128:	023ffe28 	.word	0x023ffe28
 23ff12c:	3ff00000 	.word	0x3ff00000
 23ff130:	3ff2ffff 	.word	0x3ff2ffff
 23ff134:	40038000 	.word	0x40038000
 23ff138:	3ff80000 	.word	0x3ff80000
 23ff13c:	bff00000 	.word	0xbff00000

023ff140 <fabs>:
 23ff140:	ec51 0b10 	vmov	r0, r1, d0
 23ff144:	ee10 2a10 	vmov	r2, s0
 23ff148:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23ff14c:	ec43 2b10 	vmov	d0, r2, r3
 23ff150:	4770      	bx	lr
 23ff152:	bf00      	nop

023ff154 <finite>:
 23ff154:	b082      	sub	sp, #8
 23ff156:	4805      	ldr	r0, [pc, #20]	; (23ff16c <finite+0x18>)
 23ff158:	ed8d 0b00 	vstr	d0, [sp]
 23ff15c:	9b01      	ldr	r3, [sp, #4]
 23ff15e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23ff162:	4418      	add	r0, r3
 23ff164:	0fc0      	lsrs	r0, r0, #31
 23ff166:	b002      	add	sp, #8
 23ff168:	4770      	bx	lr
 23ff16a:	bf00      	nop
 23ff16c:	80100000 	.word	0x80100000

023ff170 <nan>:
 23ff170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23ff178 <nan+0x8>
 23ff174:	4770      	bx	lr
 23ff176:	bf00      	nop
 23ff178:	00000000 	.word	0x00000000
 23ff17c:	7ff80000 	.word	0x7ff80000

023ff180 <rint>:
 23ff180:	ec53 2b10 	vmov	r2, r3, d0
 23ff184:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23ff188:	ee10 0a10 	vmov	r0, s0
 23ff18c:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23ff190:	2913      	cmp	r1, #19
 23ff192:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff194:	461c      	mov	r4, r3
 23ff196:	b083      	sub	sp, #12
 23ff198:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23ff19c:	dc3a      	bgt.n	23ff214 <rint+0x94>
 23ff19e:	2900      	cmp	r1, #0
 23ff1a0:	db30      	blt.n	23ff204 <rint+0x84>
 23ff1a2:	4d42      	ldr	r5, [pc, #264]	; (23ff2ac <rint+0x12c>)
 23ff1a4:	fa45 fc01 	asr.w	ip, r5, r1
 23ff1a8:	ea03 050c 	and.w	r5, r3, ip
 23ff1ac:	4315      	orrs	r5, r2
 23ff1ae:	d02d      	beq.n	23ff20c <rint+0x8c>
 23ff1b0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23ff1b4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23ff1b8:	4318      	orrs	r0, r3
 23ff1ba:	d00c      	beq.n	23ff1d6 <rint+0x56>
 23ff1bc:	ea24 0c0c 	bic.w	ip, r4, ip
 23ff1c0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23ff1c4:	2913      	cmp	r1, #19
 23ff1c6:	fa44 f101 	asr.w	r1, r4, r1
 23ff1ca:	bf0c      	ite	eq
 23ff1cc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23ff1d0:	2000      	movne	r0, #0
 23ff1d2:	ea4c 0401 	orr.w	r4, ip, r1
 23ff1d6:	4936      	ldr	r1, [pc, #216]	; (23ff2b0 <rint+0x130>)
 23ff1d8:	4623      	mov	r3, r4
 23ff1da:	4602      	mov	r2, r0
 23ff1dc:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23ff1e0:	e9de 4500 	ldrd	r4, r5, [lr]
 23ff1e4:	4620      	mov	r0, r4
 23ff1e6:	4629      	mov	r1, r5
 23ff1e8:	f7f9 fc68 	bl	23f8abc <__adddf3>
 23ff1ec:	4622      	mov	r2, r4
 23ff1ee:	462b      	mov	r3, r5
 23ff1f0:	e9cd 0100 	strd	r0, r1, [sp]
 23ff1f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff1f8:	f7f9 fc5e 	bl	23f8ab8 <__aeabi_dsub>
 23ff1fc:	ec41 0b10 	vmov	d0, r0, r1
 23ff200:	b003      	add	sp, #12
 23ff202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff204:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23ff208:	4311      	orrs	r1, r2
 23ff20a:	d124      	bne.n	23ff256 <rint+0xd6>
 23ff20c:	ec43 2b10 	vmov	d0, r2, r3
 23ff210:	b003      	add	sp, #12
 23ff212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff214:	2933      	cmp	r1, #51	; 0x33
 23ff216:	dd08      	ble.n	23ff22a <rint+0xaa>
 23ff218:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23ff21c:	d1f6      	bne.n	23ff20c <rint+0x8c>
 23ff21e:	4619      	mov	r1, r3
 23ff220:	f7f9 fc4c 	bl	23f8abc <__adddf3>
 23ff224:	ec41 0b10 	vmov	d0, r0, r1
 23ff228:	e7f2      	b.n	23ff210 <rint+0x90>
 23ff22a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23ff22e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ff232:	fa21 f10c 	lsr.w	r1, r1, ip
 23ff236:	420a      	tst	r2, r1
 23ff238:	d0e8      	beq.n	23ff20c <rint+0x8c>
 23ff23a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23ff23e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23ff242:	d0c8      	beq.n	23ff1d6 <rint+0x56>
 23ff244:	ea20 0303 	bic.w	r3, r0, r3
 23ff248:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ff24c:	fa40 fc0c 	asr.w	ip, r0, ip
 23ff250:	ea43 000c 	orr.w	r0, r3, ip
 23ff254:	e7bf      	b.n	23ff1d6 <rint+0x56>
 23ff256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff25a:	4a16      	ldr	r2, [pc, #88]	; (23ff2b4 <rint+0x134>)
 23ff25c:	4318      	orrs	r0, r3
 23ff25e:	4022      	ands	r2, r4
 23ff260:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23ff264:	4243      	negs	r3, r0
 23ff266:	4303      	orrs	r3, r0
 23ff268:	0b1b      	lsrs	r3, r3, #12
 23ff26a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23ff26e:	ea43 0702 	orr.w	r7, r3, r2
 23ff272:	4b0f      	ldr	r3, [pc, #60]	; (23ff2b0 <rint+0x130>)
 23ff274:	ee10 2a10 	vmov	r2, s0
 23ff278:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23ff27c:	463b      	mov	r3, r7
 23ff27e:	e9de 6700 	ldrd	r6, r7, [lr]
 23ff282:	4630      	mov	r0, r6
 23ff284:	4639      	mov	r1, r7
 23ff286:	f7f9 fc19 	bl	23f8abc <__adddf3>
 23ff28a:	4632      	mov	r2, r6
 23ff28c:	463b      	mov	r3, r7
 23ff28e:	e9cd 0100 	strd	r0, r1, [sp]
 23ff292:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ff296:	f7f9 fc0f 	bl	23f8ab8 <__aeabi_dsub>
 23ff29a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ff29e:	4602      	mov	r2, r0
 23ff2a0:	ea41 0304 	orr.w	r3, r1, r4
 23ff2a4:	ec43 2b10 	vmov	d0, r2, r3
 23ff2a8:	b003      	add	sp, #12
 23ff2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ff2ac:	000fffff 	.word	0x000fffff
 23ff2b0:	023ffe48 	.word	0x023ffe48
 23ff2b4:	fffe0000 	.word	0xfffe0000

023ff2b8 <scalbn>:
 23ff2b8:	b538      	push	{r3, r4, r5, lr}
 23ff2ba:	ec53 2b10 	vmov	r2, r3, d0
 23ff2be:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23ff2c2:	469c      	mov	ip, r3
 23ff2c4:	4604      	mov	r4, r0
 23ff2c6:	bb89      	cbnz	r1, 23ff32c <scalbn+0x74>
 23ff2c8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23ff2cc:	ee10 1a10 	vmov	r1, s0
 23ff2d0:	ea5c 0101 	orrs.w	r1, ip, r1
 23ff2d4:	d029      	beq.n	23ff32a <scalbn+0x72>
 23ff2d6:	4d3e      	ldr	r5, [pc, #248]	; (23ff3d0 <scalbn+0x118>)
 23ff2d8:	4619      	mov	r1, r3
 23ff2da:	2200      	movs	r2, #0
 23ff2dc:	4b3d      	ldr	r3, [pc, #244]	; (23ff3d4 <scalbn+0x11c>)
 23ff2de:	ee10 0a10 	vmov	r0, s0
 23ff2e2:	f7f9 fda1 	bl	23f8e28 <__aeabi_dmul>
 23ff2e6:	42ac      	cmp	r4, r5
 23ff2e8:	4602      	mov	r2, r0
 23ff2ea:	460b      	mov	r3, r1
 23ff2ec:	db16      	blt.n	23ff31c <scalbn+0x64>
 23ff2ee:	468c      	mov	ip, r1
 23ff2f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23ff2f4:	3936      	subs	r1, #54	; 0x36
 23ff2f6:	4421      	add	r1, r4
 23ff2f8:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23ff2fc:	4281      	cmp	r1, r0
 23ff2fe:	dc21      	bgt.n	23ff344 <scalbn+0x8c>
 23ff300:	2900      	cmp	r1, #0
 23ff302:	dc47      	bgt.n	23ff394 <scalbn+0xdc>
 23ff304:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23ff308:	da34      	bge.n	23ff374 <scalbn+0xbc>
 23ff30a:	f24c 3150 	movw	r1, #50000	; 0xc350
 23ff30e:	428c      	cmp	r4, r1
 23ff310:	dc18      	bgt.n	23ff344 <scalbn+0x8c>
 23ff312:	2b00      	cmp	r3, #0
 23ff314:	a126      	add	r1, pc, #152	; (adr r1, 23ff3b0 <scalbn+0xf8>)
 23ff316:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff31a:	db43      	blt.n	23ff3a4 <scalbn+0xec>
 23ff31c:	a324      	add	r3, pc, #144	; (adr r3, 23ff3b0 <scalbn+0xf8>)
 23ff31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff322:	f7f9 fd81 	bl	23f8e28 <__aeabi_dmul>
 23ff326:	ec41 0b10 	vmov	d0, r0, r1
 23ff32a:	bd38      	pop	{r3, r4, r5, pc}
 23ff32c:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23ff330:	4571      	cmp	r1, lr
 23ff332:	d1e0      	bne.n	23ff2f6 <scalbn+0x3e>
 23ff334:	ee10 0a10 	vmov	r0, s0
 23ff338:	4619      	mov	r1, r3
 23ff33a:	f7f9 fbbf 	bl	23f8abc <__adddf3>
 23ff33e:	ec41 0b10 	vmov	d0, r0, r1
 23ff342:	bd38      	pop	{r3, r4, r5, pc}
 23ff344:	2b00      	cmp	r3, #0
 23ff346:	a11c      	add	r1, pc, #112	; (adr r1, 23ff3b8 <scalbn+0x100>)
 23ff348:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff34c:	db07      	blt.n	23ff35e <scalbn+0xa6>
 23ff34e:	a31a      	add	r3, pc, #104	; (adr r3, 23ff3b8 <scalbn+0x100>)
 23ff350:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff354:	f7f9 fd68 	bl	23f8e28 <__aeabi_dmul>
 23ff358:	ec41 0b10 	vmov	d0, r0, r1
 23ff35c:	bd38      	pop	{r3, r4, r5, pc}
 23ff35e:	a118      	add	r1, pc, #96	; (adr r1, 23ff3c0 <scalbn+0x108>)
 23ff360:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff364:	a314      	add	r3, pc, #80	; (adr r3, 23ff3b8 <scalbn+0x100>)
 23ff366:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff36a:	f7f9 fd5d 	bl	23f8e28 <__aeabi_dmul>
 23ff36e:	ec41 0b10 	vmov	d0, r0, r1
 23ff372:	e7f3      	b.n	23ff35c <scalbn+0xa4>
 23ff374:	4818      	ldr	r0, [pc, #96]	; (23ff3d8 <scalbn+0x120>)
 23ff376:	3136      	adds	r1, #54	; 0x36
 23ff378:	4614      	mov	r4, r2
 23ff37a:	4b18      	ldr	r3, [pc, #96]	; (23ff3dc <scalbn+0x124>)
 23ff37c:	ea0c 0000 	and.w	r0, ip, r0
 23ff380:	2200      	movs	r2, #0
 23ff382:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23ff386:	4620      	mov	r0, r4
 23ff388:	4629      	mov	r1, r5
 23ff38a:	f7f9 fd4d 	bl	23f8e28 <__aeabi_dmul>
 23ff38e:	ec41 0b10 	vmov	d0, r0, r1
 23ff392:	bd38      	pop	{r3, r4, r5, pc}
 23ff394:	4810      	ldr	r0, [pc, #64]	; (23ff3d8 <scalbn+0x120>)
 23ff396:	ea0c 0000 	and.w	r0, ip, r0
 23ff39a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23ff39e:	ec43 2b10 	vmov	d0, r2, r3
 23ff3a2:	bd38      	pop	{r3, r4, r5, pc}
 23ff3a4:	a108      	add	r1, pc, #32	; (adr r1, 23ff3c8 <scalbn+0x110>)
 23ff3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff3aa:	e7b7      	b.n	23ff31c <scalbn+0x64>
 23ff3ac:	f3af 8000 	nop.w
 23ff3b0:	c2f8f359 	.word	0xc2f8f359
 23ff3b4:	01a56e1f 	.word	0x01a56e1f
 23ff3b8:	8800759c 	.word	0x8800759c
 23ff3bc:	7e37e43c 	.word	0x7e37e43c
 23ff3c0:	8800759c 	.word	0x8800759c
 23ff3c4:	fe37e43c 	.word	0xfe37e43c
 23ff3c8:	c2f8f359 	.word	0xc2f8f359
 23ff3cc:	81a56e1f 	.word	0x81a56e1f
 23ff3d0:	ffff3cb0 	.word	0xffff3cb0
 23ff3d4:	43500000 	.word	0x43500000
 23ff3d8:	800fffff 	.word	0x800fffff
 23ff3dc:	3c900000 	.word	0x3c900000

023ff3e0 <atexit>:
 23ff3e0:	2300      	movs	r3, #0
 23ff3e2:	4601      	mov	r1, r0
 23ff3e4:	461a      	mov	r2, r3
 23ff3e6:	4618      	mov	r0, r3
 23ff3e8:	f000 b956 	b.w	23ff698 <__register_exitproc>

023ff3ec <isprint>:
 23ff3ec:	4b02      	ldr	r3, [pc, #8]	; (23ff3f8 <isprint+0xc>)
 23ff3ee:	4418      	add	r0, r3
 23ff3f0:	7840      	ldrb	r0, [r0, #1]
 23ff3f2:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff3f6:	4770      	bx	lr
 23ff3f8:	023ffec8 	.word	0x023ffec8

023ff3fc <memcmp>:
 23ff3fc:	3901      	subs	r1, #1
 23ff3fe:	4402      	add	r2, r0
 23ff400:	b510      	push	{r4, lr}
 23ff402:	4290      	cmp	r0, r2
 23ff404:	d101      	bne.n	23ff40a <memcmp+0xe>
 23ff406:	2000      	movs	r0, #0
 23ff408:	e005      	b.n	23ff416 <memcmp+0x1a>
 23ff40a:	7803      	ldrb	r3, [r0, #0]
 23ff40c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff410:	42a3      	cmp	r3, r4
 23ff412:	d001      	beq.n	23ff418 <memcmp+0x1c>
 23ff414:	1b18      	subs	r0, r3, r4
 23ff416:	bd10      	pop	{r4, pc}
 23ff418:	3001      	adds	r0, #1
 23ff41a:	e7f2      	b.n	23ff402 <memcmp+0x6>

023ff41c <memcpy>:
 23ff41c:	440a      	add	r2, r1
 23ff41e:	1e43      	subs	r3, r0, #1
 23ff420:	4291      	cmp	r1, r2
 23ff422:	d100      	bne.n	23ff426 <memcpy+0xa>
 23ff424:	4770      	bx	lr
 23ff426:	b510      	push	{r4, lr}
 23ff428:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff42c:	4291      	cmp	r1, r2
 23ff42e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff432:	d1f9      	bne.n	23ff428 <memcpy+0xc>
 23ff434:	bd10      	pop	{r4, pc}

023ff436 <memmove>:
 23ff436:	4288      	cmp	r0, r1
 23ff438:	b510      	push	{r4, lr}
 23ff43a:	eb01 0402 	add.w	r4, r1, r2
 23ff43e:	d902      	bls.n	23ff446 <memmove+0x10>
 23ff440:	4284      	cmp	r4, r0
 23ff442:	4623      	mov	r3, r4
 23ff444:	d807      	bhi.n	23ff456 <memmove+0x20>
 23ff446:	1e43      	subs	r3, r0, #1
 23ff448:	42a1      	cmp	r1, r4
 23ff44a:	d008      	beq.n	23ff45e <memmove+0x28>
 23ff44c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff450:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff454:	e7f8      	b.n	23ff448 <memmove+0x12>
 23ff456:	4402      	add	r2, r0
 23ff458:	4601      	mov	r1, r0
 23ff45a:	428a      	cmp	r2, r1
 23ff45c:	d100      	bne.n	23ff460 <memmove+0x2a>
 23ff45e:	bd10      	pop	{r4, pc}
 23ff460:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff464:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff468:	e7f7      	b.n	23ff45a <memmove+0x24>

023ff46a <memset>:
 23ff46a:	4402      	add	r2, r0
 23ff46c:	4603      	mov	r3, r0
 23ff46e:	4293      	cmp	r3, r2
 23ff470:	d100      	bne.n	23ff474 <memset+0xa>
 23ff472:	4770      	bx	lr
 23ff474:	f803 1b01 	strb.w	r1, [r3], #1
 23ff478:	e7f9      	b.n	23ff46e <memset+0x4>
	...

023ff47c <srand>:
 23ff47c:	b538      	push	{r3, r4, r5, lr}
 23ff47e:	4b10      	ldr	r3, [pc, #64]	; (23ff4c0 <srand+0x44>)
 23ff480:	4604      	mov	r4, r0
 23ff482:	681d      	ldr	r5, [r3, #0]
 23ff484:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff486:	b9b3      	cbnz	r3, 23ff4b6 <srand+0x3a>
 23ff488:	2018      	movs	r0, #24
 23ff48a:	f7fb f8a1 	bl	23fa5d0 <malloc>
 23ff48e:	4602      	mov	r2, r0
 23ff490:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff492:	b920      	cbnz	r0, 23ff49e <srand+0x22>
 23ff494:	4b0b      	ldr	r3, [pc, #44]	; (23ff4c4 <srand+0x48>)
 23ff496:	2142      	movs	r1, #66	; 0x42
 23ff498:	480b      	ldr	r0, [pc, #44]	; (23ff4c8 <srand+0x4c>)
 23ff49a:	f7fb f8ed 	bl	23fa678 <__assert_func>
 23ff49e:	490b      	ldr	r1, [pc, #44]	; (23ff4cc <srand+0x50>)
 23ff4a0:	4b0b      	ldr	r3, [pc, #44]	; (23ff4d0 <srand+0x54>)
 23ff4a2:	e9c0 1300 	strd	r1, r3, [r0]
 23ff4a6:	4b0b      	ldr	r3, [pc, #44]	; (23ff4d4 <srand+0x58>)
 23ff4a8:	2100      	movs	r1, #0
 23ff4aa:	6083      	str	r3, [r0, #8]
 23ff4ac:	230b      	movs	r3, #11
 23ff4ae:	8183      	strh	r3, [r0, #12]
 23ff4b0:	2001      	movs	r0, #1
 23ff4b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff4b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff4b8:	2200      	movs	r2, #0
 23ff4ba:	611c      	str	r4, [r3, #16]
 23ff4bc:	615a      	str	r2, [r3, #20]
 23ff4be:	bd38      	pop	{r3, r4, r5, pc}
 23ff4c0:	10079d84 	.word	0x10079d84
 23ff4c4:	023ffe58 	.word	0x023ffe58
 23ff4c8:	023ffe6f 	.word	0x023ffe6f
 23ff4cc:	abcd330e 	.word	0xabcd330e
 23ff4d0:	e66d1234 	.word	0xe66d1234
 23ff4d4:	0005deec 	.word	0x0005deec

023ff4d8 <strchr>:
 23ff4d8:	b2c9      	uxtb	r1, r1
 23ff4da:	4603      	mov	r3, r0
 23ff4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff4e0:	b11a      	cbz	r2, 23ff4ea <strchr+0x12>
 23ff4e2:	428a      	cmp	r2, r1
 23ff4e4:	d1f9      	bne.n	23ff4da <strchr+0x2>
 23ff4e6:	4618      	mov	r0, r3
 23ff4e8:	4770      	bx	lr
 23ff4ea:	2900      	cmp	r1, #0
 23ff4ec:	bf18      	it	ne
 23ff4ee:	2300      	movne	r3, #0
 23ff4f0:	e7f9      	b.n	23ff4e6 <strchr+0xe>

023ff4f2 <strchrnul>:
 23ff4f2:	b510      	push	{r4, lr}
 23ff4f4:	4604      	mov	r4, r0
 23ff4f6:	f7ff ffef 	bl	23ff4d8 <strchr>
 23ff4fa:	b918      	cbnz	r0, 23ff504 <strchrnul+0x12>
 23ff4fc:	4620      	mov	r0, r4
 23ff4fe:	f7f9 ff9d 	bl	23f943c <strlen>
 23ff502:	4420      	add	r0, r4
 23ff504:	bd10      	pop	{r4, pc}

023ff506 <strcpy>:
 23ff506:	4603      	mov	r3, r0
 23ff508:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff50c:	f803 2b01 	strb.w	r2, [r3], #1
 23ff510:	2a00      	cmp	r2, #0
 23ff512:	d1f9      	bne.n	23ff508 <strcpy+0x2>
 23ff514:	4770      	bx	lr

023ff516 <strncmp>:
 23ff516:	b510      	push	{r4, lr}
 23ff518:	b17a      	cbz	r2, 23ff53a <strncmp+0x24>
 23ff51a:	4603      	mov	r3, r0
 23ff51c:	3901      	subs	r1, #1
 23ff51e:	1884      	adds	r4, r0, r2
 23ff520:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff524:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff528:	4290      	cmp	r0, r2
 23ff52a:	d101      	bne.n	23ff530 <strncmp+0x1a>
 23ff52c:	42a3      	cmp	r3, r4
 23ff52e:	d101      	bne.n	23ff534 <strncmp+0x1e>
 23ff530:	1a80      	subs	r0, r0, r2
 23ff532:	bd10      	pop	{r4, pc}
 23ff534:	2800      	cmp	r0, #0
 23ff536:	d1f3      	bne.n	23ff520 <strncmp+0xa>
 23ff538:	e7fa      	b.n	23ff530 <strncmp+0x1a>
 23ff53a:	4610      	mov	r0, r2
 23ff53c:	e7f9      	b.n	23ff532 <strncmp+0x1c>

023ff53e <strnlen>:
 23ff53e:	4602      	mov	r2, r0
 23ff540:	4401      	add	r1, r0
 23ff542:	b510      	push	{r4, lr}
 23ff544:	428a      	cmp	r2, r1
 23ff546:	4613      	mov	r3, r2
 23ff548:	d003      	beq.n	23ff552 <strnlen+0x14>
 23ff54a:	781c      	ldrb	r4, [r3, #0]
 23ff54c:	3201      	adds	r2, #1
 23ff54e:	2c00      	cmp	r4, #0
 23ff550:	d1f8      	bne.n	23ff544 <strnlen+0x6>
 23ff552:	1a18      	subs	r0, r3, r0
 23ff554:	bd10      	pop	{r4, pc}

023ff556 <strrchr>:
 23ff556:	b538      	push	{r3, r4, r5, lr}
 23ff558:	4603      	mov	r3, r0
 23ff55a:	460c      	mov	r4, r1
 23ff55c:	b969      	cbnz	r1, 23ff57a <strrchr+0x24>
 23ff55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff562:	f7ff bfb9 	b.w	23ff4d8 <strchr>
 23ff566:	1c43      	adds	r3, r0, #1
 23ff568:	4605      	mov	r5, r0
 23ff56a:	4621      	mov	r1, r4
 23ff56c:	4618      	mov	r0, r3
 23ff56e:	f7ff ffb3 	bl	23ff4d8 <strchr>
 23ff572:	2800      	cmp	r0, #0
 23ff574:	d1f7      	bne.n	23ff566 <strrchr+0x10>
 23ff576:	4628      	mov	r0, r5
 23ff578:	bd38      	pop	{r3, r4, r5, pc}
 23ff57a:	2500      	movs	r5, #0
 23ff57c:	e7f5      	b.n	23ff56a <strrchr+0x14>
	...

023ff580 <_strtol_l.constprop.0>:
 23ff580:	2b01      	cmp	r3, #1
 23ff582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff586:	d001      	beq.n	23ff58c <_strtol_l.constprop.0+0xc>
 23ff588:	2b24      	cmp	r3, #36	; 0x24
 23ff58a:	d906      	bls.n	23ff59a <_strtol_l.constprop.0+0x1a>
 23ff58c:	f7fb f866 	bl	23fa65c <__errno>
 23ff590:	2316      	movs	r3, #22
 23ff592:	6003      	str	r3, [r0, #0]
 23ff594:	2000      	movs	r0, #0
 23ff596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff59a:	460d      	mov	r5, r1
 23ff59c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff680 <_strtol_l.constprop.0+0x100>
 23ff5a0:	462e      	mov	r6, r5
 23ff5a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff5a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff5aa:	f017 0708 	ands.w	r7, r7, #8
 23ff5ae:	d1f7      	bne.n	23ff5a0 <_strtol_l.constprop.0+0x20>
 23ff5b0:	2c2d      	cmp	r4, #45	; 0x2d
 23ff5b2:	d132      	bne.n	23ff61a <_strtol_l.constprop.0+0x9a>
 23ff5b4:	782c      	ldrb	r4, [r5, #0]
 23ff5b6:	2701      	movs	r7, #1
 23ff5b8:	1cb5      	adds	r5, r6, #2
 23ff5ba:	2b00      	cmp	r3, #0
 23ff5bc:	d05b      	beq.n	23ff676 <_strtol_l.constprop.0+0xf6>
 23ff5be:	2b10      	cmp	r3, #16
 23ff5c0:	d109      	bne.n	23ff5d6 <_strtol_l.constprop.0+0x56>
 23ff5c2:	2c30      	cmp	r4, #48	; 0x30
 23ff5c4:	d107      	bne.n	23ff5d6 <_strtol_l.constprop.0+0x56>
 23ff5c6:	782c      	ldrb	r4, [r5, #0]
 23ff5c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff5cc:	2c58      	cmp	r4, #88	; 0x58
 23ff5ce:	d14d      	bne.n	23ff66c <_strtol_l.constprop.0+0xec>
 23ff5d0:	786c      	ldrb	r4, [r5, #1]
 23ff5d2:	2310      	movs	r3, #16
 23ff5d4:	3502      	adds	r5, #2
 23ff5d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff5da:	f04f 0c00 	mov.w	ip, #0
 23ff5de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff5e2:	4666      	mov	r6, ip
 23ff5e4:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff5e8:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff5ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff5f0:	f1be 0f09 	cmp.w	lr, #9
 23ff5f4:	d816      	bhi.n	23ff624 <_strtol_l.constprop.0+0xa4>
 23ff5f6:	4674      	mov	r4, lr
 23ff5f8:	42a3      	cmp	r3, r4
 23ff5fa:	dd24      	ble.n	23ff646 <_strtol_l.constprop.0+0xc6>
 23ff5fc:	f1bc 0f00 	cmp.w	ip, #0
 23ff600:	db1e      	blt.n	23ff640 <_strtol_l.constprop.0+0xc0>
 23ff602:	45b1      	cmp	r9, r6
 23ff604:	d31c      	bcc.n	23ff640 <_strtol_l.constprop.0+0xc0>
 23ff606:	d101      	bne.n	23ff60c <_strtol_l.constprop.0+0x8c>
 23ff608:	45a2      	cmp	sl, r4
 23ff60a:	db19      	blt.n	23ff640 <_strtol_l.constprop.0+0xc0>
 23ff60c:	fb06 4603 	mla	r6, r6, r3, r4
 23ff610:	f04f 0c01 	mov.w	ip, #1
 23ff614:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff618:	e7e8      	b.n	23ff5ec <_strtol_l.constprop.0+0x6c>
 23ff61a:	2c2b      	cmp	r4, #43	; 0x2b
 23ff61c:	bf04      	itt	eq
 23ff61e:	782c      	ldrbeq	r4, [r5, #0]
 23ff620:	1cb5      	addeq	r5, r6, #2
 23ff622:	e7ca      	b.n	23ff5ba <_strtol_l.constprop.0+0x3a>
 23ff624:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff628:	f1be 0f19 	cmp.w	lr, #25
 23ff62c:	d801      	bhi.n	23ff632 <_strtol_l.constprop.0+0xb2>
 23ff62e:	3c37      	subs	r4, #55	; 0x37
 23ff630:	e7e2      	b.n	23ff5f8 <_strtol_l.constprop.0+0x78>
 23ff632:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff636:	f1be 0f19 	cmp.w	lr, #25
 23ff63a:	d804      	bhi.n	23ff646 <_strtol_l.constprop.0+0xc6>
 23ff63c:	3c57      	subs	r4, #87	; 0x57
 23ff63e:	e7db      	b.n	23ff5f8 <_strtol_l.constprop.0+0x78>
 23ff640:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff644:	e7e6      	b.n	23ff614 <_strtol_l.constprop.0+0x94>
 23ff646:	f1bc 0f00 	cmp.w	ip, #0
 23ff64a:	da05      	bge.n	23ff658 <_strtol_l.constprop.0+0xd8>
 23ff64c:	2322      	movs	r3, #34	; 0x22
 23ff64e:	4646      	mov	r6, r8
 23ff650:	6003      	str	r3, [r0, #0]
 23ff652:	b942      	cbnz	r2, 23ff666 <_strtol_l.constprop.0+0xe6>
 23ff654:	4630      	mov	r0, r6
 23ff656:	e79e      	b.n	23ff596 <_strtol_l.constprop.0+0x16>
 23ff658:	b107      	cbz	r7, 23ff65c <_strtol_l.constprop.0+0xdc>
 23ff65a:	4276      	negs	r6, r6
 23ff65c:	2a00      	cmp	r2, #0
 23ff65e:	d0f9      	beq.n	23ff654 <_strtol_l.constprop.0+0xd4>
 23ff660:	f1bc 0f00 	cmp.w	ip, #0
 23ff664:	d000      	beq.n	23ff668 <_strtol_l.constprop.0+0xe8>
 23ff666:	1e69      	subs	r1, r5, #1
 23ff668:	6011      	str	r1, [r2, #0]
 23ff66a:	e7f3      	b.n	23ff654 <_strtol_l.constprop.0+0xd4>
 23ff66c:	2430      	movs	r4, #48	; 0x30
 23ff66e:	2b00      	cmp	r3, #0
 23ff670:	d1b1      	bne.n	23ff5d6 <_strtol_l.constprop.0+0x56>
 23ff672:	2308      	movs	r3, #8
 23ff674:	e7af      	b.n	23ff5d6 <_strtol_l.constprop.0+0x56>
 23ff676:	2c30      	cmp	r4, #48	; 0x30
 23ff678:	d0a5      	beq.n	23ff5c6 <_strtol_l.constprop.0+0x46>
 23ff67a:	230a      	movs	r3, #10
 23ff67c:	e7ab      	b.n	23ff5d6 <_strtol_l.constprop.0+0x56>
 23ff67e:	bf00      	nop
 23ff680:	023ffec9 	.word	0x023ffec9

023ff684 <strtol>:
 23ff684:	4613      	mov	r3, r2
 23ff686:	460a      	mov	r2, r1
 23ff688:	4601      	mov	r1, r0
 23ff68a:	4802      	ldr	r0, [pc, #8]	; (23ff694 <strtol+0x10>)
 23ff68c:	6800      	ldr	r0, [r0, #0]
 23ff68e:	f7ff bf77 	b.w	23ff580 <_strtol_l.constprop.0>
 23ff692:	bf00      	nop
 23ff694:	10079d84 	.word	0x10079d84

023ff698 <__register_exitproc>:
 23ff698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff69c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff75c <__register_exitproc+0xc4>
 23ff6a0:	4606      	mov	r6, r0
 23ff6a2:	461f      	mov	r7, r3
 23ff6a4:	460d      	mov	r5, r1
 23ff6a6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff6aa:	4691      	mov	r9, r2
 23ff6ac:	f000 f858 	bl	23ff760 <__retarget_lock_acquire_recursive>
 23ff6b0:	4b26      	ldr	r3, [pc, #152]	; (23ff74c <__register_exitproc+0xb4>)
 23ff6b2:	681c      	ldr	r4, [r3, #0]
 23ff6b4:	b934      	cbnz	r4, 23ff6c4 <__register_exitproc+0x2c>
 23ff6b6:	4c26      	ldr	r4, [pc, #152]	; (23ff750 <__register_exitproc+0xb8>)
 23ff6b8:	601c      	str	r4, [r3, #0]
 23ff6ba:	4b26      	ldr	r3, [pc, #152]	; (23ff754 <__register_exitproc+0xbc>)
 23ff6bc:	b113      	cbz	r3, 23ff6c4 <__register_exitproc+0x2c>
 23ff6be:	681b      	ldr	r3, [r3, #0]
 23ff6c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff6c4:	6863      	ldr	r3, [r4, #4]
 23ff6c6:	2b1f      	cmp	r3, #31
 23ff6c8:	dd07      	ble.n	23ff6da <__register_exitproc+0x42>
 23ff6ca:	f8d8 0000 	ldr.w	r0, [r8]
 23ff6ce:	f000 f849 	bl	23ff764 <__retarget_lock_release_recursive>
 23ff6d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff6da:	b35e      	cbz	r6, 23ff734 <__register_exitproc+0x9c>
 23ff6dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff6e0:	b988      	cbnz	r0, 23ff706 <__register_exitproc+0x6e>
 23ff6e2:	4b1d      	ldr	r3, [pc, #116]	; (23ff758 <__register_exitproc+0xc0>)
 23ff6e4:	b923      	cbnz	r3, 23ff6f0 <__register_exitproc+0x58>
 23ff6e6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff6ea:	f000 f83a 	bl	23ff762 <__retarget_lock_release>
 23ff6ee:	e7f0      	b.n	23ff6d2 <__register_exitproc+0x3a>
 23ff6f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff6f4:	f7fa ff6c 	bl	23fa5d0 <malloc>
 23ff6f8:	2800      	cmp	r0, #0
 23ff6fa:	d0f4      	beq.n	23ff6e6 <__register_exitproc+0x4e>
 23ff6fc:	2300      	movs	r3, #0
 23ff6fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff702:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff706:	6863      	ldr	r3, [r4, #4]
 23ff708:	2201      	movs	r2, #1
 23ff70a:	2e02      	cmp	r6, #2
 23ff70c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff710:	fa02 f203 	lsl.w	r2, r2, r3
 23ff714:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff718:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff71c:	ea43 0302 	orr.w	r3, r3, r2
 23ff720:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff724:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff728:	bf02      	ittt	eq
 23ff72a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff72e:	4313      	orreq	r3, r2
 23ff730:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff734:	6863      	ldr	r3, [r4, #4]
 23ff736:	f8d8 0000 	ldr.w	r0, [r8]
 23ff73a:	1c5a      	adds	r2, r3, #1
 23ff73c:	3302      	adds	r3, #2
 23ff73e:	6062      	str	r2, [r4, #4]
 23ff740:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff744:	f000 f80e 	bl	23ff764 <__retarget_lock_release_recursive>
 23ff748:	2000      	movs	r0, #0
 23ff74a:	e7c4      	b.n	23ff6d6 <__register_exitproc+0x3e>
 23ff74c:	1007afe0 	.word	0x1007afe0
 23ff750:	1007af54 	.word	0x1007af54
 23ff754:	00000000 	.word	0x00000000
 23ff758:	023fa5d1 	.word	0x023fa5d1
 23ff75c:	10079de8 	.word	0x10079de8

023ff760 <__retarget_lock_acquire_recursive>:
 23ff760:	4770      	bx	lr

023ff762 <__retarget_lock_release>:
 23ff762:	4770      	bx	lr

023ff764 <__retarget_lock_release_recursive>:
 23ff764:	4770      	bx	lr
	...

023ff768 <link_const_data_start>:
 23ff768:	00000000 	.word	0x00000000
 23ff76c:	34fb0000 	.word	0x34fb0000
 23ff770:	00805f9b 	.word	0x00805f9b
 23ff774:	10008000 	.word	0x10008000
	...

023ff780 <dynalib_user>:
 23ff780:	023f944d 023f9475 023f9479 00000000     M.?.u.?.y.?.....
 23ff790:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff7a0:	6c617574 203a7800 202c6425 25203a79     tual.x: %d, y: %
 23ff7b0:	7a202c64 6425203a 3a72202c 2c662520     d, z: %d, r: %f,
 23ff7c0:	203a7020 202c6625 25203a74 00000066      p: %f, t: %f...

023ff7d0 <_ZTV10BleLoggingILj4096EE>:
	...
 23ff7d8:	023f94bd 023f94dd 023fcd75 023fcf1d     ..?...?.u.?...?.
 23ff7e8:	023f9733 ffffffdc 00000000 023f94d5     3.?...........?.
 23ff7f8:	023f94f3 023f975d 023fd22d 30344536     ..?.].?.-.?.6E40
 23ff808:	31303030 4135422d 33462d33 452d3339     0001-B5A3-F393-E
 23ff818:	2d394130 45303545 43443432 45394143     0A9-E50E24DCCA9E
 23ff828:	34453600 30303030 35422d33 462d3341     .6E400003-B5A3-F
 23ff838:	2d333933 39413045 3035452d 44343245     393-E0A9-E50E24D
 23ff848:	39414343 78740045 34453600 30303030     CCA9E.tx.6E40000
 23ff858:	35422d32 462d3341 2d333933 39413045     2-B5A3-F393-E0A9
 23ff868:	3035452d 44343245 39414343 78720045     -E50E24DCCA9E.rx
 23ff878:	00000000                                ....

023ff87c <_ZTVN5spark10LogHandlerE>:
	...
 23ff88c:	023f9495 023f9731                       ..?.1.?.

023ff894 <_ZTV14BleLoggingBase>:
	...
 23ff89c:	023f9769 023f97ad 023fcd75 023fcf1d     i.?...?.u.?...?.
 23ff8ac:	023f9733 ffffffdc 00000000 023f97a5     3.?...........?.
 23ff8bc:	023f97c1 023f975d 023fd22d              ..?.].?.-.?.

023ff8c8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
 23ff8d0:	65737341 6f697472 6961466e 6572756c     AssertionFailure
 23ff8e0:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
 23ff8f0:	74530065 20747261 63736964 7265766f     e.Start discover
 23ff900:	20676e69 76726573 73656369 ffff002e     ing services....
 23ff910:	ffffffff 73734100 69747265 61466e6f     .....AssertionFa
 23ff920:	72756c69 61682065 6c625f6c 74735f65     ilure hal_ble_st
 23ff930:	5f6b6361 74696e69 6c756e28 7274706c     ack_init(nullptr
 23ff940:	3d3d2029 53595320 5f4d4554 4f525245     ) == SYSTEM_ERRO
 23ff950:	4f4e5f52 5000454e 20726565 69766564     R_NONE.Peer devi
 23ff960:	69206563 696d2073 6e697373 46002167     ce is missing!.F
 23ff970:	656c6961 6f742064 70706120 20646e65     ailed to append 
 23ff980:	72656570 6e654320 6c617274 76656420     peer Central dev
 23ff990:	2e656369 6e6f4300 7463656e 44006465     ice..Connected.D
 23ff9a0:	6f637369 63656e6e 00646574 6c707544     isconnected.Dupl
 23ff9b0:	74616369 63206465 61726168 72657463     icated character
 23ff9c0:	69747369 61632063 746f6e6e 20656220     istic cannot be 
 23ff9d0:	65646461 46002e64 656c6961 6f742064     added..Failed to
 23ff9e0:	70706120 20646e65 61636f6c 6863206c      append local ch
 23ff9f0:	63617261 69726574 63697473 0000002e     aracteristic....

023ffa00 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffa08:	023fa6e9 023fa74d 023fa833 023fa777     ..?.M.?.3.?.w.?.
 23ffa18:	023fa6ed                                ..?.

023ffa1c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffa24:	023fa6e5 023fa75b 023fa6e7 023fa77d     ..?.[.?...?.}.?.
 23ffa34:	023fa70d                                ..?.

023ffa38 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffa40:	023fa6e3 023fa769 023fb109 023fa783     ..?.i.?...?...?.
 23ffa50:	023fa72d                                -.?.

023ffa54 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
 23ffa54:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

023ffa64 <_ZN8particle7BleUuid9BASE_UUIDE>:
 23ffa64:	5f9b34fb 80000080 00001000 00000000     .4._............

023ffa74 <_ZTVN5spark13EthernetClassE>:
	...
 23ffa7c:	023fbc2b 023fbc21 023fbc17 023fbc0d     +.?.!.?...?...?.
 23ffa8c:	023fbc01 023fbbf5 023fd109 023fd111     ..?...?...?...?.
 23ffa9c:	023fbbe9 023fbbe1 023fbbd7 023fbbcd     ..?...?...?...?.
 23ffaac:	023fd141                                A.?.

023ffab0 <_ZTV7TwoWire>:
	...
 23ffab8:	023fbc49 023fbc93 023fbc6b 023fbc4b     I.?...?.k.?.K.?.
 23ffac8:	023fbc73 023fbc7b 023fbc83 023fbc8b     s.?.{.?...?...?.

023ffad8 <_ZTV9IPAddress>:
	...
 23ffae0:	023fbced 023fbcdd 023fbcdf 25006425     ..?...?...?.%d.%
 23ffaf0:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 23ffb00:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffb10:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffb20:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffb30:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffb40:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffb50:	6d000a0d 006e6c00 74006e66 646f6300     ...m.ln.fn.t.cod
 23ffb60:	65640065 6c696174 00000000              e.detail....

023ffb6c <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb74:	023fc199 023fc1bf 023fc17d 023fbdfb     ..?...?.}.?...?.

023ffb84 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb8c:	023fc64d 023fc665 023fcd75 023fcf1d     M.?.e.?.u.?...?.

023ffb9c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffba4:	023fc679 023fc68d 023fcf55 023fc185     y.?...?.U.?...?.

023ffbb4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffbbc:	023fc197 023fc1cd 023fccd9 023fc187     ..?...?...?...?.

023ffbcc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbd4:	023fc195 023fc1db 023fc5b5 023fc1fd     ..?...?...?...?.

023ffbe4 <_ZTVN5spark12NetworkClassE>:
	...
 23ffbec:	023fd0c9 023fd0d3 023fd0dd 023fd0e7     ..?...?...?...?.
 23ffbfc:	023fd0f1 023fd0fd 023fd109 023fd111     ..?...?...?...?.
 23ffc0c:	023fd119 023fd125 023fd12d 023fd137     ..?.%.?.-.?.7.?.
 23ffc1c:	023fd141 252d5925 64252d6d 3a482554     A.?.%Y-%m-%dT%H:
 23ffc2c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

023ffc3c <_ZTV11USARTSerial>:
	...
 23ffc44:	023fd4e9 023fd555 023fd52d 023fd22d     ..?.U.?.-.?.-.?.
 23ffc54:	023fd4fd 023fd519 023fd50b 023fd527     ..?...?...?.'.?.
 23ffc64:	023fd4eb 023fd4ef                       ..?...?.

023ffc6c <_ZTV9USBSerial>:
	...
 23ffc74:	023fd5ad 023fd615 023fd5eb 023fd22d     ..?...?...?.-.?.
 23ffc84:	023fd5dd 023fd5af 023fd5bf 023fd60f     ..?...?...?...?.
 23ffc94:	023fd5cf 023fd5a7                       ..?...?.

023ffc9c <_ZTVN5spark9WiFiClassE>:
	...
 23ffca4:	023fd713 023fd709 023fd6ff 023fd6b5     ..?...?...?...?.
 23ffcb4:	023fd6f3 023fd6e7 023fd109 023fd111     ..?...?...?...?.
 23ffcc4:	023fd6db 023fd6d3 023fd6c9 023fd6bf     ..?...?...?...?.
 23ffcd4:	023fd141                                A.?.

023ffcd8 <_ZSt7nothrow>:
	...

023ffcd9 <_ZTSSt19_Sp_make_shared_tag>:
 23ffcd9:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffce9:	5f646572 00676174                        red_tag....

023ffcf4 <_ZTISt19_Sp_make_shared_tag>:
 23ffcf4:	023ffd34 023ffcd9                       4.?...?.

023ffcfc <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffcfc:	023ffd94 023ffd08 023ffdb8              ..?...?...?.

023ffd08 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd08:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd18:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd28:	00000045                                E...

023ffd2c <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd2c:	00000000 023ffcfc 023fdbad 023fdbc1     ......?...?...?.
 23ffd3c:	023fdd55 023fdd55 023fdc2b 023fdb6d     U.?.U.?.+.?.m.?.
 23ffd4c:	023fdc13 023fdbd5 023fdb9f              ..?...?...?.

023ffd58 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffd58:	023ffd94 023ffd64 023ffcfc              ..?.d.?...?.

023ffd64 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffd64:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffd74:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffd84:	456f666e 00000000                       nfoE....

023ffd8c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffd8c:	00000000 023ffd58 023fdc55 023fdc69     ....X.?.U.?.i.?.
 23ffd9c:	023fdd55 023fdd55 023fdc2b 023fdb6d     U.?.U.?.+.?.m.?.
 23ffdac:	023fdd29 023fdcb5 023fdc7d              ).?...?.}.?.

023ffdb8 <_ZTISt9type_info>:
 23ffdb8:	023ffd34 023ffdc0                       4.?...?.

023ffdc0 <_ZTSSt9type_info>:
 23ffdc0:	74397453 5f657079 6f666e69 00000000     St9type_info....

023ffdd0 <CSWTCH.8>:
 23ffdd0:	54442d18 bfe921fb 7f3321d2 4002d97c     .-DT.!...!3.|..@
 23ffde0:	7f3321d2 c002d97c                       .!3.|...

023ffde8 <CSWTCH.9>:
 23ffde8:	00000000 80000000 54442d18 400921fb     .........-DT.!.@
 23ffdf8:	54442d18 c00921fb 00000000 00000000     .-DT.!..........

023ffe08 <atanhi>:
 23ffe08:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 23ffe18:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

023ffe28 <atanlo>:
 23ffe28:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 23ffe38:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

023ffe48 <TWO52>:
 23ffe48:	00000000 43300000 00000000 c3300000     ......0C......0.
 23ffe58:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
 23ffe68:	64656563 2f006465 2f706d74 6b6e656a     ceeded./tmp/jenk
 23ffe78:	2d736e69 2d434347 702d3031 6c657069     ins-GCC-10-pipel
 23ffe88:	2d656e69 325f3834 31303230 5f343231     ine-48_20201124_
 23ffe98:	36303631 36303831 732f3933 6e2f6372     1606180639/src/n
 23ffea8:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
 23ffeb8:	74732f63 62696c64 6e61722f 00632e64     c/stdlib/rand.c.

023ffec8 <_ctype_>:
 23ffec8:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffed8:	20202020 20202020 20202020 20202020                     
 23ffee8:	10108820 10101010 10101010 10101010      ...............
 23ffef8:	04040410 04040404 10040404 10101010     ................
 23fff08:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff18:	01010101 01010101 01010101 10101010     ................
 23fff28:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff38:	02020202 02020202 02020202 10101010     ................
 23fff48:	00000020 00000000 00000000 00000000      ...............
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023f96c9 	.word	0x023f96c9
 23fffd0:	023fbbbd 	.word	0x023fbbbd
 23fffd4:	023fbc35 	.word	0x023fbc35
 23fffd8:	023fcd65 	.word	0x023fcd65
 23fffdc:	023fd219 	.word	0x023fd219
 23fffe0:	023fd2c1 	.word	0x023fd2c1
 23fffe4:	023fd4b1 	.word	0x023fd4b1
 23fffe8:	023fd4d5 	.word	0x023fd4d5
 23fffec:	023fd71d 	.word	0x023fd71d
