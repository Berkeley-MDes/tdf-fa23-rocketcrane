
/Users/lingxiu/Documents/0-documents/2023-2024-MDes/TDF/tdf-fa23-rocketcrane/ble-logging/target/4.2.0/argon/ble-logging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000047b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b87d0  000b87d0  000087d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b87f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003d5b0  000b87f8  0001d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000011cc  2003d624  2003d624  0002d624  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b886c  000b886c  0002886c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8894  000b8894  00028894  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010433e  00000000  00000000  00028898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000f510  00000000  00000000  0012cbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00036d07  00000000  00000000  0013c0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029c0  00000000  00000000  00172ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009d28  00000000  00000000  001757ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000324c5  00000000  00000000  0017f4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033400  00000000  00000000  001b199a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00130992  00000000  00000000  001e4d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007990  00000000  00000000  0031572c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fe27 	bl	b7c80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fe49 	bl	b7cd0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003d5b0 	.word	0x2003d5b0
   b4048:	000b87f8 	.word	0x000b87f8
   b404c:	2003d624 	.word	0x2003d624
   b4050:	2003d624 	.word	0x2003d624
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fc65 	bl	b792c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b87a0 	.word	0x000b87a0
   b407c:	000b87c4 	.word	0x000b87c4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba26 	b.w	b44d0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa2f 	bl	b44e8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bc05 	b.w	b789c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bcbd 	b.w	b4a10 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bcbb 	b.w	b4a10 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bcc1 	b.w	b4a20 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 fbfe 	bl	b48a8 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4749 	.word	0x000b4749
   b40b4:	000b8000 	.word	0x000b8000

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3

000b40d2 <_ZN14BleLoggingBase5writeEh>:
    }

}


size_t BleLoggingBase::write(uint8_t c) {
   b40d2:	b530      	push	{r4, r5, lr}
	// Make sure you don't Log.info, etc. anywhere in this function, otherwise you'll recursively log

	if ((writeIndex - readIndex) >= bufSize) {
   b40d4:	e9d0 230d 	ldrd	r2, r3, [r0, #52]	; 0x34
   b40d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
   b40da:	1a9d      	subs	r5, r3, r2
   b40dc:	42a5      	cmp	r5, r4
		// Buffer is full, discard oldest byte
		readIndex++;
   b40de:	bf28      	it	cs
   b40e0:	3201      	addcs	r2, #1
	}

	buf[writeIndex++ % bufSize] = c;
   b40e2:	f103 0501 	add.w	r5, r3, #1
		readIndex++;
   b40e6:	bf28      	it	cs
   b40e8:	6342      	strcs	r2, [r0, #52]	; 0x34
	buf[writeIndex++ % bufSize] = c;
   b40ea:	6385      	str	r5, [r0, #56]	; 0x38
   b40ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b40ee:	fbb3 f0f4 	udiv	r0, r3, r4
   b40f2:	fb04 3310 	mls	r3, r4, r0, r3

	return 1;
}
   b40f6:	2001      	movs	r0, #1
	buf[writeIndex++ % bufSize] = c;
   b40f8:	54d1      	strb	r1, [r2, r3]
}
   b40fa:	bd30      	pop	{r4, r5, pc}

000b40fc <_ZThn36_N14BleLoggingBase5writeEh>:
	void loop();

	/**
	 * @brief Virtual override for the StreamLogHandler to write data to the log
	 */
    virtual size_t write(uint8_t);
   b40fc:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b4100:	f7ff bfe7 	b.w	b40d2 <_ZN14BleLoggingBase5writeEh>

000b4104 <_ZN14BleLoggingBase20onDataReceivedStaticEPKhjRKN8particle13BlePeerDeviceEPv>:
// [static]
void BleLoggingBase::onDataReceivedStatic(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
	BleLoggingBase *This = (BleLoggingBase *) context;

	This->onDataReceived(data, len, peer);
   b4104:	4770      	bx	lr
	...

000b4108 <_ZN14BleLoggingBaseD1Ev>:
BleLoggingBase::~BleLoggingBase() {
   b4108:	4b0b      	ldr	r3, [pc, #44]	; (b4138 <_ZN14BleLoggingBaseD1Ev+0x30>)
   b410a:	f103 0208 	add.w	r2, r3, #8
   b410e:	3324      	adds	r3, #36	; 0x24
   b4110:	b510      	push	{r4, lr}
   b4112:	4604      	mov	r4, r0
   b4114:	6002      	str	r2, [r0, #0]
   b4116:	6243      	str	r3, [r0, #36]	; 0x24
   b4118:	3044      	adds	r0, #68	; 0x44
   b411a:	f001 f918 	bl	b534e <_ZN8particle17BleCharacteristicD1Ev>
   b411e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4122:	f001 f914 	bl	b534e <_ZN8particle17BleCharacteristicD1Ev>
    virtual ~LogHandler() = default;
   b4126:	4620      	mov	r0, r4
   b4128:	4b04      	ldr	r3, [pc, #16]	; (b413c <_ZN14BleLoggingBaseD1Ev+0x34>)
   b412a:	f840 3b04 	str.w	r3, [r0], #4
   b412e:	f002 fb21 	bl	b6774 <_ZN5spark6detail9LogFilterD1Ev>
}
   b4132:	4620      	mov	r0, r4
   b4134:	bd10      	pop	{r4, pc}
   b4136:	bf00      	nop
   b4138:	000b80a4 	.word	0x000b80a4
   b413c:	000b8094 	.word	0x000b8094

000b4140 <_ZThn36_N14BleLoggingBaseD1Ev>:
	virtual ~BleLoggingBase();
   b4140:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b4144:	f7ff bfe0 	b.w	b4108 <_ZN14BleLoggingBaseD1Ev>

000b4148 <_ZN14BleLoggingBaseD0Ev>:
BleLoggingBase::~BleLoggingBase() {
   b4148:	b510      	push	{r4, lr}
   b414a:	4604      	mov	r4, r0
}
   b414c:	f7ff ffdc 	bl	b4108 <_ZN14BleLoggingBaseD1Ev>
   b4150:	4620      	mov	r0, r4
   b4152:	214c      	movs	r1, #76	; 0x4c
   b4154:	f7ff ffa1 	bl	b409a <_ZdlPvj>
   b4158:	4620      	mov	r0, r4
   b415a:	bd10      	pop	{r4, pc}

000b415c <_ZThn36_N14BleLoggingBaseD0Ev>:
   b415c:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b4160:	f7ff bff2 	b.w	b4148 <_ZN14BleLoggingBaseD0Ev>

000b4164 <_ZN14BleLoggingBase5setupEv>:
void BleLoggingBase::setup() {
   b4164:	b510      	push	{r4, lr}
   b4166:	b08c      	sub	sp, #48	; 0x30
   b4168:	4604      	mov	r4, r0
    BLE.addCharacteristic(txCharacteristic);
   b416a:	f000 ffe7 	bl	b513c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b416e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   b4172:	4601      	mov	r1, r0
   b4174:	a807      	add	r0, sp, #28
   b4176:	f001 fd2d 	bl	b5bd4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b417a:	a807      	add	r0, sp, #28
   b417c:	f001 f8e7 	bl	b534e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b4180:	f000 ffdc 	bl	b513c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4184:	f104 0244 	add.w	r2, r4, #68	; 0x44
   b4188:	4601      	mov	r1, r0
   b418a:	a807      	add	r0, sp, #28
   b418c:	f001 fd22 	bl	b5bd4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4190:	a807      	add	r0, sp, #28
   b4192:	f001 f8dc 	bl	b534e <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData data;
   b4196:	a804      	add	r0, sp, #16
   b4198:	f001 fa0f 	bl	b55ba <_ZN8particle18BleAdvertisingDataC1Ev>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b419c:	4915      	ldr	r1, [pc, #84]	; (b41f4 <_ZN14BleLoggingBase5setupEv+0x90>)
   b419e:	a807      	add	r0, sp, #28
   b41a0:	f000 fe7e 	bl	b4ea0 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41a4:	a807      	add	r0, sp, #28
   b41a6:	f000 fddd 	bl	b4d64 <_ZNK8particle7BleUuid4typeEv>
   b41aa:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b41ac:	a807      	add	r0, sp, #28
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41ae:	b9b4      	cbnz	r4, b41de <_ZN14BleLoggingBase5setupEv+0x7a>
            uint16_t uuid16 = tempUUID.shorted();
   b41b0:	f000 fdf4 	bl	b4d9c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41b4:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b41b6:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41ba:	2302      	movs	r3, #2
   b41bc:	f10d 020e 	add.w	r2, sp, #14
   b41c0:	2103      	movs	r1, #3
   b41c2:	a804      	add	r0, sp, #16
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b41c4:	f001 f9ee 	bl	b55a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b41c8:	f000 ffb8 	bl	b513c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41cc:	2200      	movs	r2, #0
   b41ce:	a904      	add	r1, sp, #16
   b41d0:	f001 f861 	bl	b5296 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b41d4:	9804      	ldr	r0, [sp, #16]
   b41d6:	f000 fc23 	bl	b4a20 <free>
}
   b41da:	b00c      	add	sp, #48	; 0x30
   b41dc:	bd10      	pop	{r4, pc}
   b41de:	f000 fddf 	bl	b4da0 <_ZNK8particle7BleUuid8rawBytesEv>
   b41e2:	2300      	movs	r3, #0
   b41e4:	9300      	str	r3, [sp, #0]
   b41e6:	2310      	movs	r3, #16
   b41e8:	4602      	mov	r2, r0
   b41ea:	2107      	movs	r1, #7
   b41ec:	eb0d 0003 	add.w	r0, sp, r3
   b41f0:	e7e8      	b.n	b41c4 <_ZN14BleLoggingBase5setupEv+0x60>
   b41f2:	bf00      	nop
   b41f4:	000b8015 	.word	0x000b8015

000b41f8 <_ZN14BleLoggingBase4loopEv>:
void BleLoggingBase::loop() {
   b41f8:	b538      	push	{r3, r4, r5, lr}
   b41fa:	4604      	mov	r4, r0
    if (BLE.connected()) {
   b41fc:	f000 ff9e 	bl	b513c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4200:	f000 fff6 	bl	b51f0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4204:	b1b0      	cbz	r0, b4234 <_ZN14BleLoggingBase4loopEv+0x3c>
    	size_t numToSend = writeIndex - readIndex;
   b4206:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
    	if (numToSend > 0) {
   b420a:	1a55      	subs	r5, r2, r1
   b420c:	d012      	beq.n	b4234 <_ZN14BleLoggingBase4loopEv+0x3c>
            txCharacteristic.setValue(&buf[readIndex % bufSize], numToSend);
   b420e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b4210:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   b4212:	fbb1 f2f3 	udiv	r2, r1, r3
   b4216:	2d14      	cmp	r5, #20
   b4218:	bf28      	it	cs
   b421a:	2514      	movcs	r5, #20
   b421c:	fb03 1112 	mls	r1, r3, r2, r1
   b4220:	4401      	add	r1, r0
   b4222:	462a      	mov	r2, r5
   b4224:	2300      	movs	r3, #0
   b4226:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b422a:	f000 fe77 	bl	b4f1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            readIndex += numToSend;
   b422e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4230:	442a      	add	r2, r5
   b4232:	6362      	str	r2, [r4, #52]	; 0x34
}
   b4234:	bd38      	pop	{r3, r4, r5, pc}

000b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4236:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4238:	e9d0 5300 	ldrd	r5, r3, [r0]
   b423c:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b423e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4240:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4244:	42ae      	cmp	r6, r5
   b4246:	d004      	beq.n	b4252 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4248:	4628      	mov	r0, r5
   b424a:	f003 f913 	bl	b7474 <_ZN6StringD1Ev>
   b424e:	3514      	adds	r5, #20
   b4250:	e7f8      	b.n	b4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4252:	6820      	ldr	r0, [r4, #0]
   b4254:	f000 fbe4 	bl	b4a20 <free>
    AllocatorT::free(data_);
}
   b4258:	4620      	mov	r0, r4
   b425a:	bd70      	pop	{r4, r5, r6, pc}

000b425c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b425c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b425e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4260:	4604      	mov	r4, r0
   b4262:	460d      	mov	r5, r1
   b4264:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4266:	d916      	bls.n	b4296 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4268:	4290      	cmp	r0, r2
   b426a:	d215      	bcs.n	b4298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b426c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4270:	1a75      	subs	r5, r6, r1
   b4272:	f1a1 0714 	sub.w	r7, r1, #20
   b4276:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4278:	42b7      	cmp	r7, r6
   b427a:	d01c      	beq.n	b42b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b427c:	b12c      	cbz	r4, b428a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b427e:	4631      	mov	r1, r6
   b4280:	4620      	mov	r0, r4
   b4282:	f003 f974 	bl	b756e <_ZN6StringC1EOS_>
   b4286:	7c33      	ldrb	r3, [r6, #16]
   b4288:	7423      	strb	r3, [r4, #16]
   b428a:	4630      	mov	r0, r6
   b428c:	f003 f8f2 	bl	b7474 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4290:	3e14      	subs	r6, #20
   b4292:	3c14      	subs	r4, #20
   b4294:	e7f0      	b.n	b4278 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4296:	d00e      	beq.n	b42b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4298:	42b5      	cmp	r5, r6
   b429a:	d00c      	beq.n	b42b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b429c:	b12c      	cbz	r4, b42aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b429e:	4629      	mov	r1, r5
   b42a0:	4620      	mov	r0, r4
   b42a2:	f003 f964 	bl	b756e <_ZN6StringC1EOS_>
   b42a6:	7c2b      	ldrb	r3, [r5, #16]
   b42a8:	7423      	strb	r3, [r4, #16]
   b42aa:	4628      	mov	r0, r5
   b42ac:	f003 f8e2 	bl	b7474 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42b0:	3514      	adds	r5, #20
   b42b2:	3414      	adds	r4, #20
   b42b4:	e7f0      	b.n	b4298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42bc:	2300      	movs	r3, #0
   b42be:	e9c0 3300 	strd	r3, r3, [r0]
   b42c2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42c4:	684f      	ldr	r7, [r1, #4]
   b42c6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42c8:	4604      	mov	r4, r0
   b42ca:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42cc:	dd23      	ble.n	b4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42ce:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b42d2:	fb08 f007 	mul.w	r0, r8, r7
   b42d6:	f000 fb9b 	bl	b4a10 <malloc>
            if (!d) {
   b42da:	4605      	mov	r5, r0
   b42dc:	b1d8      	cbz	r0, b4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b42de:	e9d4 1200 	ldrd	r1, r2, [r4]
   b42e2:	fb08 1202 	mla	r2, r8, r2, r1
   b42e6:	f7ff ffb9 	bl	b425c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b42ea:	6820      	ldr	r0, [r4, #0]
   b42ec:	f000 fb98 	bl	b4a20 <free>
        data_ = d;
   b42f0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b42f2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b42f4:	e9d6 7300 	ldrd	r7, r3, [r6]
   b42f8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b42fc:	45b8      	cmp	r8, r7
   b42fe:	d008      	beq.n	b4312 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4300:	4639      	mov	r1, r7
   b4302:	4628      	mov	r0, r5
   b4304:	f003 f94d 	bl	b75a2 <_ZN6StringC1ERKS_>
   b4308:	7c3b      	ldrb	r3, [r7, #16]
   b430a:	742b      	strb	r3, [r5, #16]
   b430c:	3714      	adds	r7, #20
   b430e:	3514      	adds	r5, #20
   b4310:	e7f4      	b.n	b42fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4312:	6873      	ldr	r3, [r6, #4]
   b4314:	6063      	str	r3, [r4, #4]
}
   b4316:	4620      	mov	r0, r4
   b4318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b431c <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>:
BleLoggingBase::BleLoggingBase(uint8_t *buf, size_t bufSize, LogLevel level, LogCategoryFilters filters) :
   b431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4320:	b092      	sub	sp, #72	; 0x48
   b4322:	4604      	mov	r4, r0
   b4324:	460f      	mov	r7, r1
	rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceivedStatic, this) {
   b4326:	a805      	add	r0, sp, #20
   b4328:	9918      	ldr	r1, [sp, #96]	; 0x60
BleLoggingBase::BleLoggingBase(uint8_t *buf, size_t bufSize, LogLevel level, LogCategoryFilters filters) :
   b432a:	4616      	mov	r6, r2
   b432c:	4698      	mov	r8, r3
        filter_(level, filters) {
   b432e:	4625      	mov	r5, r4
	rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceivedStatic, this) {
   b4330:	f7ff ffc2 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b4334:	a905      	add	r1, sp, #20
   b4336:	a808      	add	r0, sp, #32
   b4338:	f7ff ffbe 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b433c:	4b2e      	ldr	r3, [pc, #184]	; (b43f8 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xdc>)
   b433e:	f845 3b04 	str.w	r3, [r5], #4
   b4342:	a908      	add	r1, sp, #32
   b4344:	a80d      	add	r0, sp, #52	; 0x34
   b4346:	f7ff ffb7 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b434a:	4641      	mov	r1, r8
   b434c:	aa0d      	add	r2, sp, #52	; 0x34
   b434e:	4628      	mov	r0, r5
   b4350:	f002 fc58 	bl	b6c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4354:	a80d      	add	r0, sp, #52	; 0x34
   b4356:	f7ff ff6e 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b435a:	a808      	add	r0, sp, #32
   b435c:	f7ff ff6b 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4360:	4623      	mov	r3, r4
   b4362:	4a26      	ldr	r2, [pc, #152]	; (b43fc <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xe0>)
   b4364:	f843 2b24 	str.w	r2, [r3], #36
   b4368:	a805      	add	r0, sp, #20
   b436a:	6223      	str	r3, [r4, #32]
   b436c:	f7ff ff63 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4370:	4b23      	ldr	r3, [pc, #140]	; (b4400 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xe4>)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b4372:	4924      	ldr	r1, [pc, #144]	; (b4404 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xe8>)
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b4374:	2500      	movs	r5, #0
   b4376:	f103 0208 	add.w	r2, r3, #8
   b437a:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
   b437e:	3324      	adds	r3, #36	; 0x24
        BleUuid sUuid(svcUuid);
   b4380:	4e21      	ldr	r6, [pc, #132]	; (b4408 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xec>)
   b4382:	6022      	str	r2, [r4, #0]
   b4384:	6263      	str	r3, [r4, #36]	; 0x24
   b4386:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34

      template<typename _Tp>
	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };

    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   b438a:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
   b438e:	62a5      	str	r5, [r4, #40]	; 0x28
        BleUuid cUuid(charUuid);
   b4390:	a808      	add	r0, sp, #32
   b4392:	f000 fd85 	bl	b4ea0 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b4396:	4631      	mov	r1, r6
   b4398:	a80d      	add	r0, sp, #52	; 0x34
   b439a:	f000 fd81 	bl	b4ea0 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b439e:	ab0d      	add	r3, sp, #52	; 0x34
   b43a0:	f04f 0210 	mov.w	r2, #16
   b43a4:	9300      	str	r3, [sp, #0]
   b43a6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b43aa:	ab08      	add	r3, sp, #32
   b43ac:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b43b0:	4916      	ldr	r1, [pc, #88]	; (b440c <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xf0>)
   b43b2:	f001 fae5 	bl	b5980 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b43b6:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
        BleUuid cUuid(charUuid);
   b43ba:	4915      	ldr	r1, [pc, #84]	; (b4410 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xf4>)
   b43bc:	a808      	add	r0, sp, #32
   b43be:	f000 fd6f 	bl	b4ea0 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b43c2:	4631      	mov	r1, r6
   b43c4:	a80d      	add	r0, sp, #52	; 0x34
   b43c6:	f000 fd6b 	bl	b4ea0 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b43ca:	4b12      	ldr	r3, [pc, #72]	; (b4414 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xf8>)
   b43cc:	9301      	str	r3, [sp, #4]
   b43ce:	ab0d      	add	r3, sp, #52	; 0x34
   b43d0:	f04f 0204 	mov.w	r2, #4
   b43d4:	4910      	ldr	r1, [pc, #64]	; (b4418 <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE+0xfc>)
   b43d6:	9300      	str	r3, [sp, #0]
   b43d8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b43dc:	ab08      	add	r3, sp, #32
   b43de:	9402      	str	r4, [sp, #8]
   b43e0:	f001 face 	bl	b5980 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
	LogManager::instance()->addHandler(this);
   b43e4:	f002 f8f0 	bl	b65c8 <_ZN5spark10LogManager8instanceEv>
   b43e8:	4621      	mov	r1, r4
   b43ea:	f002 fae1 	bl	b69b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
}
   b43ee:	4620      	mov	r0, r4
   b43f0:	b012      	add	sp, #72	; 0x48
   b43f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b43f6:	bf00      	nop
   b43f8:	000b8094 	.word	0x000b8094
   b43fc:	000b83ec 	.word	0x000b83ec
   b4400:	000b80a4 	.word	0x000b80a4
   b4404:	000b803a 	.word	0x000b803a
   b4408:	000b8015 	.word	0x000b8015
   b440c:	000b805f 	.word	0x000b805f
   b4410:	000b8062 	.word	0x000b8062
   b4414:	000b4105 	.word	0x000b4105
   b4418:	000b8087 	.word	0x000b8087

000b441c <_ZN10BleLoggingILj4096EED1Ev>:
    BleCharacteristic txCharacteristic;
    BleCharacteristic rxCharacteristic;
};

template <size_t BUFFER_SIZE>
class BleLogging : public BleLoggingBase {
   b441c:	b510      	push	{r4, lr}
   b441e:	4b04      	ldr	r3, [pc, #16]	; (b4430 <_ZN10BleLoggingILj4096EED1Ev+0x14>)
   b4420:	6003      	str	r3, [r0, #0]
   b4422:	331c      	adds	r3, #28
   b4424:	4604      	mov	r4, r0
   b4426:	6243      	str	r3, [r0, #36]	; 0x24
   b4428:	f7ff fe6e 	bl	b4108 <_ZN14BleLoggingBaseD1Ev>
   b442c:	4620      	mov	r0, r4
   b442e:	bd10      	pop	{r4, pc}
   b4430:	000b8104 	.word	0x000b8104

000b4434 <_ZThn36_N10BleLoggingILj4096EED1Ev>:
   b4434:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b4438:	e7f0      	b.n	b441c <_ZN10BleLoggingILj4096EED1Ev>
   b443a:	bf00      	nop

000b443c <_ZN10BleLoggingILj4096EED0Ev>:
   b443c:	b510      	push	{r4, lr}
   b443e:	4604      	mov	r4, r0
   b4440:	f7ff ffec 	bl	b441c <_ZN10BleLoggingILj4096EED1Ev>
   b4444:	4620      	mov	r0, r4
   b4446:	f241 014c 	movw	r1, #4172	; 0x104c
   b444a:	f7ff fe26 	bl	b409a <_ZdlPvj>
   b444e:	4620      	mov	r0, r4
   b4450:	bd10      	pop	{r4, pc}

000b4452 <_ZThn36_N10BleLoggingILj4096EED0Ev>:
   b4452:	f1a0 0024 	sub.w	r0, r0, #36	; 0x24
   b4456:	e7f1      	b.n	b443c <_ZN10BleLoggingILj4096EED0Ev>

000b4458 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4458:	4b0a      	ldr	r3, [pc, #40]	; (b4484 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b445a:	b510      	push	{r4, lr}
   b445c:	4604      	mov	r4, r0
   b445e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4460:	f002 f8b2 	bl	b65c8 <_ZN5spark10LogManager8instanceEv>
   b4464:	4621      	mov	r1, r4
   b4466:	f002 faea 	bl	b6a3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b446a:	f003 f991 	bl	b7790 <_Z16_fetch_usbserialv>
   b446e:	f003 f983 	bl	b7778 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4472:	4620      	mov	r0, r4
   b4474:	4b04      	ldr	r3, [pc, #16]	; (b4488 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4476:	f840 3b04 	str.w	r3, [r0], #4
   b447a:	f002 f97b 	bl	b6774 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b447e:	4620      	mov	r0, r4
   b4480:	bd10      	pop	{r4, pc}
   b4482:	bf00      	nop
   b4484:	000b80ec 	.word	0x000b80ec
   b4488:	000b8094 	.word	0x000b8094

000b448c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b448c:	b510      	push	{r4, lr}
   b448e:	4604      	mov	r4, r0
    }
   b4490:	f7ff ffe2 	bl	b4458 <_ZN5spark16SerialLogHandlerD1Ev>
   b4494:	4620      	mov	r0, r4
   b4496:	2124      	movs	r1, #36	; 0x24
   b4498:	f7ff fdff 	bl	b409a <_ZdlPvj>
   b449c:	4620      	mov	r0, r4
   b449e:	bd10      	pop	{r4, pc}

000b44a0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b44a0:	b40e      	push	{r1, r2, r3}
   b44a2:	b500      	push	{lr}
   b44a4:	b08c      	sub	sp, #48	; 0x30
   b44a6:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b44a8:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b44ac:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b44b0:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b44b2:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b44b6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b44b8:	6801      	ldr	r1, [r0, #0]
   b44ba:	aa04      	add	r2, sp, #16
   b44bc:	201e      	movs	r0, #30
    attr.flags = 0;
   b44be:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b44c2:	f000 fa01 	bl	b48c8 <log_message_v>
}
   b44c6:	b00c      	add	sp, #48	; 0x30
   b44c8:	f85d eb04 	ldr.w	lr, [sp], #4
   b44cc:	b003      	add	sp, #12
   b44ce:	4770      	bx	lr

000b44d0 <setup>:
const unsigned long LOG_INTERVAL = 1000; // milliseconds
unsigned long lastLog = 0;
size_t counter = 0;


void setup() {
   b44d0:	b508      	push	{r3, lr}
	BLE.on();
   b44d2:	f000 fe33 	bl	b513c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44d6:	f000 fe7b 	bl	b51d0 <_ZNK8particle14BleLocalDevice2onEv>

	// You must add this to your setup() to initialize the library
	bleLogHandler.setup();
}
   b44da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bleLogHandler.setup();
   b44de:	4801      	ldr	r0, [pc, #4]	; (b44e4 <setup+0x14>)
   b44e0:	f7ff be40 	b.w	b4164 <_ZN14BleLoggingBase5setupEv>
   b44e4:	2003d624 	.word	0x2003d624

000b44e8 <loop>:

void loop() {
   b44e8:	b510      	push	{r4, lr}
	// You must add this to your loop to process BLE requests and data
	bleLogHandler.loop();
   b44ea:	480b      	ldr	r0, [pc, #44]	; (b4518 <loop+0x30>)


	if (millis() - lastLog >= LOG_INTERVAL) {
   b44ec:	4c0b      	ldr	r4, [pc, #44]	; (b451c <loop+0x34>)
	bleLogHandler.loop();
   b44ee:	f7ff fe83 	bl	b41f8 <_ZN14BleLoggingBase4loopEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b44f2:	f000 f931 	bl	b4758 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastLog >= LOG_INTERVAL) {
   b44f6:	6823      	ldr	r3, [r4, #0]
   b44f8:	1ac0      	subs	r0, r0, r3
   b44fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b44fe:	d30a      	bcc.n	b4516 <loop+0x2e>
   b4500:	f000 f92a 	bl	b4758 <HAL_Timer_Get_Milli_Seconds>
		lastLog = millis();

		// This is just so the demo prints a message every second so the log updates frequently
		Log.info("counter=%u", counter++);
   b4504:	4b06      	ldr	r3, [pc, #24]	; (b4520 <loop+0x38>)
		lastLog = millis();
   b4506:	6020      	str	r0, [r4, #0]
		Log.info("counter=%u", counter++);
   b4508:	681a      	ldr	r2, [r3, #0]
   b450a:	4806      	ldr	r0, [pc, #24]	; (b4524 <loop+0x3c>)
   b450c:	1c51      	adds	r1, r2, #1
   b450e:	6019      	str	r1, [r3, #0]
   b4510:	4905      	ldr	r1, [pc, #20]	; (b4528 <loop+0x40>)
   b4512:	f7ff ffc5 	bl	b44a0 <_ZNK5spark6Logger4infoEPKcz>
	}
   b4516:	bd10      	pop	{r4, pc}
   b4518:	2003d624 	.word	0x2003d624
   b451c:	2003e674 	.word	0x2003e674
   b4520:	2003e670 	.word	0x2003e670
   b4524:	2003e6c0 	.word	0x2003e6c0
   b4528:	000b80d8 	.word	0x000b80d8

000b452c <_GLOBAL__sub_I_bleLogHandler>:
   b452c:	b5f0      	push	{r4, r5, r6, r7, lr}
public:
	explicit BleLogging(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) : BleLoggingBase(staticBuf, BUFFER_SIZE, level, filters) {};
   b452e:	4e2f      	ldr	r6, [pc, #188]	; (b45ec <_GLOBAL__sub_I_bleLogHandler+0xc0>)
   b4530:	b08f      	sub	sp, #60	; 0x3c
   b4532:	ac0b      	add	r4, sp, #44	; 0x2c
SYSTEM_THREAD(ENABLED);
   b4534:	2100      	movs	r1, #0
   b4536:	2001      	movs	r0, #1
   b4538:	f000 f9e6 	bl	b4908 <system_thread_set_state>
        capacity_(0) {
   b453c:	2500      	movs	r5, #0
   b453e:	a908      	add	r1, sp, #32
   b4540:	f1a6 074c 	sub.w	r7, r6, #76	; 0x4c
   b4544:	4620      	mov	r0, r4
   b4546:	e9cd 5508 	strd	r5, r5, [sp, #32]
   b454a:	950a      	str	r5, [sp, #40]	; 0x28
   b454c:	f7ff feb4 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b4554:	4631      	mov	r1, r6
   b4556:	2301      	movs	r3, #1
   b4558:	9400      	str	r4, [sp, #0]
   b455a:	4638      	mov	r0, r7
   b455c:	f7ff fede 	bl	b431c <_ZN14BleLoggingBaseC1EPhj8LogLevelN5spark6VectorINS2_17LogCategoryFilterENS2_16DefaultAllocatorEEE>
   b4560:	4620      	mov	r0, r4
   b4562:	f7ff fe68 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4566:	4b22      	ldr	r3, [pc, #136]	; (b45f0 <_GLOBAL__sub_I_bleLogHandler+0xc4>)
   b4568:	f846 3c4c 	str.w	r3, [r6, #-76]
   b456c:	331c      	adds	r3, #28
   b456e:	f846 3c28 	str.w	r3, [r6, #-40]
BleLogging<4096> bleLogHandler(LOG_LEVEL_TRACE);
   b4572:	a808      	add	r0, sp, #32
   b4574:	f7ff fe5f 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4578:	e9cd 5502 	strd	r5, r5, [sp, #8]
   b457c:	9504      	str	r5, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b457e:	f003 f907 	bl	b7790 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4582:	4d1c      	ldr	r5, [pc, #112]	; (b45f4 <_GLOBAL__sub_I_bleLogHandler+0xc8>)
   b4584:	4606      	mov	r6, r0
   b4586:	a902      	add	r1, sp, #8
   b4588:	a805      	add	r0, sp, #20
   b458a:	f7ff fe95 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b458e:	462f      	mov	r7, r5
        stream_(&stream) {
   b4590:	a905      	add	r1, sp, #20
   b4592:	a808      	add	r0, sp, #32
   b4594:	f7ff fe90 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4598:	4b17      	ldr	r3, [pc, #92]	; (b45f8 <_GLOBAL__sub_I_bleLogHandler+0xcc>)
   b459a:	f847 3b04 	str.w	r3, [r7], #4
   b459e:	a908      	add	r1, sp, #32
   b45a0:	4620      	mov	r0, r4
   b45a2:	f7ff fe89 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b45a6:	4622      	mov	r2, r4
   b45a8:	2101      	movs	r1, #1
   b45aa:	4638      	mov	r0, r7
   b45ac:	f002 fb2a 	bl	b6c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b45b0:	4620      	mov	r0, r4
   b45b2:	f7ff fe40 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b45b6:	a808      	add	r0, sp, #32
   b45b8:	f7ff fe3d 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b45bc:	4b0f      	ldr	r3, [pc, #60]	; (b45fc <_GLOBAL__sub_I_bleLogHandler+0xd0>)
   b45be:	602b      	str	r3, [r5, #0]
   b45c0:	622e      	str	r6, [r5, #32]
   b45c2:	a805      	add	r0, sp, #20
   b45c4:	f7ff fe37 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b45c8:	4b0d      	ldr	r3, [pc, #52]	; (b4600 <_GLOBAL__sub_I_bleLogHandler+0xd4>)
   b45ca:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b45cc:	f003 f8e0 	bl	b7790 <_Z16_fetch_usbserialv>
   b45d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45d4:	f003 f8cc 	bl	b7770 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b45d8:	f001 fff6 	bl	b65c8 <_ZN5spark10LogManager8instanceEv>
   b45dc:	4629      	mov	r1, r5
   b45de:	f002 f9e7 	bl	b69b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler serialLogHandler(LOG_LEVEL_TRACE);
   b45e2:	a802      	add	r0, sp, #8
   b45e4:	f7ff fe27 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b45e8:	b00f      	add	sp, #60	; 0x3c
   b45ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b45ec:	2003d670 	.word	0x2003d670
   b45f0:	000b8104 	.word	0x000b8104
   b45f4:	2003e678 	.word	0x2003e678
   b45f8:	000b8094 	.word	0x000b8094
   b45fc:	000b83ec 	.word	0x000b83ec
   b4600:	000b80ec 	.word	0x000b80ec

000b4604 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <hal_ble_stack_init+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	689b      	ldr	r3, [r3, #8]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030278 	.word	0x00030278

000b4614 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <hal_ble_gap_set_advertising_data+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030278 	.word	0x00030278

000b4624 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <hal_ble_gap_set_scan_response_data+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030278 	.word	0x00030278

000b4634 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <hal_ble_gap_start_advertising+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030278 	.word	0x00030278

000b4644 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b03      	ldr	r3, [pc, #12]	; (b4654 <hal_ble_gap_disconnect+0x10>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b464e:	9301      	str	r3, [sp, #4]
   b4650:	bd08      	pop	{r3, pc}
   b4652:	0000      	.short	0x0000
   b4654:	00030278 	.word	0x00030278

000b4658 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b03      	ldr	r3, [pc, #12]	; (b4668 <hal_ble_gatt_server_add_service+0x10>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4662:	9301      	str	r3, [sp, #4]
   b4664:	bd08      	pop	{r3, pc}
   b4666:	0000      	.short	0x0000
   b4668:	00030278 	.word	0x00030278

000b466c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b03      	ldr	r3, [pc, #12]	; (b467c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4676:	9301      	str	r3, [sp, #4]
   b4678:	bd08      	pop	{r3, pc}
   b467a:	0000      	.short	0x0000
   b467c:	00030278 	.word	0x00030278

000b4680 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b03      	ldr	r3, [pc, #12]	; (b4690 <hal_ble_gatt_client_write_with_response+0x10>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b468a:	9301      	str	r3, [sp, #4]
   b468c:	bd08      	pop	{r3, pc}
   b468e:	0000      	.short	0x0000
   b4690:	00030278 	.word	0x00030278

000b4694 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b03      	ldr	r3, [pc, #12]	; (b46a4 <hal_ble_gatt_client_write_without_response+0x10>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b469e:	9301      	str	r3, [sp, #4]
   b46a0:	bd08      	pop	{r3, pc}
   b46a2:	0000      	.short	0x0000
   b46a4:	00030278 	.word	0x00030278

000b46a8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b03      	ldr	r3, [pc, #12]	; (b46b8 <hal_ble_gatt_server_add_characteristic+0x10>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b46b2:	9301      	str	r3, [sp, #4]
   b46b4:	bd08      	pop	{r3, pc}
   b46b6:	0000      	.short	0x0000
   b46b8:	00030278 	.word	0x00030278

000b46bc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b03      	ldr	r3, [pc, #12]	; (b46cc <hal_ble_set_callback_on_periph_link_events+0x10>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b46c6:	9301      	str	r3, [sp, #4]
   b46c8:	bd08      	pop	{r3, pc}
   b46ca:	0000      	.short	0x0000
   b46cc:	00030278 	.word	0x00030278

000b46d0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b03      	ldr	r3, [pc, #12]	; (b46e0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b46da:	9301      	str	r3, [sp, #4]
   b46dc:	bd08      	pop	{r3, pc}
   b46de:	0000      	.short	0x0000
   b46e0:	00030278 	.word	0x00030278

000b46e4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b03      	ldr	r3, [pc, #12]	; (b46f4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b46ee:	9301      	str	r3, [sp, #4]
   b46f0:	bd08      	pop	{r3, pc}
   b46f2:	0000      	.short	0x0000
   b46f4:	00030278 	.word	0x00030278

000b46f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <os_mutex_recursive_create+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	00030248 	.word	0x00030248

000b4708 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <os_mutex_recursive_destroy+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	00030248 	.word	0x00030248

000b4718 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <os_mutex_recursive_lock+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	00030248 	.word	0x00030248

000b4728 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <os_mutex_recursive_unlock+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	00030248 	.word	0x00030248

000b4738 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <HAL_RNG_GetRandomNumber+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	685b      	ldr	r3, [r3, #4]
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	00030218 	.word	0x00030218

000b4748 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <HAL_Delay_Microseconds+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	68db      	ldr	r3, [r3, #12]
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	00030218 	.word	0x00030218

000b4758 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	695b      	ldr	r3, [r3, #20]
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	00030218 	.word	0x00030218

000b4768 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <inet_inet_ntop+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	695b      	ldr	r3, [r3, #20]
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030264 	.word	0x00030264

000b4778 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <netdb_freeaddrinfo+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	689b      	ldr	r3, [r3, #8]
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030268 	.word	0x00030268

000b4788 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <netdb_getaddrinfo+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	68db      	ldr	r3, [r3, #12]
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030268 	.word	0x00030268

000b4798 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <hal_usart_end+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	689b      	ldr	r3, [r3, #8]
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	0003023c 	.word	0x0003023c

000b47a8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <hal_usart_write+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	68db      	ldr	r3, [r3, #12]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	0003023c 	.word	0x0003023c

000b47b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <hal_usart_available+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	691b      	ldr	r3, [r3, #16]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	0003023c 	.word	0x0003023c

000b47c8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <hal_usart_read+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	695b      	ldr	r3, [r3, #20]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	0003023c 	.word	0x0003023c

000b47d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <hal_usart_peek+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	699b      	ldr	r3, [r3, #24]
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	0003023c 	.word	0x0003023c

000b47e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <hal_usart_flush+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	69db      	ldr	r3, [r3, #28]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	0003023c 	.word	0x0003023c

000b47f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <hal_usart_available_data_for_write+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	0003023c 	.word	0x0003023c

000b4808 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <hal_usart_begin_config+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	0003023c 	.word	0x0003023c

000b4818 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <hal_usart_init_ex+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	0003023c 	.word	0x0003023c

000b4828 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <HAL_USB_USART_Init+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	681b      	ldr	r3, [r3, #0]
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	0003024c 	.word	0x0003024c

000b4838 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <HAL_USB_USART_Begin+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	685b      	ldr	r3, [r3, #4]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	0003024c 	.word	0x0003024c

000b4848 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <HAL_USB_USART_End+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	689b      	ldr	r3, [r3, #8]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	0003024c 	.word	0x0003024c

000b4858 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <HAL_USB_USART_Available_Data+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	691b      	ldr	r3, [r3, #16]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	0003024c 	.word	0x0003024c

000b4868 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	695b      	ldr	r3, [r3, #20]
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	0003024c 	.word	0x0003024c

000b4878 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <HAL_USB_USART_Receive_Data+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	699b      	ldr	r3, [r3, #24]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	0003024c 	.word	0x0003024c

000b4888 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <HAL_USB_USART_Send_Data+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	69db      	ldr	r3, [r3, #28]
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	0003024c 	.word	0x0003024c

000b4898 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <HAL_USB_USART_Flush_Data+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	6a1b      	ldr	r3, [r3, #32]
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	0003024c 	.word	0x0003024c

000b48a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <panic_+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030260 	.word	0x00030260

000b48b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <log_message+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030260 	.word	0x00030260

000b48c8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <log_message_v+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030260 	.word	0x00030260

000b48d8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <log_level_name+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030260 	.word	0x00030260

000b48e8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <log_set_callbacks+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030260 	.word	0x00030260

000b48f8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <set_system_mode+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	685b      	ldr	r3, [r3, #4]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030220 	.word	0x00030220

000b4908 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <system_thread_set_state+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030220 	.word	0x00030220

000b4918 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b03      	ldr	r3, [pc, #12]	; (b4928 <system_ctrl_set_app_request_handler+0x10>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4922:	9301      	str	r3, [sp, #4]
   b4924:	bd08      	pop	{r3, pc}
   b4926:	0000      	.short	0x0000
   b4928:	00030220 	.word	0x00030220

000b492c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b03      	ldr	r3, [pc, #12]	; (b493c <system_ctrl_set_result+0x10>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4936:	9301      	str	r3, [sp, #4]
   b4938:	bd08      	pop	{r3, pc}
   b493a:	0000      	.short	0x0000
   b493c:	00030220 	.word	0x00030220

000b4940 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030244 	.word	0x00030244

000b4950 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <network_connect+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	685b      	ldr	r3, [r3, #4]
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030240 	.word	0x00030240

000b4960 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <network_connecting+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	689b      	ldr	r3, [r3, #8]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	00030240 	.word	0x00030240

000b4970 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <network_disconnect+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	68db      	ldr	r3, [r3, #12]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	00030240 	.word	0x00030240

000b4980 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <network_ready+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	691b      	ldr	r3, [r3, #16]
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	00030240 	.word	0x00030240

000b4990 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <network_on+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	695b      	ldr	r3, [r3, #20]
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030240 	.word	0x00030240

000b49a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <network_off+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	699b      	ldr	r3, [r3, #24]
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	00030240 	.word	0x00030240

000b49b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <network_listen+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	69db      	ldr	r3, [r3, #28]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	00030240 	.word	0x00030240

000b49c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <network_listening+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	6a1b      	ldr	r3, [r3, #32]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	00030240 	.word	0x00030240

000b49d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <network_set_listen_timeout+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	00030240 	.word	0x00030240

000b49e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <network_get_listen_timeout+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	00030240 	.word	0x00030240

000b49f0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <network_is_on+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	00030240 	.word	0x00030240

000b4a00 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <network_is_off+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	00030240 	.word	0x00030240

000b4a10 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <malloc+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	681b      	ldr	r3, [r3, #0]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	0003021c 	.word	0x0003021c

000b4a20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <free+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	685b      	ldr	r3, [r3, #4]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	0003021c 	.word	0x0003021c

000b4a30 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <realloc+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	689b      	ldr	r3, [r3, #8]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	0003021c 	.word	0x0003021c

000b4a40 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <vsnprintf+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	0003021c 	.word	0x0003021c

000b4a50 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <abort+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	0003021c 	.word	0x0003021c

000b4a60 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <__errno+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	0003021c 	.word	0x0003021c

000b4a70 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <__assert_func+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	0003021c 	.word	0x0003021c

000b4a80 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <newlib_impure_ptr_callback+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	0003021c 	.word	0x0003021c

000b4a90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4a90:	4770      	bx	lr

000b4a92 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4a92:	4770      	bx	lr

000b4a94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4a94:	4770      	bx	lr

000b4a96 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4a96:	4770      	bx	lr

000b4a98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4a98:	4b06      	ldr	r3, [pc, #24]	; (b4ab4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4a9a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4a9c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4a9e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4aa2:	d005      	beq.n	b4ab0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4aa4:	4608      	mov	r0, r1
   b4aa6:	f002 ffbb 	bl	b7a20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4aaa:	2800      	cmp	r0, #0
   b4aac:	bf08      	it	eq
   b4aae:	2400      	moveq	r4, #0
      }
   b4ab0:	4620      	mov	r0, r4
   b4ab2:	bd10      	pop	{r4, pc}
   b4ab4:	000b82c0 	.word	0x000b82c0

000b4ab8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4ab8:	4b06      	ldr	r3, [pc, #24]	; (b4ad4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4aba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4abc:	b510      	push	{r4, lr}
   b4abe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4ac2:	d005      	beq.n	b4ad0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4ac4:	4608      	mov	r0, r1
   b4ac6:	f002 ffab 	bl	b7a20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4aca:	2800      	cmp	r0, #0
   b4acc:	bf08      	it	eq
   b4ace:	2400      	moveq	r4, #0
      }
   b4ad0:	4620      	mov	r0, r4
   b4ad2:	bd10      	pop	{r4, pc}
   b4ad4:	000b82c0 	.word	0x000b82c0

000b4ad8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4ad8:	4b06      	ldr	r3, [pc, #24]	; (b4af4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4ada:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4adc:	b510      	push	{r4, lr}
   b4ade:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4ae2:	d005      	beq.n	b4af0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4ae4:	4608      	mov	r0, r1
   b4ae6:	f002 ff9b 	bl	b7a20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4aea:	2800      	cmp	r0, #0
   b4aec:	bf08      	it	eq
   b4aee:	2400      	moveq	r4, #0
      }
   b4af0:	4620      	mov	r0, r4
   b4af2:	bd10      	pop	{r4, pc}
   b4af4:	000b82c0 	.word	0x000b82c0

000b4af8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4af8:	b510      	push	{r4, lr}
   b4afa:	2168      	movs	r1, #104	; 0x68
   b4afc:	4604      	mov	r4, r0
   b4afe:	f7ff facc 	bl	b409a <_ZdlPvj>
   b4b02:	4620      	mov	r0, r4
   b4b04:	bd10      	pop	{r4, pc}

000b4b06 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4b06:	b510      	push	{r4, lr}
   b4b08:	2128      	movs	r1, #40	; 0x28
   b4b0a:	4604      	mov	r4, r0
   b4b0c:	f7ff fac5 	bl	b409a <_ZdlPvj>
   b4b10:	4620      	mov	r0, r4
   b4b12:	bd10      	pop	{r4, pc}

000b4b14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4b14:	b510      	push	{r4, lr}
   b4b16:	2130      	movs	r1, #48	; 0x30
   b4b18:	4604      	mov	r4, r0
   b4b1a:	f7ff fabe 	bl	b409a <_ZdlPvj>
   b4b1e:	4620      	mov	r0, r4
   b4b20:	bd10      	pop	{r4, pc}

000b4b22 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4b22:	2168      	movs	r1, #104	; 0x68
   b4b24:	f7ff bab9 	b.w	b409a <_ZdlPvj>

000b4b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4b28:	2128      	movs	r1, #40	; 0x28
   b4b2a:	f7ff bab6 	b.w	b409a <_ZdlPvj>

000b4b2e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4b2e:	2130      	movs	r1, #48	; 0x30
   b4b30:	f7ff bab3 	b.w	b409a <_ZdlPvj>

000b4b34 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4b36:	2500      	movs	r5, #0
   b4b38:	1cec      	adds	r4, r5, #3
   b4b3a:	428c      	cmp	r4, r1
   b4b3c:	d80d      	bhi.n	b4b5a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4b3e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4b40:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4b42:	5d87      	ldrb	r7, [r0, r6]
   b4b44:	4297      	cmp	r7, r2
   b4b46:	d105      	bne.n	b4b54 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4b48:	4426      	add	r6, r4
   b4b4a:	42b1      	cmp	r1, r6
   b4b4c:	d305      	bcc.n	b4b5a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4b4e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4b50:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4b54:	3401      	adds	r4, #1
   b4b56:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4b58:	e7ee      	b.n	b4b38 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4b5a:	2000      	movs	r0, #0
   b4b5c:	e7f9      	b.n	b4b52 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b4b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4b60:	4a02      	ldr	r2, [pc, #8]	; (b4b6c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4b62:	4903      	ldr	r1, [pc, #12]	; (b4b70 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b4b64:	200a      	movs	r0, #10
   b4b66:	f7ff be9f 	b.w	b48a8 <panic_>
   b4b6a:	bf00      	nop
   b4b6c:	000b4749 	.word	0x000b4749
   b4b70:	000b8130 	.word	0x000b8130

000b4b74 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4b74:	b430      	push	{r4, r5}
   b4b76:	460d      	mov	r5, r1
   b4b78:	4611      	mov	r1, r2
   b4b7a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4b7c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4b7e:	6809      	ldr	r1, [r1, #0]
   b4b80:	6828      	ldr	r0, [r5, #0]
   b4b82:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4b86:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4b88:	bc30      	pop	{r4, r5}
   b4b8a:	4760      	bx	ip

000b4b8c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4b8c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4b8e:	b538      	push	{r3, r4, r5, lr}
   b4b90:	4604      	mov	r4, r0
	switch (__op)
   b4b92:	d102      	bne.n	b4b9a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4b94:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4b96:	6023      	str	r3, [r4, #0]
	}
   b4b98:	e003      	b.n	b4ba2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4b9a:	2a02      	cmp	r2, #2
   b4b9c:	d003      	beq.n	b4ba6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4b9e:	2a03      	cmp	r2, #3
   b4ba0:	d00d      	beq.n	b4bbe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4ba2:	2000      	movs	r0, #0
   b4ba4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4ba6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4ba8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4baa:	f7ff fa72 	bl	b4092 <_Znwj>
   b4bae:	4603      	mov	r3, r0
   b4bb0:	2800      	cmp	r0, #0
   b4bb2:	d0f0      	beq.n	b4b96 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4bb4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4bb8:	e883 0003 	stmia.w	r3, {r0, r1}
   b4bbc:	e7eb      	b.n	b4b96 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4bbe:	6800      	ldr	r0, [r0, #0]
   b4bc0:	2800      	cmp	r0, #0
   b4bc2:	d0ee      	beq.n	b4ba2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4bc4:	2108      	movs	r1, #8
   b4bc6:	f7ff fa68 	bl	b409a <_ZdlPvj>
   b4bca:	e7ea      	b.n	b4ba2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4bcc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4bcc:	b510      	push	{r4, lr}
      if (_M_manager)
   b4bce:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4bd0:	4604      	mov	r4, r0
      if (_M_manager)
   b4bd2:	b113      	cbz	r3, b4bda <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4bd4:	2203      	movs	r2, #3
   b4bd6:	4601      	mov	r1, r0
   b4bd8:	4798      	blx	r3
    }
   b4bda:	4620      	mov	r0, r4
   b4bdc:	bd10      	pop	{r4, pc}

000b4bde <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4bde:	b510      	push	{r4, lr}
   b4be0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4be2:	3058      	adds	r0, #88	; 0x58
   b4be4:	f7ff fff2 	bl	b4bcc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b4be8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4bf0:	f002 bc40 	b.w	b7474 <_ZN6StringD1Ev>

000b4bf4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4bf4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4bf6:	6843      	ldr	r3, [r0, #4]
   b4bf8:	3b01      	subs	r3, #1
    {
   b4bfa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4bfc:	6043      	str	r3, [r0, #4]
   b4bfe:	b963      	cbnz	r3, b4c1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4c00:	6803      	ldr	r3, [r0, #0]
   b4c02:	689b      	ldr	r3, [r3, #8]
   b4c04:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4c06:	68a3      	ldr	r3, [r4, #8]
   b4c08:	3b01      	subs	r3, #1
   b4c0a:	60a3      	str	r3, [r4, #8]
   b4c0c:	b92b      	cbnz	r3, b4c1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4c0e:	6823      	ldr	r3, [r4, #0]
   b4c10:	4620      	mov	r0, r4
   b4c12:	68db      	ldr	r3, [r3, #12]
    }
   b4c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4c18:	4718      	bx	r3
    }
   b4c1a:	bd10      	pop	{r4, pc}

000b4c1c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4c1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4c20:	b2da      	uxtb	r2, r3
   b4c22:	2a09      	cmp	r2, #9
   b4c24:	d801      	bhi.n	b4c2a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4c26:	4618      	mov	r0, r3
   b4c28:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4c2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4c2e:	2b05      	cmp	r3, #5
   b4c30:	d801      	bhi.n	b4c36 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4c32:	3857      	subs	r0, #87	; 0x57
   b4c34:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4c36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4c3a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4c3c:	bf94      	ite	ls
   b4c3e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4c40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b4c44:	4770      	bx	lr
	...

000b4c48 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4c48:	b510      	push	{r4, lr}
            locked_(false) {
   b4c4a:	2300      	movs	r3, #0
   b4c4c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4c4e:	4b04      	ldr	r3, [pc, #16]	; (b4c60 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4c50:	4604      	mov	r4, r0
   b4c52:	6818      	ldr	r0, [r3, #0]
   b4c54:	f7ff fd60 	bl	b4718 <os_mutex_recursive_lock>
        locked_ = true;
   b4c58:	2301      	movs	r3, #1
   b4c5a:	7023      	strb	r3, [r4, #0]
    }
   b4c5c:	4620      	mov	r0, r4
   b4c5e:	bd10      	pop	{r4, pc}
   b4c60:	2003e6a4 	.word	0x2003e6a4

000b4c64 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4c64:	b510      	push	{r4, lr}
        if (locked_) {
   b4c66:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4c68:	4604      	mov	r4, r0
        if (locked_) {
   b4c6a:	b11b      	cbz	r3, b4c74 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4c6c:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4c6e:	6818      	ldr	r0, [r3, #0]
   b4c70:	f7ff fd5a 	bl	b4728 <os_mutex_recursive_unlock>
    }
   b4c74:	4620      	mov	r0, r4
   b4c76:	bd10      	pop	{r4, pc}
   b4c78:	2003e6a4 	.word	0x2003e6a4

000b4c7c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4c7c:	b082      	sub	sp, #8
   b4c7e:	4603      	mov	r3, r0
    address_ = addr;
   b4c80:	6808      	ldr	r0, [r1, #0]
   b4c82:	6849      	ldr	r1, [r1, #4]
   b4c84:	466a      	mov	r2, sp
   b4c86:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4c88:	466a      	mov	r2, sp
   b4c8a:	ca03      	ldmia	r2!, {r0, r1}
   b4c8c:	6018      	str	r0, [r3, #0]
}
   b4c8e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4c90:	6059      	str	r1, [r3, #4]
}
   b4c92:	b002      	add	sp, #8
   b4c94:	4770      	bx	lr

000b4c96 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4c96:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4c98:	7982      	ldrb	r2, [r0, #6]
   b4c9a:	798b      	ldrb	r3, [r1, #6]
   b4c9c:	429a      	cmp	r2, r3
   b4c9e:	d106      	bne.n	b4cae <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4ca0:	2206      	movs	r2, #6
   b4ca2:	f002 ffdd 	bl	b7c60 <memcmp>
   b4ca6:	fab0 f080 	clz	r0, r0
   b4caa:	0940      	lsrs	r0, r0, #5
}
   b4cac:	bd08      	pop	{r3, pc}
    return false;
   b4cae:	2000      	movs	r0, #0
   b4cb0:	e7fc      	b.n	b4cac <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4cb2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4cb6:	6003      	str	r3, [r0, #0]
   b4cb8:	8083      	strh	r3, [r0, #4]
}
   b4cba:	2000      	movs	r0, #0
   b4cbc:	4770      	bx	lr

000b4cbe <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4cbe:	b508      	push	{r3, lr}
   b4cc0:	4602      	mov	r2, r0
        : address_{} {
   b4cc2:	2100      	movs	r1, #0
   b4cc4:	6001      	str	r1, [r0, #0]
   b4cc6:	6041      	str	r1, [r0, #4]
    clear();
   b4cc8:	f7ff fff3 	bl	b4cb2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4ccc:	7191      	strb	r1, [r2, #6]
}
   b4cce:	4610      	mov	r0, r2
   b4cd0:	bd08      	pop	{r3, pc}
	...

000b4cd4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4cd4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4cd6:	2301      	movs	r3, #1
   b4cd8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4cda:	4b05      	ldr	r3, [pc, #20]	; (b4cf0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4cdc:	4602      	mov	r2, r0
   b4cde:	f103 0110 	add.w	r1, r3, #16
   b4ce2:	f853 4b04 	ldr.w	r4, [r3], #4
   b4ce6:	f842 4b04 	str.w	r4, [r2], #4
   b4cea:	428b      	cmp	r3, r1
   b4cec:	d1f9      	bne.n	b4ce2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4cee:	bd10      	pop	{r4, pc}
   b4cf0:	000b82ce 	.word	0x000b82ce

000b4cf4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4cf4:	b510      	push	{r4, lr}
    if (uuid128) {
   b4cf6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4cf8:	4604      	mov	r4, r0
    if (uuid128) {
   b4cfa:	b1b1      	cbz	r1, b4d2a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4cfc:	2a01      	cmp	r2, #1
   b4cfe:	f101 0210 	add.w	r2, r1, #16
   b4d02:	d10a      	bne.n	b4d1a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4d04:	4601      	mov	r1, r0
   b4d06:	f853 0b04 	ldr.w	r0, [r3], #4
   b4d0a:	f841 0b04 	str.w	r0, [r1], #4
   b4d0e:	4293      	cmp	r3, r2
   b4d10:	d1f9      	bne.n	b4d06 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b4d12:	2301      	movs	r3, #1
   b4d14:	6123      	str	r3, [r4, #16]
}
   b4d16:	4620      	mov	r0, r4
   b4d18:	bd10      	pop	{r4, pc}
   b4d1a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b4d1c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b4d20:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4d24:	429a      	cmp	r2, r3
   b4d26:	d1f9      	bne.n	b4d1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b4d28:	e7f3      	b.n	b4d12 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b4d2a:	2210      	movs	r2, #16
   b4d2c:	f002 ffd0 	bl	b7cd0 <memset>
   b4d30:	e7f1      	b.n	b4d16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b4d32 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b4d32:	b538      	push	{r3, r4, r5, lr}
   b4d34:	4604      	mov	r4, r0
   b4d36:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b4d38:	461a      	mov	r2, r3
   b4d3a:	f7ff ffdb 	bl	b4cf4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b4d3e:	81a5      	strh	r5, [r4, #12]
}
   b4d40:	4620      	mov	r0, r4
   b4d42:	bd38      	pop	{r3, r4, r5, pc}

000b4d44 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b4d44:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b4d46:	6902      	ldr	r2, [r0, #16]
   b4d48:	b922      	cbnz	r2, b4d54 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b4d4a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4d4c:	3800      	subs	r0, #0
   b4d4e:	bf18      	it	ne
   b4d50:	2001      	movne	r0, #1
}
   b4d52:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4d54:	4902      	ldr	r1, [pc, #8]	; (b4d60 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b4d56:	2210      	movs	r2, #16
   b4d58:	f002 ff82 	bl	b7c60 <memcmp>
   b4d5c:	e7f6      	b.n	b4d4c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b4d5e:	bf00      	nop
   b4d60:	000b82ee 	.word	0x000b82ee

000b4d64 <_ZNK8particle7BleUuid4typeEv>:
}
   b4d64:	6900      	ldr	r0, [r0, #16]
   b4d66:	4770      	bx	lr

000b4d68 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b4d68:	b538      	push	{r3, r4, r5, lr}
   b4d6a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b4d6c:	2214      	movs	r2, #20
   b4d6e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b4d70:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b4d72:	f002 ffad 	bl	b7cd0 <memset>
    if (type_ == BleUuidType::SHORT) {
   b4d76:	6923      	ldr	r3, [r4, #16]
   b4d78:	b91b      	cbnz	r3, b4d82 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b4d7a:	89a3      	ldrh	r3, [r4, #12]
   b4d7c:	802b      	strh	r3, [r5, #0]
}
   b4d7e:	4628      	mov	r0, r5
   b4d80:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b4d82:	2301      	movs	r3, #1
   b4d84:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b4d86:	4621      	mov	r1, r4
   b4d88:	462b      	mov	r3, r5
   b4d8a:	f104 0210 	add.w	r2, r4, #16
   b4d8e:	f851 0b04 	ldr.w	r0, [r1], #4
   b4d92:	f843 0b04 	str.w	r0, [r3], #4
   b4d96:	4291      	cmp	r1, r2
   b4d98:	d1f9      	bne.n	b4d8e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b4d9a:	e7f0      	b.n	b4d7e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b4d9c <_ZNK8particle7BleUuid7shortedEv>:
}
   b4d9c:	8980      	ldrh	r0, [r0, #12]
   b4d9e:	4770      	bx	lr

000b4da0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b4da0:	4770      	bx	lr

000b4da2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b4da2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4da4:	6902      	ldr	r2, [r0, #16]
   b4da6:	690b      	ldr	r3, [r1, #16]
   b4da8:	429a      	cmp	r2, r3
   b4daa:	d106      	bne.n	b4dba <_ZNK8particle7BleUuideqERKS0_+0x18>
   b4dac:	2210      	movs	r2, #16
   b4dae:	f002 ff57 	bl	b7c60 <memcmp>
   b4db2:	fab0 f080 	clz	r0, r0
   b4db6:	0940      	lsrs	r0, r0, #5
}
   b4db8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4dba:	2000      	movs	r0, #0
   b4dbc:	e7fc      	b.n	b4db8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b4dc0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b4dc0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b4dc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b4dc6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4dc8:	4b34      	ldr	r3, [pc, #208]	; (b4e9c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b4dca:	460c      	mov	r4, r1
   b4dcc:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4dce:	4602      	mov	r2, r0
   b4dd0:	f103 0110 	add.w	r1, r3, #16
   b4dd4:	f853 0b04 	ldr.w	r0, [r3], #4
   b4dd8:	f842 0b04 	str.w	r0, [r2], #4
   b4ddc:	428b      	cmp	r3, r1
   b4dde:	d1f9      	bne.n	b4dd4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b4de0:	b344      	cbz	r4, b4e34 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b4de2:	2124      	movs	r1, #36	; 0x24
   b4de4:	4620      	mov	r0, r4
   b4de6:	f002 ffee 	bl	b7dc6 <strnlen>
   b4dea:	2804      	cmp	r0, #4
   b4dec:	f04f 0500 	mov.w	r5, #0
   b4df0:	d123      	bne.n	b4e3a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b4df2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b4df6:	af01      	add	r7, sp, #4
   b4df8:	1ca5      	adds	r5, r4, #2
   b4dfa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b4dfc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b4e00:	f7ff ff0c 	bl	b4c1c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b4e04:	f1b0 0800 	subs.w	r8, r0, #0
   b4e08:	db12      	blt.n	b4e30 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b4e0a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b4e0e:	f7ff ff05 	bl	b4c1c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b4e12:	2800      	cmp	r0, #0
   b4e14:	db0c      	blt.n	b4e30 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b4e16:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4e18:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b4e1c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4e1e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b4e22:	d1eb      	bne.n	b4dfc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b4e24:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4e28:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b4e2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4e2e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b4e30:	2300      	movs	r3, #0
   b4e32:	6133      	str	r3, [r6, #16]
}
   b4e34:	b002      	add	sp, #8
   b4e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b4e3a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4e3e:	2124      	movs	r1, #36	; 0x24
   b4e40:	4620      	mov	r0, r4
   b4e42:	f002 ffc0 	bl	b7dc6 <strnlen>
   b4e46:	42a8      	cmp	r0, r5
   b4e48:	d807      	bhi.n	b4e5a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b4e4a:	4642      	mov	r2, r8
   b4e4c:	2100      	movs	r1, #0
   b4e4e:	4630      	mov	r0, r6
}
   b4e50:	b002      	add	sp, #8
   b4e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b4e56:	f002 bf3b 	b.w	b7cd0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4e5a:	f1b8 0f00 	cmp.w	r8, #0
   b4e5e:	d0e9      	beq.n	b4e34 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b4e60:	5d60      	ldrb	r0, [r4, r5]
   b4e62:	f7ff fedb 	bl	b4c1c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b4e66:	0603      	lsls	r3, r0, #24
   b4e68:	d415      	bmi.n	b4e96 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b4e6a:	0100      	lsls	r0, r0, #4
   b4e6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b4e70:	b2c7      	uxtb	r7, r0
   b4e72:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b4e76:	2124      	movs	r1, #36	; 0x24
   b4e78:	4620      	mov	r0, r4
   b4e7a:	f002 ffa4 	bl	b7dc6 <strnlen>
   b4e7e:	3501      	adds	r5, #1
   b4e80:	42a8      	cmp	r0, r5
   b4e82:	d908      	bls.n	b4e96 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b4e84:	5d60      	ldrb	r0, [r4, r5]
   b4e86:	f7ff fec9 	bl	b4c1c <_ZN8particle11hexToNibbleEc>
   b4e8a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b4e8c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b4e8e:	bfa4      	itt	ge
   b4e90:	4338      	orrge	r0, r7
   b4e92:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4e96:	3501      	adds	r5, #1
   b4e98:	e7d1      	b.n	b4e3e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b4e9a:	bf00      	nop
   b4e9c:	000b82ce 	.word	0x000b82ce

000b4ea0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b4ea0:	b513      	push	{r0, r1, r4, lr}
   b4ea2:	4604      	mov	r4, r0
   b4ea4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b4ea6:	f7ff ff15 	bl	b4cd4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b4eaa:	4620      	mov	r0, r4
   b4eac:	9901      	ldr	r1, [sp, #4]
   b4eae:	f7ff ff87 	bl	b4dc0 <_ZN8particle7BleUuid9constructEPKc>
}
   b4eb2:	4620      	mov	r0, r4
   b4eb4:	b002      	add	sp, #8
   b4eb6:	bd10      	pop	{r4, pc}

000b4eb8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b4eb8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b4eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4ebe:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b4ec0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b4ec2:	8043      	strh	r3, [r0, #2]
   b4ec4:	220e      	movs	r2, #14
   b4ec6:	4629      	mov	r1, r5
   b4ec8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4eca:	7105      	strb	r5, [r0, #4]
   b4ecc:	3006      	adds	r0, #6
   b4ece:	f002 feff 	bl	b7cd0 <memset>
   b4ed2:	f104 0014 	add.w	r0, r4, #20
   b4ed6:	f7ff fefd 	bl	b4cd4 <_ZN8particle7BleUuidC1Ev>
   b4eda:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4ede:	f7ff fef9 	bl	b4cd4 <_ZN8particle7BleUuidC1Ev>
   b4ee2:	4904      	ldr	r1, [pc, #16]	; (b4ef4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b4ee4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4ee8:	f002 fb0f 	bl	b750a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b4eec:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b4eee:	4620      	mov	r0, r4
   b4ef0:	bd38      	pop	{r3, r4, r5, pc}
   b4ef2:	bf00      	nop
   b4ef4:	000b83b3 	.word	0x000b83b3

000b4ef8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b4ef8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b4efa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b4efe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b4f02:	4293      	cmp	r3, r2
   b4f04:	4618      	mov	r0, r3
   b4f06:	d006      	beq.n	b4f16 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b4f08:	6804      	ldr	r4, [r0, #0]
   b4f0a:	8824      	ldrh	r4, [r4, #0]
   b4f0c:	428c      	cmp	r4, r1
   b4f0e:	f103 0308 	add.w	r3, r3, #8
   b4f12:	d1f6      	bne.n	b4f02 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b4f14:	bd10      	pop	{r4, pc}
        return nullptr;
   b4f16:	2000      	movs	r0, #0
   b4f18:	e7fc      	b.n	b4f14 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b4f1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f1e:	4606      	mov	r6, r0
   b4f20:	b085      	sub	sp, #20
   b4f22:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b4f24:	460d      	mov	r5, r1
   b4f26:	2900      	cmp	r1, #0
   b4f28:	d050      	beq.n	b4fcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b4f2a:	2a00      	cmp	r2, #0
   b4f2c:	d04e      	beq.n	b4fcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4f2e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b4f30:	7823      	ldrb	r3, [r4, #0]
   b4f32:	2af4      	cmp	r2, #244	; 0xf4
   b4f34:	bf28      	it	cs
   b4f36:	22f4      	movcs	r2, #244	; 0xf4
   b4f38:	b343      	cbz	r3, b4f8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b4f3a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b4f3c:	0798      	lsls	r0, r3, #30
   b4f3e:	d509      	bpl.n	b4f54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b4f40:	89a0      	ldrh	r0, [r4, #12]
   b4f42:	9203      	str	r2, [sp, #12]
   b4f44:	2300      	movs	r3, #0
   b4f46:	f7ff fb91 	bl	b466c <hal_ble_gatt_server_set_characteristic_value>
   b4f4a:	2800      	cmp	r0, #0
   b4f4c:	9a03      	ldr	r2, [sp, #12]
   b4f4e:	da03      	bge.n	b4f58 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b4f50:	b005      	add	sp, #20
   b4f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b4f54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b4f58:	6834      	ldr	r4, [r6, #0]
   b4f5a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b4f5c:	06d9      	lsls	r1, r3, #27
   b4f5e:	d509      	bpl.n	b4f74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b4f60:	2f01      	cmp	r7, #1
   b4f62:	d007      	beq.n	b4f74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f64:	89a0      	ldrh	r0, [r4, #12]
   b4f66:	2300      	movs	r3, #0
   b4f68:	4629      	mov	r1, r5
}
   b4f6a:	b005      	add	sp, #20
   b4f6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f70:	f7ff bbae 	b.w	b46d0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b4f74:	069b      	lsls	r3, r3, #26
   b4f76:	d5eb      	bpl.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b4f78:	2f02      	cmp	r7, #2
   b4f7a:	d0e9      	beq.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f7c:	89a0      	ldrh	r0, [r4, #12]
   b4f7e:	2300      	movs	r3, #0
   b4f80:	4629      	mov	r1, r5
}
   b4f82:	b005      	add	sp, #20
   b4f84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f88:	f7ff bbac 	b.w	b46e4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b4f8c:	8860      	ldrh	r0, [r4, #2]
   b4f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4f92:	4288      	cmp	r0, r1
   b4f94:	d01c      	beq.n	b4fd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b4f96:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b4f98:	074e      	lsls	r6, r1, #29
   b4f9a:	d501      	bpl.n	b4fa0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b4f9c:	2f01      	cmp	r7, #1
   b4f9e:	d104      	bne.n	b4faa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b4fa0:	070b      	lsls	r3, r1, #28
   b4fa2:	d409      	bmi.n	b4fb8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b4fa4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b4fa8:	e7d2      	b.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b4faa:	89a1      	ldrh	r1, [r4, #12]
   b4fac:	9300      	str	r3, [sp, #0]
   b4fae:	4613      	mov	r3, r2
   b4fb0:	462a      	mov	r2, r5
   b4fb2:	f7ff fb6f 	bl	b4694 <hal_ble_gatt_client_write_without_response>
   b4fb6:	e7cb      	b.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b4fb8:	2f02      	cmp	r7, #2
   b4fba:	d0f3      	beq.n	b4fa4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b4fbc:	2300      	movs	r3, #0
   b4fbe:	89a1      	ldrh	r1, [r4, #12]
   b4fc0:	9300      	str	r3, [sp, #0]
   b4fc2:	4613      	mov	r3, r2
   b4fc4:	462a      	mov	r2, r5
   b4fc6:	f7ff fb5b 	bl	b4680 <hal_ble_gatt_client_write_with_response>
   b4fca:	e7c1      	b.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b4fcc:	4802      	ldr	r0, [pc, #8]	; (b4fd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b4fce:	e7bf      	b.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b4fd0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b4fd4:	e7bc      	b.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b4fd6:	bf00      	nop
   b4fd8:	fffffef2 	.word	0xfffffef2

000b4fdc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b4fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b4fe0:	2600      	movs	r6, #0
   b4fe2:	6006      	str	r6, [r0, #0]
   b4fe4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4fe6:	2028      	movs	r0, #40	; 0x28
   b4fe8:	460c      	mov	r4, r1
   b4fea:	f7ff f852 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b4fee:	1e05      	subs	r5, r0, #0
   b4ff0:	f105 080c 	add.w	r8, r5, #12
   b4ff4:	d00f      	beq.n	b5016 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b4ff6:	2301      	movs	r3, #1
   b4ff8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b4ffc:	4b08      	ldr	r3, [pc, #32]	; (b5020 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b4ffe:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5000:	4640      	mov	r0, r8
   b5002:	f7ff fe67 	bl	b4cd4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b5006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5008:	622e      	str	r6, [r5, #32]
   b500a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b500e:	4646      	mov	r6, r8
   b5010:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5012:	6823      	ldr	r3, [r4, #0]
   b5014:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5016:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b501a:	4638      	mov	r0, r7
   b501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5020:	000b8290 	.word	0x000b8290

000b5024 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5024:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5026:	2500      	movs	r5, #0
   b5028:	6005      	str	r5, [r0, #0]
   b502a:	4606      	mov	r6, r0
   b502c:	2030      	movs	r0, #48	; 0x30
   b502e:	f7ff f830 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5032:	4604      	mov	r4, r0
   b5034:	b188      	cbz	r0, b505a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5036:	2301      	movs	r3, #1
   b5038:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b503c:	4b09      	ldr	r3, [pc, #36]	; (b5064 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b503e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5040:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5044:	8183      	strh	r3, [r0, #12]
   b5046:	300e      	adds	r0, #14
   b5048:	f7ff fe39 	bl	b4cbe <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b504c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5050:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5054:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5058:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b505a:	6074      	str	r4, [r6, #4]
   b505c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b505e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5060:	4630      	mov	r0, r6
   b5062:	bd70      	pop	{r4, r5, r6, pc}
   b5064:	000b82ac 	.word	0x000b82ac

000b5068 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5068:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b506a:	460d      	mov	r5, r1
   b506c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b506e:	a801      	add	r0, sp, #4
   b5070:	f7ff fdea 	bl	b4c48 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5074:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5076:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b507a:	6023      	str	r3, [r4, #0]
   b507c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5080:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5082:	a801      	add	r0, sp, #4
   b5084:	f7ff fdee 	bl	b4c64 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5088:	4620      	mov	r0, r4
   b508a:	b003      	add	sp, #12
   b508c:	bd30      	pop	{r4, r5, pc}

000b508e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b508e:	b530      	push	{r4, r5, lr}
   b5090:	4605      	mov	r5, r0
   b5092:	b087      	sub	sp, #28
   b5094:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5096:	a801      	add	r0, sp, #4
   b5098:	f7ff fdd6 	bl	b4c48 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b509c:	682a      	ldr	r2, [r5, #0]
   b509e:	6823      	ldr	r3, [r4, #0]
   b50a0:	8812      	ldrh	r2, [r2, #0]
   b50a2:	881b      	ldrh	r3, [r3, #0]
   b50a4:	429a      	cmp	r2, r3
   b50a6:	d10d      	bne.n	b50c4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b50a8:	4629      	mov	r1, r5
   b50aa:	a802      	add	r0, sp, #8
   b50ac:	f7ff ffdc 	bl	b5068 <_ZNK8particle13BlePeerDevice7addressEv>
   b50b0:	4621      	mov	r1, r4
   b50b2:	a804      	add	r0, sp, #16
   b50b4:	f7ff ffd8 	bl	b5068 <_ZNK8particle13BlePeerDevice7addressEv>
   b50b8:	a904      	add	r1, sp, #16
   b50ba:	a802      	add	r0, sp, #8
   b50bc:	f7ff fdeb 	bl	b4c96 <_ZNK8particle10BleAddresseqERKS0_>
   b50c0:	4604      	mov	r4, r0
   b50c2:	b900      	cbnz	r0, b50c6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b50c4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b50c6:	a801      	add	r0, sp, #4
   b50c8:	f7ff fdcc 	bl	b4c64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b50cc:	4620      	mov	r0, r4
   b50ce:	b007      	add	sp, #28
   b50d0:	bd30      	pop	{r4, r5, pc}
	...

000b50d4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b50d4:	b510      	push	{r4, lr}
   b50d6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b50d8:	2064      	movs	r0, #100	; 0x64
   b50da:	f7fe ffda 	bl	b4092 <_Znwj>
   b50de:	b168      	cbz	r0, b50fc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b50e0:	2300      	movs	r3, #0
   b50e2:	e9c0 3300 	strd	r3, r3, [r0]
   b50e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b50ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b50ee:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b50f2:	6203      	str	r3, [r0, #32]
   b50f4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b50f6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b50f8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b50fa:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b50fc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b50fe:	b920      	cbnz	r0, b510a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5100:	4a0a      	ldr	r2, [pc, #40]	; (b512c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5102:	490b      	ldr	r1, [pc, #44]	; (b5130 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5104:	200a      	movs	r0, #10
   b5106:	f7ff fbcf 	bl	b48a8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b510a:	2000      	movs	r0, #0
   b510c:	f7ff fa7a 	bl	b4604 <hal_ble_stack_init>
   b5110:	b120      	cbz	r0, b511c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5112:	4a06      	ldr	r2, [pc, #24]	; (b512c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5114:	4907      	ldr	r1, [pc, #28]	; (b5134 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5116:	200a      	movs	r0, #10
   b5118:	f7ff fbc6 	bl	b48a8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b511c:	6821      	ldr	r1, [r4, #0]
   b511e:	4806      	ldr	r0, [pc, #24]	; (b5138 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5120:	2200      	movs	r2, #0
   b5122:	f7ff facb 	bl	b46bc <hal_ble_set_callback_on_periph_link_events>
}
   b5126:	4620      	mov	r0, r4
   b5128:	bd10      	pop	{r4, pc}
   b512a:	bf00      	nop
   b512c:	000b4749 	.word	0x000b4749
   b5130:	000b8130 	.word	0x000b8130
   b5134:	000b816e 	.word	0x000b816e
   b5138:	000b56ed 	.word	0x000b56ed

000b513c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b513c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b513e:	4c0a      	ldr	r4, [pc, #40]	; (b5168 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5140:	7823      	ldrb	r3, [r4, #0]
   b5142:	f3bf 8f5b 	dmb	ish
   b5146:	07db      	lsls	r3, r3, #31
   b5148:	d40c      	bmi.n	b5164 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b514a:	4620      	mov	r0, r4
   b514c:	f7fe ffb4 	bl	b40b8 <__cxa_guard_acquire>
   b5150:	b140      	cbz	r0, b5164 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5152:	4806      	ldr	r0, [pc, #24]	; (b516c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5154:	f7ff ffbe 	bl	b50d4 <_ZN8particle14BleLocalDeviceC1Ev>
   b5158:	4620      	mov	r0, r4
   b515a:	f7fe ffb2 	bl	b40c2 <__cxa_guard_release>
   b515e:	4804      	ldr	r0, [pc, #16]	; (b5170 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5160:	f002 fd70 	bl	b7c44 <atexit>
    return instance;
}
   b5164:	4801      	ldr	r0, [pc, #4]	; (b516c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5166:	bd10      	pop	{r4, pc}
   b5168:	2003e69c 	.word	0x2003e69c
   b516c:	2003e6a8 	.word	0x2003e6a8
   b5170:	000b53b9 	.word	0x000b53b9

000b5174 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5174:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b5176:	6803      	ldr	r3, [r0, #0]
   b5178:	3b09      	subs	r3, #9
   b517a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b517c:	b08d      	sub	sp, #52	; 0x34
   b517e:	4604      	mov	r4, r0
   b5180:	460d      	mov	r5, r1
    switch (event->type) {
   b5182:	d811      	bhi.n	b51a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5184:	f7ff ffda 	bl	b513c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5188:	88a1      	ldrh	r1, [r4, #4]
   b518a:	6800      	ldr	r0, [r0, #0]
   b518c:	f7ff feb4 	bl	b4ef8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5190:	4603      	mov	r3, r0
   b5192:	b958      	cbnz	r0, b51ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5194:	2220      	movs	r2, #32
   b5196:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b519a:	4a0b      	ldr	r2, [pc, #44]	; (b51c8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b519c:	9200      	str	r2, [sp, #0]
   b519e:	490b      	ldr	r1, [pc, #44]	; (b51cc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b51a0:	aa04      	add	r2, sp, #16
   b51a2:	2032      	movs	r0, #50	; 0x32
   b51a4:	f7ff fb88 	bl	b48b8 <log_message>
}
   b51a8:	b00d      	add	sp, #52	; 0x34
   b51aa:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b51ac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b51ae:	2a00      	cmp	r2, #0
   b51b0:	d0fa      	beq.n	b51a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b51b2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b51b6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b51ba:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b51be:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b51c0:	aa04      	add	r2, sp, #16
   b51c2:	a903      	add	r1, sp, #12
   b51c4:	47a0      	blx	r4
}
   b51c6:	e7ef      	b.n	b51a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b51c8:	000b81b0 	.word	0x000b81b0
   b51cc:	000b8147 	.word	0x000b8147

000b51d0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b51d0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b51d2:	2000      	movs	r0, #0
   b51d4:	f7ff fa16 	bl	b4604 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b51d8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b51dc:	bd08      	pop	{r3, pc}

000b51de <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b51de:	b919      	cbnz	r1, b51e8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b51e0:	460a      	mov	r2, r1
   b51e2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b51e4:	f7ff ba16 	b.w	b4614 <hal_ble_gap_set_advertising_data>
   b51e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b51ec:	2200      	movs	r2, #0
   b51ee:	e7f9      	b.n	b51e4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b51f0 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b51f0:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b51f2:	69d8      	ldr	r0, [r3, #28]
}
   b51f4:	2800      	cmp	r0, #0
   b51f6:	bfd4      	ite	le
   b51f8:	2000      	movle	r0, #0
   b51fa:	2001      	movgt	r0, #1
   b51fc:	4770      	bx	lr

000b51fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b51fe:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5200:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5204:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5206:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b520a:	42ae      	cmp	r6, r5
   b520c:	d004      	beq.n	b5218 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b520e:	4628      	mov	r0, r5
   b5210:	f002 f930 	bl	b7474 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5214:	3510      	adds	r5, #16
   b5216:	e7f8      	b.n	b520a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5218:	6820      	ldr	r0, [r4, #0]
   b521a:	f7ff fc01 	bl	b4a20 <free>
}
   b521e:	4620      	mov	r0, r4
   b5220:	bd70      	pop	{r4, r5, r6, pc}

000b5222 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5222:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b5224:	1e14      	subs	r4, r2, #0
   b5226:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5228:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b522a:	db02      	blt.n	b5232 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b522c:	1862      	adds	r2, r4, r1
   b522e:	429a      	cmp	r2, r3
   b5230:	dd00      	ble.n	b5234 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5232:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5234:	682a      	ldr	r2, [r5, #0]
   b5236:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5238:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b523a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b523c:	1a52      	subs	r2, r2, r1
   b523e:	f002 fd2d 	bl	b7c9c <memmove>
    size_ -= n;
   b5242:	686a      	ldr	r2, [r5, #4]
   b5244:	1b12      	subs	r2, r2, r4
   b5246:	606a      	str	r2, [r5, #4]
}
   b5248:	bd38      	pop	{r3, r4, r5, pc}

000b524a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b524a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b524c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b524e:	4604      	mov	r4, r0
   b5250:	460d      	mov	r5, r1
   b5252:	ab01      	add	r3, sp, #4
   b5254:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5258:	f7ff fc6c 	bl	b4b34 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b525c:	4602      	mov	r2, r0
   b525e:	b138      	cbz	r0, b5270 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b5260:	9901      	ldr	r1, [sp, #4]
   b5262:	4620      	mov	r0, r4
   b5264:	f7ff ffdd 	bl	b5222 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5268:	4629      	mov	r1, r5
   b526a:	4620      	mov	r0, r4
   b526c:	f7ff ffed 	bl	b524a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b5270:	b003      	add	sp, #12
   b5272:	bd30      	pop	{r4, r5, pc}

000b5274 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b5274:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b5276:	460c      	mov	r4, r1
   b5278:	b929      	cbnz	r1, b5286 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b527a:	460a      	mov	r2, r1
   b527c:	4608      	mov	r0, r1
}
   b527e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5282:	f7ff b9cf 	b.w	b4624 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b5286:	2101      	movs	r1, #1
   b5288:	4620      	mov	r0, r4
   b528a:	f7ff ffde 	bl	b524a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b528e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5292:	2200      	movs	r2, #0
   b5294:	e7f3      	b.n	b527e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b5296 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5296:	b538      	push	{r3, r4, r5, lr}
   b5298:	4604      	mov	r4, r0
   b529a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b529c:	f7ff ff9f 	bl	b51de <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b52a0:	2800      	cmp	r0, #0
   b52a2:	db0a      	blt.n	b52ba <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b52a4:	4629      	mov	r1, r5
   b52a6:	4620      	mov	r0, r4
   b52a8:	f7ff ffe4 	bl	b5274 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b52ac:	2800      	cmp	r0, #0
   b52ae:	db04      	blt.n	b52ba <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b52b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b52b4:	2000      	movs	r0, #0
   b52b6:	f7ff b9bd 	b.w	b4634 <hal_ble_gap_start_advertising>
}
   b52ba:	bd38      	pop	{r3, r4, r5, pc}

000b52bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b52bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b52be:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b52c0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b52c2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52c4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b52c6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52c8:	f7fe fee3 	bl	b4092 <_Znwj>
   b52cc:	b118      	cbz	r0, b52d6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b52ce:	682b      	ldr	r3, [r5, #0]
   b52d0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b52d2:	686b      	ldr	r3, [r5, #4]
   b52d4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b52d6:	4b03      	ldr	r3, [pc, #12]	; (b52e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b52d8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b52da:	4b03      	ldr	r3, [pc, #12]	; (b52e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52dc:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b52de:	60a3      	str	r3, [r4, #8]
      }
   b52e0:	4620      	mov	r0, r4
   b52e2:	bd38      	pop	{r3, r4, r5, pc}
   b52e4:	000b4b75 	.word	0x000b4b75
   b52e8:	000b4b8d 	.word	0x000b4b8d

000b52ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b52ec:	680b      	ldr	r3, [r1, #0]
   b52ee:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b52f0:	b113      	cbz	r3, b52f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b52f2:	685a      	ldr	r2, [r3, #4]
   b52f4:	3201      	adds	r2, #1
   b52f6:	605a      	str	r2, [r3, #4]
      }
   b52f8:	4770      	bx	lr

000b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b52fa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b52fc:	f851 3b04 	ldr.w	r3, [r1], #4
   b5300:	4604      	mov	r4, r0
   b5302:	f840 3b04 	str.w	r3, [r0], #4
   b5306:	f7ff fff1 	bl	b52ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b530a:	6823      	ldr	r3, [r4, #0]
   b530c:	b90b      	cbnz	r3, b5312 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b530e:	f7ff fc27 	bl	b4b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5312:	4620      	mov	r0, r4
   b5314:	bd10      	pop	{r4, pc}

000b5316 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5316:	b510      	push	{r4, lr}
   b5318:	f851 3b04 	ldr.w	r3, [r1], #4
   b531c:	4604      	mov	r4, r0
   b531e:	f840 3b04 	str.w	r3, [r0], #4
   b5322:	f7ff ffe3 	bl	b52ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5326:	4620      	mov	r0, r4
   b5328:	bd10      	pop	{r4, pc}

000b532a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b532a:	b510      	push	{r4, lr}
   b532c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5330:	4604      	mov	r4, r0
   b5332:	f840 3b04 	str.w	r3, [r0], #4
   b5336:	f7ff ffd9 	bl	b52ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b533a:	4620      	mov	r0, r4
   b533c:	bd10      	pop	{r4, pc}

000b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b533e:	b510      	push	{r4, lr}
   b5340:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5342:	6800      	ldr	r0, [r0, #0]
   b5344:	b108      	cbz	r0, b534a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5346:	f7ff fc55 	bl	b4bf4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b534a:	4620      	mov	r0, r4
   b534c:	bd10      	pop	{r4, pc}

000b534e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b534e:	b510      	push	{r4, lr}
   b5350:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5352:	3004      	adds	r0, #4
   b5354:	f7ff fff3 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5358:	4620      	mov	r0, r4
   b535a:	bd10      	pop	{r4, pc}

000b535c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b535c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b535e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5362:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5364:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5368:	42ae      	cmp	r6, r5
   b536a:	d004      	beq.n	b5376 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b536c:	1d28      	adds	r0, r5, #4
   b536e:	f7ff ffe6 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5372:	3508      	adds	r5, #8
   b5374:	e7f8      	b.n	b5368 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5376:	6820      	ldr	r0, [r4, #0]
   b5378:	f7ff fb52 	bl	b4a20 <free>
}
   b537c:	4620      	mov	r0, r4
   b537e:	bd70      	pop	{r4, r5, r6, pc}

000b5380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5380:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5382:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5386:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5388:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b538c:	42ae      	cmp	r6, r5
   b538e:	d004      	beq.n	b539a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5390:	1d28      	adds	r0, r5, #4
   b5392:	f7ff ffd4 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5396:	3508      	adds	r5, #8
   b5398:	e7f8      	b.n	b538c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b539a:	6820      	ldr	r0, [r4, #0]
   b539c:	f7ff fb40 	bl	b4a20 <free>
}
   b53a0:	4620      	mov	r0, r4
   b53a2:	bd70      	pop	{r4, r5, r6, pc}

000b53a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b53a4:	b510      	push	{r4, lr}
   b53a6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b53a8:	3024      	adds	r0, #36	; 0x24
   b53aa:	f7ff ffe9 	bl	b5380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b53ae:	f104 0018 	add.w	r0, r4, #24
   b53b2:	f7ff ffd3 	bl	b535c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b53b6:	bd10      	pop	{r4, pc}

000b53b8 <__tcf_0>:
    static BleLocalDevice instance;
   b53b8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b53ba:	4b17      	ldr	r3, [pc, #92]	; (b5418 <__tcf_0+0x60>)
   b53bc:	681c      	ldr	r4, [r3, #0]
   b53be:	b354      	cbz	r4, b5416 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b53c0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b53c4:	f7ff fc02 	bl	b4bcc <_ZNSt14_Function_baseD1Ev>
   b53c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b53cc:	f7ff fbfe 	bl	b4bcc <_ZNSt14_Function_baseD1Ev>
   b53d0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b53d4:	f7ff fbfa 	bl	b4bcc <_ZNSt14_Function_baseD1Ev>
   b53d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b53dc:	f7ff fbf6 	bl	b4bcc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b53e0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b53e4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b53e8:	42ae      	cmp	r6, r5
   b53ea:	d004      	beq.n	b53f6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b53ec:	1d28      	adds	r0, r5, #4
   b53ee:	f7ff ffa6 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53f2:	3508      	adds	r5, #8
   b53f4:	e7f8      	b.n	b53e8 <__tcf_0+0x30>
    ::free(ptr);
   b53f6:	69a0      	ldr	r0, [r4, #24]
   b53f8:	f7ff fb12 	bl	b4a20 <free>
    ~BleLocalDeviceImpl() = default;
   b53fc:	f104 000c 	add.w	r0, r4, #12
   b5400:	f7ff ffbe 	bl	b5380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5404:	4620      	mov	r0, r4
   b5406:	f7ff ffa9 	bl	b535c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b540a:	4620      	mov	r0, r4
   b540c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b540e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5412:	f7fe be42 	b.w	b409a <_ZdlPvj>
   b5416:	bd70      	pop	{r4, r5, r6, pc}
   b5418:	2003e6a8 	.word	0x2003e6a8

000b541c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b541c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b541e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5420:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5424:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5428:	6803      	ldr	r3, [r0, #0]
   b542a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b542c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b542e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5430:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b5432:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b5434:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b5436:	f7ff ff82 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b543a:	b002      	add	sp, #8
   b543c:	bd10      	pop	{r4, pc}

000b543e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b543e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5440:	b510      	push	{r4, lr}
      if (_M_empty())
   b5442:	b90a      	cbnz	r2, b5448 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5444:	f002 fae8 	bl	b7a18 <_ZSt25__throw_bad_function_callv>
    }
   b5448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b544c:	68c3      	ldr	r3, [r0, #12]
   b544e:	4718      	bx	r3

000b5450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5450:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5452:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5454:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5456:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5458:	dd03      	ble.n	b5462 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b545a:	f7ff fae9 	bl	b4a30 <realloc>
            if (!d) {
   b545e:	b918      	cbnz	r0, b5468 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5460:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5462:	f7ff fadd 	bl	b4a20 <free>
        T* d = nullptr;
   b5466:	2000      	movs	r0, #0
        data_ = d;
   b5468:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b546a:	60a5      	str	r5, [r4, #8]
        return true;
   b546c:	2001      	movs	r0, #1
   b546e:	e7f7      	b.n	b5460 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5470:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5472:	6883      	ldr	r3, [r0, #8]
   b5474:	428b      	cmp	r3, r1
   b5476:	da02      	bge.n	b547e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5478:	f7ff ffea 	bl	b5450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b547c:	bd08      	pop	{r3, pc}
    return true;
   b547e:	2001      	movs	r0, #1
   b5480:	e7fc      	b.n	b547c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5486:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5488:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b548a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b548c:	4419      	add	r1, r3
   b548e:	6883      	ldr	r3, [r0, #8]
   b5490:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5492:	4604      	mov	r4, r0
   b5494:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5496:	dc12      	bgt.n	b54be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5498:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b549a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b549c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b549e:	1bd2      	subs	r2, r2, r7
   b54a0:	4631      	mov	r1, r6
   b54a2:	1970      	adds	r0, r6, r5
   b54a4:	f002 fbfa 	bl	b7c9c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b54a8:	462a      	mov	r2, r5
   b54aa:	4641      	mov	r1, r8
   b54ac:	4630      	mov	r0, r6
   b54ae:	f002 fbe7 	bl	b7c80 <memcpy>
    size_ += n;
   b54b2:	6863      	ldr	r3, [r4, #4]
   b54b4:	442b      	add	r3, r5
   b54b6:	6063      	str	r3, [r4, #4]
    return true;
   b54b8:	2001      	movs	r0, #1
}
   b54ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b54be:	f7ff ffc7 	bl	b5450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b54c2:	2800      	cmp	r0, #0
   b54c4:	d1e8      	bne.n	b5498 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b54c6:	e7f8      	b.n	b54ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b54c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b54c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54ca:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b54cc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b54d0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b54d2:	4604      	mov	r4, r0
   b54d4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b54d6:	da0b      	bge.n	b54f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b54d8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b54da:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b54dc:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b54de:	1b52      	subs	r2, r2, r5
   b54e0:	1c48      	adds	r0, r1, #1
   b54e2:	f002 fbdb 	bl	b7c9c <memmove>
    new(p) T(std::move(value));
   b54e6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b54e8:	6863      	ldr	r3, [r4, #4]
   b54ea:	3301      	adds	r3, #1
   b54ec:	6063      	str	r3, [r4, #4]
}
   b54ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b54f0:	3101      	adds	r1, #1
   b54f2:	f7ff ffad 	bl	b5450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b54f6:	2800      	cmp	r0, #0
   b54f8:	d1ee      	bne.n	b54d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b54fa:	e7f8      	b.n	b54ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b54fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b54fc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b54fe:	6841      	ldr	r1, [r0, #4]
   b5500:	f7ff bfe2 	b.w	b54c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5504 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5508:	4604      	mov	r4, r0
   b550a:	461d      	mov	r5, r3
   b550c:	460f      	mov	r7, r1
   b550e:	ab01      	add	r3, sp, #4
   b5510:	4690      	mov	r8, r2
   b5512:	460a      	mov	r2, r1
   b5514:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5518:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b551c:	f7ff fb0a 	bl	b4b34 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5520:	1cae      	adds	r6, r5, #2
   b5522:	6863      	ldr	r3, [r4, #4]
   b5524:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5526:	f1b9 0f00 	cmp.w	r9, #0
   b552a:	d126      	bne.n	b557a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b552c:	b328      	cbz	r0, b557a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b552e:	4433      	add	r3, r6
   b5530:	1a1b      	subs	r3, r3, r0
   b5532:	2bff      	cmp	r3, #255	; 0xff
   b5534:	d809      	bhi.n	b554a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5536:	9901      	ldr	r1, [sp, #4]
   b5538:	4620      	mov	r0, r4
   b553a:	f7ff fe72 	bl	b5222 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b553e:	6861      	ldr	r1, [r4, #4]
   b5540:	4620      	mov	r0, r4
   b5542:	4431      	add	r1, r6
   b5544:	f7ff ff94 	bl	b5470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5548:	b918      	cbnz	r0, b5552 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b554a:	6860      	ldr	r0, [r4, #4]
}
   b554c:	b003      	add	sp, #12
   b554e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5552:	1c6a      	adds	r2, r5, #1
   b5554:	9901      	ldr	r1, [sp, #4]
   b5556:	b2d2      	uxtb	r2, r2
   b5558:	4620      	mov	r0, r4
   b555a:	f7ff ffb5 	bl	b54c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b555e:	9901      	ldr	r1, [sp, #4]
   b5560:	463a      	mov	r2, r7
   b5562:	3101      	adds	r1, #1
   b5564:	4620      	mov	r0, r4
   b5566:	f7ff ffaf 	bl	b54c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b556a:	9901      	ldr	r1, [sp, #4]
   b556c:	462b      	mov	r3, r5
   b556e:	4642      	mov	r2, r8
   b5570:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5572:	4620      	mov	r0, r4
   b5574:	f7ff ff85 	bl	b5482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5578:	e7e7      	b.n	b554a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b557a:	18f1      	adds	r1, r6, r3
   b557c:	29ff      	cmp	r1, #255	; 0xff
   b557e:	d8e4      	bhi.n	b554a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5580:	4620      	mov	r0, r4
   b5582:	f7ff ff75 	bl	b5470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5586:	2800      	cmp	r0, #0
   b5588:	d0df      	beq.n	b554a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b558a:	1c69      	adds	r1, r5, #1
   b558c:	b2c9      	uxtb	r1, r1
   b558e:	4620      	mov	r0, r4
   b5590:	f7ff ffb4 	bl	b54fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5594:	4639      	mov	r1, r7
   b5596:	4620      	mov	r0, r4
   b5598:	f7ff ffb0 	bl	b54fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b559c:	6861      	ldr	r1, [r4, #4]
   b559e:	462b      	mov	r3, r5
   b55a0:	4642      	mov	r2, r8
   b55a2:	e7e6      	b.n	b5572 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b55a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b55a4:	b430      	push	{r4, r5}
   b55a6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b55aa:	b11a      	cbz	r2, b55b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b55ac:	9502      	str	r5, [sp, #8]
}
   b55ae:	bc30      	pop	{r4, r5}
   b55b0:	f7ff bfa8 	b.w	b5504 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b55b4:	6840      	ldr	r0, [r0, #4]
}
   b55b6:	bc30      	pop	{r4, r5}
   b55b8:	4770      	bx	lr

000b55ba <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b55ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b55bc:	2300      	movs	r3, #0
   b55be:	e9c0 3300 	strd	r3, r3, [r0]
   b55c2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b55c4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b55c6:	9300      	str	r3, [sp, #0]
   b55c8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b55ca:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b55ce:	4619      	mov	r1, r3
   b55d0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b55d4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b55d6:	f7ff ffe5 	bl	b55a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b55da:	4620      	mov	r0, r4
   b55dc:	b004      	add	sp, #16
   b55de:	bd10      	pop	{r4, pc}

000b55e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b55e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b55e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55e4:	4604      	mov	r4, r0
   b55e6:	460d      	mov	r5, r1
   b55e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b55ea:	d914      	bls.n	b5616 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b55ec:	4290      	cmp	r0, r2
   b55ee:	d213      	bcs.n	b5618 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b55f0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b55f4:	1a75      	subs	r5, r6, r1
   b55f6:	f1a1 0708 	sub.w	r7, r1, #8
   b55fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b55fc:	42b7      	cmp	r7, r6
   b55fe:	d018      	beq.n	b5632 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5600:	b11c      	cbz	r4, b560a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5602:	4631      	mov	r1, r6
   b5604:	4620      	mov	r0, r4
   b5606:	f7ff fe90 	bl	b532a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b560a:	1d30      	adds	r0, r6, #4
   b560c:	f7ff fe97 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5610:	3e08      	subs	r6, #8
   b5612:	3c08      	subs	r4, #8
   b5614:	e7f2      	b.n	b55fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5616:	d00c      	beq.n	b5632 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5618:	42b5      	cmp	r5, r6
   b561a:	d00a      	beq.n	b5632 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b561c:	b11c      	cbz	r4, b5626 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b561e:	4629      	mov	r1, r5
   b5620:	4620      	mov	r0, r4
   b5622:	f7ff fe82 	bl	b532a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5626:	1d28      	adds	r0, r5, #4
   b5628:	f7ff fe89 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b562c:	3508      	adds	r5, #8
   b562e:	3408      	adds	r4, #8
   b5630:	e7f2      	b.n	b5618 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5636:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5638:	6846      	ldr	r6, [r0, #4]
   b563a:	4668      	mov	r0, sp
   b563c:	f7ff fe75 	bl	b532a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5640:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5644:	429f      	cmp	r7, r3
   b5646:	db12      	blt.n	b566e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5648:	3701      	adds	r7, #1
        if (n > 0) {
   b564a:	2f00      	cmp	r7, #0
   b564c:	dd29      	ble.n	b56a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b564e:	00f8      	lsls	r0, r7, #3
   b5650:	f7ff f9de 	bl	b4a10 <malloc>
            if (!d) {
   b5654:	4605      	mov	r5, r0
   b5656:	b1f0      	cbz	r0, b5696 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5658:	e9d4 1200 	ldrd	r1, r2, [r4]
   b565c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5660:	f7ff ffbe 	bl	b55e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5664:	6820      	ldr	r0, [r4, #0]
   b5666:	f7ff f9db 	bl	b4a20 <free>
        data_ = d;
   b566a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b566c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b566e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5670:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5672:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5676:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b567a:	4631      	mov	r1, r6
   b567c:	f106 0008 	add.w	r0, r6, #8
   b5680:	f7ff ffae 	bl	b55e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5684:	b11e      	cbz	r6, b568e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5686:	4669      	mov	r1, sp
   b5688:	4630      	mov	r0, r6
   b568a:	f7ff fe4e 	bl	b532a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b568e:	6863      	ldr	r3, [r4, #4]
   b5690:	3301      	adds	r3, #1
   b5692:	6063      	str	r3, [r4, #4]
    return true;
   b5694:	2501      	movs	r5, #1
   b5696:	a801      	add	r0, sp, #4
   b5698:	f7ff fe51 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b569c:	4628      	mov	r0, r5
   b569e:	b003      	add	sp, #12
   b56a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b56a2:	2500      	movs	r5, #0
   b56a4:	e7de      	b.n	b5664 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b56a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b56a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b56a8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b56ac:	4605      	mov	r5, r0
   b56ae:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b56b0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b56b4:	42a6      	cmp	r6, r4
   b56b6:	d005      	beq.n	b56c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b56b8:	4639      	mov	r1, r7
   b56ba:	4620      	mov	r0, r4
   b56bc:	f7ff fce7 	bl	b508e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b56c0:	b108      	cbz	r0, b56c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b56c2:	b914      	cbnz	r4, b56ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b56c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b56c6:	3408      	adds	r4, #8
   b56c8:	e7f4      	b.n	b56b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b56ca:	1d20      	adds	r0, r4, #4
   b56cc:	f7ff fe37 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b56d0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b56d4:	f104 0108 	add.w	r1, r4, #8
   b56d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b56dc:	4620      	mov	r0, r4
   b56de:	f7ff ff7f 	bl	b55e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b56e2:	686b      	ldr	r3, [r5, #4]
   b56e4:	3b01      	subs	r3, #1
   b56e6:	606b      	str	r3, [r5, #4]
    return true;
   b56e8:	e7ec      	b.n	b56c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b56ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b56ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b56f0:	4605      	mov	r5, r0
   b56f2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b56f4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b56f6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b56f8:	f7ff faa6 	bl	b4c48 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b56fc:	682e      	ldr	r6, [r5, #0]
   b56fe:	1ef3      	subs	r3, r6, #3
   b5700:	2b0d      	cmp	r3, #13
   b5702:	d83c      	bhi.n	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5704:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5708:	0053000e 	.word	0x0053000e
   b570c:	00d1003b 	.word	0x00d1003b
   b5710:	003b003b 	.word	0x003b003b
   b5714:	003b003b 	.word	0x003b003b
   b5718:	009b003b 	.word	0x009b003b
   b571c:	009b009b 	.word	0x009b009b
   b5720:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b5724:	a804      	add	r0, sp, #16
   b5726:	f7ff fc7d 	bl	b5024 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b572a:	9b04      	ldr	r3, [sp, #16]
   b572c:	89aa      	ldrh	r2, [r5, #12]
   b572e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5730:	6869      	ldr	r1, [r5, #4]
   b5732:	9804      	ldr	r0, [sp, #16]
   b5734:	3108      	adds	r1, #8
   b5736:	3002      	adds	r0, #2
   b5738:	f7ff faa0 	bl	b4c7c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b573c:	a904      	add	r1, sp, #16
   b573e:	a806      	add	r0, sp, #24
   b5740:	f7ff fdf3 	bl	b532a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5744:	a906      	add	r1, sp, #24
   b5746:	f104 0018 	add.w	r0, r4, #24
   b574a:	f7ff ff73 	bl	b5634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b574e:	4605      	mov	r5, r0
   b5750:	a807      	add	r0, sp, #28
   b5752:	f7ff fdf4 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5756:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5758:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b575a:	b9b5      	cbnz	r5, b578a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b575c:	4b5d      	ldr	r3, [pc, #372]	; (b58d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b575e:	495e      	ldr	r1, [pc, #376]	; (b58d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5760:	9300      	str	r3, [sp, #0]
   b5762:	2032      	movs	r0, #50	; 0x32
   b5764:	462b      	mov	r3, r5
   b5766:	aa06      	add	r2, sp, #24
   b5768:	9507      	str	r5, [sp, #28]
   b576a:	f7ff f8a5 	bl	b48b8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b576e:	9b04      	ldr	r3, [sp, #16]
   b5770:	4629      	mov	r1, r5
   b5772:	8818      	ldrh	r0, [r3, #0]
   b5774:	f7fe ff66 	bl	b4644 <hal_ble_gap_disconnect>
   b5778:	a805      	add	r0, sp, #20
   b577a:	f7ff fde0 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b577e:	a803      	add	r0, sp, #12
   b5780:	f7ff fa70 	bl	b4c64 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5784:	b00e      	add	sp, #56	; 0x38
   b5786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b578a:	4a54      	ldr	r2, [pc, #336]	; (b58dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b578c:	9200      	str	r2, [sp, #0]
   b578e:	2300      	movs	r3, #0
   b5790:	4951      	ldr	r1, [pc, #324]	; (b58d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5792:	9307      	str	r3, [sp, #28]
   b5794:	aa06      	add	r2, sp, #24
   b5796:	2001      	movs	r0, #1
   b5798:	f7ff f88e 	bl	b48b8 <log_message>
                if (impl->connectedCallback_) {
   b579c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b579e:	2b00      	cmp	r3, #0
   b57a0:	d0ea      	beq.n	b5778 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b57a2:	a904      	add	r1, sp, #16
   b57a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b57a8:	f7ff fe49 	bl	b543e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b57ac:	e7e4      	b.n	b5778 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b57ae:	89a9      	ldrh	r1, [r5, #12]
   b57b0:	4620      	mov	r0, r4
   b57b2:	f7ff fba1 	bl	b4ef8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b57b6:	4606      	mov	r6, r0
   b57b8:	2800      	cmp	r0, #0
   b57ba:	d0e0      	beq.n	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b57bc:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b57be:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b57c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b57c6:	8029      	strh	r1, [r5, #0]
   b57c8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b57cc:	429a      	cmp	r2, r3
   b57ce:	d003      	beq.n	b57d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b57d0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b57d4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b57d6:	e7f9      	b.n	b57cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b57d8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b57dc:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b57e0:	45b8      	cmp	r8, r7
   b57e2:	d004      	beq.n	b57ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b57e4:	1d38      	adds	r0, r7, #4
   b57e6:	f7ff fdaa 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b57ea:	3708      	adds	r7, #8
   b57ec:	e7f8      	b.n	b57e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b57ee:	2300      	movs	r3, #0
   b57f0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b57f2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b57f6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b57fa:	45b8      	cmp	r8, r7
   b57fc:	d004      	beq.n	b5808 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b57fe:	1d38      	adds	r0, r7, #4
   b5800:	f7ff fd9d 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5804:	3708      	adds	r7, #8
   b5806:	e7f8      	b.n	b57fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b5808:	2300      	movs	r3, #0
   b580a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b580c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b580e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5810:	b123      	cbz	r3, b581c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                            impl->disconnectedCallback_(*peer);
   b5812:	4631      	mov	r1, r6
   b5814:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5818:	f7ff fe11 	bl	b543e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        impl->peers_.removeOne(*peer);
   b581c:	4631      	mov	r1, r6
   b581e:	f104 0018 	add.w	r0, r4, #24
   b5822:	f7ff ff40 	bl	b56a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b5826:	2220      	movs	r2, #32
   b5828:	2300      	movs	r3, #0
   b582a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b582e:	4a2c      	ldr	r2, [pc, #176]	; (b58e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b5830:	9200      	str	r2, [sp, #0]
   b5832:	4929      	ldr	r1, [pc, #164]	; (b58d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5834:	aa06      	add	r2, sp, #24
   b5836:	2001      	movs	r0, #1
   b5838:	f7ff f83e 	bl	b48b8 <log_message>
   b583c:	e79f      	b.n	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b583e:	89a9      	ldrh	r1, [r5, #12]
   b5840:	4620      	mov	r0, r4
   b5842:	f7ff fb59 	bl	b4ef8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5846:	2800      	cmp	r0, #0
   b5848:	d099      	beq.n	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b584a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b584c:	2b00      	cmp	r3, #0
   b584e:	d096      	beq.n	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b5850:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5852:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5854:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5858:	d001      	beq.n	b585e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b585a:	2e10      	cmp	r6, #16
   b585c:	d117      	bne.n	b588e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b585e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5860:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5862:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5864:	2506      	movs	r5, #6
                        };
   b5866:	f88d 3015 	strb.w	r3, [sp, #21]
   b586a:	9104      	str	r1, [sp, #16]
   b586c:	f88d 2014 	strb.w	r2, [sp, #20]
   b5870:	9006      	str	r0, [sp, #24]
   b5872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5876:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5878:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b587c:	9508      	str	r5, [sp, #32]
   b587e:	e883 0003 	stmia.w	r3, {r0, r1}
   b5882:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5884:	a906      	add	r1, sp, #24
   b5886:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b588a:	4798      	blx	r3
   b588c:	e777      	b.n	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b588e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5890:	bf01      	itttt	eq
   b5892:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5894:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5896:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b589a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b589c:	bf0f      	iteee	eq
   b589e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b58a2:	461a      	movne	r2, r3
   b58a4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b58a6:	461d      	movne	r5, r3
   b58a8:	e7dd      	b.n	b5866 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b58aa:	89a9      	ldrh	r1, [r5, #12]
   b58ac:	4620      	mov	r0, r4
   b58ae:	f7ff fb23 	bl	b4ef8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b58b2:	4601      	mov	r1, r0
   b58b4:	2800      	cmp	r0, #0
   b58b6:	f43f af62 	beq.w	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b58ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b58bc:	2b00      	cmp	r3, #0
   b58be:	f43f af5e 	beq.w	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b58c2:	686b      	ldr	r3, [r5, #4]
   b58c4:	9306      	str	r3, [sp, #24]
   b58c6:	aa06      	add	r2, sp, #24
   b58c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b58ca:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b58ce:	4798      	blx	r3
   b58d0:	e755      	b.n	b577e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b58d2:	bf00      	nop
   b58d4:	000b81c8 	.word	0x000b81c8
   b58d8:	000b8147 	.word	0x000b8147
   b58dc:	000b81ee 	.word	0x000b81ee
   b58e0:	000b820b 	.word	0x000b820b

000b58e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b58e4:	b513      	push	{r0, r1, r4, lr}
   b58e6:	460b      	mov	r3, r1
   b58e8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58ea:	e9d0 0100 	ldrd	r0, r1, [r0]
   b58ee:	466c      	mov	r4, sp
   b58f0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b58f4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b58f8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b58fc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5900:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5904:	b002      	add	sp, #8
   b5906:	bd10      	pop	{r4, pc}

000b5908 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b5908:	b538      	push	{r3, r4, r5, lr}
   b590a:	4605      	mov	r5, r0
   b590c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b590e:	f7ff ffe9 	bl	b58e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5912:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5914:	68a2      	ldr	r2, [r4, #8]
   b5916:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5918:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b591a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b591c:	68e2      	ldr	r2, [r4, #12]
   b591e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5920:	60e3      	str	r3, [r4, #12]
      }
   b5922:	bd38      	pop	{r3, r4, r5, pc}

000b5924 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b5924:	b570      	push	{r4, r5, r6, lr}
   b5926:	4604      	mov	r4, r0
   b5928:	b08c      	sub	sp, #48	; 0x30
   b592a:	460e      	mov	r6, r1
   b592c:	9201      	str	r2, [sp, #4]
   b592e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b5930:	f7ff fac2 	bl	b4eb8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b5934:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b5936:	9901      	ldr	r1, [sp, #4]
   b5938:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b593c:	f001 fe3c 	bl	b75b8 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b5940:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b5944:	b1cd      	cbz	r5, b597a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b5946:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5948:	9502      	str	r5, [sp, #8]
   b594a:	a902      	add	r1, sp, #8
   b594c:	a804      	add	r0, sp, #16
   b594e:	9303      	str	r3, [sp, #12]
   b5950:	f7ff fcb4 	bl	b52bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b5954:	2300      	movs	r3, #0
	__x.swap(*this);
   b5956:	a908      	add	r1, sp, #32
   b5958:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b595a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b595c:	f7ff ffd4 	bl	b5908 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b5960:	4631      	mov	r1, r6
   b5962:	a808      	add	r0, sp, #32
   b5964:	f7ff ffd0 	bl	b5908 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b5968:	a808      	add	r0, sp, #32
   b596a:	f7ff f92f 	bl	b4bcc <_ZNSt14_Function_baseD1Ev>
   b596e:	a804      	add	r0, sp, #16
   b5970:	f7ff f92c 	bl	b4bcc <_ZNSt14_Function_baseD1Ev>
    }
   b5974:	4620      	mov	r0, r4
   b5976:	b00c      	add	sp, #48	; 0x30
   b5978:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b597a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b597c:	e7ea      	b.n	b5954 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b5980 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b5980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5984:	b087      	sub	sp, #28
   b5986:	461d      	mov	r5, r3
   b5988:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b598c:	4680      	mov	r8, r0
   b598e:	468b      	mov	fp, r1
   b5990:	4692      	mov	sl, r2
   b5992:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5994:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5996:	2200      	movs	r2, #0
   b5998:	2068      	movs	r0, #104	; 0x68
   b599a:	9102      	str	r1, [sp, #8]
   b599c:	9204      	str	r2, [sp, #16]
   b599e:	f7fe fb78 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b59a2:	1e06      	subs	r6, r0, #0
   b59a4:	f106 090c 	add.w	r9, r6, #12
   b59a8:	d018      	beq.n	b59dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b59aa:	2201      	movs	r2, #1
	: _M_impl(__a)
   b59ac:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b59ae:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b59b2:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b59b4:	4a15      	ldr	r2, [pc, #84]	; (b5a0c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b59b6:	f847 2b20 	str.w	r2, [r7], #32
   b59ba:	9b03      	ldr	r3, [sp, #12]
   b59bc:	9100      	str	r1, [sp, #0]
   b59be:	465a      	mov	r2, fp
   b59c0:	4651      	mov	r1, sl
   b59c2:	4648      	mov	r0, r9
   b59c4:	f7ff ffae 	bl	b5924 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b59c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b59cc:	682b      	ldr	r3, [r5, #0]
   b59ce:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b59d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b59d2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b59d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b59d8:	6823      	ldr	r3, [r4, #0]
   b59da:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b59dc:	a904      	add	r1, sp, #16
   b59de:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b59e0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b59e4:	f7ff fd1a 	bl	b541c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b59e8:	a805      	add	r0, sp, #20
   b59ea:	f7ff fca8 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b59ee:	f8d8 3000 	ldr.w	r3, [r8]
   b59f2:	b93b      	cbnz	r3, b5a04 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b59f4:	4a06      	ldr	r2, [pc, #24]	; (b5a10 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b59f6:	4907      	ldr	r1, [pc, #28]	; (b5a14 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b59f8:	200a      	movs	r0, #10
}
   b59fa:	b007      	add	sp, #28
   b59fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b5a00:	f7fe bf52 	b.w	b48a8 <panic_>
}
   b5a04:	b007      	add	sp, #28
   b5a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a0a:	bf00      	nop
   b5a0c:	000b8274 	.word	0x000b8274
   b5a10:	000b4749 	.word	0x000b4749
   b5a14:	000b8130 	.word	0x000b8130

000b5a18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5a18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a1c:	4604      	mov	r4, r0
   b5a1e:	460d      	mov	r5, r1
   b5a20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5a22:	d914      	bls.n	b5a4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5a24:	4290      	cmp	r0, r2
   b5a26:	d213      	bcs.n	b5a50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5a28:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5a2c:	1a75      	subs	r5, r6, r1
   b5a2e:	f1a1 0708 	sub.w	r7, r1, #8
   b5a32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5a34:	42b7      	cmp	r7, r6
   b5a36:	d018      	beq.n	b5a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5a38:	b11c      	cbz	r4, b5a42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5a3a:	4631      	mov	r1, r6
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	f7ff fc6a 	bl	b5316 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5a42:	1d30      	adds	r0, r6, #4
   b5a44:	f7ff fc7b 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5a48:	3e08      	subs	r6, #8
   b5a4a:	3c08      	subs	r4, #8
   b5a4c:	e7f2      	b.n	b5a34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5a4e:	d00c      	beq.n	b5a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5a50:	42b5      	cmp	r5, r6
   b5a52:	d00a      	beq.n	b5a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5a54:	b11c      	cbz	r4, b5a5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5a56:	4629      	mov	r1, r5
   b5a58:	4620      	mov	r0, r4
   b5a5a:	f7ff fc5c 	bl	b5316 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5a5e:	1d28      	adds	r0, r5, #4
   b5a60:	f7ff fc6d 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5a64:	3508      	adds	r5, #8
   b5a66:	3408      	adds	r4, #8
   b5a68:	e7f2      	b.n	b5a50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5a6c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5a6e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5a70:	4605      	mov	r5, r0
        if (n > 0) {
   b5a72:	dd11      	ble.n	b5a98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5a74:	00f0      	lsls	r0, r6, #3
   b5a76:	f7fe ffcb 	bl	b4a10 <malloc>
            if (!d) {
   b5a7a:	4604      	mov	r4, r0
   b5a7c:	b158      	cbz	r0, b5a96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5a7e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5a82:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5a86:	f7ff ffc7 	bl	b5a18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5a8a:	6828      	ldr	r0, [r5, #0]
   b5a8c:	f7fe ffc8 	bl	b4a20 <free>
        data_ = d;
   b5a90:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5a92:	60ae      	str	r6, [r5, #8]
        return true;
   b5a94:	2001      	movs	r0, #1
    }
   b5a96:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5a98:	2400      	movs	r4, #0
   b5a9a:	e7f6      	b.n	b5a8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5a9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a9e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5aa0:	6845      	ldr	r5, [r0, #4]
   b5aa2:	4668      	mov	r0, sp
   b5aa4:	f7ff fc37 	bl	b5316 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5aa8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5aac:	4299      	cmp	r1, r3
   b5aae:	da10      	bge.n	b5ad2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5ab0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5ab2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5ab4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5ab8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5abc:	4629      	mov	r1, r5
   b5abe:	f105 0008 	add.w	r0, r5, #8
   b5ac2:	f7ff ffa9 	bl	b5a18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5ac6:	b98d      	cbnz	r5, b5aec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5ac8:	6863      	ldr	r3, [r4, #4]
   b5aca:	3301      	adds	r3, #1
   b5acc:	6063      	str	r3, [r4, #4]
    return true;
   b5ace:	2601      	movs	r6, #1
   b5ad0:	e006      	b.n	b5ae0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5ad2:	3101      	adds	r1, #1
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	f7ff ffc9 	bl	b5a6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5ada:	4606      	mov	r6, r0
   b5adc:	2800      	cmp	r0, #0
   b5ade:	d1e7      	bne.n	b5ab0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5ae0:	a801      	add	r0, sp, #4
   b5ae2:	f7ff fc2c 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ae6:	4630      	mov	r0, r6
   b5ae8:	b002      	add	sp, #8
   b5aea:	bd70      	pop	{r4, r5, r6, pc}
   b5aec:	4669      	mov	r1, sp
   b5aee:	4628      	mov	r0, r5
   b5af0:	f7ff fc11 	bl	b5316 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5af4:	e7e8      	b.n	b5ac8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5af6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5af6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5afa:	4604      	mov	r4, r0
   b5afc:	460d      	mov	r5, r1
   b5afe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b00:	d914      	bls.n	b5b2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5b02:	4290      	cmp	r0, r2
   b5b04:	d213      	bcs.n	b5b2e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5b06:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5b0a:	1a75      	subs	r5, r6, r1
   b5b0c:	f1a1 0708 	sub.w	r7, r1, #8
   b5b10:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b12:	42b7      	cmp	r7, r6
   b5b14:	d018      	beq.n	b5b48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5b16:	b11c      	cbz	r4, b5b20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b5b18:	4631      	mov	r1, r6
   b5b1a:	4620      	mov	r0, r4
   b5b1c:	f7ff fbed 	bl	b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5b20:	1d30      	adds	r0, r6, #4
   b5b22:	f7ff fc0c 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5b26:	3e08      	subs	r6, #8
   b5b28:	3c08      	subs	r4, #8
   b5b2a:	e7f2      	b.n	b5b12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5b2c:	d00c      	beq.n	b5b48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5b2e:	42b5      	cmp	r5, r6
   b5b30:	d00a      	beq.n	b5b48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5b32:	b11c      	cbz	r4, b5b3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5b34:	4629      	mov	r1, r5
   b5b36:	4620      	mov	r0, r4
   b5b38:	f7ff fbdf 	bl	b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5b3c:	1d28      	adds	r0, r5, #4
   b5b3e:	f7ff fbfe 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5b42:	3508      	adds	r5, #8
   b5b44:	3408      	adds	r4, #8
   b5b46:	e7f2      	b.n	b5b2e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5b4a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5b4c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5b4e:	4605      	mov	r5, r0
        if (n > 0) {
   b5b50:	dd11      	ble.n	b5b76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5b52:	00f0      	lsls	r0, r6, #3
   b5b54:	f7fe ff5c 	bl	b4a10 <malloc>
            if (!d) {
   b5b58:	4604      	mov	r4, r0
   b5b5a:	b158      	cbz	r0, b5b74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5b5c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5b60:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5b64:	f7ff ffc7 	bl	b5af6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5b68:	6828      	ldr	r0, [r5, #0]
   b5b6a:	f7fe ff59 	bl	b4a20 <free>
        data_ = d;
   b5b6e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5b70:	60ae      	str	r6, [r5, #8]
        return true;
   b5b72:	2001      	movs	r0, #1
    }
   b5b74:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5b76:	2400      	movs	r4, #0
   b5b78:	e7f6      	b.n	b5b68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5b7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5b7c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5b7e:	6845      	ldr	r5, [r0, #4]
   b5b80:	4668      	mov	r0, sp
   b5b82:	f7ff fbba 	bl	b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b86:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5b8a:	4299      	cmp	r1, r3
   b5b8c:	da10      	bge.n	b5bb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5b8e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5b90:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5b92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5b96:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5b9a:	4629      	mov	r1, r5
   b5b9c:	f105 0008 	add.w	r0, r5, #8
   b5ba0:	f7ff ffa9 	bl	b5af6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5ba4:	b98d      	cbnz	r5, b5bca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5ba6:	6863      	ldr	r3, [r4, #4]
   b5ba8:	3301      	adds	r3, #1
   b5baa:	6063      	str	r3, [r4, #4]
    return true;
   b5bac:	2601      	movs	r6, #1
   b5bae:	e006      	b.n	b5bbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5bb0:	3101      	adds	r1, #1
   b5bb2:	4620      	mov	r0, r4
   b5bb4:	f7ff ffc9 	bl	b5b4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5bb8:	4606      	mov	r6, r0
   b5bba:	2800      	cmp	r0, #0
   b5bbc:	d1e7      	bne.n	b5b8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5bbe:	a801      	add	r0, sp, #4
   b5bc0:	f7ff fbbd 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5bc4:	4630      	mov	r0, r6
   b5bc6:	b002      	add	sp, #8
   b5bc8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b5bca:	4669      	mov	r1, sp
   b5bcc:	4628      	mov	r0, r5
   b5bce:	f7ff fb94 	bl	b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5bd2:	e7e8      	b.n	b5ba6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5bd4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bd8:	4617      	mov	r7, r2
   b5bda:	b0a1      	sub	sp, #132	; 0x84
   b5bdc:	4680      	mov	r8, r0
    WiringBleLock lk;
   b5bde:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5be0:	460e      	mov	r6, r1
    WiringBleLock lk;
   b5be2:	f7ff f831 	bl	b4c48 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5be6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b5be8:	7923      	ldrb	r3, [r4, #4]
   b5bea:	b953      	cbnz	r3, b5c02 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b5bec:	4639      	mov	r1, r7
   b5bee:	4640      	mov	r0, r8
   b5bf0:	f7ff fb83 	bl	b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b5bf4:	a80a      	add	r0, sp, #40	; 0x28
   b5bf6:	f7ff f835 	bl	b4c64 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b5bfa:	4640      	mov	r0, r8
   b5bfc:	b021      	add	sp, #132	; 0x84
   b5bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5c02:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b5c04:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b5c08:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b5c0c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b5c0e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b5c12:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b5c16:	9b03      	ldr	r3, [sp, #12]
   b5c18:	429d      	cmp	r5, r3
   b5c1a:	d021      	beq.n	b5c60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b5c1c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b5c20:	4658      	mov	r0, fp
   b5c22:	f109 0114 	add.w	r1, r9, #20
   b5c26:	f7ff f8bc 	bl	b4da2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b5c2a:	b1b8      	cbz	r0, b5c5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b5c2c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b5c30:	4650      	mov	r0, sl
   b5c32:	f7ff f8b6 	bl	b4da2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b5c36:	b188      	cbz	r0, b5c5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b5c38:	6823      	ldr	r3, [r4, #0]
   b5c3a:	f8d9 2000 	ldr.w	r2, [r9]
   b5c3e:	4053      	eors	r3, r2
   b5c40:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b5c44:	d10a      	bne.n	b5c5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b5c46:	2220      	movs	r2, #32
   b5c48:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b5c4c:	4a5e      	ldr	r2, [pc, #376]	; (b5dc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b5c4e:	9200      	str	r2, [sp, #0]
   b5c50:	aa15      	add	r2, sp, #84	; 0x54
   b5c52:	495e      	ldr	r1, [pc, #376]	; (b5dcc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b5c54:	2032      	movs	r0, #50	; 0x32
   b5c56:	f7fe fe2f 	bl	b48b8 <log_message>
   b5c5a:	e7c7      	b.n	b5bec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b5c5c:	3508      	adds	r5, #8
   b5c5e:	e7da      	b.n	b5c16 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b5c60:	4650      	mov	r0, sl
   b5c62:	f7ff f86f 	bl	b4d44 <_ZNK8particle7BleUuid7isValidEv>
   b5c66:	b960      	cbnz	r0, b5c82 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b5c68:	4959      	ldr	r1, [pc, #356]	; (b5dd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b5c6a:	2201      	movs	r2, #1
   b5c6c:	a815      	add	r0, sp, #84	; 0x54
   b5c6e:	ad15      	add	r5, sp, #84	; 0x54
   b5c70:	f7ff f840 	bl	b4cf4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b5c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c76:	46d4      	mov	ip, sl
   b5c78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5c7c:	682b      	ldr	r3, [r5, #0]
   b5c7e:	f8cc 3000 	str.w	r3, [ip]
   b5c82:	6833      	ldr	r3, [r6, #0]
   b5c84:	e9d3 5300 	ldrd	r5, r3, [r3]
   b5c88:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b5c8c:	455d      	cmp	r5, fp
   b5c8e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b5c90:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b5c92:	d06e      	beq.n	b5d72 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b5c94:	f855 0b08 	ldr.w	r0, [r5], #8
   b5c98:	f7ff f883 	bl	b4da2 <_ZNK8particle7BleUuideqERKS0_>
   b5c9c:	2800      	cmp	r0, #0
   b5c9e:	d0f5      	beq.n	b5c8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b5ca0:	f104 0a14 	add.w	sl, r4, #20
   b5ca4:	4650      	mov	r0, sl
   b5ca6:	f7ff f84d 	bl	b4d44 <_ZNK8particle7BleUuid7isValidEv>
   b5caa:	b988      	cbnz	r0, b5cd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b5cac:	4b49      	ldr	r3, [pc, #292]	; (b5dd4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5cae:	4948      	ldr	r1, [pc, #288]	; (b5dd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b5cb0:	881a      	ldrh	r2, [r3, #0]
   b5cb2:	3201      	adds	r2, #1
   b5cb4:	b292      	uxth	r2, r2
   b5cb6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5cb8:	a815      	add	r0, sp, #84	; 0x54
   b5cba:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b5cbc:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5cbe:	f7ff f838 	bl	b4d32 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b5cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cc4:	46d4      	mov	ip, sl
   b5cc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5cca:	682b      	ldr	r3, [r5, #0]
   b5ccc:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b5cd0:	4b41      	ldr	r3, [pc, #260]	; (b5dd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b5cd2:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b5cd4:	2228      	movs	r2, #40	; 0x28
   b5cd6:	2100      	movs	r1, #0
   b5cd8:	a816      	add	r0, sp, #88	; 0x58
   b5cda:	f001 fff9 	bl	b7cd0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b5cde:	4651      	mov	r1, sl
   b5ce0:	a804      	add	r0, sp, #16
   b5ce2:	f7ff f841 	bl	b4d68 <_ZN8particle7BleUuid7halUUIDEv>
   b5ce6:	ab04      	add	r3, sp, #16
   b5ce8:	aa18      	add	r2, sp, #96	; 0x60
   b5cea:	f10d 0c20 	add.w	ip, sp, #32
   b5cee:	6818      	ldr	r0, [r3, #0]
   b5cf0:	6859      	ldr	r1, [r3, #4]
   b5cf2:	4615      	mov	r5, r2
   b5cf4:	c503      	stmia	r5!, {r0, r1}
   b5cf6:	3308      	adds	r3, #8
   b5cf8:	4563      	cmp	r3, ip
   b5cfa:	462a      	mov	r2, r5
   b5cfc:	d1f7      	bne.n	b5cee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b5cfe:	6818      	ldr	r0, [r3, #0]
   b5d00:	6028      	str	r0, [r5, #0]
    return value_;
   b5d02:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b5d04:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b5d08:	f8d9 3000 	ldr.w	r3, [r9]
   b5d0c:	8a9b      	ldrh	r3, [r3, #20]
   b5d0e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b5d12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5d14:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b5d16:	4b31      	ldr	r3, [pc, #196]	; (b5ddc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5d18:	2200      	movs	r2, #0
   b5d1a:	1da1      	adds	r1, r4, #6
   b5d1c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b5d1e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5d22:	f7fe fcc1 	bl	b46a8 <hal_ble_gatt_server_add_characteristic>
   b5d26:	2800      	cmp	r0, #0
   b5d28:	f47f af60 	bne.w	b5bec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b5d2c:	2301      	movs	r3, #1
   b5d2e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b5d30:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b5d32:	4639      	mov	r1, r7
        return characteristics_;
   b5d34:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b5d36:	a80d      	add	r0, sp, #52	; 0x34
   b5d38:	f7ff fadf 	bl	b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	a90d      	add	r1, sp, #52	; 0x34
   b5d40:	f7ff ff1b 	bl	b5b7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b5d44:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5d46:	a80e      	add	r0, sp, #56	; 0x38
   b5d48:	f7ff faf9 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d4c:	2c00      	cmp	r4, #0
   b5d4e:	f47f af4d 	bne.w	b5bec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b5d52:	2320      	movs	r3, #32
   b5d54:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b5d58:	4b21      	ldr	r3, [pc, #132]	; (b5de0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b5d5a:	9300      	str	r3, [sp, #0]
   b5d5c:	aa0d      	add	r2, sp, #52	; 0x34
   b5d5e:	4623      	mov	r3, r4
   b5d60:	e777      	b.n	b5c52 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b5d62:	4639      	mov	r1, r7
   b5d64:	4640      	mov	r0, r8
   b5d66:	f7ff fac8 	bl	b52fa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5d6a:	a80c      	add	r0, sp, #48	; 0x30
   b5d6c:	f7ff fae7 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d70:	e740      	b.n	b5bf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b5d72:	a80b      	add	r0, sp, #44	; 0x2c
   b5d74:	f7ff f932 	bl	b4fdc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b5d78:	4651      	mov	r1, sl
   b5d7a:	a815      	add	r0, sp, #84	; 0x54
   b5d7c:	f7fe fff4 	bl	b4d68 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b5d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5d82:	2300      	movs	r3, #0
   b5d84:	3214      	adds	r2, #20
   b5d86:	a915      	add	r1, sp, #84	; 0x54
   b5d88:	2001      	movs	r0, #1
   b5d8a:	f7fe fc65 	bl	b4658 <hal_ble_gatt_server_add_service>
   b5d8e:	2800      	cmp	r0, #0
   b5d90:	d1e7      	bne.n	b5d62 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b5d92:	6835      	ldr	r5, [r6, #0]
   b5d94:	a90b      	add	r1, sp, #44	; 0x2c
   b5d96:	a80d      	add	r0, sp, #52	; 0x34
   b5d98:	f7ff fabd 	bl	b5316 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b5d9c:	4628      	mov	r0, r5
   b5d9e:	a90d      	add	r1, sp, #52	; 0x34
   b5da0:	f7ff fe7c 	bl	b5a9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b5da4:	4605      	mov	r5, r0
   b5da6:	a80e      	add	r0, sp, #56	; 0x38
   b5da8:	f7ff fac9 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5dac:	2d00      	cmp	r5, #0
   b5dae:	d0d8      	beq.n	b5d62 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b5db0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b5db2:	6853      	ldr	r3, [r2, #4]
   b5db4:	6812      	ldr	r2, [r2, #0]
   b5db6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b5dba:	3b01      	subs	r3, #1
   b5dbc:	a80c      	add	r0, sp, #48	; 0x30
   b5dbe:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b5dc2:	f7ff fabc 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5dc6:	e76b      	b.n	b5ca0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b5dc8:	000b8218 	.word	0x000b8218
   b5dcc:	000b8147 	.word	0x000b8147
   b5dd0:	000b82de 	.word	0x000b82de
   b5dd4:	2003e6a0 	.word	0x2003e6a0
   b5dd8:	002c0003 	.word	0x002c0003
   b5ddc:	000b5175 	.word	0x000b5175
   b5de0:	000b8243 	.word	0x000b8243

000b5de4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b5de4:	4802      	ldr	r0, [pc, #8]	; (b5df0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5de6:	2300      	movs	r3, #0
   b5de8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b5dea:	f7fe bc85 	b.w	b46f8 <os_mutex_recursive_create>
   b5dee:	bf00      	nop
   b5df0:	2003e6a4 	.word	0x2003e6a4

000b5df4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5df4:	2200      	movs	r2, #0
   b5df6:	6840      	ldr	r0, [r0, #4]
   b5df8:	4611      	mov	r1, r2
   b5dfa:	f7fe bde1 	b.w	b49c0 <network_listening>

000b5dfe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5dfe:	2200      	movs	r2, #0
   b5e00:	6840      	ldr	r0, [r0, #4]
   b5e02:	4611      	mov	r1, r2
   b5e04:	f7fe bdec 	b.w	b49e0 <network_get_listen_timeout>

000b5e08 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5e08:	6840      	ldr	r0, [r0, #4]
   b5e0a:	2200      	movs	r2, #0
   b5e0c:	f7fe bde0 	b.w	b49d0 <network_set_listen_timeout>

000b5e10 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5e10:	6840      	ldr	r0, [r0, #4]
   b5e12:	2200      	movs	r2, #0
   b5e14:	f081 0101 	eor.w	r1, r1, #1
   b5e18:	f7fe bdca 	b.w	b49b0 <network_listen>

000b5e1c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5e1c:	2300      	movs	r3, #0
   b5e1e:	6840      	ldr	r0, [r0, #4]
   b5e20:	461a      	mov	r2, r3
   b5e22:	4619      	mov	r1, r3
   b5e24:	f7fe bdbc 	b.w	b49a0 <network_off>

000b5e28 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5e28:	2300      	movs	r3, #0
   b5e2a:	6840      	ldr	r0, [r0, #4]
   b5e2c:	461a      	mov	r2, r3
   b5e2e:	4619      	mov	r1, r3
   b5e30:	f7fe bdae 	b.w	b4990 <network_on>

000b5e34 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5e34:	2200      	movs	r2, #0
   b5e36:	6840      	ldr	r0, [r0, #4]
   b5e38:	4611      	mov	r1, r2
   b5e3a:	f7fe bda1 	b.w	b4980 <network_ready>

000b5e3e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5e3e:	2200      	movs	r2, #0
   b5e40:	6840      	ldr	r0, [r0, #4]
   b5e42:	4611      	mov	r1, r2
   b5e44:	f7fe bd8c 	b.w	b4960 <network_connecting>

000b5e48 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5e48:	6840      	ldr	r0, [r0, #4]
   b5e4a:	2200      	movs	r2, #0
   b5e4c:	2102      	movs	r1, #2
   b5e4e:	f7fe bd8f 	b.w	b4970 <network_disconnect>

000b5e52 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5e52:	2300      	movs	r3, #0
   b5e54:	6840      	ldr	r0, [r0, #4]
   b5e56:	461a      	mov	r2, r3
   b5e58:	f7fe bd7a 	b.w	b4950 <network_connect>

000b5e5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5e5c:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5e5e:	2203      	movs	r2, #3
   b5e60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5e62:	4a02      	ldr	r2, [pc, #8]	; (b5e6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5e64:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5e66:	4770      	bx	lr
   b5e68:	2003e6ac 	.word	0x2003e6ac
   b5e6c:	000b8308 	.word	0x000b8308

000b5e70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5e70:	4770      	bx	lr

000b5e72 <_ZN9IPAddressD0Ev>:
   b5e72:	b510      	push	{r4, lr}
   b5e74:	2118      	movs	r1, #24
   b5e76:	4604      	mov	r4, r0
   b5e78:	f7fe f90f 	bl	b409a <_ZdlPvj>
   b5e7c:	4620      	mov	r0, r4
   b5e7e:	bd10      	pop	{r4, pc}

000b5e80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5e80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5e82:	7d03      	ldrb	r3, [r0, #20]
   b5e84:	2b06      	cmp	r3, #6
{
   b5e86:	b08d      	sub	sp, #52	; 0x34
   b5e88:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5e8a:	f100 0704 	add.w	r7, r0, #4
   b5e8e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5e92:	d012      	beq.n	b5eba <_ZNK9IPAddress7printToER5Print+0x3a>
   b5e94:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5e98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5e9c:	220a      	movs	r2, #10
   b5e9e:	4630      	mov	r0, r6
   b5ea0:	f001 fa93 	bl	b73ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5ea4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5ea6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5ea8:	d019      	beq.n	b5ede <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5eaa:	2c00      	cmp	r4, #0
   b5eac:	d0f4      	beq.n	b5e98 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5eae:	212e      	movs	r1, #46	; 0x2e
   b5eb0:	4630      	mov	r0, r6
   b5eb2:	f001 fa7b 	bl	b73ac <_ZN5Print5printEc>
   b5eb6:	4404      	add	r4, r0
   b5eb8:	e7ee      	b.n	b5e98 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5eba:	232f      	movs	r3, #47	; 0x2f
   b5ebc:	466a      	mov	r2, sp
   b5ebe:	4639      	mov	r1, r7
   b5ec0:	200a      	movs	r0, #10
		buf[0] = 0;
   b5ec2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5ec6:	f7fe fc4f 	bl	b4768 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5eca:	4668      	mov	r0, sp
   b5ecc:	f001 ff5f 	bl	b7d8e <strlen>
   b5ed0:	6833      	ldr	r3, [r6, #0]
   b5ed2:	4602      	mov	r2, r0
   b5ed4:	68db      	ldr	r3, [r3, #12]
   b5ed6:	4669      	mov	r1, sp
   b5ed8:	4630      	mov	r0, r6
   b5eda:	4798      	blx	r3
   b5edc:	4604      	mov	r4, r0
    }
    return n;
}
   b5ede:	4620      	mov	r0, r4
   b5ee0:	b00d      	add	sp, #52	; 0x34
   b5ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5ee4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5ee4:	b510      	push	{r4, lr}
   b5ee6:	4b05      	ldr	r3, [pc, #20]	; (b5efc <_ZN9IPAddressC1Ev+0x18>)
   b5ee8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5eea:	2211      	movs	r2, #17
   b5eec:	f840 3b04 	str.w	r3, [r0], #4
   b5ef0:	2100      	movs	r1, #0
   b5ef2:	f001 feed 	bl	b7cd0 <memset>
}
   b5ef6:	4620      	mov	r0, r4
   b5ef8:	bd10      	pop	{r4, pc}
   b5efa:	bf00      	nop
   b5efc:	000b8344 	.word	0x000b8344

000b5f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5f00:	4603      	mov	r3, r0
   b5f02:	4a07      	ldr	r2, [pc, #28]	; (b5f20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5f04:	b510      	push	{r4, lr}
   b5f06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5f0a:	f101 0210 	add.w	r2, r1, #16
   b5f0e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5f12:	f843 4b04 	str.w	r4, [r3], #4
   b5f16:	4291      	cmp	r1, r2
   b5f18:	d1f9      	bne.n	b5f0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5f1a:	780a      	ldrb	r2, [r1, #0]
   b5f1c:	701a      	strb	r2, [r3, #0]
}
   b5f1e:	bd10      	pop	{r4, pc}
   b5f20:	000b8344 	.word	0x000b8344

000b5f24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5f24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5f26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5f2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5f2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5f32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5f36:	2304      	movs	r3, #4
   b5f38:	6041      	str	r1, [r0, #4]
   b5f3a:	7503      	strb	r3, [r0, #20]
}
   b5f3c:	bd10      	pop	{r4, pc}
	...

000b5f40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5f40:	b507      	push	{r0, r1, r2, lr}
   b5f42:	4b06      	ldr	r3, [pc, #24]	; (b5f5c <_ZN9IPAddressC1EPKh+0x1c>)
   b5f44:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5f46:	78cb      	ldrb	r3, [r1, #3]
   b5f48:	9300      	str	r3, [sp, #0]
   b5f4a:	788b      	ldrb	r3, [r1, #2]
   b5f4c:	784a      	ldrb	r2, [r1, #1]
   b5f4e:	7809      	ldrb	r1, [r1, #0]
   b5f50:	f7ff ffe8 	bl	b5f24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5f54:	b003      	add	sp, #12
   b5f56:	f85d fb04 	ldr.w	pc, [sp], #4
   b5f5a:	bf00      	nop
   b5f5c:	000b8344 	.word	0x000b8344

000b5f60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5f60:	f100 0310 	add.w	r3, r0, #16
   b5f64:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b5f66:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b5f6a:	2901      	cmp	r1, #1
   b5f6c:	4618      	mov	r0, r3
   b5f6e:	d108      	bne.n	b5f82 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5f70:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b5f74:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b5f78:	3a01      	subs	r2, #1
   b5f7a:	f103 0310 	add.w	r3, r3, #16
   b5f7e:	d1f2      	bne.n	b5f66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5f80:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b5f82:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b5f84:	bf04      	itt	eq
   b5f86:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b5f8a:	1852      	addeq	r2, r2, r1
   b5f8c:	e7f4      	b.n	b5f78 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5f8e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b5f8e:	b40e      	push	{r1, r2, r3}
   b5f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5f92:	b088      	sub	sp, #32
   b5f94:	af00      	add	r7, sp, #0
   b5f96:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5f9a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5f9c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fa0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5fa2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fa4:	462b      	mov	r3, r5
   b5fa6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b5fa8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5faa:	f7fe fd49 	bl	b4a40 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b5fae:	280f      	cmp	r0, #15
   b5fb0:	687a      	ldr	r2, [r7, #4]
   b5fb2:	d91a      	bls.n	b5fea <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b5fb4:	f100 0308 	add.w	r3, r0, #8
   b5fb8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5fbc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5fbe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fc2:	1c41      	adds	r1, r0, #1
   b5fc4:	462b      	mov	r3, r5
   b5fc6:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5fc8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fca:	f7fe fd39 	bl	b4a40 <vsnprintf>
        if (n > 0) {
   b5fce:	1e02      	subs	r2, r0, #0
   b5fd0:	dd04      	ble.n	b5fdc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b5fd2:	6823      	ldr	r3, [r4, #0]
   b5fd4:	4669      	mov	r1, sp
   b5fd6:	689b      	ldr	r3, [r3, #8]
   b5fd8:	4620      	mov	r0, r4
   b5fda:	4798      	blx	r3
   b5fdc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b5fde:	3720      	adds	r7, #32
   b5fe0:	46bd      	mov	sp, r7
   b5fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5fe6:	b003      	add	sp, #12
   b5fe8:	4770      	bx	lr
    } else if (n > 0) {
   b5fea:	2800      	cmp	r0, #0
   b5fec:	d0f7      	beq.n	b5fde <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5fee:	6823      	ldr	r3, [r4, #0]
   b5ff0:	4602      	mov	r2, r0
   b5ff2:	689b      	ldr	r3, [r3, #8]
   b5ff4:	f107 0110 	add.w	r1, r7, #16
   b5ff8:	4620      	mov	r0, r4
   b5ffa:	4798      	blx	r3
}
   b5ffc:	e7ef      	b.n	b5fde <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5ffe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5ffe:	b538      	push	{r3, r4, r5, lr}
   b6000:	680b      	ldr	r3, [r1, #0]
   b6002:	6003      	str	r3, [r0, #0]
   b6004:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6006:	6843      	ldr	r3, [r0, #4]
   b6008:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b600a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b600c:	d008      	beq.n	b6020 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b600e:	b115      	cbz	r5, b6016 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6010:	686b      	ldr	r3, [r5, #4]
   b6012:	3301      	adds	r3, #1
   b6014:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6016:	6860      	ldr	r0, [r4, #4]
   b6018:	b108      	cbz	r0, b601e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b601a:	f7fe fdeb 	bl	b4bf4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b601e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6020:	bd38      	pop	{r3, r4, r5, pc}

000b6022 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b6022:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6024:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6026:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b602a:	689b      	ldr	r3, [r3, #8]
   b602c:	2201      	movs	r2, #1
   b602e:	f10d 0107 	add.w	r1, sp, #7
   b6032:	4798      	blx	r3
}
   b6034:	b003      	add	sp, #12
   b6036:	f85d fb04 	ldr.w	pc, [sp], #4

000b603a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b603a:	460b      	mov	r3, r1
   b603c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b603e:	2200      	movs	r2, #0
   b6040:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6042:	e9c0 2200 	strd	r2, r2, [r0]
   b6046:	4604      	mov	r4, r0
        t_ = t;
   b6048:	6083      	str	r3, [r0, #8]
    if (t) {
   b604a:	b90b      	cbnz	r3, b6050 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b604c:	4620      	mov	r0, r4
   b604e:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6050:	f7ff ffd5 	bl	b5ffe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6054:	e7fa      	b.n	b604c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6056 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6056:	6883      	ldr	r3, [r0, #8]
   b6058:	b1eb      	cbz	r3, b6096 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b605a:	781a      	ldrb	r2, [r3, #0]
   b605c:	2a03      	cmp	r2, #3
   b605e:	d81a      	bhi.n	b6096 <_ZNK5spark9JSONValue4typeEv+0x40>
   b6060:	e8df f002 	tbb	[pc, r2]
   b6064:	1b021704 	.word	0x1b021704
   b6068:	2005      	movs	r0, #5
   b606a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b606c:	6802      	ldr	r2, [r0, #0]
   b606e:	685b      	ldr	r3, [r3, #4]
   b6070:	6852      	ldr	r2, [r2, #4]
   b6072:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6074:	282d      	cmp	r0, #45	; 0x2d
   b6076:	d012      	beq.n	b609e <_ZNK5spark9JSONValue4typeEv+0x48>
   b6078:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b607c:	2b09      	cmp	r3, #9
   b607e:	d90e      	bls.n	b609e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6080:	2874      	cmp	r0, #116	; 0x74
   b6082:	d00e      	beq.n	b60a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6084:	2866      	cmp	r0, #102	; 0x66
   b6086:	d00c      	beq.n	b60a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6088:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b608c:	4258      	negs	r0, r3
   b608e:	4158      	adcs	r0, r3
   b6090:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6092:	2006      	movs	r0, #6
   b6094:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6096:	2000      	movs	r0, #0
   b6098:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b609a:	2004      	movs	r0, #4
   b609c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b609e:	2003      	movs	r0, #3
   b60a0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b60a2:	2002      	movs	r0, #2
}
   b60a4:	4770      	bx	lr

000b60a6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b60a6:	b510      	push	{r4, lr}
   b60a8:	4604      	mov	r4, r0
    switch (type()) {
   b60aa:	f7ff ffd4 	bl	b6056 <_ZNK5spark9JSONValue4typeEv>
   b60ae:	2802      	cmp	r0, #2
   b60b0:	d00e      	beq.n	b60d0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b60b2:	1ec3      	subs	r3, r0, #3
   b60b4:	b2db      	uxtb	r3, r3
   b60b6:	2b01      	cmp	r3, #1
   b60b8:	d814      	bhi.n	b60e4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b60ba:	6822      	ldr	r2, [r4, #0]
   b60bc:	68a3      	ldr	r3, [r4, #8]
   b60be:	6850      	ldr	r0, [r2, #4]
   b60c0:	685b      	ldr	r3, [r3, #4]
}
   b60c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b60c6:	220a      	movs	r2, #10
   b60c8:	2100      	movs	r1, #0
   b60ca:	4418      	add	r0, r3
   b60cc:	f001 bf1e 	b.w	b7f0c <strtol>
        const char* const s = d_->json + t_->start;
   b60d0:	6822      	ldr	r2, [r4, #0]
   b60d2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b60d4:	6852      	ldr	r2, [r2, #4]
   b60d6:	685b      	ldr	r3, [r3, #4]
   b60d8:	5cd0      	ldrb	r0, [r2, r3]
   b60da:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b60de:	4258      	negs	r0, r3
   b60e0:	4158      	adcs	r0, r3
}
   b60e2:	bd10      	pop	{r4, pc}
    switch (type()) {
   b60e4:	2000      	movs	r0, #0
   b60e6:	e7fc      	b.n	b60e2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b60e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b60e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b60ea:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b60ec:	e9c0 3300 	strd	r3, r3, [r0]
   b60f0:	4604      	mov	r4, r0
        n_(0) {
   b60f2:	480e      	ldr	r0, [pc, #56]	; (b612c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b60f4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b60f8:	b1a9      	cbz	r1, b6126 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b60fa:	780b      	ldrb	r3, [r1, #0]
   b60fc:	2b03      	cmp	r3, #3
   b60fe:	d006      	beq.n	b610e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6100:	b98b      	cbnz	r3, b6126 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6102:	6813      	ldr	r3, [r2, #0]
   b6104:	6858      	ldr	r0, [r3, #4]
   b6106:	684b      	ldr	r3, [r1, #4]
   b6108:	5cc3      	ldrb	r3, [r0, r3]
   b610a:	2b6e      	cmp	r3, #110	; 0x6e
   b610c:	d007      	beq.n	b611e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b610e:	6813      	ldr	r3, [r2, #0]
   b6110:	684d      	ldr	r5, [r1, #4]
   b6112:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6114:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6116:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6118:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b611a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b611c:	60e3      	str	r3, [r4, #12]
   b611e:	4611      	mov	r1, r2
   b6120:	4620      	mov	r0, r4
   b6122:	f7ff ff6c 	bl	b5ffe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6126:	4620      	mov	r0, r4
   b6128:	bd38      	pop	{r3, r4, r5, pc}
   b612a:	bf00      	nop
   b612c:	000b83b3 	.word	0x000b83b3

000b6130 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6130:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6132:	2500      	movs	r5, #0
   b6134:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6136:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b613a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b613e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6142:	4604      	mov	r4, r0
   b6144:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6146:	b14b      	cbz	r3, b615c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6148:	781a      	ldrb	r2, [r3, #0]
   b614a:	2a01      	cmp	r2, #1
   b614c:	d106      	bne.n	b615c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b614e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6152:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6154:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6156:	6143      	str	r3, [r0, #20]
   b6158:	f7ff ff51 	bl	b5ffe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b615c:	4620      	mov	r0, r4
   b615e:	bd38      	pop	{r3, r4, r5, pc}

000b6160 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6160:	b510      	push	{r4, lr}
    if (!n_) {
   b6162:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6164:	4604      	mov	r4, r0
    if (!n_) {
   b6166:	b163      	cbz	r3, b6182 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6168:	6880      	ldr	r0, [r0, #8]
   b616a:	60e0      	str	r0, [r4, #12]
    --n_;
   b616c:	3b01      	subs	r3, #1
    ++t_;
   b616e:	3010      	adds	r0, #16
   b6170:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6172:	6120      	str	r0, [r4, #16]
    --n_;
   b6174:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6176:	b113      	cbz	r3, b617e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6178:	f7ff fef2 	bl	b5f60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b617c:	60a0      	str	r0, [r4, #8]
    return true;
   b617e:	2001      	movs	r0, #1
   b6180:	e000      	b.n	b6184 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6182:	4618      	mov	r0, r3
}
   b6184:	bd10      	pop	{r4, pc}

000b6186 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6186:	b510      	push	{r4, lr}
    write('}');
   b6188:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b618a:	4604      	mov	r4, r0
    write('}');
   b618c:	f7ff ff49 	bl	b6022 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6190:	2301      	movs	r3, #1
   b6192:	7123      	strb	r3, [r4, #4]
}
   b6194:	4620      	mov	r0, r4
   b6196:	bd10      	pop	{r4, pc}

000b6198 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6198:	b508      	push	{r3, lr}
    switch (state_) {
   b619a:	7903      	ldrb	r3, [r0, #4]
   b619c:	2b01      	cmp	r3, #1
   b619e:	d002      	beq.n	b61a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b61a0:	2b02      	cmp	r3, #2
   b61a2:	d004      	beq.n	b61ae <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b61a4:	bd08      	pop	{r3, pc}
        write(',');
   b61a6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b61a8:	f7ff ff3b 	bl	b6022 <_ZN5spark10JSONWriter5writeEc>
}
   b61ac:	e7fa      	b.n	b61a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b61ae:	213a      	movs	r1, #58	; 0x3a
   b61b0:	e7fa      	b.n	b61a8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b61b2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b61b2:	b510      	push	{r4, lr}
   b61b4:	4604      	mov	r4, r0
    writeSeparator();
   b61b6:	f7ff ffef 	bl	b6198 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b61ba:	4620      	mov	r0, r4
   b61bc:	217b      	movs	r1, #123	; 0x7b
   b61be:	f7ff ff30 	bl	b6022 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b61c2:	2300      	movs	r3, #0
   b61c4:	7123      	strb	r3, [r4, #4]
}
   b61c6:	4620      	mov	r0, r4
   b61c8:	bd10      	pop	{r4, pc}
	...

000b61cc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b61cc:	b513      	push	{r0, r1, r4, lr}
   b61ce:	4604      	mov	r4, r0
   b61d0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b61d2:	f7ff ffe1 	bl	b6198 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b61d6:	6823      	ldr	r3, [r4, #0]
   b61d8:	9a01      	ldr	r2, [sp, #4]
   b61da:	68db      	ldr	r3, [r3, #12]
   b61dc:	4903      	ldr	r1, [pc, #12]	; (b61ec <_ZN5spark10JSONWriter5valueEi+0x20>)
   b61de:	4620      	mov	r0, r4
   b61e0:	4798      	blx	r3
    state_ = NEXT;
   b61e2:	2301      	movs	r3, #1
}
   b61e4:	4620      	mov	r0, r4
    state_ = NEXT;
   b61e6:	7123      	strb	r3, [r4, #4]
}
   b61e8:	b002      	add	sp, #8
   b61ea:	bd10      	pop	{r4, pc}
   b61ec:	000b8350 	.word	0x000b8350

000b61f0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b61f0:	b513      	push	{r0, r1, r4, lr}
   b61f2:	4604      	mov	r4, r0
   b61f4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b61f6:	f7ff ffcf 	bl	b6198 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b61fa:	6823      	ldr	r3, [r4, #0]
   b61fc:	9a01      	ldr	r2, [sp, #4]
   b61fe:	68db      	ldr	r3, [r3, #12]
   b6200:	4903      	ldr	r1, [pc, #12]	; (b6210 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6202:	4620      	mov	r0, r4
   b6204:	4798      	blx	r3
    state_ = NEXT;
   b6206:	2301      	movs	r3, #1
}
   b6208:	4620      	mov	r0, r4
    state_ = NEXT;
   b620a:	7123      	strb	r3, [r4, #4]
}
   b620c:	b002      	add	sp, #8
   b620e:	bd10      	pop	{r4, pc}
   b6210:	000b80e0 	.word	0x000b80e0

000b6214 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6218:	460d      	mov	r5, r1
    write('"');
   b621a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b621c:	4690      	mov	r8, r2
   b621e:	4604      	mov	r4, r0
    write('"');
   b6220:	f7ff feff 	bl	b6022 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6224:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b62cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6228:	44a8      	add	r8, r5
    const char *s = str;
   b622a:	462f      	mov	r7, r5
    while (s != end) {
   b622c:	4547      	cmp	r7, r8
   b622e:	46ba      	mov	sl, r7
   b6230:	d03d      	beq.n	b62ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6232:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6236:	2e22      	cmp	r6, #34	; 0x22
   b6238:	d006      	beq.n	b6248 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b623a:	2e5c      	cmp	r6, #92	; 0x5c
   b623c:	d004      	beq.n	b6248 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b623e:	4630      	mov	r0, r6
   b6240:	f001 fd06 	bl	b7c50 <isprint>
   b6244:	2800      	cmp	r0, #0
   b6246:	d1f1      	bne.n	b622c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6248:	6823      	ldr	r3, [r4, #0]
   b624a:	ebaa 0205 	sub.w	r2, sl, r5
   b624e:	689b      	ldr	r3, [r3, #8]
   b6250:	4629      	mov	r1, r5
   b6252:	4620      	mov	r0, r4
   b6254:	4798      	blx	r3
            write('\\');
   b6256:	215c      	movs	r1, #92	; 0x5c
   b6258:	4620      	mov	r0, r4
   b625a:	f7ff fee2 	bl	b6022 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b625e:	2e0d      	cmp	r6, #13
   b6260:	d80a      	bhi.n	b6278 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6262:	2e07      	cmp	r6, #7
   b6264:	d91c      	bls.n	b62a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6266:	f1a6 0308 	sub.w	r3, r6, #8
   b626a:	2b05      	cmp	r3, #5
   b626c:	d818      	bhi.n	b62a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b626e:	e8df f003 	tbb	[pc, r3]
   b6272:	0f0d      	.short	0x0f0d
   b6274:	15131711 	.word	0x15131711
   b6278:	2e22      	cmp	r6, #34	; 0x22
   b627a:	d001      	beq.n	b6280 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b627c:	2e5c      	cmp	r6, #92	; 0x5c
   b627e:	d10f      	bne.n	b62a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6280:	4631      	mov	r1, r6
                write('b');
   b6282:	4620      	mov	r0, r4
   b6284:	f7ff fecd 	bl	b6022 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6288:	463d      	mov	r5, r7
    while (s != end) {
   b628a:	e7cf      	b.n	b622c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b628c:	2162      	movs	r1, #98	; 0x62
   b628e:	e7f8      	b.n	b6282 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6290:	2174      	movs	r1, #116	; 0x74
   b6292:	e7f6      	b.n	b6282 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6294:	216e      	movs	r1, #110	; 0x6e
   b6296:	e7f4      	b.n	b6282 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6298:	2166      	movs	r1, #102	; 0x66
   b629a:	e7f2      	b.n	b6282 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b629c:	2172      	movs	r1, #114	; 0x72
   b629e:	e7f0      	b.n	b6282 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b62a0:	6823      	ldr	r3, [r4, #0]
   b62a2:	4632      	mov	r2, r6
   b62a4:	68db      	ldr	r3, [r3, #12]
   b62a6:	4649      	mov	r1, r9
   b62a8:	4620      	mov	r0, r4
   b62aa:	4798      	blx	r3
                break;
   b62ac:	e7ec      	b.n	b6288 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b62ae:	42bd      	cmp	r5, r7
   b62b0:	d005      	beq.n	b62be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b62b2:	6823      	ldr	r3, [r4, #0]
   b62b4:	1b7a      	subs	r2, r7, r5
   b62b6:	689b      	ldr	r3, [r3, #8]
   b62b8:	4629      	mov	r1, r5
   b62ba:	4620      	mov	r0, r4
   b62bc:	4798      	blx	r3
    }
    write('"');
   b62be:	2122      	movs	r1, #34	; 0x22
   b62c0:	4620      	mov	r0, r4
   b62c2:	f7ff feae 	bl	b6022 <_ZN5spark10JSONWriter5writeEc>
}
   b62c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b62ca:	bf00      	nop
   b62cc:	000b8353 	.word	0x000b8353

000b62d0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b62d0:	b513      	push	{r0, r1, r4, lr}
   b62d2:	4604      	mov	r4, r0
   b62d4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b62d8:	f7ff ff5e 	bl	b6198 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b62dc:	4620      	mov	r0, r4
   b62de:	e9dd 2100 	ldrd	r2, r1, [sp]
   b62e2:	f7ff ff97 	bl	b6214 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b62e6:	2302      	movs	r3, #2
}
   b62e8:	4620      	mov	r0, r4
    state_ = VALUE;
   b62ea:	7123      	strb	r3, [r4, #4]
}
   b62ec:	b002      	add	sp, #8
   b62ee:	bd10      	pop	{r4, pc}

000b62f0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b62f0:	b513      	push	{r0, r1, r4, lr}
   b62f2:	4604      	mov	r4, r0
   b62f4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b62f8:	f7ff ff4e 	bl	b6198 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b62fc:	4620      	mov	r0, r4
   b62fe:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6302:	f7ff ff87 	bl	b6214 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b6306:	2301      	movs	r3, #1
}
   b6308:	4620      	mov	r0, r4
    state_ = NEXT;
   b630a:	7123      	strb	r3, [r4, #4]
}
   b630c:	b002      	add	sp, #8
   b630e:	bd10      	pop	{r4, pc}

000b6310 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b6310:	6880      	ldr	r0, [r0, #8]
   b6312:	6803      	ldr	r3, [r0, #0]
   b6314:	68db      	ldr	r3, [r3, #12]
   b6316:	4718      	bx	r3

000b6318 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b6318:	4770      	bx	lr

000b631a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b631a:	4608      	mov	r0, r1
   b631c:	b111      	cbz	r1, b6324 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b631e:	680b      	ldr	r3, [r1, #0]
   b6320:	685b      	ldr	r3, [r3, #4]
   b6322:	4718      	bx	r3
}
   b6324:	4770      	bx	lr

000b6326 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b6326:	4770      	bx	lr

000b6328 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6328:	4770      	bx	lr

000b632a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b632a:	4770      	bx	lr

000b632c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b632c:	4770      	bx	lr

000b632e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b632e:	b538      	push	{r3, r4, r5, lr}
   b6330:	4604      	mov	r4, r0
   b6332:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b6334:	6800      	ldr	r0, [r0, #0]
   b6336:	212e      	movs	r1, #46	; 0x2e
   b6338:	f001 fd0d 	bl	b7d56 <strchrnul>
    size = s - category;
   b633c:	6823      	ldr	r3, [r4, #0]
   b633e:	1ac3      	subs	r3, r0, r3
   b6340:	602b      	str	r3, [r5, #0]
    if (size) {
   b6342:	b123      	cbz	r3, b634e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b6344:	7803      	ldrb	r3, [r0, #0]
   b6346:	b103      	cbz	r3, b634a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6348:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b634a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b634c:	6020      	str	r0, [r4, #0]
}
   b634e:	4618      	mov	r0, r3
   b6350:	bd38      	pop	{r3, r4, r5, pc}

000b6352 <_ZN5spark16JSONStreamWriterD0Ev>:
   b6352:	b510      	push	{r4, lr}
   b6354:	210c      	movs	r1, #12
   b6356:	4604      	mov	r4, r0
   b6358:	f7fd fe9f 	bl	b409a <_ZdlPvj>
   b635c:	4620      	mov	r0, r4
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6360:	b510      	push	{r4, lr}
   b6362:	2104      	movs	r1, #4
   b6364:	4604      	mov	r4, r0
   b6366:	f7fd fe98 	bl	b409a <_ZdlPvj>
   b636a:	4620      	mov	r0, r4
   b636c:	bd10      	pop	{r4, pc}

000b636e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b636e:	b510      	push	{r4, lr}
   b6370:	2104      	movs	r1, #4
   b6372:	4604      	mov	r4, r0
   b6374:	f7fd fe91 	bl	b409a <_ZdlPvj>
   b6378:	4620      	mov	r0, r4
   b637a:	bd10      	pop	{r4, pc}

000b637c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b637c:	f7fe b9cc 	b.w	b4718 <os_mutex_recursive_lock>

000b6380 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b6380:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b6382:	f001 fcf2 	bl	b7d6a <strcmp>
}
   b6386:	fab0 f080 	clz	r0, r0
   b638a:	0940      	lsrs	r0, r0, #5
   b638c:	bd08      	pop	{r3, pc}

000b638e <__tcf_1>:
   b638e:	4770      	bx	lr

000b6390 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6390:	b510      	push	{r4, lr}
   b6392:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b6394:	f001 f9fc 	bl	b7790 <_Z16_fetch_usbserialv>
   b6398:	4284      	cmp	r4, r0
   b639a:	d010      	beq.n	b63be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b639c:	f001 fb14 	bl	b79c8 <_Z22__fetch_global_Serial1v>
   b63a0:	4284      	cmp	r4, r0
   b63a2:	d105      	bne.n	b63b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b63a4:	f001 fb10 	bl	b79c8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b63a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b63ac:	f001 b98b 	b.w	b76c6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b63b0:	b12c      	cbz	r4, b63be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b63b2:	6823      	ldr	r3, [r4, #0]
   b63b4:	4620      	mov	r0, r4
   b63b6:	685b      	ldr	r3, [r3, #4]
}
   b63b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b63bc:	4718      	bx	r3
   b63be:	bd10      	pop	{r4, pc}

000b63c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b63c0:	680b      	ldr	r3, [r1, #0]
   b63c2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b63c4:	684b      	ldr	r3, [r1, #4]
   b63c6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b63c8:	b113      	cbz	r3, b63d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b63ca:	685a      	ldr	r2, [r3, #4]
   b63cc:	3201      	adds	r2, #1
   b63ce:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b63d0:	4770      	bx	lr

000b63d2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b63d2:	b513      	push	{r0, r1, r4, lr}
   b63d4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b63d6:	4608      	mov	r0, r1
   b63d8:	9101      	str	r1, [sp, #4]
   b63da:	f001 fcd8 	bl	b7d8e <strlen>
   b63de:	9901      	ldr	r1, [sp, #4]
   b63e0:	4602      	mov	r2, r0
   b63e2:	4620      	mov	r0, r4
}
   b63e4:	b002      	add	sp, #8
   b63e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b63ea:	f7ff bf81 	b.w	b62f0 <_ZN5spark10JSONWriter5valueEPKcj>

000b63ee <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b63ee:	b513      	push	{r0, r1, r4, lr}
   b63f0:	4604      	mov	r4, r0
    write(str, strlen(str));
   b63f2:	4608      	mov	r0, r1
   b63f4:	9101      	str	r1, [sp, #4]
   b63f6:	f001 fcca 	bl	b7d8e <strlen>
   b63fa:	6823      	ldr	r3, [r4, #0]
   b63fc:	9901      	ldr	r1, [sp, #4]
   b63fe:	68db      	ldr	r3, [r3, #12]
   b6400:	4602      	mov	r2, r0
   b6402:	4620      	mov	r0, r4
}
   b6404:	b002      	add	sp, #8
   b6406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b640a:	4718      	bx	r3

000b640c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b640c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b640e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b6410:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6414:	68db      	ldr	r3, [r3, #12]
   b6416:	2201      	movs	r2, #1
   b6418:	f10d 0107 	add.w	r1, sp, #7
   b641c:	4798      	blx	r3
}
   b641e:	b003      	add	sp, #12
   b6420:	f85d fb04 	ldr.w	pc, [sp], #4

000b6424 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6424:	b40e      	push	{r1, r2, r3}
   b6426:	b503      	push	{r0, r1, lr}
   b6428:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b642a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b642c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b6430:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b6432:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b6434:	f000 ffe7 	bl	b7406 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b6438:	b002      	add	sp, #8
   b643a:	f85d eb04 	ldr.w	lr, [sp], #4
   b643e:	b003      	add	sp, #12
   b6440:	4770      	bx	lr

000b6442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b6442:	680a      	ldr	r2, [r1, #0]
   b6444:	6002      	str	r2, [r0, #0]
   b6446:	684a      	ldr	r2, [r1, #4]
   b6448:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b644a:	2200      	movs	r2, #0
   b644c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6450:	b510      	push	{r4, lr}
   b6452:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6454:	688c      	ldr	r4, [r1, #8]
   b6456:	6084      	str	r4, [r0, #8]
   b6458:	68cc      	ldr	r4, [r1, #12]
   b645a:	60c4      	str	r4, [r0, #12]
   b645c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b645e:	608a      	str	r2, [r1, #8]
   b6460:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6462:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6464:	610a      	str	r2, [r1, #16]
   b6466:	bd10      	pop	{r4, pc}

000b6468 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b646c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b6470:	f04f 0a14 	mov.w	sl, #20
   b6474:	9300      	str	r3, [sp, #0]
   b6476:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b647a:	4b18      	ldr	r3, [pc, #96]	; (b64dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b647c:	10a4      	asrs	r4, r4, #2
   b647e:	4617      	mov	r7, r2
   b6480:	435c      	muls	r4, r3
   b6482:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b6484:	2c00      	cmp	r4, #0
   b6486:	dd21      	ble.n	b64cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6488:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b648a:	fb0a f006 	mul.w	r0, sl, r6
   b648e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b6492:	463a      	mov	r2, r7
   b6494:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6498:	5828      	ldr	r0, [r5, r0]
   b649a:	9101      	str	r1, [sp, #4]
   b649c:	455f      	cmp	r7, fp
   b649e:	bf28      	it	cs
   b64a0:	465a      	movcs	r2, fp
   b64a2:	f001 fc7c 	bl	b7d9e <strncmp>
                if (cmp == 0) {
   b64a6:	2800      	cmp	r0, #0
   b64a8:	9901      	ldr	r1, [sp, #4]
   b64aa:	f04f 0301 	mov.w	r3, #1
   b64ae:	d10b      	bne.n	b64c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b64b0:	455f      	cmp	r7, fp
   b64b2:	d103      	bne.n	b64bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b64b4:	9a00      	ldr	r2, [sp, #0]
   b64b6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b64b8:	4634      	mov	r4, r6
   b64ba:	e7e3      	b.n	b6484 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b64bc:	d9fc      	bls.n	b64b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b64be:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b64c0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b64c4:	3e01      	subs	r6, #1
   b64c6:	e7f7      	b.n	b64b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b64c8:	dbf9      	blt.n	b64be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b64ca:	e7f5      	b.n	b64b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b64cc:	eba5 0508 	sub.w	r5, r5, r8
}
   b64d0:	4802      	ldr	r0, [pc, #8]	; (b64dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b64d2:	10ad      	asrs	r5, r5, #2
   b64d4:	4368      	muls	r0, r5
   b64d6:	b003      	add	sp, #12
   b64d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b64dc:	cccccccd 	.word	0xcccccccd

000b64e0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b64e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b64e2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b64e4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b64e6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b64e8:	b303      	cbz	r3, b652c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b64ea:	b1f9      	cbz	r1, b652c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b64ec:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b64ee:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b64f2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b64f4:	a903      	add	r1, sp, #12
   b64f6:	a801      	add	r0, sp, #4
   b64f8:	f7ff ff19 	bl	b632e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b64fc:	4601      	mov	r1, r0
   b64fe:	b1a8      	cbz	r0, b652c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6500:	f10d 030b 	add.w	r3, sp, #11
   b6504:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b6506:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b650a:	4620      	mov	r0, r4
   b650c:	f7ff ffac 	bl	b6468 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6510:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6514:	b153      	cbz	r3, b652c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6516:	6823      	ldr	r3, [r4, #0]
   b6518:	2414      	movs	r4, #20
   b651a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b651e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6520:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6524:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6526:	bfa8      	it	ge
   b6528:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b652a:	e7e3      	b.n	b64f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b652c:	4628      	mov	r0, r5
   b652e:	b004      	add	sp, #16
   b6530:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6534 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6534:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6536:	4c09      	ldr	r4, [pc, #36]	; (b655c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6538:	7823      	ldrb	r3, [r4, #0]
   b653a:	f3bf 8f5b 	dmb	ish
   b653e:	07db      	lsls	r3, r3, #31
   b6540:	d409      	bmi.n	b6556 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6542:	4620      	mov	r0, r4
   b6544:	f7fd fdb8 	bl	b40b8 <__cxa_guard_acquire>
   b6548:	b128      	cbz	r0, b6556 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b654a:	4620      	mov	r0, r4
   b654c:	f7fd fdb9 	bl	b40c2 <__cxa_guard_release>
   b6550:	4803      	ldr	r0, [pc, #12]	; (b6560 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b6552:	f001 fb77 	bl	b7c44 <atexit>
}
   b6556:	4803      	ldr	r0, [pc, #12]	; (b6564 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6558:	bd10      	pop	{r4, pc}
   b655a:	bf00      	nop
   b655c:	2003e6b8 	.word	0x2003e6b8
   b6560:	000b6327 	.word	0x000b6327
   b6564:	2003d5b0 	.word	0x2003d5b0

000b6568 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6568:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b656a:	4c09      	ldr	r4, [pc, #36]	; (b6590 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b656c:	7823      	ldrb	r3, [r4, #0]
   b656e:	f3bf 8f5b 	dmb	ish
   b6572:	07db      	lsls	r3, r3, #31
   b6574:	d409      	bmi.n	b658a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6576:	4620      	mov	r0, r4
   b6578:	f7fd fd9e 	bl	b40b8 <__cxa_guard_acquire>
   b657c:	b128      	cbz	r0, b658a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b657e:	4620      	mov	r0, r4
   b6580:	f7fd fd9f 	bl	b40c2 <__cxa_guard_release>
   b6584:	4803      	ldr	r0, [pc, #12]	; (b6594 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b6586:	f001 fb5d 	bl	b7c44 <atexit>
    return &factory;
}
   b658a:	4803      	ldr	r0, [pc, #12]	; (b6598 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b658c:	bd10      	pop	{r4, pc}
   b658e:	bf00      	nop
   b6590:	2003e6bc 	.word	0x2003e6bc
   b6594:	000b638f 	.word	0x000b638f
   b6598:	2003d5b4 	.word	0x2003d5b4

000b659c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b659c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b659e:	2500      	movs	r5, #0
   b65a0:	4604      	mov	r4, r0
   b65a2:	e9c0 5500 	strd	r5, r5, [r0]
   b65a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b65aa:	6085      	str	r5, [r0, #8]
   b65ac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b65ae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b65b2:	f7fe f8a1 	bl	b46f8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b65b6:	f7ff ffbd 	bl	b6534 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b65ba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b65bc:	f7ff ffd4 	bl	b6568 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b65c0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b65c2:	6220      	str	r0, [r4, #32]
}
   b65c4:	4620      	mov	r0, r4
   b65c6:	bd38      	pop	{r3, r4, r5, pc}

000b65c8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b65c8:	b510      	push	{r4, lr}
    static LogManager mgr;
   b65ca:	4c0a      	ldr	r4, [pc, #40]	; (b65f4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b65cc:	7823      	ldrb	r3, [r4, #0]
   b65ce:	f3bf 8f5b 	dmb	ish
   b65d2:	07db      	lsls	r3, r3, #31
   b65d4:	d40c      	bmi.n	b65f0 <_ZN5spark10LogManager8instanceEv+0x28>
   b65d6:	4620      	mov	r0, r4
   b65d8:	f7fd fd6e 	bl	b40b8 <__cxa_guard_acquire>
   b65dc:	b140      	cbz	r0, b65f0 <_ZN5spark10LogManager8instanceEv+0x28>
   b65de:	4806      	ldr	r0, [pc, #24]	; (b65f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b65e0:	f7ff ffdc 	bl	b659c <_ZN5spark10LogManagerC1Ev>
   b65e4:	4620      	mov	r0, r4
   b65e6:	f7fd fd6c 	bl	b40c2 <__cxa_guard_release>
   b65ea:	4804      	ldr	r0, [pc, #16]	; (b65fc <_ZN5spark10LogManager8instanceEv+0x34>)
   b65ec:	f001 fb2a 	bl	b7c44 <atexit>
    return &mgr;
}
   b65f0:	4801      	ldr	r0, [pc, #4]	; (b65f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b65f2:	bd10      	pop	{r4, pc}
   b65f4:	2003e6b4 	.word	0x2003e6b4
   b65f8:	2003e6c4 	.word	0x2003e6c4
   b65fc:	000b6b1d 	.word	0x000b6b1d

000b6600 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6600:	4a02      	ldr	r2, [pc, #8]	; (b660c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b6602:	4903      	ldr	r1, [pc, #12]	; (b6610 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6604:	4803      	ldr	r0, [pc, #12]	; (b6614 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6606:	2300      	movs	r3, #0
   b6608:	f7fe b96e 	b.w	b48e8 <log_set_callbacks>
   b660c:	000b6901 	.word	0x000b6901
   b6610:	000b688d 	.word	0x000b688d
   b6614:	000b680d 	.word	0x000b680d

000b6618 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6618:	2300      	movs	r3, #0
   b661a:	461a      	mov	r2, r3
   b661c:	4619      	mov	r1, r3
   b661e:	4618      	mov	r0, r3
   b6620:	f7fe b962 	b.w	b48e8 <log_set_callbacks>

000b6624 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6624:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6626:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6628:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b662a:	4668      	mov	r0, sp
   b662c:	f7ff fec8 	bl	b63c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6630:	466a      	mov	r2, sp
   b6632:	4629      	mov	r1, r5
   b6634:	4620      	mov	r0, r4
   b6636:	f7ff fd7b 	bl	b6130 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b663a:	a801      	add	r0, sp, #4
   b663c:	f7fe fe7f 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6640:	4620      	mov	r0, r4
   b6642:	b003      	add	sp, #12
   b6644:	bd30      	pop	{r4, r5, pc}

000b6646 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6646:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6648:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b664a:	4604      	mov	r4, r0
   b664c:	4668      	mov	r0, sp
   b664e:	f7ff feb7 	bl	b63c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b6652:	466a      	mov	r2, sp
   b6654:	4629      	mov	r1, r5
   b6656:	4620      	mov	r0, r4
   b6658:	f7ff fd46 	bl	b60e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b665c:	a801      	add	r0, sp, #4
   b665e:	f7fe fe6e 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6662:	4620      	mov	r0, r4
   b6664:	b003      	add	sp, #12
   b6666:	bd30      	pop	{r4, r5, pc}

000b6668 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6668:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b666a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b666c:	4604      	mov	r4, r0
   b666e:	4668      	mov	r0, sp
   b6670:	f7ff fea6 	bl	b63c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b6674:	466a      	mov	r2, sp
   b6676:	4629      	mov	r1, r5
   b6678:	4620      	mov	r0, r4
   b667a:	f7ff fcde 	bl	b603a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b667e:	a801      	add	r0, sp, #4
   b6680:	f7fe fe5d 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6684:	4620      	mov	r0, r4
   b6686:	b003      	add	sp, #12
   b6688:	bd30      	pop	{r4, r5, pc}
	...

000b668c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b668c:	b570      	push	{r4, r5, r6, lr}
   b668e:	b08a      	sub	sp, #40	; 0x28
   b6690:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b6692:	4601      	mov	r1, r0
   b6694:	a804      	add	r0, sp, #16
   b6696:	f7ff ffc5 	bl	b6624 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b669a:	4e14      	ldr	r6, [pc, #80]	; (b66ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b669c:	a804      	add	r0, sp, #16
   b669e:	f7ff fd5f 	bl	b6160 <_ZN5spark18JSONObjectIterator4nextEv>
   b66a2:	b1e8      	cbz	r0, b66e0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b66a4:	a904      	add	r1, sp, #16
   b66a6:	4668      	mov	r0, sp
   b66a8:	f7ff ffcd 	bl	b6646 <_ZNK5spark18JSONObjectIterator4nameEv>
   b66ac:	9802      	ldr	r0, [sp, #8]
   b66ae:	4631      	mov	r1, r6
   b66b0:	f7ff fe66 	bl	b6380 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b66b4:	4604      	mov	r4, r0
   b66b6:	b110      	cbz	r0, b66be <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b66b8:	1e2c      	subs	r4, r5, #0
   b66ba:	bf18      	it	ne
   b66bc:	2401      	movne	r4, #1
   b66be:	a801      	add	r0, sp, #4
   b66c0:	f7fe fe3d 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66c4:	2c00      	cmp	r4, #0
   b66c6:	d0e9      	beq.n	b669c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b66c8:	a904      	add	r1, sp, #16
   b66ca:	4668      	mov	r0, sp
   b66cc:	f7ff ffcc 	bl	b6668 <_ZNK5spark18JSONObjectIterator5valueEv>
   b66d0:	4668      	mov	r0, sp
   b66d2:	f7ff fce8 	bl	b60a6 <_ZNK5spark9JSONValue5toIntEv>
   b66d6:	6028      	str	r0, [r5, #0]
   b66d8:	a801      	add	r0, sp, #4
   b66da:	f7fe fe30 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66de:	e7dd      	b.n	b669c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b66e0:	a805      	add	r0, sp, #20
   b66e2:	f7fe fe2c 	bl	b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b66e6:	b00a      	add	sp, #40	; 0x28
   b66e8:	bd70      	pop	{r4, r5, r6, pc}
   b66ea:	bf00      	nop
   b66ec:	000b8359 	.word	0x000b8359

000b66f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b66f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b66f2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b66f4:	4620      	mov	r0, r4
   b66f6:	4913      	ldr	r1, [pc, #76]	; (b6744 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b66f8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b66fa:	f001 fb36 	bl	b7d6a <strcmp>
   b66fe:	b950      	cbnz	r0, b6716 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6700:	f001 f846 	bl	b7790 <_Z16_fetch_usbserialv>
   b6704:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6708:	f001 f832 	bl	b7770 <_ZN9USBSerial5beginEl>
}
   b670c:	b003      	add	sp, #12
   b670e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b6712:	f001 b83d 	b.w	b7790 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6716:	490c      	ldr	r1, [pc, #48]	; (b6748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6718:	4620      	mov	r0, r4
   b671a:	f001 fb26 	bl	b7d6a <strcmp>
   b671e:	b978      	cbnz	r0, b6740 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6720:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6724:	a901      	add	r1, sp, #4
   b6726:	4628      	mov	r0, r5
        int baud = 9600;
   b6728:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b672a:	f7ff ffaf 	bl	b668c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b672e:	f001 f94b 	bl	b79c8 <_Z22__fetch_global_Serial1v>
   b6732:	9901      	ldr	r1, [sp, #4]
   b6734:	f000 ffc4 	bl	b76c0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6738:	f001 f946 	bl	b79c8 <_Z22__fetch_global_Serial1v>
}
   b673c:	b003      	add	sp, #12
   b673e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b6740:	2000      	movs	r0, #0
   b6742:	e7fb      	b.n	b673c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6744:	000b835e 	.word	0x000b835e
   b6748:	000b8365 	.word	0x000b8365

000b674c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b674c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b674e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6752:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6754:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6756:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b675a:	42ae      	cmp	r6, r5
   b675c:	d005      	beq.n	b676a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b675e:	f105 0008 	add.w	r0, r5, #8
   b6762:	f7ff fff3 	bl	b674c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6766:	3514      	adds	r5, #20
   b6768:	e7f7      	b.n	b675a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b676a:	6820      	ldr	r0, [r4, #0]
   b676c:	f7fe f958 	bl	b4a20 <free>
}
   b6770:	4620      	mov	r0, r4
   b6772:	bd70      	pop	{r4, r5, r6, pc}

000b6774 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b6774:	b510      	push	{r4, lr}
   b6776:	4604      	mov	r4, r0
   b6778:	300c      	adds	r0, #12
   b677a:	f7ff ffe7 	bl	b674c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b677e:	4620      	mov	r0, r4
   b6780:	f7fe fd3d 	bl	b51fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6784:	4620      	mov	r0, r4
   b6786:	bd10      	pop	{r4, pc}

000b6788 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b6788:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b678a:	4b04      	ldr	r3, [pc, #16]	; (b679c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b678c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b678e:	f840 3b04 	str.w	r3, [r0], #4
   b6792:	f7ff ffef 	bl	b6774 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b6796:	4620      	mov	r0, r4
   b6798:	bd10      	pop	{r4, pc}
   b679a:	bf00      	nop
   b679c:	000b8094 	.word	0x000b8094

000b67a0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b67a0:	b510      	push	{r4, lr}
   b67a2:	4604      	mov	r4, r0
   b67a4:	f7ff fff0 	bl	b6788 <_ZN5spark16StreamLogHandlerD1Ev>
   b67a8:	4620      	mov	r0, r4
   b67aa:	2124      	movs	r1, #36	; 0x24
   b67ac:	f7fd fc75 	bl	b409a <_ZdlPvj>
   b67b0:	4620      	mov	r0, r4
   b67b2:	bd10      	pop	{r4, pc}

000b67b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b67b4:	b510      	push	{r4, lr}
   b67b6:	4b03      	ldr	r3, [pc, #12]	; (b67c4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b67b8:	6003      	str	r3, [r0, #0]
   b67ba:	4604      	mov	r4, r0
   b67bc:	f7ff ffe4 	bl	b6788 <_ZN5spark16StreamLogHandlerD1Ev>
   b67c0:	4620      	mov	r0, r4
   b67c2:	bd10      	pop	{r4, pc}
   b67c4:	000b8404 	.word	0x000b8404

000b67c8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b67c8:	b510      	push	{r4, lr}
   b67ca:	4604      	mov	r4, r0
   b67cc:	f7ff fff2 	bl	b67b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b67d0:	4620      	mov	r0, r4
   b67d2:	2124      	movs	r1, #36	; 0x24
   b67d4:	f7fd fc61 	bl	b409a <_ZdlPvj>
   b67d8:	4620      	mov	r0, r4
   b67da:	bd10      	pop	{r4, pc}

000b67dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b67dc:	2200      	movs	r2, #0
   b67de:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b67e2:	b510      	push	{r4, lr}
        capacity_(0) {
   b67e4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b67e6:	680c      	ldr	r4, [r1, #0]
   b67e8:	6004      	str	r4, [r0, #0]
   b67ea:	684c      	ldr	r4, [r1, #4]
   b67ec:	6044      	str	r4, [r0, #4]
   b67ee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b67f0:	600a      	str	r2, [r1, #0]
   b67f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b67f4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b67f6:	608a      	str	r2, [r1, #8]
}
   b67f8:	bd10      	pop	{r4, pc}

000b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b67fa:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b67fc:	6803      	ldr	r3, [r0, #0]
   b67fe:	4604      	mov	r4, r0
   b6800:	6818      	ldr	r0, [r3, #0]
   b6802:	f7fd ff91 	bl	b4728 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6806:	4620      	mov	r0, r4
   b6808:	bd10      	pop	{r4, pc}
	...

000b680c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6810:	b087      	sub	sp, #28
   b6812:	4680      	mov	r8, r0
   b6814:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6816:	4b1c      	ldr	r3, [pc, #112]	; (b6888 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6818:	685b      	ldr	r3, [r3, #4]
   b681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b681e:	4689      	mov	r9, r1
   b6820:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b6822:	b96b      	cbnz	r3, b6840 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6824:	f7ff fed0 	bl	b65c8 <_ZN5spark10LogManager8instanceEv>
   b6828:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b682a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b682e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6830:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b6832:	f7ff fda3 	bl	b637c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6836:	7b23      	ldrb	r3, [r4, #12]
   b6838:	b12b      	cbz	r3, b6846 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b683a:	a805      	add	r0, sp, #20
   b683c:	f7ff ffdd 	bl	b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b6840:	b007      	add	sp, #28
   b6842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6846:	2301      	movs	r3, #1
   b6848:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b684a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b684e:	fa5f f989 	uxtb.w	r9, r9
   b6852:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6856:	45aa      	cmp	sl, r5
   b6858:	d012      	beq.n	b6880 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b685a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b685e:	4631      	mov	r1, r6
   b6860:	1d38      	adds	r0, r7, #4
   b6862:	f7ff fe3d 	bl	b64e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6866:	4581      	cmp	r9, r0
   b6868:	d3f5      	bcc.n	b6856 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b686a:	683b      	ldr	r3, [r7, #0]
   b686c:	9a03      	ldr	r2, [sp, #12]
   b686e:	9200      	str	r2, [sp, #0]
   b6870:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b6874:	464a      	mov	r2, r9
   b6876:	4633      	mov	r3, r6
   b6878:	4641      	mov	r1, r8
   b687a:	4638      	mov	r0, r7
   b687c:	47d8      	blx	fp
   b687e:	e7ea      	b.n	b6856 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b6880:	2300      	movs	r3, #0
   b6882:	7323      	strb	r3, [r4, #12]
   b6884:	e7d9      	b.n	b683a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b6886:	bf00      	nop
   b6888:	e000ed00 	.word	0xe000ed00

000b688c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b688c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6890:	469b      	mov	fp, r3
   b6892:	4b1a      	ldr	r3, [pc, #104]	; (b68fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b6894:	685b      	ldr	r3, [r3, #4]
   b6896:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b689a:	4680      	mov	r8, r0
   b689c:	4689      	mov	r9, r1
   b689e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b68a0:	b96b      	cbnz	r3, b68be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b68a2:	f7ff fe91 	bl	b65c8 <_ZN5spark10LogManager8instanceEv>
   b68a6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b68a8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b68ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b68ae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b68b0:	f7ff fd64 	bl	b637c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b68b4:	7b23      	ldrb	r3, [r4, #12]
   b68b6:	b12b      	cbz	r3, b68c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b68b8:	a801      	add	r0, sp, #4
   b68ba:	f7ff ff9e 	bl	b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b68be:	b003      	add	sp, #12
   b68c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b68c4:	2301      	movs	r3, #1
   b68c6:	7323      	strb	r3, [r4, #12]
   b68c8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b68cc:	b2f6      	uxtb	r6, r6
   b68ce:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b68d2:	4555      	cmp	r5, sl
   b68d4:	d00e      	beq.n	b68f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b68d6:	f855 7b04 	ldr.w	r7, [r5], #4
   b68da:	4659      	mov	r1, fp
   b68dc:	1d38      	adds	r0, r7, #4
   b68de:	f7ff fdff 	bl	b64e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b68e2:	4286      	cmp	r6, r0
   b68e4:	d3f5      	bcc.n	b68d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b68e6:	683b      	ldr	r3, [r7, #0]
   b68e8:	464a      	mov	r2, r9
   b68ea:	68db      	ldr	r3, [r3, #12]
   b68ec:	4641      	mov	r1, r8
   b68ee:	4638      	mov	r0, r7
   b68f0:	4798      	blx	r3
   b68f2:	e7ee      	b.n	b68d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b68f4:	2300      	movs	r3, #0
   b68f6:	7323      	strb	r3, [r4, #12]
   b68f8:	e7de      	b.n	b68b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b68fa:	bf00      	nop
   b68fc:	e000ed00 	.word	0xe000ed00

000b6900 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6904:	4b16      	ldr	r3, [pc, #88]	; (b6960 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6906:	685b      	ldr	r3, [r3, #4]
   b6908:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b690c:	4605      	mov	r5, r0
   b690e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b6910:	bb1b      	cbnz	r3, b695a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b6912:	f7ff fe59 	bl	b65c8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6916:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b691a:	4604      	mov	r4, r0
   b691c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b691e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6920:	f7ff fd2c 	bl	b637c <_ZN14RecursiveMutex4lockEv.isra.0>
   b6924:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6928:	2446      	movs	r4, #70	; 0x46
   b692a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b692e:	45b0      	cmp	r8, r6
   b6930:	d109      	bne.n	b6946 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b6932:	a801      	add	r0, sp, #4
   b6934:	f7ff ff61 	bl	b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6938:	42a5      	cmp	r5, r4
   b693a:	bfb4      	ite	lt
   b693c:	2000      	movlt	r0, #0
   b693e:	2001      	movge	r0, #1
}
   b6940:	b002      	add	sp, #8
   b6942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6946:	f856 0b04 	ldr.w	r0, [r6], #4
   b694a:	4639      	mov	r1, r7
   b694c:	3004      	adds	r0, #4
   b694e:	f7ff fdc7 	bl	b64e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b6952:	4284      	cmp	r4, r0
   b6954:	bfa8      	it	ge
   b6956:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b6958:	e7e9      	b.n	b692e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b695a:	2000      	movs	r0, #0
   b695c:	e7f0      	b.n	b6940 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b695e:	bf00      	nop
   b6960:	e000ed00 	.word	0xe000ed00

000b6964 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6966:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b696a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b696c:	4604      	mov	r4, r0
   b696e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6970:	db0d      	blt.n	b698e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b6972:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b6974:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6976:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6978:	dd04      	ble.n	b6984 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b697a:	00b9      	lsls	r1, r7, #2
   b697c:	f7fe f858 	bl	b4a30 <realloc>
            if (!d) {
   b6980:	b918      	cbnz	r0, b698a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b6982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b6984:	f7fe f84c 	bl	b4a20 <free>
        T* d = nullptr;
   b6988:	2000      	movs	r0, #0
        data_ = d;
   b698a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b698c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b698e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6990:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6992:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b6996:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6998:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b699c:	1d08      	adds	r0, r1, #4
   b699e:	f001 f97d 	bl	b7c9c <memmove>
    new(p) T(std::move(value));
   b69a2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b69a6:	6863      	ldr	r3, [r4, #4]
   b69a8:	3301      	adds	r3, #1
   b69aa:	6063      	str	r3, [r4, #4]
    return true;
   b69ac:	2001      	movs	r0, #1
   b69ae:	e7e8      	b.n	b6982 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b69b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b69b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b69b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b69b6:	4604      	mov	r4, r0
   b69b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b69ba:	9301      	str	r3, [sp, #4]
   b69bc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b69be:	f7ff fcdd 	bl	b637c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b69c2:	e9d4 3200 	ldrd	r3, r2, [r4]
   b69c6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b69ca:	4293      	cmp	r3, r2
   b69cc:	4619      	mov	r1, r3
   b69ce:	d00b      	beq.n	b69e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b69d0:	6809      	ldr	r1, [r1, #0]
   b69d2:	42a9      	cmp	r1, r5
   b69d4:	f103 0304 	add.w	r3, r3, #4
   b69d8:	d1f7      	bne.n	b69ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b69da:	a801      	add	r0, sp, #4
   b69dc:	f7ff ff0d 	bl	b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b69e0:	2500      	movs	r5, #0
}
   b69e2:	4628      	mov	r0, r5
   b69e4:	b003      	add	sp, #12
   b69e6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b69e8:	4629      	mov	r1, r5
   b69ea:	4620      	mov	r0, r4
   b69ec:	f7ff ffba 	bl	b6964 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b69f0:	4605      	mov	r5, r0
   b69f2:	2800      	cmp	r0, #0
   b69f4:	d0f1      	beq.n	b69da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b69f6:	6863      	ldr	r3, [r4, #4]
   b69f8:	2b01      	cmp	r3, #1
   b69fa:	d101      	bne.n	b6a00 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b69fc:	f7ff fe00 	bl	b6600 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6a00:	a801      	add	r0, sp, #4
   b6a02:	f7ff fefa 	bl	b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6a06:	e7ec      	b.n	b69e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6a08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6a08:	b570      	push	{r4, r5, r6, lr}
   b6a0a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6a0c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6a10:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6a12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6a16:	4282      	cmp	r2, r0
   b6a18:	d00f      	beq.n	b6a3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6a1a:	4601      	mov	r1, r0
            if (*p == value) {
   b6a1c:	681d      	ldr	r5, [r3, #0]
   b6a1e:	f851 6b04 	ldr.w	r6, [r1], #4
   b6a22:	42ae      	cmp	r6, r5
   b6a24:	d107      	bne.n	b6a36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6a26:	1a52      	subs	r2, r2, r1
   b6a28:	f001 f938 	bl	b7c9c <memmove>
    --size_;
   b6a2c:	6863      	ldr	r3, [r4, #4]
   b6a2e:	3b01      	subs	r3, #1
   b6a30:	6063      	str	r3, [r4, #4]
    return true;
   b6a32:	2001      	movs	r0, #1
}
   b6a34:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6a36:	4608      	mov	r0, r1
   b6a38:	e7ed      	b.n	b6a16 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6a3a:	2000      	movs	r0, #0
   b6a3c:	e7fa      	b.n	b6a34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b6a3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6a3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b6a40:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6a44:	4604      	mov	r4, r0
   b6a46:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6a48:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a4a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6a4c:	f7ff fc96 	bl	b637c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b6a50:	a901      	add	r1, sp, #4
   b6a52:	4620      	mov	r0, r4
   b6a54:	f7ff ffd8 	bl	b6a08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b6a58:	b118      	cbz	r0, b6a62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b6a5a:	6863      	ldr	r3, [r4, #4]
   b6a5c:	b90b      	cbnz	r3, b6a62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b6a5e:	f7ff fddb 	bl	b6618 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6a62:	a803      	add	r0, sp, #12
   b6a64:	f7ff fec9 	bl	b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6a68:	b004      	add	sp, #16
   b6a6a:	bd10      	pop	{r4, pc}

000b6a6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b6a6c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b6a6e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b6a72:	2318      	movs	r3, #24
   b6a74:	4604      	mov	r4, r0
   b6a76:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b6a7a:	42ae      	cmp	r6, r5
   b6a7c:	d015      	beq.n	b6aaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b6a7e:	f105 0110 	add.w	r1, r5, #16
   b6a82:	4620      	mov	r0, r4
   b6a84:	f7ff ffc0 	bl	b6a08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b6a88:	6863      	ldr	r3, [r4, #4]
   b6a8a:	b90b      	cbnz	r3, b6a90 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b6a8c:	f7ff fdc4 	bl	b6618 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b6a90:	69e0      	ldr	r0, [r4, #28]
   b6a92:	6929      	ldr	r1, [r5, #16]
   b6a94:	6803      	ldr	r3, [r0, #0]
   b6a96:	68db      	ldr	r3, [r3, #12]
   b6a98:	4798      	blx	r3
        if (h.stream) {
   b6a9a:	6969      	ldr	r1, [r5, #20]
   b6a9c:	b119      	cbz	r1, b6aa6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b6a9e:	6a20      	ldr	r0, [r4, #32]
   b6aa0:	6803      	ldr	r3, [r0, #0]
   b6aa2:	68db      	ldr	r3, [r3, #12]
   b6aa4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b6aa6:	3518      	adds	r5, #24
   b6aa8:	e7e7      	b.n	b6a7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b6aaa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6aae:	2618      	movs	r6, #24
   b6ab0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6ab4:	42ae      	cmp	r6, r5
   b6ab6:	d004      	beq.n	b6ac2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6ab8:	4628      	mov	r0, r5
   b6aba:	f000 fcdb 	bl	b7474 <_ZN6StringD1Ev>
   b6abe:	3518      	adds	r5, #24
   b6ac0:	e7f8      	b.n	b6ab4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b6ac2:	2300      	movs	r3, #0
   b6ac4:	6163      	str	r3, [r4, #20]
}
   b6ac6:	bd70      	pop	{r4, r5, r6, pc}

000b6ac8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6aca:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6acc:	f7ff fda4 	bl	b6618 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6ad0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6ad4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6ad6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6ad8:	f7ff fc50 	bl	b637c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6adc:	4620      	mov	r0, r4
   b6ade:	f7ff ffc5 	bl	b6a6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b6ae2:	a801      	add	r0, sp, #4
   b6ae4:	f7ff fe89 	bl	b67fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6ae8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6aea:	b108      	cbz	r0, b6af0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6aec:	f7fd fe0c 	bl	b4708 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6af0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6af4:	2618      	movs	r6, #24
   b6af6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6afa:	42ae      	cmp	r6, r5
   b6afc:	d004      	beq.n	b6b08 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6afe:	4628      	mov	r0, r5
   b6b00:	f000 fcb8 	bl	b7474 <_ZN6StringD1Ev>
   b6b04:	3518      	adds	r5, #24
   b6b06:	e7f8      	b.n	b6afa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6b08:	6920      	ldr	r0, [r4, #16]
   b6b0a:	f7fd ff89 	bl	b4a20 <free>
   b6b0e:	6820      	ldr	r0, [r4, #0]
   b6b10:	f7fd ff86 	bl	b4a20 <free>
}
   b6b14:	4620      	mov	r0, r4
   b6b16:	b002      	add	sp, #8
   b6b18:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6b1c <__tcf_2>:
    static LogManager mgr;
   b6b1c:	4801      	ldr	r0, [pc, #4]	; (b6b24 <__tcf_2+0x8>)
   b6b1e:	f7ff bfd3 	b.w	b6ac8 <_ZN5spark10LogManagerD1Ev>
   b6b22:	bf00      	nop
   b6b24:	2003e6c4 	.word	0x2003e6c4

000b6b28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6b28:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b2c:	4604      	mov	r4, r0
   b6b2e:	460d      	mov	r5, r1
   b6b30:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6b32:	d915      	bls.n	b6b60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6b34:	4290      	cmp	r0, r2
   b6b36:	d214      	bcs.n	b6b62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6b38:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6b3c:	1a75      	subs	r5, r6, r1
   b6b3e:	f1a1 0714 	sub.w	r7, r1, #20
   b6b42:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6b44:	42b7      	cmp	r7, r6
   b6b46:	d01a      	beq.n	b6b7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6b48:	b11c      	cbz	r4, b6b52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b6b4a:	4631      	mov	r1, r6
   b6b4c:	4620      	mov	r0, r4
   b6b4e:	f7ff fc78 	bl	b6442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b6b52:	f106 0008 	add.w	r0, r6, #8
   b6b56:	f7ff fdf9 	bl	b674c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b6b5a:	3e14      	subs	r6, #20
   b6b5c:	3c14      	subs	r4, #20
   b6b5e:	e7f1      	b.n	b6b44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b6b60:	d00d      	beq.n	b6b7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b6b62:	42b5      	cmp	r5, r6
   b6b64:	d00b      	beq.n	b6b7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b6b66:	b11c      	cbz	r4, b6b70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b6b68:	4629      	mov	r1, r5
   b6b6a:	4620      	mov	r0, r4
   b6b6c:	f7ff fc69 	bl	b6442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b6b70:	f105 0008 	add.w	r0, r5, #8
   b6b74:	f7ff fdea 	bl	b674c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b6b78:	3514      	adds	r5, #20
   b6b7a:	3414      	adds	r4, #20
   b6b7c:	e7f1      	b.n	b6b62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b6b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6b80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b84:	4604      	mov	r4, r0
   b6b86:	460d      	mov	r5, r1
   b6b88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6b8a:	d914      	bls.n	b6bb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b6b8c:	4290      	cmp	r0, r2
   b6b8e:	d213      	bcs.n	b6bb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b6b90:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b6b94:	1a75      	subs	r5, r6, r1
   b6b96:	f1a1 0710 	sub.w	r7, r1, #16
   b6b9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6b9c:	42b7      	cmp	r7, r6
   b6b9e:	d018      	beq.n	b6bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b6ba0:	b11c      	cbz	r4, b6baa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b6ba2:	4631      	mov	r1, r6
   b6ba4:	4620      	mov	r0, r4
   b6ba6:	f000 fce2 	bl	b756e <_ZN6StringC1EOS_>
                end->~T();
   b6baa:	4630      	mov	r0, r6
   b6bac:	f000 fc62 	bl	b7474 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6bb0:	3e10      	subs	r6, #16
   b6bb2:	3c10      	subs	r4, #16
   b6bb4:	e7f2      	b.n	b6b9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6bb6:	d00c      	beq.n	b6bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6bb8:	42b5      	cmp	r5, r6
   b6bba:	d00a      	beq.n	b6bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6bbc:	b11c      	cbz	r4, b6bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b6bbe:	4629      	mov	r1, r5
   b6bc0:	4620      	mov	r0, r4
   b6bc2:	f000 fcd4 	bl	b756e <_ZN6StringC1EOS_>
                p->~T();
   b6bc6:	4628      	mov	r0, r5
   b6bc8:	f000 fc54 	bl	b7474 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6bcc:	3510      	adds	r5, #16
   b6bce:	3410      	adds	r4, #16
   b6bd0:	e7f2      	b.n	b6bb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b6bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6bd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6bd4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6bd6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6bd8:	4605      	mov	r5, r0
        if (n > 0) {
   b6bda:	dd11      	ble.n	b6c00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6bdc:	0130      	lsls	r0, r6, #4
   b6bde:	f7fd ff17 	bl	b4a10 <malloc>
            if (!d) {
   b6be2:	4604      	mov	r4, r0
   b6be4:	b158      	cbz	r0, b6bfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6be6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6bea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b6bee:	f7ff ffc7 	bl	b6b80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6bf2:	6828      	ldr	r0, [r5, #0]
   b6bf4:	f7fd ff14 	bl	b4a20 <free>
        data_ = d;
   b6bf8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6bfa:	60ae      	str	r6, [r5, #8]
        return true;
   b6bfc:	2001      	movs	r0, #1
    }
   b6bfe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6c00:	2400      	movs	r4, #0
   b6c02:	e7f6      	b.n	b6bf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c08:	4690      	mov	r8, r2
   b6c0a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6c0c:	2300      	movs	r3, #0
   b6c0e:	9103      	str	r1, [sp, #12]
    return size_;
   b6c10:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6c14:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6c16:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6c18:	4299      	cmp	r1, r3
        capacity_(0) {
   b6c1a:	e9c0 3300 	strd	r3, r3, [r0]
   b6c1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6c26:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6c2a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6c2c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b6c2e:	dc23      	bgt.n	b6c78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6c30:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6c34:	2314      	movs	r3, #20
   b6c36:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6c3a:	42af      	cmp	r7, r5
   b6c3c:	d03b      	beq.n	b6cb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b6c3e:	4629      	mov	r1, r5
   b6c40:	a80b      	add	r0, sp, #44	; 0x2c
   b6c42:	f000 fc94 	bl	b756e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6c46:	a90b      	add	r1, sp, #44	; 0x2c
   b6c48:	a80f      	add	r0, sp, #60	; 0x3c
   b6c4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6c4c:	f000 fc8f 	bl	b756e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6c50:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b6c54:	4299      	cmp	r1, r3
   b6c56:	da1b      	bge.n	b6c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b6c58:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b6c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b6c5c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6c60:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6c64:	4631      	mov	r1, r6
   b6c66:	f106 0010 	add.w	r0, r6, #16
   b6c6a:	f7ff ff89 	bl	b6b80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6c6e:	b9ee      	cbnz	r6, b6cac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6c72:	3301      	adds	r3, #1
   b6c74:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b6c76:	e011      	b.n	b6c9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6c78:	a808      	add	r0, sp, #32
   b6c7a:	f7ff ffab 	bl	b6bd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6c7e:	2800      	cmp	r0, #0
   b6c80:	d1d6      	bne.n	b6c30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6c82:	a808      	add	r0, sp, #32
   b6c84:	f7fe fabb 	bl	b51fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6c88:	4620      	mov	r0, r4
   b6c8a:	b015      	add	sp, #84	; 0x54
   b6c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6c90:	3101      	adds	r1, #1
   b6c92:	a808      	add	r0, sp, #32
   b6c94:	f7ff ff9e 	bl	b6bd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6c98:	2800      	cmp	r0, #0
   b6c9a:	d1dd      	bne.n	b6c58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6c9c:	a80f      	add	r0, sp, #60	; 0x3c
   b6c9e:	f000 fbe9 	bl	b7474 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6ca2:	a80b      	add	r0, sp, #44	; 0x2c
   b6ca4:	f000 fbe6 	bl	b7474 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6ca8:	3514      	adds	r5, #20
   b6caa:	e7c6      	b.n	b6c3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6cac:	a90f      	add	r1, sp, #60	; 0x3c
   b6cae:	4630      	mov	r0, r6
   b6cb0:	f000 fc5d 	bl	b756e <_ZN6StringC1EOS_>
   b6cb4:	e7dc      	b.n	b6c70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6cb6:	2600      	movs	r6, #0
   b6cb8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6cbc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6cbe:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6cc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6cc6:	429e      	cmp	r6, r3
   b6cc8:	da7c      	bge.n	b6dc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b6cca:	0133      	lsls	r3, r6, #4
   b6ccc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6cce:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6cd0:	b90b      	cbnz	r3, b6cd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6cd2:	3601      	adds	r6, #1
   b6cd4:	e7f5      	b.n	b6cc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6cd6:	2300      	movs	r3, #0
   b6cd8:	9307      	str	r3, [sp, #28]
   b6cda:	fb09 f306 	mul.w	r3, r9, r6
   b6cde:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6ce0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6ce2:	a907      	add	r1, sp, #28
   b6ce4:	a806      	add	r0, sp, #24
   b6ce6:	f7ff fb22 	bl	b632e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6cea:	4682      	mov	sl, r0
   b6cec:	2800      	cmp	r0, #0
   b6cee:	d0f0      	beq.n	b6cd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6cf0:	f04f 0300 	mov.w	r3, #0
   b6cf4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6cf8:	4601      	mov	r1, r0
   b6cfa:	9a07      	ldr	r2, [sp, #28]
   b6cfc:	f10d 0317 	add.w	r3, sp, #23
   b6d00:	4628      	mov	r0, r5
   b6d02:	f7ff fbb1 	bl	b6468 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6d06:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6d0a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6d0c:	2f00      	cmp	r7, #0
   b6d0e:	d14a      	bne.n	b6da6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6d10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6d14:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6d18:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6d20:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6d24:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6d28:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6d2a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6d2e:	4293      	cmp	r3, r2
   b6d30:	db17      	blt.n	b6d62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6d32:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6d36:	f1ba 0f00 	cmp.w	sl, #0
   b6d3a:	dd30      	ble.n	b6d9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6d3c:	fb09 f00a 	mul.w	r0, r9, sl
   b6d40:	f7fd fe66 	bl	b4a10 <malloc>
            if (!d) {
   b6d44:	4683      	mov	fp, r0
   b6d46:	b360      	cbz	r0, b6da2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6d48:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6d4c:	fb09 1202 	mla	r2, r9, r2, r1
   b6d50:	f7ff feea 	bl	b6b28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b6d54:	6828      	ldr	r0, [r5, #0]
   b6d56:	f7fd fe63 	bl	b4a20 <free>
        data_ = d;
   b6d5a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b6d5e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b6d62:	682b      	ldr	r3, [r5, #0]
   b6d64:	9a01      	ldr	r2, [sp, #4]
   b6d66:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6d6a:	686a      	ldr	r2, [r5, #4]
   b6d6c:	4651      	mov	r1, sl
   b6d6e:	fb09 3202 	mla	r2, r9, r2, r3
   b6d72:	f10a 0014 	add.w	r0, sl, #20
   b6d76:	f7ff fed7 	bl	b6b28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b6d7a:	f1ba 0f00 	cmp.w	sl, #0
   b6d7e:	d003      	beq.n	b6d88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6d80:	a90f      	add	r1, sp, #60	; 0x3c
   b6d82:	4650      	mov	r0, sl
   b6d84:	f7ff fb5d 	bl	b6442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6d88:	686b      	ldr	r3, [r5, #4]
   b6d8a:	3301      	adds	r3, #1
   b6d8c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6d8e:	a811      	add	r0, sp, #68	; 0x44
   b6d90:	f7ff fcdc 	bl	b674c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6d94:	b13f      	cbz	r7, b6da6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b6d96:	a80b      	add	r0, sp, #44	; 0x2c
   b6d98:	f7ff fcd8 	bl	b674c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6d9c:	e771      	b.n	b6c82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6d9e:	46bb      	mov	fp, r7
   b6da0:	e7d8      	b.n	b6d54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6da2:	2701      	movs	r7, #1
   b6da4:	e7f3      	b.n	b6d8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b6da6:	9b01      	ldr	r3, [sp, #4]
   b6da8:	682d      	ldr	r5, [r5, #0]
   b6daa:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6dae:	9b06      	ldr	r3, [sp, #24]
   b6db0:	781b      	ldrb	r3, [r3, #0]
   b6db2:	b92b      	cbnz	r3, b6dc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6db4:	f8d8 3000 	ldr.w	r3, [r8]
   b6db8:	9a02      	ldr	r2, [sp, #8]
   b6dba:	4413      	add	r3, r2
   b6dbc:	7c1b      	ldrb	r3, [r3, #16]
   b6dbe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6dc0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6dc2:	e78e      	b.n	b6ce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6dc4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6dc6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6dc8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6dca:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6dcc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6dce:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6dd2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6dd4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6dd6:	60a2      	str	r2, [r4, #8]
   b6dd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6dda:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ddc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6dde:	60e2      	str	r2, [r4, #12]
   b6de0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6de2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6de4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6de6:	6122      	str	r2, [r4, #16]
   b6de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6dea:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6dec:	9b03      	ldr	r3, [sp, #12]
   b6dee:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6df0:	6162      	str	r2, [r4, #20]
   b6df2:	7623      	strb	r3, [r4, #24]
   b6df4:	e7cf      	b.n	b6d96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6df8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6dfa:	4604      	mov	r4, r0
   b6dfc:	b087      	sub	sp, #28
   b6dfe:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6e00:	4626      	mov	r6, r4
        stream_(&stream) {
   b6e02:	4619      	mov	r1, r3
   b6e04:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6e06:	4617      	mov	r7, r2
        stream_(&stream) {
   b6e08:	f7fd fa56 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6e0c:	4b0b      	ldr	r3, [pc, #44]	; (b6e3c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6e0e:	f846 3b04 	str.w	r3, [r6], #4
   b6e12:	4669      	mov	r1, sp
   b6e14:	a803      	add	r0, sp, #12
   b6e16:	f7fd fa4f 	bl	b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6e1a:	aa03      	add	r2, sp, #12
   b6e1c:	4639      	mov	r1, r7
   b6e1e:	4630      	mov	r0, r6
   b6e20:	f7ff fef0 	bl	b6c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6e24:	a803      	add	r0, sp, #12
   b6e26:	f7fd fa06 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6e2a:	4668      	mov	r0, sp
   b6e2c:	f7fd fa03 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6e30:	4b03      	ldr	r3, [pc, #12]	; (b6e40 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6e32:	6023      	str	r3, [r4, #0]
}
   b6e34:	4620      	mov	r0, r4
        stream_(&stream) {
   b6e36:	6225      	str	r5, [r4, #32]
}
   b6e38:	b007      	add	sp, #28
   b6e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6e3c:	000b8094 	.word	0x000b8094
   b6e40:	000b83ec 	.word	0x000b83ec

000b6e44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e46:	460f      	mov	r7, r1
   b6e48:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6e4a:	491d      	ldr	r1, [pc, #116]	; (b6ec0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6e4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6e4e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6e50:	4616      	mov	r6, r2
   b6e52:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6e54:	f000 ff89 	bl	b7d6a <strcmp>
   b6e58:	b9c0      	cbnz	r0, b6e8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b6e5a:	b1a4      	cbz	r4, b6e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6e5c:	4629      	mov	r1, r5
   b6e5e:	a801      	add	r0, sp, #4
   b6e60:	f7ff fcbc 	bl	b67dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6e64:	4917      	ldr	r1, [pc, #92]	; (b6ec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6e66:	2024      	movs	r0, #36	; 0x24
   b6e68:	f000 fdd2 	bl	b7a10 <_ZnwjRKSt9nothrow_t>
   b6e6c:	4605      	mov	r5, r0
   b6e6e:	b130      	cbz	r0, b6e7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6e70:	ab01      	add	r3, sp, #4
   b6e72:	4632      	mov	r2, r6
   b6e74:	4621      	mov	r1, r4
   b6e76:	f7ff ffbf 	bl	b6df8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6e7a:	4b13      	ldr	r3, [pc, #76]	; (b6ec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6e7c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6e7e:	a801      	add	r0, sp, #4
   b6e80:	f7fd f9d9 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6e84:	462c      	mov	r4, r5
}
   b6e86:	4620      	mov	r0, r4
   b6e88:	b005      	add	sp, #20
   b6e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6e8c:	490f      	ldr	r1, [pc, #60]	; (b6ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6e8e:	4638      	mov	r0, r7
   b6e90:	f000 ff6b 	bl	b7d6a <strcmp>
   b6e94:	b990      	cbnz	r0, b6ebc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6e96:	2c00      	cmp	r4, #0
   b6e98:	d0f5      	beq.n	b6e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6e9a:	4629      	mov	r1, r5
   b6e9c:	a801      	add	r0, sp, #4
   b6e9e:	f7ff fc9d 	bl	b67dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6ea2:	4908      	ldr	r1, [pc, #32]	; (b6ec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6ea4:	2024      	movs	r0, #36	; 0x24
   b6ea6:	f000 fdb3 	bl	b7a10 <_ZnwjRKSt9nothrow_t>
   b6eaa:	4605      	mov	r5, r0
   b6eac:	2800      	cmp	r0, #0
   b6eae:	d0e6      	beq.n	b6e7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6eb0:	ab01      	add	r3, sp, #4
   b6eb2:	4632      	mov	r2, r6
   b6eb4:	4621      	mov	r1, r4
   b6eb6:	f7ff ff9f 	bl	b6df8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6eba:	e7e0      	b.n	b6e7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6ebc:	2400      	movs	r4, #0
   b6ebe:	e7e2      	b.n	b6e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6ec0:	000b836d 	.word	0x000b836d
   b6ec4:	000b8538 	.word	0x000b8538
   b6ec8:	000b8404 	.word	0x000b8404
   b6ecc:	000b8371 	.word	0x000b8371

000b6ed0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6ed0:	4b01      	ldr	r3, [pc, #4]	; (b6ed8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6ed2:	4a02      	ldr	r2, [pc, #8]	; (b6edc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6ed4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6ed6:	4770      	bx	lr
   b6ed8:	2003e6c0 	.word	0x2003e6c0
   b6edc:	000b8382 	.word	0x000b8382

000b6ee0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6ee4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6ee6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6eea:	4604      	mov	r4, r0
   b6eec:	460e      	mov	r6, r1
   b6eee:	4617      	mov	r7, r2
   b6ef0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6ef2:	f000 fc4d 	bl	b7790 <_Z16_fetch_usbserialv>
   b6ef6:	4581      	cmp	r9, r0
   b6ef8:	d04c      	beq.n	b6f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6efa:	792b      	ldrb	r3, [r5, #4]
   b6efc:	0719      	lsls	r1, r3, #28
   b6efe:	d504      	bpl.n	b6f0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6f00:	696a      	ldr	r2, [r5, #20]
   b6f02:	4954      	ldr	r1, [pc, #336]	; (b7054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6f04:	4620      	mov	r0, r4
   b6f06:	f7ff fa8d 	bl	b6424 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6f0a:	f1b8 0f00 	cmp.w	r8, #0
   b6f0e:	d00d      	beq.n	b6f2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6f10:	215b      	movs	r1, #91	; 0x5b
   b6f12:	4620      	mov	r0, r4
   b6f14:	f7ff fa7a 	bl	b640c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6f18:	4641      	mov	r1, r8
   b6f1a:	4620      	mov	r0, r4
   b6f1c:	f7ff fa67 	bl	b63ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6f20:	6823      	ldr	r3, [r4, #0]
   b6f22:	494d      	ldr	r1, [pc, #308]	; (b7058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6f24:	68db      	ldr	r3, [r3, #12]
   b6f26:	2202      	movs	r2, #2
   b6f28:	4620      	mov	r0, r4
   b6f2a:	4798      	blx	r3
    if (attr.has_file) {
   b6f2c:	792b      	ldrb	r3, [r5, #4]
   b6f2e:	07da      	lsls	r2, r3, #31
   b6f30:	d523      	bpl.n	b6f7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6f32:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6f36:	212f      	movs	r1, #47	; 0x2f
   b6f38:	4640      	mov	r0, r8
   b6f3a:	f000 ff50 	bl	b7dde <strrchr>
    if (s1) {
   b6f3e:	b108      	cbz	r0, b6f44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6f40:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6f44:	4641      	mov	r1, r8
   b6f46:	4620      	mov	r0, r4
   b6f48:	f7ff fa51 	bl	b63ee <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6f4c:	792b      	ldrb	r3, [r5, #4]
   b6f4e:	079b      	lsls	r3, r3, #30
   b6f50:	d508      	bpl.n	b6f64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6f52:	213a      	movs	r1, #58	; 0x3a
   b6f54:	4620      	mov	r0, r4
   b6f56:	f7ff fa59 	bl	b640c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6f5a:	68ea      	ldr	r2, [r5, #12]
   b6f5c:	493f      	ldr	r1, [pc, #252]	; (b705c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6f5e:	4620      	mov	r0, r4
   b6f60:	f7ff fa60 	bl	b6424 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6f64:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6f66:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6f68:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6f6c:	68db      	ldr	r3, [r3, #12]
   b6f6e:	bf14      	ite	ne
   b6f70:	493b      	ldrne	r1, [pc, #236]	; (b7060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6f72:	493c      	ldreq	r1, [pc, #240]	; (b7064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6f74:	2202      	movs	r2, #2
            write(": ", 2);
   b6f76:	4620      	mov	r0, r4
   b6f78:	4798      	blx	r3
    if (attr.has_function) {
   b6f7a:	792b      	ldrb	r3, [r5, #4]
   b6f7c:	0758      	lsls	r0, r3, #29
   b6f7e:	d51d      	bpl.n	b6fbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6f80:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6f82:	460b      	mov	r3, r1
   b6f84:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6f86:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6f8a:	b160      	cbz	r0, b6fa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6f8c:	2820      	cmp	r0, #32
   b6f8e:	d108      	bne.n	b6fa2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6f90:	4619      	mov	r1, r3
   b6f92:	e7f7      	b.n	b6f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6f94:	4834      	ldr	r0, [pc, #208]	; (b7068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6f96:	f000 f966 	bl	b7266 <_ZN5spark12NetworkClass9listeningEv>
   b6f9a:	2800      	cmp	r0, #0
   b6f9c:	d0ad      	beq.n	b6efa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6fa2:	2828      	cmp	r0, #40	; 0x28
   b6fa4:	d1ee      	bne.n	b6f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6fa6:	6823      	ldr	r3, [r4, #0]
   b6fa8:	1a52      	subs	r2, r2, r1
   b6faa:	68db      	ldr	r3, [r3, #12]
   b6fac:	4620      	mov	r0, r4
   b6fae:	4798      	blx	r3
        write("(): ", 4);
   b6fb0:	6823      	ldr	r3, [r4, #0]
   b6fb2:	492e      	ldr	r1, [pc, #184]	; (b706c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6fb4:	68db      	ldr	r3, [r3, #12]
   b6fb6:	2204      	movs	r2, #4
   b6fb8:	4620      	mov	r0, r4
   b6fba:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6fbc:	2100      	movs	r1, #0
   b6fbe:	4638      	mov	r0, r7
   b6fc0:	f7fd fc8a 	bl	b48d8 <log_level_name>
   b6fc4:	4601      	mov	r1, r0
    write(s);
   b6fc6:	4620      	mov	r0, r4
   b6fc8:	f7ff fa11 	bl	b63ee <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6fcc:	6823      	ldr	r3, [r4, #0]
   b6fce:	4925      	ldr	r1, [pc, #148]	; (b7064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6fd0:	68db      	ldr	r3, [r3, #12]
   b6fd2:	2202      	movs	r2, #2
   b6fd4:	4620      	mov	r0, r4
   b6fd6:	4798      	blx	r3
    if (msg) {
   b6fd8:	b11e      	cbz	r6, b6fe2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6fda:	4631      	mov	r1, r6
   b6fdc:	4620      	mov	r0, r4
   b6fde:	f7ff fa06 	bl	b63ee <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6fe2:	792b      	ldrb	r3, [r5, #4]
   b6fe4:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6fe8:	d02c      	beq.n	b7044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6fea:	6823      	ldr	r3, [r4, #0]
   b6fec:	4920      	ldr	r1, [pc, #128]	; (b7070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6fee:	68db      	ldr	r3, [r3, #12]
   b6ff0:	2202      	movs	r2, #2
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	4798      	blx	r3
        if (attr.has_code) {
   b6ff6:	792b      	ldrb	r3, [r5, #4]
   b6ff8:	06d9      	lsls	r1, r3, #27
   b6ffa:	d50a      	bpl.n	b7012 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6ffc:	6823      	ldr	r3, [r4, #0]
   b6ffe:	491d      	ldr	r1, [pc, #116]	; (b7074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b7000:	68db      	ldr	r3, [r3, #12]
   b7002:	2207      	movs	r2, #7
   b7004:	4620      	mov	r0, r4
   b7006:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b7008:	69aa      	ldr	r2, [r5, #24]
   b700a:	491b      	ldr	r1, [pc, #108]	; (b7078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b700c:	4620      	mov	r0, r4
   b700e:	f7ff fa09 	bl	b6424 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b7012:	792b      	ldrb	r3, [r5, #4]
   b7014:	069a      	lsls	r2, r3, #26
   b7016:	d511      	bpl.n	b703c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b7018:	06db      	lsls	r3, r3, #27
   b701a:	d505      	bpl.n	b7028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b701c:	6823      	ldr	r3, [r4, #0]
   b701e:	4910      	ldr	r1, [pc, #64]	; (b7060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b7020:	68db      	ldr	r3, [r3, #12]
   b7022:	2202      	movs	r2, #2
   b7024:	4620      	mov	r0, r4
   b7026:	4798      	blx	r3
            write("details = ", 10);
   b7028:	6823      	ldr	r3, [r4, #0]
   b702a:	4914      	ldr	r1, [pc, #80]	; (b707c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b702c:	68db      	ldr	r3, [r3, #12]
   b702e:	4620      	mov	r0, r4
   b7030:	220a      	movs	r2, #10
   b7032:	4798      	blx	r3
            write(attr.details);
   b7034:	69e9      	ldr	r1, [r5, #28]
   b7036:	4620      	mov	r0, r4
   b7038:	f7ff f9d9 	bl	b63ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b703c:	215d      	movs	r1, #93	; 0x5d
   b703e:	4620      	mov	r0, r4
   b7040:	f7ff f9e4 	bl	b640c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b7044:	6823      	ldr	r3, [r4, #0]
   b7046:	490e      	ldr	r1, [pc, #56]	; (b7080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b7048:	68db      	ldr	r3, [r3, #12]
   b704a:	4620      	mov	r0, r4
   b704c:	2202      	movs	r2, #2
}
   b704e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b7052:	4718      	bx	r3
   b7054:	000b8386 	.word	0x000b8386
   b7058:	000b838d 	.word	0x000b838d
   b705c:	000b8350 	.word	0x000b8350
   b7060:	000b8390 	.word	0x000b8390
   b7064:	000b8395 	.word	0x000b8395
   b7068:	2003e6ec 	.word	0x2003e6ec
   b706c:	000b8393 	.word	0x000b8393
   b7070:	000b8398 	.word	0x000b8398
   b7074:	000b839b 	.word	0x000b839b
   b7078:	000b83a3 	.word	0x000b83a3
   b707c:	000b83a6 	.word	0x000b83a6
   b7080:	000b83b1 	.word	0x000b83b1

000b7084 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7088:	b085      	sub	sp, #20
    return stream_;
   b708a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b708e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b7090:	4605      	mov	r5, r0
   b7092:	460f      	mov	r7, r1
   b7094:	4690      	mov	r8, r2
   b7096:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b7098:	f000 fb7a 	bl	b7790 <_Z16_fetch_usbserialv>
   b709c:	4581      	cmp	r9, r0
   b709e:	d105      	bne.n	b70ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b70a0:	4849      	ldr	r0, [pc, #292]	; (b71c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b70a2:	f000 f8e0 	bl	b7266 <_ZN5spark12NetworkClass9listeningEv>
   b70a6:	2800      	cmp	r0, #0
   b70a8:	f040 808a 	bne.w	b71c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b70ac:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b70ae:	4a47      	ldr	r2, [pc, #284]	; (b71cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b70b0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b70b2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b70b6:	a801      	add	r0, sp, #4
        strm_(stream) {
   b70b8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b70ba:	f88d 9008 	strb.w	r9, [sp, #8]
   b70be:	f7ff f878 	bl	b61b2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b70c2:	4649      	mov	r1, r9
   b70c4:	4640      	mov	r0, r8
   b70c6:	f7fd fc07 	bl	b48d8 <log_level_name>
    json.name("l", 1).value(s);
   b70ca:	4941      	ldr	r1, [pc, #260]	; (b71d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b70cc:	4680      	mov	r8, r0
   b70ce:	2201      	movs	r2, #1
   b70d0:	a801      	add	r0, sp, #4
   b70d2:	f7ff f8fd 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b70d6:	4641      	mov	r1, r8
   b70d8:	f7ff f97b 	bl	b63d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b70dc:	b13f      	cbz	r7, b70ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b70de:	493d      	ldr	r1, [pc, #244]	; (b71d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b70e0:	2201      	movs	r2, #1
   b70e2:	a801      	add	r0, sp, #4
   b70e4:	f7ff f8f4 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b70e8:	4639      	mov	r1, r7
   b70ea:	f7ff f972 	bl	b63d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b70ee:	b13e      	cbz	r6, b7100 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b70f0:	4939      	ldr	r1, [pc, #228]	; (b71d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b70f2:	2201      	movs	r2, #1
   b70f4:	a801      	add	r0, sp, #4
   b70f6:	f7ff f8eb 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b70fa:	4631      	mov	r1, r6
   b70fc:	f7ff f969 	bl	b63d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7100:	7923      	ldrb	r3, [r4, #4]
   b7102:	07df      	lsls	r7, r3, #31
   b7104:	d50e      	bpl.n	b7124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b7106:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b7108:	212f      	movs	r1, #47	; 0x2f
   b710a:	4630      	mov	r0, r6
   b710c:	f000 fe67 	bl	b7dde <strrchr>
    if (s1) {
   b7110:	b100      	cbz	r0, b7114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b7112:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b7114:	4931      	ldr	r1, [pc, #196]	; (b71dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b7116:	2201      	movs	r2, #1
   b7118:	a801      	add	r0, sp, #4
   b711a:	f7ff f8d9 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b711e:	4631      	mov	r1, r6
   b7120:	f7ff f957 	bl	b63d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b7124:	7923      	ldrb	r3, [r4, #4]
   b7126:	079e      	lsls	r6, r3, #30
   b7128:	d507      	bpl.n	b713a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b712a:	492d      	ldr	r1, [pc, #180]	; (b71e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b712c:	2202      	movs	r2, #2
   b712e:	a801      	add	r0, sp, #4
   b7130:	f7ff f8ce 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7134:	68e1      	ldr	r1, [r4, #12]
   b7136:	f7ff f849 	bl	b61cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b713a:	7923      	ldrb	r3, [r4, #4]
   b713c:	0758      	lsls	r0, r3, #29
   b713e:	d514      	bpl.n	b716a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7140:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7142:	4633      	mov	r3, r6
   b7144:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b7146:	f813 2b01 	ldrb.w	r2, [r3], #1
   b714a:	b12a      	cbz	r2, b7158 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b714c:	2a20      	cmp	r2, #32
   b714e:	d101      	bne.n	b7154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b7150:	461e      	mov	r6, r3
   b7152:	e7f7      	b.n	b7144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b7154:	2a28      	cmp	r2, #40	; 0x28
   b7156:	d1f5      	bne.n	b7144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b7158:	4922      	ldr	r1, [pc, #136]	; (b71e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b715a:	2202      	movs	r2, #2
   b715c:	a801      	add	r0, sp, #4
   b715e:	f7ff f8b7 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7162:	1bba      	subs	r2, r7, r6
   b7164:	4631      	mov	r1, r6
   b7166:	f7ff f8c3 	bl	b62f0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b716a:	7923      	ldrb	r3, [r4, #4]
   b716c:	0719      	lsls	r1, r3, #28
   b716e:	d507      	bpl.n	b7180 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b7170:	491d      	ldr	r1, [pc, #116]	; (b71e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b7172:	2201      	movs	r2, #1
   b7174:	a801      	add	r0, sp, #4
   b7176:	f7ff f8ab 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b717a:	6961      	ldr	r1, [r4, #20]
   b717c:	f7ff f838 	bl	b61f0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b7180:	7923      	ldrb	r3, [r4, #4]
   b7182:	06da      	lsls	r2, r3, #27
   b7184:	d508      	bpl.n	b7198 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b7186:	2204      	movs	r2, #4
   b7188:	4918      	ldr	r1, [pc, #96]	; (b71ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b718a:	eb0d 0002 	add.w	r0, sp, r2
   b718e:	f7ff f89f 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7192:	69a1      	ldr	r1, [r4, #24]
   b7194:	f7ff f81a 	bl	b61cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b7198:	7923      	ldrb	r3, [r4, #4]
   b719a:	069b      	lsls	r3, r3, #26
   b719c:	d507      	bpl.n	b71ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b719e:	4914      	ldr	r1, [pc, #80]	; (b71f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b71a0:	2206      	movs	r2, #6
   b71a2:	a801      	add	r0, sp, #4
   b71a4:	f7ff f894 	bl	b62d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b71a8:	69e1      	ldr	r1, [r4, #28]
   b71aa:	f7ff f912 	bl	b63d2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b71ae:	a801      	add	r0, sp, #4
   b71b0:	f7fe ffe9 	bl	b6186 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b71b4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b71b6:	490f      	ldr	r1, [pc, #60]	; (b71f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b71b8:	6803      	ldr	r3, [r0, #0]
   b71ba:	2202      	movs	r2, #2
   b71bc:	68db      	ldr	r3, [r3, #12]
   b71be:	4798      	blx	r3
}
   b71c0:	b005      	add	sp, #20
   b71c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b71c6:	bf00      	nop
   b71c8:	2003e6ec 	.word	0x2003e6ec
   b71cc:	000b83d4 	.word	0x000b83d4
   b71d0:	000b8363 	.word	0x000b8363
   b71d4:	000b83b4 	.word	0x000b83b4
   b71d8:	000b869b 	.word	0x000b869b
   b71dc:	000b83b6 	.word	0x000b83b6
   b71e0:	000b83b8 	.word	0x000b83b8
   b71e4:	000b83bb 	.word	0x000b83bb
   b71e8:	000b83be 	.word	0x000b83be
   b71ec:	000b83c0 	.word	0x000b83c0
   b71f0:	000b83c5 	.word	0x000b83c5
   b71f4:	000b83b1 	.word	0x000b83b1

000b71f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b71f8:	2300      	movs	r3, #0
   b71fa:	6840      	ldr	r0, [r0, #4]
   b71fc:	461a      	mov	r2, r3
   b71fe:	f7fd bba7 	b.w	b4950 <network_connect>

000b7202 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7202:	6840      	ldr	r0, [r0, #4]
   b7204:	2200      	movs	r2, #0
   b7206:	2102      	movs	r1, #2
   b7208:	f7fd bbb2 	b.w	b4970 <network_disconnect>

000b720c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b720c:	2200      	movs	r2, #0
   b720e:	6840      	ldr	r0, [r0, #4]
   b7210:	4611      	mov	r1, r2
   b7212:	f7fd bba5 	b.w	b4960 <network_connecting>

000b7216 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7216:	2200      	movs	r2, #0
   b7218:	6840      	ldr	r0, [r0, #4]
   b721a:	4611      	mov	r1, r2
   b721c:	f7fd bbb0 	b.w	b4980 <network_ready>

000b7220 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7220:	2300      	movs	r3, #0
   b7222:	6840      	ldr	r0, [r0, #4]
   b7224:	461a      	mov	r2, r3
   b7226:	4619      	mov	r1, r3
   b7228:	f7fd bbb2 	b.w	b4990 <network_on>

000b722c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b722c:	2300      	movs	r3, #0
   b722e:	6840      	ldr	r0, [r0, #4]
   b7230:	461a      	mov	r2, r3
   b7232:	4619      	mov	r1, r3
   b7234:	f7fd bbb4 	b.w	b49a0 <network_off>

000b7238 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7238:	6840      	ldr	r0, [r0, #4]
   b723a:	2100      	movs	r1, #0
   b723c:	f7fd bbd8 	b.w	b49f0 <network_is_on>

000b7240 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7240:	6840      	ldr	r0, [r0, #4]
   b7242:	2100      	movs	r1, #0
   b7244:	f7fd bbdc 	b.w	b4a00 <network_is_off>

000b7248 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7248:	6840      	ldr	r0, [r0, #4]
   b724a:	2200      	movs	r2, #0
   b724c:	f081 0101 	eor.w	r1, r1, #1
   b7250:	f7fd bbae 	b.w	b49b0 <network_listen>

000b7254 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7254:	6840      	ldr	r0, [r0, #4]
   b7256:	2200      	movs	r2, #0
   b7258:	f7fd bbba 	b.w	b49d0 <network_set_listen_timeout>

000b725c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b725c:	2200      	movs	r2, #0
   b725e:	6840      	ldr	r0, [r0, #4]
   b7260:	4611      	mov	r1, r2
   b7262:	f7fd bbbd 	b.w	b49e0 <network_get_listen_timeout>

000b7266 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7266:	2200      	movs	r2, #0
   b7268:	6840      	ldr	r0, [r0, #4]
   b726a:	4611      	mov	r1, r2
   b726c:	f7fd bba8 	b.w	b49c0 <network_listening>

000b7270 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7274:	b095      	sub	sp, #84	; 0x54
   b7276:	4614      	mov	r4, r2
   b7278:	460d      	mov	r5, r1
   b727a:	4607      	mov	r7, r0
    IPAddress addr;
   b727c:	f7fe fe32 	bl	b5ee4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7280:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7282:	221c      	movs	r2, #28
   b7284:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7286:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7288:	f000 fd22 	bl	b7cd0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b728c:	2340      	movs	r3, #64	; 0x40
   b728e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7290:	4620      	mov	r0, r4
   b7292:	466b      	mov	r3, sp
   b7294:	aa0c      	add	r2, sp, #48	; 0x30
   b7296:	2100      	movs	r1, #0
   b7298:	f7fd fa76 	bl	b4788 <netdb_getaddrinfo>
    if (!r) {
   b729c:	4604      	mov	r4, r0
   b729e:	2800      	cmp	r0, #0
   b72a0:	d14b      	bne.n	b733a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b72a2:	4602      	mov	r2, r0
   b72a4:	2101      	movs	r1, #1
   b72a6:	6868      	ldr	r0, [r5, #4]
   b72a8:	f7fd fb6a 	bl	b4980 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b72ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b72ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b72b0:	4622      	mov	r2, r4
   b72b2:	6868      	ldr	r0, [r5, #4]
   b72b4:	f7fd fb64 	bl	b4980 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b72b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b72ba:	4681      	mov	r9, r0
        bool ok = false;
   b72bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b72be:	2e00      	cmp	r6, #0
   b72c0:	d03b      	beq.n	b733a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b72c2:	2900      	cmp	r1, #0
   b72c4:	d139      	bne.n	b733a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b72c6:	6873      	ldr	r3, [r6, #4]
   b72c8:	2b02      	cmp	r3, #2
   b72ca:	d003      	beq.n	b72d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b72cc:	2b0a      	cmp	r3, #10
   b72ce:	d011      	beq.n	b72f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b72d0:	69f6      	ldr	r6, [r6, #28]
   b72d2:	e7f4      	b.n	b72be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b72d4:	f1b8 0f00 	cmp.w	r8, #0
   b72d8:	d0fa      	beq.n	b72d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b72da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b72dc:	a806      	add	r0, sp, #24
   b72de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b72e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b72e2:	f7fe fe2d 	bl	b5f40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b72e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72e8:	1d3c      	adds	r4, r7, #4
   b72ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72ec:	682b      	ldr	r3, [r5, #0]
   b72ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b72f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b72f2:	e7ed      	b.n	b72d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b72f4:	f1b9 0f00 	cmp.w	r9, #0
   b72f8:	d0ea      	beq.n	b72d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b72fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b72fc:	2210      	movs	r2, #16
   b72fe:	a801      	add	r0, sp, #4
   b7300:	f000 fce6 	bl	b7cd0 <memset>
                    a.v = 6;
   b7304:	2306      	movs	r3, #6
   b7306:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b730a:	ad01      	add	r5, sp, #4
   b730c:	f104 0308 	add.w	r3, r4, #8
   b7310:	3418      	adds	r4, #24
   b7312:	6818      	ldr	r0, [r3, #0]
   b7314:	6859      	ldr	r1, [r3, #4]
   b7316:	462a      	mov	r2, r5
   b7318:	c203      	stmia	r2!, {r0, r1}
   b731a:	3308      	adds	r3, #8
   b731c:	42a3      	cmp	r3, r4
   b731e:	4615      	mov	r5, r2
   b7320:	d1f7      	bne.n	b7312 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7322:	a901      	add	r1, sp, #4
   b7324:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7326:	ad07      	add	r5, sp, #28
   b7328:	f7fe fdea 	bl	b5f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b732c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b732e:	1d3c      	adds	r4, r7, #4
   b7330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7332:	682b      	ldr	r3, [r5, #0]
   b7334:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7336:	4649      	mov	r1, r9
   b7338:	e7ca      	b.n	b72d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b733a:	9800      	ldr	r0, [sp, #0]
   b733c:	f7fd fa1c 	bl	b4778 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7340:	4638      	mov	r0, r7
   b7342:	b015      	add	sp, #84	; 0x54
   b7344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7348 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7348:	4b02      	ldr	r3, [pc, #8]	; (b7354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b734a:	4a03      	ldr	r2, [pc, #12]	; (b7358 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b734c:	601a      	str	r2, [r3, #0]
   b734e:	2200      	movs	r2, #0
   b7350:	605a      	str	r2, [r3, #4]

} // spark
   b7352:	4770      	bx	lr
   b7354:	2003e6ec 	.word	0x2003e6ec
   b7358:	000b844c 	.word	0x000b844c

000b735c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b735e:	4606      	mov	r6, r0
   b7360:	460d      	mov	r5, r1
  size_t n = 0;
   b7362:	188f      	adds	r7, r1, r2
   b7364:	2400      	movs	r4, #0
  while (size--) {
   b7366:	42bd      	cmp	r5, r7
   b7368:	d00c      	beq.n	b7384 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b736a:	6833      	ldr	r3, [r6, #0]
   b736c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7370:	689b      	ldr	r3, [r3, #8]
   b7372:	4630      	mov	r0, r6
   b7374:	4798      	blx	r3
     if (chunk>=0)
   b7376:	1e03      	subs	r3, r0, #0
   b7378:	db01      	blt.n	b737e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b737a:	441c      	add	r4, r3
  while (size--) {
   b737c:	e7f3      	b.n	b7366 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b737e:	2c00      	cmp	r4, #0
   b7380:	bf08      	it	eq
   b7382:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7384:	4620      	mov	r0, r4
   b7386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7388 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7388:	b513      	push	{r0, r1, r4, lr}
   b738a:	4604      	mov	r4, r0
    }
   b738c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b738e:	b159      	cbz	r1, b73a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7390:	9101      	str	r1, [sp, #4]
   b7392:	f000 fcfc 	bl	b7d8e <strlen>
   b7396:	6823      	ldr	r3, [r4, #0]
   b7398:	9901      	ldr	r1, [sp, #4]
   b739a:	68db      	ldr	r3, [r3, #12]
   b739c:	4602      	mov	r2, r0
   b739e:	4620      	mov	r0, r4
    }
   b73a0:	b002      	add	sp, #8
   b73a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b73a6:	4718      	bx	r3
    }
   b73a8:	b002      	add	sp, #8
   b73aa:	bd10      	pop	{r4, pc}

000b73ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b73ac:	6803      	ldr	r3, [r0, #0]
   b73ae:	689b      	ldr	r3, [r3, #8]
   b73b0:	4718      	bx	r3

000b73b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b73b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b73b4:	210d      	movs	r1, #13
{
   b73b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b73b8:	f7ff fff8 	bl	b73ac <_ZN5Print5printEc>
  n += print('\n');
   b73bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b73be:	4604      	mov	r4, r0
  n += print('\n');
   b73c0:	4628      	mov	r0, r5
   b73c2:	f7ff fff3 	bl	b73ac <_ZN5Print5printEc>
  return n;
}
   b73c6:	4420      	add	r0, r4
   b73c8:	bd38      	pop	{r3, r4, r5, pc}

000b73ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b73ca:	b530      	push	{r4, r5, lr}
   b73cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b73ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b73d0:	2a01      	cmp	r2, #1
  *str = '\0';
   b73d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b73d6:	bf98      	it	ls
   b73d8:	220a      	movls	r2, #10
   b73da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b73dc:	460d      	mov	r5, r1
   b73de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b73e2:	fb01 5312 	mls	r3, r1, r2, r5
   b73e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b73ea:	2b09      	cmp	r3, #9
   b73ec:	bf94      	ite	ls
   b73ee:	3330      	addls	r3, #48	; 0x30
   b73f0:	3337      	addhi	r3, #55	; 0x37
   b73f2:	b2db      	uxtb	r3, r3
  } while(n);
   b73f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b73f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b73fa:	d9ef      	bls.n	b73dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b73fc:	4621      	mov	r1, r4
   b73fe:	f7ff ffc3 	bl	b7388 <_ZN5Print5writeEPKc>
}
   b7402:	b00b      	add	sp, #44	; 0x2c
   b7404:	bd30      	pop	{r4, r5, pc}

000b7406 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b740a:	b086      	sub	sp, #24
   b740c:	af00      	add	r7, sp, #0
   b740e:	4605      	mov	r5, r0
   b7410:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7412:	1d38      	adds	r0, r7, #4
   b7414:	2114      	movs	r1, #20
{
   b7416:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7418:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b741a:	f7fd fb11 	bl	b4a40 <vsnprintf>

    if (n<bufsize)
   b741e:	2813      	cmp	r0, #19
   b7420:	d80e      	bhi.n	b7440 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7422:	1d39      	adds	r1, r7, #4
   b7424:	4628      	mov	r0, r5
   b7426:	f7ff ffaf 	bl	b7388 <_ZN5Print5writeEPKc>
   b742a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b742c:	b11e      	cbz	r6, b7436 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b742e:	4628      	mov	r0, r5
   b7430:	f7ff ffbf 	bl	b73b2 <_ZN5Print7printlnEv>
   b7434:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7436:	4620      	mov	r0, r4
   b7438:	3718      	adds	r7, #24
   b743a:	46bd      	mov	sp, r7
   b743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7440:	f100 0308 	add.w	r3, r0, #8
   b7444:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7448:	46e8      	mov	r8, sp
        char bigger[n+1];
   b744a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b744e:	4622      	mov	r2, r4
   b7450:	1c41      	adds	r1, r0, #1
   b7452:	683b      	ldr	r3, [r7, #0]
   b7454:	4668      	mov	r0, sp
   b7456:	f7fd faf3 	bl	b4a40 <vsnprintf>
  return write(str);
   b745a:	4669      	mov	r1, sp
   b745c:	4628      	mov	r0, r5
   b745e:	f7ff ff93 	bl	b7388 <_ZN5Print5writeEPKc>
   b7462:	4604      	mov	r4, r0
   b7464:	46c5      	mov	sp, r8
   b7466:	e7e1      	b.n	b742c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7468 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7468:	4b01      	ldr	r3, [pc, #4]	; (b7470 <_GLOBAL__sub_I_RGB+0x8>)
   b746a:	2200      	movs	r2, #0
   b746c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b746e:	4770      	bx	lr
   b7470:	2003e6f4 	.word	0x2003e6f4

000b7474 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b7474:	b510      	push	{r4, lr}
   b7476:	4604      	mov	r4, r0
{
    free(buffer);
   b7478:	6800      	ldr	r0, [r0, #0]
   b747a:	f7fd fad1 	bl	b4a20 <free>
}
   b747e:	4620      	mov	r0, r4
   b7480:	bd10      	pop	{r4, pc}

000b7482 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b7482:	b510      	push	{r4, lr}
   b7484:	4604      	mov	r4, r0
    if (buffer) {
   b7486:	6800      	ldr	r0, [r0, #0]
   b7488:	b108      	cbz	r0, b748e <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b748a:	f7fd fac9 	bl	b4a20 <free>
    }
    buffer = nullptr;
   b748e:	2300      	movs	r3, #0
    capacity = len = 0;
   b7490:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b7494:	6023      	str	r3, [r4, #0]
}
   b7496:	bd10      	pop	{r4, pc}

000b7498 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7498:	b538      	push	{r3, r4, r5, lr}
   b749a:	4604      	mov	r4, r0
   b749c:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b749e:	6800      	ldr	r0, [r0, #0]
   b74a0:	3101      	adds	r1, #1
   b74a2:	f7fd fac5 	bl	b4a30 <realloc>
    if (newbuffer) {
   b74a6:	b110      	cbz	r0, b74ae <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b74a8:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b74ac:	2001      	movs	r0, #1
    }
    return 0;
}
   b74ae:	bd38      	pop	{r3, r4, r5, pc}

000b74b0 <_ZN6String7reserveEj>:
{
   b74b0:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b74b2:	6803      	ldr	r3, [r0, #0]
{
   b74b4:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b74b6:	b123      	cbz	r3, b74c2 <_ZN6String7reserveEj+0x12>
   b74b8:	6843      	ldr	r3, [r0, #4]
   b74ba:	428b      	cmp	r3, r1
   b74bc:	d301      	bcc.n	b74c2 <_ZN6String7reserveEj+0x12>
   b74be:	2001      	movs	r0, #1
}
   b74c0:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b74c2:	4620      	mov	r0, r4
   b74c4:	f7ff ffe8 	bl	b7498 <_ZN6String12changeBufferEj>
   b74c8:	2800      	cmp	r0, #0
   b74ca:	d0f9      	beq.n	b74c0 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b74cc:	68a3      	ldr	r3, [r4, #8]
   b74ce:	2b00      	cmp	r3, #0
   b74d0:	d1f5      	bne.n	b74be <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b74d2:	6822      	ldr	r2, [r4, #0]
   b74d4:	7013      	strb	r3, [r2, #0]
   b74d6:	e7f2      	b.n	b74be <_ZN6String7reserveEj+0xe>

000b74d8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b74d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b74da:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b74dc:	4611      	mov	r1, r2
   b74de:	9201      	str	r2, [sp, #4]
{
   b74e0:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b74e2:	f7ff ffe5 	bl	b74b0 <_ZN6String7reserveEj>
   b74e6:	9a01      	ldr	r2, [sp, #4]
   b74e8:	b928      	cbnz	r0, b74f6 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b74ea:	4620      	mov	r0, r4
   b74ec:	f7ff ffc9 	bl	b7482 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b74f0:	4620      	mov	r0, r4
   b74f2:	b003      	add	sp, #12
   b74f4:	bd30      	pop	{r4, r5, pc}
    len = length;
   b74f6:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b74f8:	4629      	mov	r1, r5
   b74fa:	6820      	ldr	r0, [r4, #0]
   b74fc:	f000 fbc0 	bl	b7c80 <memcpy>
    buffer[len] = 0;
   b7500:	6822      	ldr	r2, [r4, #0]
   b7502:	68a3      	ldr	r3, [r4, #8]
   b7504:	2100      	movs	r1, #0
   b7506:	54d1      	strb	r1, [r2, r3]
    return *this;
   b7508:	e7f2      	b.n	b74f0 <_ZN6String4copyEPKcj+0x18>

000b750a <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b750a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b750c:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b750e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7512:	4604      	mov	r4, r0
    len = 0;
   b7514:	6083      	str	r3, [r0, #8]
    flags = 0;
   b7516:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b7518:	b141      	cbz	r1, b752c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b751a:	4608      	mov	r0, r1
   b751c:	9101      	str	r1, [sp, #4]
   b751e:	f000 fc36 	bl	b7d8e <strlen>
   b7522:	9901      	ldr	r1, [sp, #4]
   b7524:	4602      	mov	r2, r0
   b7526:	4620      	mov	r0, r4
   b7528:	f7ff ffd6 	bl	b74d8 <_ZN6String4copyEPKcj>
}
   b752c:	4620      	mov	r0, r4
   b752e:	b002      	add	sp, #8
   b7530:	bd10      	pop	{r4, pc}

000b7532 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7532:	b538      	push	{r3, r4, r5, lr}
   b7534:	4605      	mov	r5, r0
    if (buffer) {
   b7536:	6800      	ldr	r0, [r0, #0]
{
   b7538:	460c      	mov	r4, r1
    if (buffer) {
   b753a:	b170      	cbz	r0, b755a <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b753c:	686a      	ldr	r2, [r5, #4]
   b753e:	688b      	ldr	r3, [r1, #8]
   b7540:	429a      	cmp	r2, r3
   b7542:	d308      	bcc.n	b7556 <_ZN6String4moveERS_+0x24>
   b7544:	6809      	ldr	r1, [r1, #0]
   b7546:	b131      	cbz	r1, b7556 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b7548:	f000 fc19 	bl	b7d7e <strcpy>
            len = rhs.len;
   b754c:	68a3      	ldr	r3, [r4, #8]
   b754e:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b7550:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b7552:	60a3      	str	r3, [r4, #8]
}
   b7554:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b7556:	f7fd fa63 	bl	b4a20 <free>
    buffer = rhs.buffer;
   b755a:	6823      	ldr	r3, [r4, #0]
   b755c:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b755e:	6863      	ldr	r3, [r4, #4]
   b7560:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b7562:	68a3      	ldr	r3, [r4, #8]
   b7564:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b7566:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b7568:	e9c4 3300 	strd	r3, r3, [r4]
   b756c:	e7f1      	b.n	b7552 <_ZN6String4moveERS_+0x20>

000b756e <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b756e:	b510      	push	{r4, lr}
    buffer = nullptr;
   b7570:	2300      	movs	r3, #0
    capacity = 0;
   b7572:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7576:	4604      	mov	r4, r0
    len = 0;
   b7578:	6083      	str	r3, [r0, #8]
    flags = 0;
   b757a:	7303      	strb	r3, [r0, #12]
    move(rval);
   b757c:	f7ff ffd9 	bl	b7532 <_ZN6String4moveERS_>
}
   b7580:	4620      	mov	r0, r4
   b7582:	bd10      	pop	{r4, pc}

000b7584 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b7584:	4288      	cmp	r0, r1
{
   b7586:	b510      	push	{r4, lr}
   b7588:	4604      	mov	r4, r0
    if (this == &rhs) {
   b758a:	d005      	beq.n	b7598 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b758c:	680b      	ldr	r3, [r1, #0]
   b758e:	b12b      	cbz	r3, b759c <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b7590:	688a      	ldr	r2, [r1, #8]
   b7592:	4619      	mov	r1, r3
   b7594:	f7ff ffa0 	bl	b74d8 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b7598:	4620      	mov	r0, r4
   b759a:	bd10      	pop	{r4, pc}
        invalidate();
   b759c:	f7ff ff71 	bl	b7482 <_ZN6String10invalidateEv>
   b75a0:	e7fa      	b.n	b7598 <_ZN6StringaSERKS_+0x14>

000b75a2 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b75a2:	b510      	push	{r4, lr}
    buffer = nullptr;
   b75a4:	2300      	movs	r3, #0
String::String(const String &value)
   b75a6:	4604      	mov	r4, r0
    capacity = 0;
   b75a8:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b75ac:	6083      	str	r3, [r0, #8]
    flags = 0;
   b75ae:	7303      	strb	r3, [r0, #12]
    *this = value;
   b75b0:	f7ff ffe8 	bl	b7584 <_ZN6StringaSERKS_>
}
   b75b4:	4620      	mov	r0, r4
   b75b6:	bd10      	pop	{r4, pc}

000b75b8 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b75b8:	b513      	push	{r0, r1, r4, lr}
   b75ba:	4604      	mov	r4, r0
    if (cstr) {
   b75bc:	b159      	cbz	r1, b75d6 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b75be:	4608      	mov	r0, r1
   b75c0:	9101      	str	r1, [sp, #4]
   b75c2:	f000 fbe4 	bl	b7d8e <strlen>
   b75c6:	9901      	ldr	r1, [sp, #4]
   b75c8:	4602      	mov	r2, r0
   b75ca:	4620      	mov	r0, r4
   b75cc:	f7ff ff84 	bl	b74d8 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b75d0:	4620      	mov	r0, r4
   b75d2:	b002      	add	sp, #8
   b75d4:	bd10      	pop	{r4, pc}
        invalidate();
   b75d6:	f7ff ff54 	bl	b7482 <_ZN6String10invalidateEv>
   b75da:	e7f9      	b.n	b75d0 <_ZN6StringaSEPKc+0x18>

000b75dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b75dc:	4b05      	ldr	r3, [pc, #20]	; (b75f4 <_GLOBAL__sub_I_System+0x18>)
   b75de:	2202      	movs	r2, #2
   b75e0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b75e2:	4b05      	ldr	r3, [pc, #20]	; (b75f8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b75e4:	4a05      	ldr	r2, [pc, #20]	; (b75fc <_GLOBAL__sub_I_System+0x20>)
   b75e6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b75e8:	2000      	movs	r0, #0
   b75ea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b75ee:	f7fd b983 	b.w	b48f8 <set_system_mode>
   b75f2:	bf00      	nop
   b75f4:	2003e710 	.word	0x2003e710
   b75f8:	2003e704 	.word	0x2003e704
   b75fc:	ffff0000 	.word	0xffff0000

000b7600 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7600:	4b02      	ldr	r3, [pc, #8]	; (b760c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7602:	681a      	ldr	r2, [r3, #0]
   b7604:	4b02      	ldr	r3, [pc, #8]	; (b7610 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7606:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7608:	4770      	bx	lr
   b760a:	bf00      	nop
   b760c:	2003d5b8 	.word	0x2003d5b8
   b7610:	2003e714 	.word	0x2003e714

000b7614 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7614:	4770      	bx	lr

000b7616 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7616:	7441      	strb	r1, [r0, #17]
}
   b7618:	4770      	bx	lr

000b761a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b761a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b761c:	7c00      	ldrb	r0, [r0, #16]
   b761e:	f7fd f8eb 	bl	b47f8 <hal_usart_available_data_for_write>
}
   b7622:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7626:	bd08      	pop	{r3, pc}

000b7628 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7628:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b762a:	7c00      	ldrb	r0, [r0, #16]
   b762c:	f7fd f8c4 	bl	b47b8 <hal_usart_available>
}
   b7630:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7634:	bd08      	pop	{r3, pc}

000b7636 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7636:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7638:	7c00      	ldrb	r0, [r0, #16]
   b763a:	f7fd f8cd 	bl	b47d8 <hal_usart_peek>
}
   b763e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7642:	bd08      	pop	{r3, pc}

000b7644 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7644:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7646:	7c00      	ldrb	r0, [r0, #16]
   b7648:	f7fd f8be 	bl	b47c8 <hal_usart_read>
}
   b764c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7650:	bd08      	pop	{r3, pc}

000b7652 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7652:	7c00      	ldrb	r0, [r0, #16]
   b7654:	f7fd b8c8 	b.w	b47e8 <hal_usart_flush>

000b7658 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7658:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b765a:	7c45      	ldrb	r5, [r0, #17]
{
   b765c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b765e:	b12d      	cbz	r5, b766c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7660:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7662:	b003      	add	sp, #12
   b7664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7668:	f7fd b89e 	b.w	b47a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b766c:	7c00      	ldrb	r0, [r0, #16]
   b766e:	9101      	str	r1, [sp, #4]
   b7670:	f7fd f8c2 	bl	b47f8 <hal_usart_available_data_for_write>
   b7674:	2800      	cmp	r0, #0
   b7676:	9901      	ldr	r1, [sp, #4]
   b7678:	dcf2      	bgt.n	b7660 <_ZN11USARTSerial5writeEh+0x8>
}
   b767a:	4628      	mov	r0, r5
   b767c:	b003      	add	sp, #12
   b767e:	bd30      	pop	{r4, r5, pc}

000b7680 <_ZN11USARTSerialD0Ev>:
   b7680:	b510      	push	{r4, lr}
   b7682:	2114      	movs	r1, #20
   b7684:	4604      	mov	r4, r0
   b7686:	f7fc fd08 	bl	b409a <_ZdlPvj>
   b768a:	4620      	mov	r0, r4
   b768c:	bd10      	pop	{r4, pc}
	...

000b7690 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7690:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7696:	4604      	mov	r4, r0
   b7698:	4608      	mov	r0, r1
   b769a:	4611      	mov	r1, r2
   b769c:	2200      	movs	r2, #0
   b769e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b76a2:	4b04      	ldr	r3, [pc, #16]	; (b76b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b76a4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b76a6:	2301      	movs	r3, #1
  _serial = serial;
   b76a8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b76aa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b76ac:	f7fd f8b4 	bl	b4818 <hal_usart_init_ex>
}
   b76b0:	4620      	mov	r0, r4
   b76b2:	bd10      	pop	{r4, pc}
   b76b4:	000b84a4 	.word	0x000b84a4

000b76b8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b76b8:	7c00      	ldrb	r0, [r0, #16]
   b76ba:	2300      	movs	r3, #0
   b76bc:	f7fd b8a4 	b.w	b4808 <hal_usart_begin_config>

000b76c0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b76c0:	2200      	movs	r2, #0
   b76c2:	f7ff bff9 	b.w	b76b8 <_ZN11USARTSerial5beginEmm>

000b76c6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b76c6:	7c00      	ldrb	r0, [r0, #16]
   b76c8:	f7fd b866 	b.w	b4798 <hal_usart_end>

000b76cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b76cc:	7441      	strb	r1, [r0, #17]
}
   b76ce:	4770      	bx	lr

000b76d0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b76d0:	4770      	bx	lr

000b76d2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b76d2:	4770      	bx	lr

000b76d4 <_ZN9USBSerial4readEv>:
{
   b76d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b76d6:	2100      	movs	r1, #0
   b76d8:	7c00      	ldrb	r0, [r0, #16]
   b76da:	f7fd f8cd 	bl	b4878 <HAL_USB_USART_Receive_Data>
}
   b76de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b76e2:	bd08      	pop	{r3, pc}

000b76e4 <_ZN9USBSerial4peekEv>:
{
   b76e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b76e6:	2101      	movs	r1, #1
   b76e8:	7c00      	ldrb	r0, [r0, #16]
   b76ea:	f7fd f8c5 	bl	b4878 <HAL_USB_USART_Receive_Data>
}
   b76ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b76f2:	bd08      	pop	{r3, pc}

000b76f4 <_ZN9USBSerial17availableForWriteEv>:
{
   b76f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b76f6:	7c00      	ldrb	r0, [r0, #16]
   b76f8:	f7fd f8b6 	bl	b4868 <HAL_USB_USART_Available_Data_For_Write>
}
   b76fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7700:	bd08      	pop	{r3, pc}

000b7702 <_ZN9USBSerial9availableEv>:
{
   b7702:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7704:	7c00      	ldrb	r0, [r0, #16]
   b7706:	f7fd f8a7 	bl	b4858 <HAL_USB_USART_Available_Data>
}
   b770a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b770e:	bd08      	pop	{r3, pc}

000b7710 <_ZN9USBSerial5writeEh>:
{
   b7710:	b513      	push	{r0, r1, r4, lr}
   b7712:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7714:	7c00      	ldrb	r0, [r0, #16]
{
   b7716:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7718:	f7fd f8a6 	bl	b4868 <HAL_USB_USART_Available_Data_For_Write>
   b771c:	2800      	cmp	r0, #0
   b771e:	9901      	ldr	r1, [sp, #4]
   b7720:	dc01      	bgt.n	b7726 <_ZN9USBSerial5writeEh+0x16>
   b7722:	7c60      	ldrb	r0, [r4, #17]
   b7724:	b120      	cbz	r0, b7730 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7726:	7c20      	ldrb	r0, [r4, #16]
   b7728:	f7fd f8ae 	bl	b4888 <HAL_USB_USART_Send_Data>
   b772c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7730:	b002      	add	sp, #8
   b7732:	bd10      	pop	{r4, pc}

000b7734 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7734:	7c00      	ldrb	r0, [r0, #16]
   b7736:	f7fd b8af 	b.w	b4898 <HAL_USB_USART_Flush_Data>

000b773a <_ZN9USBSerialD0Ev>:
   b773a:	b510      	push	{r4, lr}
   b773c:	2114      	movs	r1, #20
   b773e:	4604      	mov	r4, r0
   b7740:	f7fc fcab 	bl	b409a <_ZdlPvj>
   b7744:	4620      	mov	r0, r4
   b7746:	bd10      	pop	{r4, pc}

000b7748 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7748:	b510      	push	{r4, lr}
   b774a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b774e:	4604      	mov	r4, r0
   b7750:	4608      	mov	r0, r1
   b7752:	2100      	movs	r1, #0
   b7754:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7758:	4b04      	ldr	r3, [pc, #16]	; (b776c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b775a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b775c:	2301      	movs	r3, #1
  _serial = serial;
   b775e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7760:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7762:	4611      	mov	r1, r2
   b7764:	f7fd f860 	bl	b4828 <HAL_USB_USART_Init>
}
   b7768:	4620      	mov	r0, r4
   b776a:	bd10      	pop	{r4, pc}
   b776c:	000b84d4 	.word	0x000b84d4

000b7770 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7770:	7c00      	ldrb	r0, [r0, #16]
   b7772:	2200      	movs	r2, #0
   b7774:	f7fd b860 	b.w	b4838 <HAL_USB_USART_Begin>

000b7778 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b7778:	7c00      	ldrb	r0, [r0, #16]
   b777a:	f7fd b865 	b.w	b4848 <HAL_USB_USART_End>

000b777e <_Z19acquireSerialBufferv>:
{
   b777e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7780:	2214      	movs	r2, #20
{
   b7782:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7784:	2100      	movs	r1, #0
   b7786:	f000 faa3 	bl	b7cd0 <memset>
}
   b778a:	4620      	mov	r0, r4
   b778c:	bd10      	pop	{r4, pc}
	...

000b7790 <_Z16_fetch_usbserialv>:
{
   b7790:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7792:	4c0f      	ldr	r4, [pc, #60]	; (b77d0 <_Z16_fetch_usbserialv+0x40>)
{
   b7794:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7796:	a803      	add	r0, sp, #12
   b7798:	f7ff fff1 	bl	b777e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b779c:	7821      	ldrb	r1, [r4, #0]
   b779e:	f3bf 8f5b 	dmb	ish
   b77a2:	f011 0101 	ands.w	r1, r1, #1
   b77a6:	d10f      	bne.n	b77c8 <_Z16_fetch_usbserialv+0x38>
   b77a8:	4620      	mov	r0, r4
   b77aa:	9101      	str	r1, [sp, #4]
   b77ac:	f7fc fc84 	bl	b40b8 <__cxa_guard_acquire>
   b77b0:	9901      	ldr	r1, [sp, #4]
   b77b2:	b148      	cbz	r0, b77c8 <_Z16_fetch_usbserialv+0x38>
   b77b4:	aa03      	add	r2, sp, #12
   b77b6:	4807      	ldr	r0, [pc, #28]	; (b77d4 <_Z16_fetch_usbserialv+0x44>)
   b77b8:	f7ff ffc6 	bl	b7748 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b77bc:	4620      	mov	r0, r4
   b77be:	f7fc fc80 	bl	b40c2 <__cxa_guard_release>
   b77c2:	4805      	ldr	r0, [pc, #20]	; (b77d8 <_Z16_fetch_usbserialv+0x48>)
   b77c4:	f000 fa3e 	bl	b7c44 <atexit>
	return _usbserial;
}
   b77c8:	4802      	ldr	r0, [pc, #8]	; (b77d4 <_Z16_fetch_usbserialv+0x44>)
   b77ca:	b008      	add	sp, #32
   b77cc:	bd10      	pop	{r4, pc}
   b77ce:	bf00      	nop
   b77d0:	2003e718 	.word	0x2003e718
   b77d4:	2003e71c 	.word	0x2003e71c
   b77d8:	000b76d1 	.word	0x000b76d1

000b77dc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b77dc:	2200      	movs	r2, #0
   b77de:	6840      	ldr	r0, [r0, #4]
   b77e0:	4611      	mov	r1, r2
   b77e2:	f7fd b8cd 	b.w	b4980 <network_ready>

000b77e6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b77e6:	2200      	movs	r2, #0
   b77e8:	6840      	ldr	r0, [r0, #4]
   b77ea:	4611      	mov	r1, r2
   b77ec:	f7fd b8e8 	b.w	b49c0 <network_listening>

000b77f0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b77f0:	2200      	movs	r2, #0
   b77f2:	6840      	ldr	r0, [r0, #4]
   b77f4:	4611      	mov	r1, r2
   b77f6:	f7fd b8f3 	b.w	b49e0 <network_get_listen_timeout>

000b77fa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77fa:	6840      	ldr	r0, [r0, #4]
   b77fc:	2200      	movs	r2, #0
   b77fe:	f7fd b8e7 	b.w	b49d0 <network_set_listen_timeout>

000b7802 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7802:	6840      	ldr	r0, [r0, #4]
   b7804:	2200      	movs	r2, #0
   b7806:	f081 0101 	eor.w	r1, r1, #1
   b780a:	f7fd b8d1 	b.w	b49b0 <network_listen>

000b780e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b780e:	2300      	movs	r3, #0
   b7810:	6840      	ldr	r0, [r0, #4]
   b7812:	461a      	mov	r2, r3
   b7814:	4619      	mov	r1, r3
   b7816:	f7fd b8c3 	b.w	b49a0 <network_off>

000b781a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b781a:	2300      	movs	r3, #0
   b781c:	6840      	ldr	r0, [r0, #4]
   b781e:	461a      	mov	r2, r3
   b7820:	4619      	mov	r1, r3
   b7822:	f7fd b8b5 	b.w	b4990 <network_on>

000b7826 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7826:	2200      	movs	r2, #0
   b7828:	6840      	ldr	r0, [r0, #4]
   b782a:	4611      	mov	r1, r2
   b782c:	f7fd b898 	b.w	b4960 <network_connecting>

000b7830 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7830:	6840      	ldr	r0, [r0, #4]
   b7832:	2200      	movs	r2, #0
   b7834:	2102      	movs	r1, #2
   b7836:	f7fd b89b 	b.w	b4970 <network_disconnect>

000b783a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b783a:	2300      	movs	r3, #0
   b783c:	6840      	ldr	r0, [r0, #4]
   b783e:	461a      	mov	r2, r3
   b7840:	f7fd b886 	b.w	b4950 <network_connect>

000b7844 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7844:	4b02      	ldr	r3, [pc, #8]	; (b7850 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7846:	2204      	movs	r2, #4
   b7848:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b784a:	4a02      	ldr	r2, [pc, #8]	; (b7854 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b784c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b784e:	4770      	bx	lr
   b7850:	2003e730 	.word	0x2003e730
   b7854:	000b8504 	.word	0x000b8504

000b7858 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7858:	4b01      	ldr	r3, [pc, #4]	; (b7860 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b785a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b785c:	4770      	bx	lr
   b785e:	bf00      	nop
   b7860:	2003d5bc 	.word	0x2003d5bc

000b7864 <serialEventRun>:
{
   b7864:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7866:	4b0b      	ldr	r3, [pc, #44]	; (b7894 <serialEventRun+0x30>)
   b7868:	b143      	cbz	r3, b787c <serialEventRun+0x18>
   b786a:	f7ff ff91 	bl	b7790 <_Z16_fetch_usbserialv>
   b786e:	6803      	ldr	r3, [r0, #0]
   b7870:	691b      	ldr	r3, [r3, #16]
   b7872:	4798      	blx	r3
   b7874:	2800      	cmp	r0, #0
   b7876:	dd01      	ble.n	b787c <serialEventRun+0x18>
        serialEvent();
   b7878:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b787c:	4b06      	ldr	r3, [pc, #24]	; (b7898 <serialEventRun+0x34>)
   b787e:	b143      	cbz	r3, b7892 <serialEventRun+0x2e>
   b7880:	f000 f8a2 	bl	b79c8 <_Z22__fetch_global_Serial1v>
   b7884:	6803      	ldr	r3, [r0, #0]
   b7886:	691b      	ldr	r3, [r3, #16]
   b7888:	4798      	blx	r3
   b788a:	2800      	cmp	r0, #0
   b788c:	dd01      	ble.n	b7892 <serialEventRun+0x2e>
        serialEvent1();
   b788e:	f3af 8000 	nop.w
}
   b7892:	bd08      	pop	{r3, pc}
	...

000b789c <_post_loop>:
{
   b789c:	b508      	push	{r3, lr}
	serialEventRun();
   b789e:	f7ff ffe1 	bl	b7864 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b78a2:	f7fc ff59 	bl	b4758 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b78a6:	4b01      	ldr	r3, [pc, #4]	; (b78ac <_post_loop+0x10>)
   b78a8:	6018      	str	r0, [r3, #0]
}
   b78aa:	bd08      	pop	{r3, pc}
   b78ac:	2003e740 	.word	0x2003e740

000b78b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b78b0:	4805      	ldr	r0, [pc, #20]	; (b78c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b78b2:	4a06      	ldr	r2, [pc, #24]	; (b78cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b78b4:	4906      	ldr	r1, [pc, #24]	; (b78d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b78b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b78b8:	1a12      	subs	r2, r2, r0
   b78ba:	f000 f9e1 	bl	b7c80 <memcpy>
    __backup_sram_signature = signature;
   b78be:	4b05      	ldr	r3, [pc, #20]	; (b78d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b78c0:	4a05      	ldr	r2, [pc, #20]	; (b78d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b78c2:	601a      	str	r2, [r3, #0]
}
   b78c4:	bd08      	pop	{r3, pc}
   b78c6:	bf00      	nop
   b78c8:	2003f400 	.word	0x2003f400
   b78cc:	2003f404 	.word	0x2003f404
   b78d0:	000b87f4 	.word	0x000b87f4
   b78d4:	2003f400 	.word	0x2003f400
   b78d8:	9a271c1e 	.word	0x9a271c1e

000b78dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b78dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b78de:	2300      	movs	r3, #0
   b78e0:	9300      	str	r3, [sp, #0]
   b78e2:	461a      	mov	r2, r3
   b78e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b78e8:	f7fd f820 	bl	b492c <system_ctrl_set_result>
}
   b78ec:	b003      	add	sp, #12
   b78ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b78f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b78f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b78f6:	8843      	ldrh	r3, [r0, #2]
   b78f8:	2b0a      	cmp	r3, #10
   b78fa:	d008      	beq.n	b790e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b78fc:	2b50      	cmp	r3, #80	; 0x50
   b78fe:	d10b      	bne.n	b7918 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7900:	4b09      	ldr	r3, [pc, #36]	; (b7928 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7902:	681b      	ldr	r3, [r3, #0]
   b7904:	b14b      	cbz	r3, b791a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7906:	b003      	add	sp, #12
   b7908:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b790c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b790e:	f7ff ffe5 	bl	b78dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7912:	b003      	add	sp, #12
   b7914:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7918:	2300      	movs	r3, #0
   b791a:	9300      	str	r3, [sp, #0]
   b791c:	461a      	mov	r2, r3
   b791e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7922:	f7fd f803 	bl	b492c <system_ctrl_set_result>
}
   b7926:	e7f4      	b.n	b7912 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7928:	2003e73c 	.word	0x2003e73c

000b792c <module_user_init_hook>:
{
   b792c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b792e:	4812      	ldr	r0, [pc, #72]	; (b7978 <module_user_init_hook+0x4c>)
   b7930:	2100      	movs	r1, #0
   b7932:	f7fd f8a5 	bl	b4a80 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7936:	4b11      	ldr	r3, [pc, #68]	; (b797c <module_user_init_hook+0x50>)
   b7938:	681a      	ldr	r2, [r3, #0]
   b793a:	4b11      	ldr	r3, [pc, #68]	; (b7980 <module_user_init_hook+0x54>)
   b793c:	429a      	cmp	r2, r3
   b793e:	4b11      	ldr	r3, [pc, #68]	; (b7984 <module_user_init_hook+0x58>)
   b7940:	bf0c      	ite	eq
   b7942:	2201      	moveq	r2, #1
   b7944:	2200      	movne	r2, #0
   b7946:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7948:	d001      	beq.n	b794e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b794a:	f7ff ffb1 	bl	b78b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b794e:	f7fc fef3 	bl	b4738 <HAL_RNG_GetRandomNumber>
   b7952:	4604      	mov	r4, r0
    srand(seed);
   b7954:	f000 f9c4 	bl	b7ce0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7958:	4b0b      	ldr	r3, [pc, #44]	; (b7988 <module_user_init_hook+0x5c>)
   b795a:	b113      	cbz	r3, b7962 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b795c:	4620      	mov	r0, r4
   b795e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7962:	2100      	movs	r1, #0
   b7964:	4808      	ldr	r0, [pc, #32]	; (b7988 <module_user_init_hook+0x5c>)
   b7966:	f7fc ffeb 	bl	b4940 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b796e:	4807      	ldr	r0, [pc, #28]	; (b798c <module_user_init_hook+0x60>)
   b7970:	2100      	movs	r1, #0
   b7972:	f7fc bfd1 	b.w	b4918 <system_ctrl_set_app_request_handler>
   b7976:	bf00      	nop
   b7978:	000b7859 	.word	0x000b7859
   b797c:	2003f400 	.word	0x2003f400
   b7980:	9a271c1e 	.word	0x9a271c1e
   b7984:	2003e738 	.word	0x2003e738
   b7988:	00000000 	.word	0x00000000
   b798c:	000b78f5 	.word	0x000b78f5

000b7990 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7990:	4770      	bx	lr
	...

000b7994 <_Z20acquireSerial1Bufferv>:
{
   b7994:	b538      	push	{r3, r4, r5, lr}
   b7996:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7998:	2514      	movs	r5, #20
   b799a:	462a      	mov	r2, r5
   b799c:	2100      	movs	r1, #0
   b799e:	f000 f997 	bl	b7cd0 <memset>
   b79a2:	8025      	strh	r5, [r4, #0]
   b79a4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79a6:	4907      	ldr	r1, [pc, #28]	; (b79c4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b79a8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79aa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b79ac:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79ae:	f000 f831 	bl	b7a14 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79b2:	4904      	ldr	r1, [pc, #16]	; (b79c4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b79b4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79b6:	4628      	mov	r0, r5
   b79b8:	f000 f82c 	bl	b7a14 <_ZnajRKSt9nothrow_t>
    };
   b79bc:	60e0      	str	r0, [r4, #12]
}
   b79be:	4620      	mov	r0, r4
   b79c0:	bd38      	pop	{r3, r4, r5, pc}
   b79c2:	bf00      	nop
   b79c4:	000b8538 	.word	0x000b8538

000b79c8 <_Z22__fetch_global_Serial1v>:
{
   b79c8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b79ca:	4d0e      	ldr	r5, [pc, #56]	; (b7a04 <_Z22__fetch_global_Serial1v+0x3c>)
   b79cc:	7829      	ldrb	r1, [r5, #0]
   b79ce:	f3bf 8f5b 	dmb	ish
   b79d2:	f011 0401 	ands.w	r4, r1, #1
{
   b79d6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b79d8:	d111      	bne.n	b79fe <_Z22__fetch_global_Serial1v+0x36>
   b79da:	4628      	mov	r0, r5
   b79dc:	f7fc fb6c 	bl	b40b8 <__cxa_guard_acquire>
   b79e0:	b168      	cbz	r0, b79fe <_Z22__fetch_global_Serial1v+0x36>
   b79e2:	a801      	add	r0, sp, #4
   b79e4:	f7ff ffd6 	bl	b7994 <_Z20acquireSerial1Bufferv>
   b79e8:	aa01      	add	r2, sp, #4
   b79ea:	4621      	mov	r1, r4
   b79ec:	4806      	ldr	r0, [pc, #24]	; (b7a08 <_Z22__fetch_global_Serial1v+0x40>)
   b79ee:	f7ff fe4f 	bl	b7690 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b79f2:	4628      	mov	r0, r5
   b79f4:	f7fc fb65 	bl	b40c2 <__cxa_guard_release>
   b79f8:	4804      	ldr	r0, [pc, #16]	; (b7a0c <_Z22__fetch_global_Serial1v+0x44>)
   b79fa:	f000 f923 	bl	b7c44 <atexit>
    return serial1;
}
   b79fe:	4802      	ldr	r0, [pc, #8]	; (b7a08 <_Z22__fetch_global_Serial1v+0x40>)
   b7a00:	b007      	add	sp, #28
   b7a02:	bd30      	pop	{r4, r5, pc}
   b7a04:	2003e744 	.word	0x2003e744
   b7a08:	2003e748 	.word	0x2003e748
   b7a0c:	000b7991 	.word	0x000b7991

000b7a10 <_ZnwjRKSt9nothrow_t>:
   b7a10:	f7fc bb3f 	b.w	b4092 <_Znwj>

000b7a14 <_ZnajRKSt9nothrow_t>:
   b7a14:	f7fc bb3f 	b.w	b4096 <_Znaj>

000b7a18 <_ZSt25__throw_bad_function_callv>:
   b7a18:	b508      	push	{r3, lr}
   b7a1a:	f7fd f819 	bl	b4a50 <abort>
	...

000b7a20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7a20:	4901      	ldr	r1, [pc, #4]	; (b7a28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7a22:	f000 b8f9 	b.w	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7a26:	bf00      	nop
   b7a28:	000b8554 	.word	0x000b8554

000b7a2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7a2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7a2e:	2400      	movs	r4, #0
   b7a30:	2310      	movs	r3, #16
   b7a32:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7a36:	6803      	ldr	r3, [r0, #0]
   b7a38:	4615      	mov	r5, r2
   b7a3a:	699e      	ldr	r6, [r3, #24]
   b7a3c:	6812      	ldr	r2, [r2, #0]
   b7a3e:	466b      	mov	r3, sp
   b7a40:	e9cd 4400 	strd	r4, r4, [sp]
   b7a44:	47b0      	blx	r6
   b7a46:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7a4a:	f003 0306 	and.w	r3, r3, #6
   b7a4e:	2b06      	cmp	r3, #6
   b7a50:	bf03      	ittte	eq
   b7a52:	9b00      	ldreq	r3, [sp, #0]
   b7a54:	602b      	streq	r3, [r5, #0]
   b7a56:	2001      	moveq	r0, #1
   b7a58:	4620      	movne	r0, r4
   b7a5a:	b004      	add	sp, #16
   b7a5c:	bd70      	pop	{r4, r5, r6, pc}

000b7a5e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7a5e:	9800      	ldr	r0, [sp, #0]
   b7a60:	4290      	cmp	r0, r2
   b7a62:	bf14      	ite	ne
   b7a64:	2001      	movne	r0, #1
   b7a66:	2006      	moveq	r0, #6
   b7a68:	4770      	bx	lr
	...

000b7a6c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7a6c:	b510      	push	{r4, lr}
   b7a6e:	4b03      	ldr	r3, [pc, #12]	; (b7a7c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7a70:	6003      	str	r3, [r0, #0]
   b7a72:	4604      	mov	r4, r0
   b7a74:	f000 f8cd 	bl	b7c12 <_ZNSt9type_infoD1Ev>
   b7a78:	4620      	mov	r0, r4
   b7a7a:	bd10      	pop	{r4, pc}
   b7a7c:	000b8594 	.word	0x000b8594

000b7a80 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7a80:	b510      	push	{r4, lr}
   b7a82:	4604      	mov	r4, r0
   b7a84:	f7ff fff2 	bl	b7a6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a88:	4620      	mov	r0, r4
   b7a8a:	2108      	movs	r1, #8
   b7a8c:	f7fc fb05 	bl	b409a <_ZdlPvj>
   b7a90:	4620      	mov	r0, r4
   b7a92:	bd10      	pop	{r4, pc}

000b7a94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a98:	461f      	mov	r7, r3
   b7a9a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7a9e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7aa2:	4598      	cmp	r8, r3
   b7aa4:	4606      	mov	r6, r0
   b7aa6:	4615      	mov	r5, r2
   b7aa8:	d107      	bne.n	b7aba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7aaa:	9907      	ldr	r1, [sp, #28]
   b7aac:	f000 f8b4 	bl	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7ab0:	b118      	cbz	r0, b7aba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7ab2:	7165      	strb	r5, [r4, #5]
   b7ab4:	2000      	movs	r0, #0
   b7ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7aba:	4639      	mov	r1, r7
   b7abc:	4630      	mov	r0, r6
   b7abe:	f000 f8ab 	bl	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7ac2:	2800      	cmp	r0, #0
   b7ac4:	d0f6      	beq.n	b7ab4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7ac6:	2301      	movs	r3, #1
   b7ac8:	f8c4 8000 	str.w	r8, [r4]
   b7acc:	7125      	strb	r5, [r4, #4]
   b7ace:	71a3      	strb	r3, [r4, #6]
   b7ad0:	e7f0      	b.n	b7ab4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7ad2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7ad2:	b538      	push	{r3, r4, r5, lr}
   b7ad4:	4615      	mov	r5, r2
   b7ad6:	461c      	mov	r4, r3
   b7ad8:	f000 f89e 	bl	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7adc:	b120      	cbz	r0, b7ae8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7ade:	2308      	movs	r3, #8
   b7ae0:	60e3      	str	r3, [r4, #12]
   b7ae2:	2306      	movs	r3, #6
   b7ae4:	6025      	str	r5, [r4, #0]
   b7ae6:	7123      	strb	r3, [r4, #4]
   b7ae8:	bd38      	pop	{r3, r4, r5, pc}

000b7aea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7aec:	4605      	mov	r5, r0
   b7aee:	460c      	mov	r4, r1
   b7af0:	9201      	str	r2, [sp, #4]
   b7af2:	461e      	mov	r6, r3
   b7af4:	f000 f890 	bl	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7af8:	b950      	cbnz	r0, b7b10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7afa:	2e03      	cmp	r6, #3
   b7afc:	d808      	bhi.n	b7b10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7afe:	6823      	ldr	r3, [r4, #0]
   b7b00:	9a01      	ldr	r2, [sp, #4]
   b7b02:	695b      	ldr	r3, [r3, #20]
   b7b04:	4629      	mov	r1, r5
   b7b06:	4620      	mov	r0, r4
   b7b08:	b002      	add	sp, #8
   b7b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7b0e:	4718      	bx	r3
   b7b10:	b002      	add	sp, #8
   b7b12:	bd70      	pop	{r4, r5, r6, pc}

000b7b14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7b14:	b510      	push	{r4, lr}
   b7b16:	4b03      	ldr	r3, [pc, #12]	; (b7b24 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7b18:	6003      	str	r3, [r0, #0]
   b7b1a:	4604      	mov	r4, r0
   b7b1c:	f7ff ffa6 	bl	b7a6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7b20:	4620      	mov	r0, r4
   b7b22:	bd10      	pop	{r4, pc}
   b7b24:	000b85f4 	.word	0x000b85f4

000b7b28 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7b28:	b510      	push	{r4, lr}
   b7b2a:	4604      	mov	r4, r0
   b7b2c:	f7ff fff2 	bl	b7b14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7b30:	4620      	mov	r0, r4
   b7b32:	210c      	movs	r1, #12
   b7b34:	f7fc fab1 	bl	b409a <_ZdlPvj>
   b7b38:	4620      	mov	r0, r4
   b7b3a:	bd10      	pop	{r4, pc}

000b7b3c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7b3e:	9f08      	ldr	r7, [sp, #32]
   b7b40:	4297      	cmp	r7, r2
   b7b42:	4605      	mov	r5, r0
   b7b44:	460e      	mov	r6, r1
   b7b46:	4614      	mov	r4, r2
   b7b48:	d00a      	beq.n	b7b60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7b4a:	68a8      	ldr	r0, [r5, #8]
   b7b4c:	6802      	ldr	r2, [r0, #0]
   b7b4e:	9708      	str	r7, [sp, #32]
   b7b50:	6a15      	ldr	r5, [r2, #32]
   b7b52:	4631      	mov	r1, r6
   b7b54:	4622      	mov	r2, r4
   b7b56:	46ac      	mov	ip, r5
   b7b58:	b003      	add	sp, #12
   b7b5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7b5e:	4760      	bx	ip
   b7b60:	4619      	mov	r1, r3
   b7b62:	9301      	str	r3, [sp, #4]
   b7b64:	f000 f858 	bl	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7b68:	9b01      	ldr	r3, [sp, #4]
   b7b6a:	2800      	cmp	r0, #0
   b7b6c:	d0ed      	beq.n	b7b4a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7b6e:	2006      	movs	r0, #6
   b7b70:	b003      	add	sp, #12
   b7b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7b74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7b74:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b78:	460d      	mov	r5, r1
   b7b7a:	4619      	mov	r1, r3
   b7b7c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7b80:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7b84:	4681      	mov	r9, r0
   b7b86:	4617      	mov	r7, r2
   b7b88:	4698      	mov	r8, r3
   b7b8a:	f000 f845 	bl	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7b8e:	b190      	cbz	r0, b7bb6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7b90:	2d00      	cmp	r5, #0
   b7b92:	6034      	str	r4, [r6, #0]
   b7b94:	7137      	strb	r7, [r6, #4]
   b7b96:	db09      	blt.n	b7bac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7b98:	1961      	adds	r1, r4, r5
   b7b9a:	458a      	cmp	sl, r1
   b7b9c:	bf0c      	ite	eq
   b7b9e:	2106      	moveq	r1, #6
   b7ba0:	2101      	movne	r1, #1
   b7ba2:	71b1      	strb	r1, [r6, #6]
   b7ba4:	2000      	movs	r0, #0
   b7ba6:	b001      	add	sp, #4
   b7ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7bac:	3502      	adds	r5, #2
   b7bae:	d1f9      	bne.n	b7ba4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7bb0:	2301      	movs	r3, #1
   b7bb2:	71b3      	strb	r3, [r6, #6]
   b7bb4:	e7f6      	b.n	b7ba4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7bb6:	4554      	cmp	r4, sl
   b7bb8:	d106      	bne.n	b7bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7bba:	4659      	mov	r1, fp
   b7bbc:	4648      	mov	r0, r9
   b7bbe:	f000 f82b 	bl	b7c18 <_ZNKSt9type_infoeqERKS_>
   b7bc2:	b108      	cbz	r0, b7bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7bc4:	7177      	strb	r7, [r6, #5]
   b7bc6:	e7ed      	b.n	b7ba4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7bc8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7bcc:	6803      	ldr	r3, [r0, #0]
   b7bce:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7bd2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7bd6:	69dc      	ldr	r4, [r3, #28]
   b7bd8:	463a      	mov	r2, r7
   b7bda:	4643      	mov	r3, r8
   b7bdc:	4629      	mov	r1, r5
   b7bde:	46a4      	mov	ip, r4
   b7be0:	b001      	add	sp, #4
   b7be2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7be6:	4760      	bx	ip

000b7be8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bec:	4607      	mov	r7, r0
   b7bee:	460c      	mov	r4, r1
   b7bf0:	4615      	mov	r5, r2
   b7bf2:	461e      	mov	r6, r3
   b7bf4:	f7ff ff6d 	bl	b7ad2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7bf8:	b948      	cbnz	r0, b7c0e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7bfa:	68b8      	ldr	r0, [r7, #8]
   b7bfc:	6803      	ldr	r3, [r0, #0]
   b7bfe:	699f      	ldr	r7, [r3, #24]
   b7c00:	462a      	mov	r2, r5
   b7c02:	4633      	mov	r3, r6
   b7c04:	4621      	mov	r1, r4
   b7c06:	46bc      	mov	ip, r7
   b7c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7c0c:	4760      	bx	ip
   b7c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7c12 <_ZNSt9type_infoD1Ev>:
   b7c12:	4770      	bx	lr

000b7c14 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7c14:	2000      	movs	r0, #0
   b7c16:	4770      	bx	lr

000b7c18 <_ZNKSt9type_infoeqERKS_>:
   b7c18:	4281      	cmp	r1, r0
   b7c1a:	b508      	push	{r3, lr}
   b7c1c:	d00e      	beq.n	b7c3c <_ZNKSt9type_infoeqERKS_+0x24>
   b7c1e:	6840      	ldr	r0, [r0, #4]
   b7c20:	7803      	ldrb	r3, [r0, #0]
   b7c22:	2b2a      	cmp	r3, #42	; 0x2a
   b7c24:	d00c      	beq.n	b7c40 <_ZNKSt9type_infoeqERKS_+0x28>
   b7c26:	6849      	ldr	r1, [r1, #4]
   b7c28:	780b      	ldrb	r3, [r1, #0]
   b7c2a:	2b2a      	cmp	r3, #42	; 0x2a
   b7c2c:	bf08      	it	eq
   b7c2e:	3101      	addeq	r1, #1
   b7c30:	f000 f89b 	bl	b7d6a <strcmp>
   b7c34:	fab0 f080 	clz	r0, r0
   b7c38:	0940      	lsrs	r0, r0, #5
   b7c3a:	bd08      	pop	{r3, pc}
   b7c3c:	2001      	movs	r0, #1
   b7c3e:	e7fc      	b.n	b7c3a <_ZNKSt9type_infoeqERKS_+0x22>
   b7c40:	2000      	movs	r0, #0
   b7c42:	e7fa      	b.n	b7c3a <_ZNKSt9type_infoeqERKS_+0x22>

000b7c44 <atexit>:
   b7c44:	2300      	movs	r3, #0
   b7c46:	4601      	mov	r1, r0
   b7c48:	461a      	mov	r2, r3
   b7c4a:	4618      	mov	r0, r3
   b7c4c:	f000 b968 	b.w	b7f20 <__register_exitproc>

000b7c50 <isprint>:
   b7c50:	4b02      	ldr	r3, [pc, #8]	; (b7c5c <isprint+0xc>)
   b7c52:	4418      	add	r0, r3
   b7c54:	7840      	ldrb	r0, [r0, #1]
   b7c56:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7c5a:	4770      	bx	lr
   b7c5c:	000b869d 	.word	0x000b869d

000b7c60 <memcmp>:
   b7c60:	b510      	push	{r4, lr}
   b7c62:	3901      	subs	r1, #1
   b7c64:	4402      	add	r2, r0
   b7c66:	4290      	cmp	r0, r2
   b7c68:	d101      	bne.n	b7c6e <memcmp+0xe>
   b7c6a:	2000      	movs	r0, #0
   b7c6c:	e005      	b.n	b7c7a <memcmp+0x1a>
   b7c6e:	7803      	ldrb	r3, [r0, #0]
   b7c70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7c74:	42a3      	cmp	r3, r4
   b7c76:	d001      	beq.n	b7c7c <memcmp+0x1c>
   b7c78:	1b18      	subs	r0, r3, r4
   b7c7a:	bd10      	pop	{r4, pc}
   b7c7c:	3001      	adds	r0, #1
   b7c7e:	e7f2      	b.n	b7c66 <memcmp+0x6>

000b7c80 <memcpy>:
   b7c80:	440a      	add	r2, r1
   b7c82:	4291      	cmp	r1, r2
   b7c84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7c88:	d100      	bne.n	b7c8c <memcpy+0xc>
   b7c8a:	4770      	bx	lr
   b7c8c:	b510      	push	{r4, lr}
   b7c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7c92:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7c96:	4291      	cmp	r1, r2
   b7c98:	d1f9      	bne.n	b7c8e <memcpy+0xe>
   b7c9a:	bd10      	pop	{r4, pc}

000b7c9c <memmove>:
   b7c9c:	4288      	cmp	r0, r1
   b7c9e:	b510      	push	{r4, lr}
   b7ca0:	eb01 0402 	add.w	r4, r1, r2
   b7ca4:	d902      	bls.n	b7cac <memmove+0x10>
   b7ca6:	4284      	cmp	r4, r0
   b7ca8:	4623      	mov	r3, r4
   b7caa:	d807      	bhi.n	b7cbc <memmove+0x20>
   b7cac:	1e43      	subs	r3, r0, #1
   b7cae:	42a1      	cmp	r1, r4
   b7cb0:	d008      	beq.n	b7cc4 <memmove+0x28>
   b7cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7cba:	e7f8      	b.n	b7cae <memmove+0x12>
   b7cbc:	4402      	add	r2, r0
   b7cbe:	4601      	mov	r1, r0
   b7cc0:	428a      	cmp	r2, r1
   b7cc2:	d100      	bne.n	b7cc6 <memmove+0x2a>
   b7cc4:	bd10      	pop	{r4, pc}
   b7cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7cce:	e7f7      	b.n	b7cc0 <memmove+0x24>

000b7cd0 <memset>:
   b7cd0:	4402      	add	r2, r0
   b7cd2:	4603      	mov	r3, r0
   b7cd4:	4293      	cmp	r3, r2
   b7cd6:	d100      	bne.n	b7cda <memset+0xa>
   b7cd8:	4770      	bx	lr
   b7cda:	f803 1b01 	strb.w	r1, [r3], #1
   b7cde:	e7f9      	b.n	b7cd4 <memset+0x4>

000b7ce0 <srand>:
   b7ce0:	b538      	push	{r3, r4, r5, lr}
   b7ce2:	4b10      	ldr	r3, [pc, #64]	; (b7d24 <srand+0x44>)
   b7ce4:	681d      	ldr	r5, [r3, #0]
   b7ce6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ce8:	4604      	mov	r4, r0
   b7cea:	b9b3      	cbnz	r3, b7d1a <srand+0x3a>
   b7cec:	2018      	movs	r0, #24
   b7cee:	f7fc fe8f 	bl	b4a10 <malloc>
   b7cf2:	4602      	mov	r2, r0
   b7cf4:	63a8      	str	r0, [r5, #56]	; 0x38
   b7cf6:	b920      	cbnz	r0, b7d02 <srand+0x22>
   b7cf8:	4b0b      	ldr	r3, [pc, #44]	; (b7d28 <srand+0x48>)
   b7cfa:	480c      	ldr	r0, [pc, #48]	; (b7d2c <srand+0x4c>)
   b7cfc:	2142      	movs	r1, #66	; 0x42
   b7cfe:	f7fc feb7 	bl	b4a70 <__assert_func>
   b7d02:	490b      	ldr	r1, [pc, #44]	; (b7d30 <srand+0x50>)
   b7d04:	4b0b      	ldr	r3, [pc, #44]	; (b7d34 <srand+0x54>)
   b7d06:	e9c0 1300 	strd	r1, r3, [r0]
   b7d0a:	4b0b      	ldr	r3, [pc, #44]	; (b7d38 <srand+0x58>)
   b7d0c:	6083      	str	r3, [r0, #8]
   b7d0e:	230b      	movs	r3, #11
   b7d10:	8183      	strh	r3, [r0, #12]
   b7d12:	2100      	movs	r1, #0
   b7d14:	2001      	movs	r0, #1
   b7d16:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7d1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7d1c:	2200      	movs	r2, #0
   b7d1e:	611c      	str	r4, [r3, #16]
   b7d20:	615a      	str	r2, [r3, #20]
   b7d22:	bd38      	pop	{r3, r4, r5, pc}
   b7d24:	2003d5bc 	.word	0x2003d5bc
   b7d28:	000b862d 	.word	0x000b862d
   b7d2c:	000b8644 	.word	0x000b8644
   b7d30:	abcd330e 	.word	0xabcd330e
   b7d34:	e66d1234 	.word	0xe66d1234
   b7d38:	0005deec 	.word	0x0005deec

000b7d3c <strchr>:
   b7d3c:	b2c9      	uxtb	r1, r1
   b7d3e:	4603      	mov	r3, r0
   b7d40:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7d44:	b11a      	cbz	r2, b7d4e <strchr+0x12>
   b7d46:	428a      	cmp	r2, r1
   b7d48:	d1f9      	bne.n	b7d3e <strchr+0x2>
   b7d4a:	4618      	mov	r0, r3
   b7d4c:	4770      	bx	lr
   b7d4e:	2900      	cmp	r1, #0
   b7d50:	bf18      	it	ne
   b7d52:	2300      	movne	r3, #0
   b7d54:	e7f9      	b.n	b7d4a <strchr+0xe>

000b7d56 <strchrnul>:
   b7d56:	b510      	push	{r4, lr}
   b7d58:	4604      	mov	r4, r0
   b7d5a:	f7ff ffef 	bl	b7d3c <strchr>
   b7d5e:	b918      	cbnz	r0, b7d68 <strchrnul+0x12>
   b7d60:	4620      	mov	r0, r4
   b7d62:	f000 f814 	bl	b7d8e <strlen>
   b7d66:	4420      	add	r0, r4
   b7d68:	bd10      	pop	{r4, pc}

000b7d6a <strcmp>:
   b7d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7d72:	2a01      	cmp	r2, #1
   b7d74:	bf28      	it	cs
   b7d76:	429a      	cmpcs	r2, r3
   b7d78:	d0f7      	beq.n	b7d6a <strcmp>
   b7d7a:	1ad0      	subs	r0, r2, r3
   b7d7c:	4770      	bx	lr

000b7d7e <strcpy>:
   b7d7e:	4603      	mov	r3, r0
   b7d80:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7d84:	f803 2b01 	strb.w	r2, [r3], #1
   b7d88:	2a00      	cmp	r2, #0
   b7d8a:	d1f9      	bne.n	b7d80 <strcpy+0x2>
   b7d8c:	4770      	bx	lr

000b7d8e <strlen>:
   b7d8e:	4603      	mov	r3, r0
   b7d90:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7d94:	2a00      	cmp	r2, #0
   b7d96:	d1fb      	bne.n	b7d90 <strlen+0x2>
   b7d98:	1a18      	subs	r0, r3, r0
   b7d9a:	3801      	subs	r0, #1
   b7d9c:	4770      	bx	lr

000b7d9e <strncmp>:
   b7d9e:	b510      	push	{r4, lr}
   b7da0:	b17a      	cbz	r2, b7dc2 <strncmp+0x24>
   b7da2:	4603      	mov	r3, r0
   b7da4:	3901      	subs	r1, #1
   b7da6:	1884      	adds	r4, r0, r2
   b7da8:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7dac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7db0:	4290      	cmp	r0, r2
   b7db2:	d101      	bne.n	b7db8 <strncmp+0x1a>
   b7db4:	42a3      	cmp	r3, r4
   b7db6:	d101      	bne.n	b7dbc <strncmp+0x1e>
   b7db8:	1a80      	subs	r0, r0, r2
   b7dba:	bd10      	pop	{r4, pc}
   b7dbc:	2800      	cmp	r0, #0
   b7dbe:	d1f3      	bne.n	b7da8 <strncmp+0xa>
   b7dc0:	e7fa      	b.n	b7db8 <strncmp+0x1a>
   b7dc2:	4610      	mov	r0, r2
   b7dc4:	e7f9      	b.n	b7dba <strncmp+0x1c>

000b7dc6 <strnlen>:
   b7dc6:	b510      	push	{r4, lr}
   b7dc8:	4602      	mov	r2, r0
   b7dca:	4401      	add	r1, r0
   b7dcc:	428a      	cmp	r2, r1
   b7dce:	4613      	mov	r3, r2
   b7dd0:	d003      	beq.n	b7dda <strnlen+0x14>
   b7dd2:	781c      	ldrb	r4, [r3, #0]
   b7dd4:	3201      	adds	r2, #1
   b7dd6:	2c00      	cmp	r4, #0
   b7dd8:	d1f8      	bne.n	b7dcc <strnlen+0x6>
   b7dda:	1a18      	subs	r0, r3, r0
   b7ddc:	bd10      	pop	{r4, pc}

000b7dde <strrchr>:
   b7dde:	b538      	push	{r3, r4, r5, lr}
   b7de0:	4603      	mov	r3, r0
   b7de2:	460c      	mov	r4, r1
   b7de4:	b969      	cbnz	r1, b7e02 <strrchr+0x24>
   b7de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7dea:	f7ff bfa7 	b.w	b7d3c <strchr>
   b7dee:	1c43      	adds	r3, r0, #1
   b7df0:	4605      	mov	r5, r0
   b7df2:	4621      	mov	r1, r4
   b7df4:	4618      	mov	r0, r3
   b7df6:	f7ff ffa1 	bl	b7d3c <strchr>
   b7dfa:	2800      	cmp	r0, #0
   b7dfc:	d1f7      	bne.n	b7dee <strrchr+0x10>
   b7dfe:	4628      	mov	r0, r5
   b7e00:	bd38      	pop	{r3, r4, r5, pc}
   b7e02:	2500      	movs	r5, #0
   b7e04:	e7f5      	b.n	b7df2 <strrchr+0x14>
	...

000b7e08 <_strtol_l.constprop.0>:
   b7e08:	2b01      	cmp	r3, #1
   b7e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7e0e:	d001      	beq.n	b7e14 <_strtol_l.constprop.0+0xc>
   b7e10:	2b24      	cmp	r3, #36	; 0x24
   b7e12:	d906      	bls.n	b7e22 <_strtol_l.constprop.0+0x1a>
   b7e14:	f7fc fe24 	bl	b4a60 <__errno>
   b7e18:	2316      	movs	r3, #22
   b7e1a:	6003      	str	r3, [r0, #0]
   b7e1c:	2000      	movs	r0, #0
   b7e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7f08 <_strtol_l.constprop.0+0x100>
   b7e26:	460d      	mov	r5, r1
   b7e28:	462e      	mov	r6, r5
   b7e2a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7e2e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7e32:	f017 0708 	ands.w	r7, r7, #8
   b7e36:	d1f7      	bne.n	b7e28 <_strtol_l.constprop.0+0x20>
   b7e38:	2c2d      	cmp	r4, #45	; 0x2d
   b7e3a:	d132      	bne.n	b7ea2 <_strtol_l.constprop.0+0x9a>
   b7e3c:	782c      	ldrb	r4, [r5, #0]
   b7e3e:	2701      	movs	r7, #1
   b7e40:	1cb5      	adds	r5, r6, #2
   b7e42:	2b00      	cmp	r3, #0
   b7e44:	d05b      	beq.n	b7efe <_strtol_l.constprop.0+0xf6>
   b7e46:	2b10      	cmp	r3, #16
   b7e48:	d109      	bne.n	b7e5e <_strtol_l.constprop.0+0x56>
   b7e4a:	2c30      	cmp	r4, #48	; 0x30
   b7e4c:	d107      	bne.n	b7e5e <_strtol_l.constprop.0+0x56>
   b7e4e:	782c      	ldrb	r4, [r5, #0]
   b7e50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7e54:	2c58      	cmp	r4, #88	; 0x58
   b7e56:	d14d      	bne.n	b7ef4 <_strtol_l.constprop.0+0xec>
   b7e58:	786c      	ldrb	r4, [r5, #1]
   b7e5a:	2310      	movs	r3, #16
   b7e5c:	3502      	adds	r5, #2
   b7e5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7e62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7e66:	f04f 0c00 	mov.w	ip, #0
   b7e6a:	fbb8 f9f3 	udiv	r9, r8, r3
   b7e6e:	4666      	mov	r6, ip
   b7e70:	fb03 8a19 	mls	sl, r3, r9, r8
   b7e74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7e78:	f1be 0f09 	cmp.w	lr, #9
   b7e7c:	d816      	bhi.n	b7eac <_strtol_l.constprop.0+0xa4>
   b7e7e:	4674      	mov	r4, lr
   b7e80:	42a3      	cmp	r3, r4
   b7e82:	dd24      	ble.n	b7ece <_strtol_l.constprop.0+0xc6>
   b7e84:	f1bc 0f00 	cmp.w	ip, #0
   b7e88:	db1e      	blt.n	b7ec8 <_strtol_l.constprop.0+0xc0>
   b7e8a:	45b1      	cmp	r9, r6
   b7e8c:	d31c      	bcc.n	b7ec8 <_strtol_l.constprop.0+0xc0>
   b7e8e:	d101      	bne.n	b7e94 <_strtol_l.constprop.0+0x8c>
   b7e90:	45a2      	cmp	sl, r4
   b7e92:	db19      	blt.n	b7ec8 <_strtol_l.constprop.0+0xc0>
   b7e94:	fb06 4603 	mla	r6, r6, r3, r4
   b7e98:	f04f 0c01 	mov.w	ip, #1
   b7e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7ea0:	e7e8      	b.n	b7e74 <_strtol_l.constprop.0+0x6c>
   b7ea2:	2c2b      	cmp	r4, #43	; 0x2b
   b7ea4:	bf04      	itt	eq
   b7ea6:	782c      	ldrbeq	r4, [r5, #0]
   b7ea8:	1cb5      	addeq	r5, r6, #2
   b7eaa:	e7ca      	b.n	b7e42 <_strtol_l.constprop.0+0x3a>
   b7eac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7eb0:	f1be 0f19 	cmp.w	lr, #25
   b7eb4:	d801      	bhi.n	b7eba <_strtol_l.constprop.0+0xb2>
   b7eb6:	3c37      	subs	r4, #55	; 0x37
   b7eb8:	e7e2      	b.n	b7e80 <_strtol_l.constprop.0+0x78>
   b7eba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7ebe:	f1be 0f19 	cmp.w	lr, #25
   b7ec2:	d804      	bhi.n	b7ece <_strtol_l.constprop.0+0xc6>
   b7ec4:	3c57      	subs	r4, #87	; 0x57
   b7ec6:	e7db      	b.n	b7e80 <_strtol_l.constprop.0+0x78>
   b7ec8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7ecc:	e7e6      	b.n	b7e9c <_strtol_l.constprop.0+0x94>
   b7ece:	f1bc 0f00 	cmp.w	ip, #0
   b7ed2:	da05      	bge.n	b7ee0 <_strtol_l.constprop.0+0xd8>
   b7ed4:	2322      	movs	r3, #34	; 0x22
   b7ed6:	6003      	str	r3, [r0, #0]
   b7ed8:	4646      	mov	r6, r8
   b7eda:	b942      	cbnz	r2, b7eee <_strtol_l.constprop.0+0xe6>
   b7edc:	4630      	mov	r0, r6
   b7ede:	e79e      	b.n	b7e1e <_strtol_l.constprop.0+0x16>
   b7ee0:	b107      	cbz	r7, b7ee4 <_strtol_l.constprop.0+0xdc>
   b7ee2:	4276      	negs	r6, r6
   b7ee4:	2a00      	cmp	r2, #0
   b7ee6:	d0f9      	beq.n	b7edc <_strtol_l.constprop.0+0xd4>
   b7ee8:	f1bc 0f00 	cmp.w	ip, #0
   b7eec:	d000      	beq.n	b7ef0 <_strtol_l.constprop.0+0xe8>
   b7eee:	1e69      	subs	r1, r5, #1
   b7ef0:	6011      	str	r1, [r2, #0]
   b7ef2:	e7f3      	b.n	b7edc <_strtol_l.constprop.0+0xd4>
   b7ef4:	2430      	movs	r4, #48	; 0x30
   b7ef6:	2b00      	cmp	r3, #0
   b7ef8:	d1b1      	bne.n	b7e5e <_strtol_l.constprop.0+0x56>
   b7efa:	2308      	movs	r3, #8
   b7efc:	e7af      	b.n	b7e5e <_strtol_l.constprop.0+0x56>
   b7efe:	2c30      	cmp	r4, #48	; 0x30
   b7f00:	d0a5      	beq.n	b7e4e <_strtol_l.constprop.0+0x46>
   b7f02:	230a      	movs	r3, #10
   b7f04:	e7ab      	b.n	b7e5e <_strtol_l.constprop.0+0x56>
   b7f06:	bf00      	nop
   b7f08:	000b869e 	.word	0x000b869e

000b7f0c <strtol>:
   b7f0c:	4613      	mov	r3, r2
   b7f0e:	460a      	mov	r2, r1
   b7f10:	4601      	mov	r1, r0
   b7f12:	4802      	ldr	r0, [pc, #8]	; (b7f1c <strtol+0x10>)
   b7f14:	6800      	ldr	r0, [r0, #0]
   b7f16:	f7ff bf77 	b.w	b7e08 <_strtol_l.constprop.0>
   b7f1a:	bf00      	nop
   b7f1c:	2003d5bc 	.word	0x2003d5bc

000b7f20 <__register_exitproc>:
   b7f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f24:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7fe0 <__register_exitproc+0xc0>
   b7f28:	4606      	mov	r6, r0
   b7f2a:	f8d8 0000 	ldr.w	r0, [r8]
   b7f2e:	461f      	mov	r7, r3
   b7f30:	460d      	mov	r5, r1
   b7f32:	4691      	mov	r9, r2
   b7f34:	f000 f856 	bl	b7fe4 <__retarget_lock_acquire_recursive>
   b7f38:	4b25      	ldr	r3, [pc, #148]	; (b7fd0 <__register_exitproc+0xb0>)
   b7f3a:	681c      	ldr	r4, [r3, #0]
   b7f3c:	b934      	cbnz	r4, b7f4c <__register_exitproc+0x2c>
   b7f3e:	4c25      	ldr	r4, [pc, #148]	; (b7fd4 <__register_exitproc+0xb4>)
   b7f40:	601c      	str	r4, [r3, #0]
   b7f42:	4b25      	ldr	r3, [pc, #148]	; (b7fd8 <__register_exitproc+0xb8>)
   b7f44:	b113      	cbz	r3, b7f4c <__register_exitproc+0x2c>
   b7f46:	681b      	ldr	r3, [r3, #0]
   b7f48:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7f4c:	6863      	ldr	r3, [r4, #4]
   b7f4e:	2b1f      	cmp	r3, #31
   b7f50:	dd07      	ble.n	b7f62 <__register_exitproc+0x42>
   b7f52:	f8d8 0000 	ldr.w	r0, [r8]
   b7f56:	f000 f847 	bl	b7fe8 <__retarget_lock_release_recursive>
   b7f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7f62:	b34e      	cbz	r6, b7fb8 <__register_exitproc+0x98>
   b7f64:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7f68:	b988      	cbnz	r0, b7f8e <__register_exitproc+0x6e>
   b7f6a:	4b1c      	ldr	r3, [pc, #112]	; (b7fdc <__register_exitproc+0xbc>)
   b7f6c:	b923      	cbnz	r3, b7f78 <__register_exitproc+0x58>
   b7f6e:	f8d8 0000 	ldr.w	r0, [r8]
   b7f72:	f000 f838 	bl	b7fe6 <__retarget_lock_release>
   b7f76:	e7f0      	b.n	b7f5a <__register_exitproc+0x3a>
   b7f78:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7f7c:	f7fc fd48 	bl	b4a10 <malloc>
   b7f80:	2800      	cmp	r0, #0
   b7f82:	d0f4      	beq.n	b7f6e <__register_exitproc+0x4e>
   b7f84:	2300      	movs	r3, #0
   b7f86:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7f8a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7f8e:	6863      	ldr	r3, [r4, #4]
   b7f90:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7f94:	2201      	movs	r2, #1
   b7f96:	409a      	lsls	r2, r3
   b7f98:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7f9c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7fa0:	4313      	orrs	r3, r2
   b7fa2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7fa6:	2e02      	cmp	r6, #2
   b7fa8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7fac:	bf02      	ittt	eq
   b7fae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7fb2:	4313      	orreq	r3, r2
   b7fb4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7fb8:	6863      	ldr	r3, [r4, #4]
   b7fba:	f8d8 0000 	ldr.w	r0, [r8]
   b7fbe:	1c5a      	adds	r2, r3, #1
   b7fc0:	3302      	adds	r3, #2
   b7fc2:	6062      	str	r2, [r4, #4]
   b7fc4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7fc8:	f000 f80e 	bl	b7fe8 <__retarget_lock_release_recursive>
   b7fcc:	2000      	movs	r0, #0
   b7fce:	e7c6      	b.n	b7f5e <__register_exitproc+0x3e>
   b7fd0:	2003e7e8 	.word	0x2003e7e8
   b7fd4:	2003e75c 	.word	0x2003e75c
   b7fd8:	00000000 	.word	0x00000000
   b7fdc:	000b4a11 	.word	0x000b4a11
   b7fe0:	2003d620 	.word	0x2003d620

000b7fe4 <__retarget_lock_acquire_recursive>:
   b7fe4:	4770      	bx	lr

000b7fe6 <__retarget_lock_release>:
   b7fe6:	4770      	bx	lr

000b7fe8 <__retarget_lock_release_recursive>:
   b7fe8:	4770      	bx	lr

000b7fea <link_code_end>:
	...

000b7fec <dynalib_user>:
   b7fec:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7ffc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b800c:	7620 7269 7574 6c61 3600 3445 3030 3030      virtual.6E40000
   b801c:	2d31 3542 3341 462d 3933 2d33 3045 3941     1-B5A3-F393-E0A9
   b802c:	452d 3035 3245 4434 4343 3941 0045 4536     -E50E24DCCA9E.6E
   b803c:	3034 3030 3330 422d 4135 2d33 3346 3339     400003-B5A3-F393
   b804c:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   b805c:	4539 7400 0078 4536 3034 3030 3230 422d     9E.tx.6E400002-B
   b806c:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   b807c:	4530 3432 4344 4143 4539 7200 0078 0000     0E24DCCA9E.rx...

000b808c <_ZTVN5spark10LogHandlerE>:
	...
   b809c:	40a1 000b 40c9 000b                         .@...@..

000b80a4 <_ZTV14BleLoggingBase>:
	...
   b80ac:	4109 000b 4149 000b 6ee1 000b 40cb 000b     .A..IA...n...@..
   b80bc:	40d3 000b ffdc ffff 0000 0000 4141 000b     .@..........AA..
   b80cc:	415d 000b 40fd 000b 735d 000b 6f63 6e75     ]A...@..]s..coun
   b80dc:	6574 3d72 7525 0000                         ter=%u..

000b80e4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b80ec:	4459 000b 448d 000b 6ee1 000b 40cb 000b     YD...D...n...@..

000b80fc <_ZTV10BleLoggingILj4096EE>:
	...
   b8104:	441d 000b 443d 000b 6ee1 000b 40cb 000b     .D..=D...n...@..
   b8114:	40d3 000b ffdc ffff 0000 0000 4435 000b     .@..........5D..
   b8124:	4453 000b 40fd 000b 735d 000b 7341 6573     SD...@..]s..Asse
   b8134:	7472 6f69 466e 6961 756c 6572 6620 6c61     rtionFailure fal
   b8144:	6573 7700 7269 6e69 2e67 6c62 0065 7453     se.wiring.ble.St
   b8154:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   b8164:	6573 7672 6369 7365 002e 7341 6573 7472     services..Assert
   b8174:	6f69 466e 6961 756c 6572 6820 6c61 625f     ionFailure hal_b
   b8184:	656c 735f 6174 6b63 695f 696e 2874 756e     le_stack_init(nu
   b8194:	6c6c 7470 2972 3d20 203d 5953 5453 4d45     llptr) == SYSTEM
   b81a4:	455f 5252 524f 4e5f 4e4f 0045 6550 7265     _ERROR_NONE.Peer
   b81b4:	6420 7665 6369 2065 7369 6d20 7369 6973      device is missi
   b81c4:	676e 0021 6146 6c69 6465 7420 206f 7061     ng!.Failed to ap
   b81d4:	6570 646e 7020 6565 2072 6543 746e 6172     pend peer Centra
   b81e4:	206c 6564 6976 6563 002e 6f43 6e6e 6365     l device..Connec
   b81f4:	6574 2064 7962 4320 6e65 7274 6c61 6420     ted by Central d
   b8204:	7665 6369 2e65 4400 7369 6f63 6e6e 6365     evice..Disconnec
   b8214:	6574 0064 7544 6c70 6369 7461 6465 6320     ted.Duplicated c
   b8224:	6168 6172 7463 7265 7369 6974 2063 6163     haracteristic ca
   b8234:	6e6e 746f 6220 2065 6461 6564 2e64 4600     nnot be added..F
   b8244:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   b8254:	6f6c 6163 206c 6863 7261 6361 6574 6972     local characteri
   b8264:	7473 6369 002e 0000                         stic....

000b826c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8274:	4a97 000b 4af9 000b 4bdf 000b 4b23 000b     .J...J...K..#K..
   b8284:	4a99 000b                                   .J..

000b8288 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8290:	4a93 000b 4b07 000b 4a95 000b 4b29 000b     .J...K...J..)K..
   b82a0:	4ab9 000b                                   .J..

000b82a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b82ac:	4a91 000b 4b15 000b 53a5 000b 4b2f 000b     .J...K...S../K..
   b82bc:	4ad9 000b                                   .J..

000b82c0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b82cc:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b82de <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b82de:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b82ee <_ZN8particle7BleUuid9BASE_UUIDE>:
   b82ee:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b8300 <_ZTVN5spark13EthernetClassE>:
	...
   b8308:	5e53 000b 5e49 000b 5e3f 000b 5e35 000b     S^..I^..?^..5^..
   b8318:	5e29 000b 5e1d 000b 7239 000b 7241 000b     )^...^..9r..Ar..
   b8328:	5e11 000b 5e09 000b 5dff 000b 5df5 000b     .^...^...]...]..
   b8338:	7271 000b                                   qr..

000b833c <_ZTV9IPAddress>:
	...
   b8344:	5e81 000b 5e71 000b 5e73 000b 6425 7500     .^..q^..s^..%d.u
   b8354:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   b8364:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   b8374:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   b8384:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   b8394:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   b83a4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   b83b4:	006d 0066 6e6c 6600 006e 0074 6f63 6564     m.f.ln.fn.t.code
   b83c4:	6400 7465 6961 006c                         .detail.

000b83cc <_ZTVN5spark16JSONStreamWriterE>:
	...
   b83d4:	632d 000b 6353 000b 6311 000b 5f8f 000b     -c..Sc...c..._..

000b83e4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b83ec:	6789 000b 67a1 000b 6ee1 000b 40cb 000b     .g...g...n...@..

000b83fc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b8404:	67b5 000b 67c9 000b 7085 000b 6319 000b     .g...g...p...c..

000b8414 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b841c:	632b 000b 6361 000b 6e45 000b 631b 000b     +c..ac..En...c..

000b842c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8434:	6329 000b 636f 000b 66f1 000b 6391 000b     )c..oc...f...c..

000b8444 <_ZTVN5spark12NetworkClassE>:
	...
   b844c:	71f9 000b 7203 000b 720d 000b 7217 000b     .q...r...r...r..
   b845c:	7221 000b 722d 000b 7239 000b 7241 000b     !r..-r..9r..Ar..
   b846c:	7249 000b 7255 000b 725d 000b 7267 000b     Ir..Ur..]r..gr..
   b847c:	7271 000b 5925 252d 2d6d 6425 2554 3a48     qr..%Y-%m-%dT%H:
   b848c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b849c <_ZTV11USARTSerial>:
	...
   b84a4:	7615 000b 7681 000b 7659 000b 735d 000b     .v...v..Yv..]s..
   b84b4:	7629 000b 7645 000b 7637 000b 7653 000b     )v..Ev..7v..Sv..
   b84c4:	7617 000b 761b 000b                         .v...v..

000b84cc <_ZTV9USBSerial>:
	...
   b84d4:	76d3 000b 773b 000b 7711 000b 735d 000b     .v..;w...w..]s..
   b84e4:	7703 000b 76d5 000b 76e5 000b 7735 000b     .w...v...v..5w..
   b84f4:	76f5 000b 76cd 000b                         .v...v..

000b84fc <_ZTVN5spark9WiFiClassE>:
	...
   b8504:	783b 000b 7831 000b 7827 000b 77dd 000b     ;x..1x..'x...w..
   b8514:	781b 000b 780f 000b 7239 000b 7241 000b     .x...x..9r..Ar..
   b8524:	7803 000b 77fb 000b 77f1 000b 77e7 000b     .x...w...w...w..
   b8534:	7271 000b                                   qr..

000b8538 <_ZSt7nothrow>:
	...

000b8539 <_ZTSSt19_Sp_make_shared_tag>:
   b8539:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8549:	6572 5f64 6174 0067 0000                     red_tag....

000b8554 <_ZTISt19_Sp_make_shared_tag>:
   b8554:	8594 000b 8539 000b                         ....9...

000b855c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b855c:	85f4 000b 8568 000b 8618 000b               ....h.......

000b8568 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8568:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8578:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8588:	0045 0000                                   E...

000b858c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b858c:	0000 0000 855c 000b 7a6d 000b 7a81 000b     ....\...mz...z..
   b859c:	7c15 000b 7c15 000b 7aeb 000b 7a2d 000b     .|...|...z..-z..
   b85ac:	7ad3 000b 7a95 000b 7a5f 000b               .z...z.._z..

000b85b8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b85b8:	85f4 000b 85c4 000b 855c 000b               ........\...

000b85c4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b85c4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b85d4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b85e4:	666e 456f 0000 0000                         nfoE....

000b85ec <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b85ec:	0000 0000 85b8 000b 7b15 000b 7b29 000b     .........{..){..
   b85fc:	7c15 000b 7c15 000b 7aeb 000b 7a2d 000b     .|...|...z..-z..
   b860c:	7be9 000b 7b75 000b 7b3d 000b               .{..u{..={..

000b8618 <_ZTISt9type_info>:
   b8618:	8594 000b 8620 000b                         .... ...

000b8620 <_ZTSSt9type_info>:
   b8620:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8630:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8640:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b8650:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b8660:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b8670:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b8680:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b8690:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b869d <_ctype_>:
   b869d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b86ad:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b86bd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b86cd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b86dd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b86ed:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b86fd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b870d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b871d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b879e <link_const_variable_data_end>:
	...

000b87a0 <link_constructors_location>:
   b87a0:	000b452d 	.word	0x000b452d
   b87a4:	000b5de5 	.word	0x000b5de5
   b87a8:	000b5e5d 	.word	0x000b5e5d
   b87ac:	000b6ed1 	.word	0x000b6ed1
   b87b0:	000b7349 	.word	0x000b7349
   b87b4:	000b7469 	.word	0x000b7469
   b87b8:	000b75dd 	.word	0x000b75dd
   b87bc:	000b7601 	.word	0x000b7601
   b87c0:	000b7845 	.word	0x000b7845

000b87c4 <link_constructors_end>:
	...
